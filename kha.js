// Generated by Haxe 4.0.0+c37e5ed23
(function ($hx_exports, $global) { "use strict";
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return js_Lib.get_undefined();
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	iron_object_BoneAnimation.skinMaxBones = 65;
	iron_object_LightObject.cascadeCount = 4;
	iron_object_LightObject.cascadeSplitFactor = 0.800000011920929;
	armory_system_Starter.numAssets = 41;
	armory_system_Starter.drawLoading = armory_trait_internal_LoadingScreen.render;
	armory_system_Starter.main("Scene",0,false,true,false,1280,720,1,true,armory_renderpath_RenderPathCreator.get);
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(js_Boot.isClass(f) || js_Boot.isEnum(f));
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.is = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.int = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.isEof = function(c) {
	return c != c;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getClass = function(o) {
	return js_Boot.getClass(o);
};
Type.getClassName = function(c) {
	return c.__name__;
};
Type.resolveClass = function(name) {
	return $hxClasses[name];
};
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEmptyInstance = function(cl) {
	return Object.create(cl.prototype);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getEnumConstructs = function(e) {
	return e.__constructs__.slice();
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(js_Boot.isClass(v) || js_Boot.isEnum(v)) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var iron_Trait = function() {
	this._render2D = null;
	this._render = null;
	this._lateUpdate = null;
	this._update = null;
	this._remove = null;
	this._init = null;
	this._add = null;
	this.name = "";
};
$hxClasses["iron.Trait"] = iron_Trait;
iron_Trait.__name__ = "iron.Trait";
iron_Trait.prototype = {
	name: null
	,object: null
	,_add: null
	,_init: null
	,_remove: null
	,_update: null
	,_lateUpdate: null
	,_render: null
	,_render2D: null
	,remove: function() {
		this.object.removeTrait(this);
	}
	,notifyOnAdd: function(f) {
		if(this._add == null) {
			this._add = [];
		}
		this._add.push(f);
	}
	,notifyOnInit: function(f) {
		if(this._init == null) {
			this._init = [];
		}
		this._init.push(f);
		iron_App.notifyOnInit(f);
	}
	,notifyOnRemove: function(f) {
		if(this._remove == null) {
			this._remove = [];
		}
		this._remove.push(f);
	}
	,notifyOnUpdate: function(f) {
		if(this._update == null) {
			this._update = [];
		}
		this._update.push(f);
		iron_App.notifyOnUpdate(f);
	}
	,removeUpdate: function(f) {
		HxOverrides.remove(this._update,f);
		iron_App.removeUpdate(f);
	}
	,notifyOnLateUpdate: function(f) {
		if(this._lateUpdate == null) {
			this._lateUpdate = [];
		}
		this._lateUpdate.push(f);
		iron_App.notifyOnLateUpdate(f);
	}
	,removeLateUpdate: function(f) {
		HxOverrides.remove(this._lateUpdate,f);
		iron_App.removeLateUpdate(f);
	}
	,notifyOnRender: function(f) {
		if(this._render == null) {
			this._render = [];
		}
		this._render.push(f);
		iron_App.notifyOnRender(f);
	}
	,removeRender: function(f) {
		HxOverrides.remove(this._render,f);
		iron_App.removeRender(f);
	}
	,notifyOnRender2D: function(f) {
		if(this._render2D == null) {
			this._render2D = [];
		}
		this._render2D.push(f);
		iron_App.notifyOnRender2D(f);
	}
	,removeRender2D: function(f) {
		HxOverrides.remove(this._render2D,f);
		iron_App.removeRender2D(f);
	}
	,__class__: iron_Trait
};
var arm_GunController = function() {
	this.soundFire1 = null;
	this.soundFire0 = null;
	this.lastFire = 0.0;
	this.fireStrength = 25;
	this.fireFreq = 0.2;
	var _gthis = this;
	iron_Trait.call(this);
	this.notifyOnInit(function() {
		_gthis.firePoint = _gthis.object.getChild("ProjectileSpawn").transform;
		iron_data_Data.getSound("fire0.wav",function(sound) {
			_gthis.soundFire0 = sound;
		});
		iron_data_Data.getSound("fire1.wav",function(sound1) {
			_gthis.soundFire1 = sound1;
		});
	});
	this.notifyOnUpdate(function() {
		var mouse = iron_system_Input.getMouse();
		_gthis.lastFire += iron_system_Time.get_delta();
		if(mouse.down("left") && _gthis.lastFire > _gthis.fireFreq || mouse.started("left")) {
			_gthis.shoot();
			iron_system_Audio.play(Std.random(3) == 0 ? _gthis.soundFire1 : _gthis.soundFire0);
			_gthis.lastFire = 0.0;
		}
	});
};
$hxClasses["arm.GunController"] = arm_GunController;
arm_GunController.__name__ = "arm.GunController";
arm_GunController.__super__ = iron_Trait;
arm_GunController.prototype = $extend(iron_Trait.prototype,{
	fireFreq: null
	,firePoint: null
	,fireStrength: null
	,lastFire: null
	,soundFire0: null
	,soundFire1: null
	,shoot: function() {
		var _gthis = this;
		iron_Scene.active.spawnObject("Projectile",null,function(o) {
			o.transform.loc.x = _gthis.firePoint.worldx();
			o.transform.loc.y = _gthis.firePoint.worldy();
			o.transform.loc.z = _gthis.firePoint.worldz();
			o.transform.buildMatrix();
			var rb = o.getTrait(armory_trait_physics_bullet_RigidBody);
			rb.syncTransform();
			var look = _gthis.object.transform.look().normalize();
			rb.setLinearVelocity(look.x * _gthis.fireStrength,look.y * _gthis.fireStrength,look.z * _gthis.fireStrength);
			kha_Scheduler.addTimeTask(function() {
				o.remove();
			},10);
		});
	}
	,__class__: arm_GunController
});
var armory_trait_internal_CameraController = function() {
	this.jump = false;
	this.moveRight = false;
	this.moveLeft = false;
	this.moveBackward = false;
	this.moveForward = false;
	var _gthis = this;
	iron_Trait.call(this);
	iron_Scene.active.notifyOnInit(function() {
		_gthis.transform = _gthis.object.transform;
		_gthis.body = _gthis.object.getTrait(armory_trait_physics_bullet_RigidBody);
		_gthis.camera = js_Boot.__cast(_gthis.object.getChildOfType(iron_object_CameraObject) , iron_object_CameraObject);
	});
	this.notifyOnUpdate(function() {
		var keyboard = iron_system_Input.getKeyboard();
		_gthis.moveForward = keyboard.down("w");
		_gthis.moveRight = keyboard.down("d");
		_gthis.moveBackward = keyboard.down("s");
		_gthis.moveLeft = keyboard.down("a");
		_gthis.jump = keyboard.started("space");
	});
};
$hxClasses["armory.trait.internal.CameraController"] = armory_trait_internal_CameraController;
armory_trait_internal_CameraController.__name__ = "armory.trait.internal.CameraController";
armory_trait_internal_CameraController.__super__ = iron_Trait;
armory_trait_internal_CameraController.prototype = $extend(iron_Trait.prototype,{
	transform: null
	,body: null
	,camera: null
	,moveForward: null
	,moveBackward: null
	,moveLeft: null
	,moveRight: null
	,jump: null
	,__class__: armory_trait_internal_CameraController
});
var arm_ThirdPersonController = function() {
	this.state = "idle";
	this.dir = new iron_math_Vec4();
	this.speed = 1.0;
	this.firingTime = 0.0;
	this.nextIdle = false;
	this.mat = iron_math_Mat4.identity();
	this.q = new iron_math_Quat();
	this.nextFrameRot = 0.0;
	this.angle = 0.0;
	this.zVec = iron_math_Vec4.zAxis();
	this.xVec = iron_math_Vec4.xAxis();
	this.soundStep1 = null;
	this.soundStep0 = null;
	this.turnTime = 0.0;
	this.stepTime = 0.0;
	var _gthis = this;
	armory_trait_internal_CameraController.call(this);
	this.notifyOnInit(function() {
		armory_trait_physics_bullet_PhysicsWorld.active.notifyOnPreUpdate($bind(_gthis,_gthis.preUpdate));
		_gthis.notifyOnUpdate($bind(_gthis,_gthis.update));
		_gthis.notifyOnRemove(function() {
			armory_trait_physics_bullet_PhysicsWorld.active.removePreUpdate($bind(_gthis,_gthis.preUpdate));
		});
		iron_data_Data.getSound("step0.wav",function(sound) {
			_gthis.soundStep0 = sound;
		});
		iron_data_Data.getSound("step1.wav",function(sound1) {
			_gthis.soundStep1 = sound1;
		});
		_gthis.armature = _gthis.object.getChild("Armature");
		_gthis.anim = _gthis.findAnimation(_gthis.armature);
		_gthis.anim.notifyOnUpdate($bind(_gthis,_gthis.updateBones));
		_gthis.lastLook = _gthis.armature.transform.look().normalize();
	});
};
$hxClasses["arm.ThirdPersonController"] = arm_ThirdPersonController;
arm_ThirdPersonController.__name__ = "arm.ThirdPersonController";
arm_ThirdPersonController.__super__ = armory_trait_internal_CameraController;
arm_ThirdPersonController.prototype = $extend(armory_trait_internal_CameraController.prototype,{
	stepTime: null
	,turnTime: null
	,soundStep0: null
	,soundStep1: null
	,xVec: null
	,zVec: null
	,angle: null
	,nextFrameRot: null
	,armature: null
	,anim: null
	,q: null
	,mat: null
	,nextIdle: null
	,firingTime: null
	,speed: null
	,dir: null
	,lastLook: null
	,state: null
	,findAnimation: function(o) {
		if(o.animation != null) {
			return o.animation;
		}
		var _g = 0;
		var _g1 = o.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var co = this.findAnimation(c);
			if(co != null) {
				return co;
			}
		}
		return null;
	}
	,updateBones: function() {
		var bone1 = this.anim.getBone("mixamorig:LeftForeArm");
		var bone2 = this.anim.getBone("mixamorig:RightForeArm");
		var m1 = this.anim.getBoneMat(bone1);
		var m2 = this.anim.getBoneMat(bone2);
		var m1b = this.anim.getBoneMatBlend(bone1);
		var m2b = this.anim.getBoneMatBlend(bone2);
		var a1 = this.anim.getAbsMat(bone1.parent);
		var a2 = this.anim.getAbsMat(bone2.parent);
		var tx = m1.get__30();
		var ty = m1.get__31();
		var tz = m1.get__32();
		m1.set__30(0);
		m1.set__31(0);
		m1.set__32(0);
		this.mat.getInverse(a1);
		this.q.fromAxisAngle(this.mat.right(),-this.angle);
		m1.applyQuat(this.q);
		m1.set__30(tx);
		m1.set__31(ty);
		m1.set__32(tz);
		var tx1 = m2.get__30();
		var ty1 = m2.get__31();
		var tz1 = m2.get__32();
		m2.set__30(0);
		m2.set__31(0);
		m2.set__32(0);
		this.mat.getInverse(a2);
		var v = this.mat.right();
		v.mult(-1);
		this.q.fromAxisAngle(v,this.angle);
		m2.applyQuat(this.q);
		m2.set__30(tx1);
		m2.set__31(ty1);
		m2.set__32(tz1);
		if(m1b != null && m2b != null) {
			var tx2 = m1b.get__30();
			var ty2 = m1b.get__31();
			var tz2 = m1b.get__32();
			m1b.set__30(0);
			m1b.set__31(0);
			m1b.set__32(0);
			this.mat.getInverse(a1);
			this.q.fromAxisAngle(this.mat.right(),-this.angle);
			m1b.applyQuat(this.q);
			m1b.set__30(tx2);
			m1b.set__31(ty2);
			m1b.set__32(tz2);
			var tx3 = m2b.get__30();
			var ty3 = m2b.get__31();
			var tz3 = m2b.get__32();
			m2b.set__30(0);
			m2b.set__31(0);
			m2b.set__32(0);
			this.mat.getInverse(a2);
			var v1 = this.mat.right();
			v1.mult(-1);
			this.q.fromAxisAngle(v1,this.angle);
			m2b.applyQuat(this.q);
			m2b.set__30(tx3);
			m2b.set__31(ty3);
			m2b.set__32(tz3);
		}
	}
	,preUpdate: function() {
		if(iron_system_Input.occupied || !this.body.ready) {
			return;
		}
		var mouse = iron_system_Input.getMouse();
		var kb = iron_system_Input.getKeyboard();
		if(mouse.started() && !mouse.locked) {
			mouse.lock();
		} else if(kb.started("escape") && mouse.locked) {
			mouse.unlock();
		}
		if(this.nextFrameRot != 0.0) {
			var origin = this.object.getChild("CameraOrigin");
			origin.transform.rotate(this.xVec,this.nextFrameRot);
			origin.transform.buildMatrix();
		}
		this.nextFrameRot = 0;
		if(mouse.moved) {
			var d = mouse.movementY / 250;
			if(this.angle + d > 1.5) {
				return;
			}
			if(this.angle + d < -0.25) {
				return;
			}
			this.angle += d;
			this.nextFrameRot = -mouse.movementY / 250;
		}
		if(mouse.moved) {
			this.transform.rotate(this.zVec,-mouse.movementX / 250);
		}
		this.body.syncTransform();
	}
	,update: function() {
		if(!this.body.ready) {
			return;
		}
		var look = this.armature.transform.look().normalize();
		this.dir.set(0,0,0);
		if(this.moveForward) {
			this.dir.add(this.transform.look());
		}
		if(this.moveBackward) {
			this.dir.add(this.transform.look().mult(-1));
		}
		if(this.moveLeft) {
			this.dir.add(this.transform.right().mult(-1));
		}
		if(this.moveRight) {
			this.dir.add(this.transform.right());
		}
		var btvec = this.body.getLinearVelocity();
		this.body.setLinearVelocity(0.0,0.0,btvec.z - 1.0);
		if(this.moveForward || this.moveBackward || this.moveLeft || this.moveRight) {
			var action = this.moveForward ? "run" : this.moveBackward ? "back" : this.moveLeft ? "left" : "right";
			this.setState(action);
			var kb = iron_system_Input.getKeyboard();
			if(kb.down("shift")) {
				this.speed = 1.6;
			} else {
				this.speed = 1.0;
			}
			this.dir.mult(this.speed * 5);
			this.body.activate();
			this.body.setLinearVelocity(this.dir.x,this.dir.y,btvec.z - 1.0);
			this.stepTime += iron_system_Time.get_delta();
			if(this.stepTime > 0.38 / this.speed) {
				this.stepTime = 0;
				iron_system_Audio.play(Std.random(2) == 0 ? this.soundStep0 : this.soundStep1);
			}
		} else if(this.state != "fire" || this.state != "idle" || this.state != "turn") {
			var mouse = iron_system_Input.getMouse();
			if(mouse.down("left")) {
				this.firingTime = 0.0;
				this.setState("fire",2.0);
			} else {
				this.setState("idle",2.0);
			}
		}
		if(this.state == "fire") {
			this.firingTime += iron_system_Time.get_delta();
		} else {
			this.firingTime = 0.0;
		}
		this.body.setAngularFactor(0,0,0);
		this.camera.buildMatrix();
		this.lastLook.setFrom(look);
	}
	,setState: function(s,speed,blend) {
		if(blend == null) {
			blend = 0.2;
		}
		if(speed == null) {
			speed = 1.0;
		}
		if(s == this.state) {
			return;
		}
		this.state = s;
		this.anim.play(s,null,blend,speed);
	}
	,__class__: arm_ThirdPersonController
});
var armory_data_Config = function() { };
$hxClasses["armory.data.Config"] = armory_data_Config;
armory_data_Config.__name__ = "armory.data.Config";
armory_data_Config.load = function(done) {
	try {
		iron_data_Data.getBlob("config.arm",function(blob) {
			armory_data_Config.configLoaded = true;
			armory_data_Config.raw = JSON.parse(blob.toString());
			done();
		});
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		done();
	}
};
armory_data_Config.save = function() {
	var path = iron_data_Data.dataPath + "config.arm";
	var bytes = haxe_io_Bytes.ofString(JSON.stringify(armory_data_Config.raw));
};
var armory_object_Uniforms = function() { };
$hxClasses["armory.object.Uniforms"] = armory_object_Uniforms;
armory_object_Uniforms.__name__ = "armory.object.Uniforms";
armory_object_Uniforms.register = function() {
	iron_object_Uniforms.externalTextureLinks = [armory_object_Uniforms.textureLink];
	iron_object_Uniforms.externalVec3Links = [armory_object_Uniforms.vec3Link];
	iron_object_Uniforms.externalFloatLinks = [armory_object_Uniforms.floatLink];
};
armory_object_Uniforms.textureLink = function(object,mat,link) {
	return null;
};
armory_object_Uniforms.vec3Link = function(object,mat,link) {
	var v = null;
	return v;
};
armory_object_Uniforms.floatLink = function(object,mat,link) {
	return null;
};
var armory_renderpath_Inc = function() { };
$hxClasses["armory.renderpath.Inc"] = armory_renderpath_Inc;
armory_renderpath_Inc.__name__ = "armory.renderpath.Inc";
armory_renderpath_Inc.init = function(_path) {
	armory_renderpath_Inc.path = _path;
};
armory_renderpath_Inc.bindShadowMap = function() {
	var _g = 0;
	var _g1 = iron_Scene.active.lights;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(!l.visible || !l.data.raw.cast_shadow || l.data.raw.type != "sun") {
			continue;
		}
		var n = "shadowMap";
		armory_renderpath_Inc.path.bindTarget(n,n);
		break;
	}
	var _g2 = 0;
	var _g3 = armory_renderpath_Inc.pointIndex;
	while(_g2 < _g3) {
		var i = _g2++;
		var n1 = "shadowMapPoint[" + i + "]";
		armory_renderpath_Inc.path.bindTarget(n1,n1);
	}
	var _g4 = 0;
	var _g5 = armory_renderpath_Inc.spotIndex;
	while(_g4 < _g5) {
		var i1 = _g4++;
		var n2 = "shadowMapSpot[" + i1 + "]";
		armory_renderpath_Inc.path.bindTarget(n2,n2);
	}
};
armory_renderpath_Inc.shadowMapName = function(l) {
	if(l.data.raw.type == "sun") {
		return "shadowMap";
	}
	if(l.data.raw.type == "point") {
		return "shadowMapPoint[" + armory_renderpath_Inc.pointIndex + "]";
	} else {
		return "shadowMapSpot[" + armory_renderpath_Inc.spotIndex + "]";
	}
};
armory_renderpath_Inc.getShadowMap = function(l) {
	var target = armory_renderpath_Inc.shadowMapName(l);
	var rt = armory_renderpath_Inc.path.renderTargets.get(target);
	if(rt == null) {
		if(armory_renderpath_Inc.path.light.data.raw.shadowmap_cube) {
			var size = armory_renderpath_Inc.path.light.data.raw.shadowmap_size;
			var t = new iron_RenderTargetRaw();
			t.name = target;
			t.width = size;
			t.height = size;
			t.format = "DEPTH16";
			t.is_cubemap = true;
			rt = armory_renderpath_Inc.path.createRenderTarget(t);
		} else {
			var sizew = armory_renderpath_Inc.path.light.data.raw.shadowmap_size;
			var sizeh = sizew;
			if(l.data.raw.type == "sun") {
				sizew *= iron_object_LightObject.cascadeCount;
			}
			var t1 = new iron_RenderTargetRaw();
			t1.name = target;
			t1.width = sizew;
			t1.height = sizeh;
			t1.format = "DEPTH16";
			rt = armory_renderpath_Inc.path.createRenderTarget(t1);
		}
	}
	return target;
};
armory_renderpath_Inc.drawShadowMap = function() {
	armory_renderpath_Inc.pointIndex = 0;
	armory_renderpath_Inc.spotIndex = 0;
	var _g = 0;
	var _g1 = iron_Scene.active.lights;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(!l.visible || !l.data.raw.cast_shadow) {
			continue;
		}
		armory_renderpath_Inc.path.light = l;
		var shadowmap = armory_renderpath_Inc.getShadowMap(l);
		var faces = l.data.raw.shadowmap_cube ? 6 : 1;
		var _g2 = 0;
		var _g11 = faces;
		while(_g2 < _g11) {
			var i = _g2++;
			if(faces > 1) {
				armory_renderpath_Inc.path.currentFace = i;
			}
			armory_renderpath_Inc.path.setTarget(shadowmap);
			armory_renderpath_Inc.path.clearTarget(null,1.0);
			armory_renderpath_Inc.path.drawMeshes("shadowmap");
		}
		armory_renderpath_Inc.path.currentFace = -1;
		if(l.data.raw.type == "point") {
			armory_renderpath_Inc.pointIndex++;
		} else if(l.data.raw.type == "spot" || l.data.raw.type == "area") {
			armory_renderpath_Inc.spotIndex++;
		}
	}
};
armory_renderpath_Inc.applyConfig = function() {
};
armory_renderpath_Inc.getCubeSize = function() {
	return 512;
};
armory_renderpath_Inc.getCascadeSize = function() {
	return 1024;
};
armory_renderpath_Inc.getVoxelRes = function() {
	return 0;
};
armory_renderpath_Inc.getVoxelResZ = function() {
	return 0.0;
};
armory_renderpath_Inc.getSuperSampling = function() {
	return armory_renderpath_Inc.superSample;
};
armory_renderpath_Inc.getHdrFormat = function() {
	return "RGBA64";
};
armory_renderpath_Inc.getDisplayp = function() {
	return null;
};
var armory_renderpath_RenderPathDeferred = function() { };
$hxClasses["armory.renderpath.RenderPathDeferred"] = armory_renderpath_RenderPathDeferred;
armory_renderpath_RenderPathDeferred.__name__ = "armory.renderpath.RenderPathDeferred";
armory_renderpath_RenderPathDeferred.setTargetMeshes = function() {
	armory_renderpath_RenderPathDeferred.path.setTarget("gbuffer0",["gbuffer1"]);
};
armory_renderpath_RenderPathDeferred.drawMeshes = function() {
	armory_renderpath_RenderPathDeferred.path.drawMeshes("mesh");
};
armory_renderpath_RenderPathDeferred.applyConfig = function() {
	armory_renderpath_Inc.applyConfig();
};
armory_renderpath_RenderPathDeferred.init = function(_path) {
	armory_renderpath_RenderPathDeferred.path = _path;
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/world_pass/world_pass");
	armory_renderpath_RenderPathDeferred.path.createDepthBuffer("main","DEPTH24");
	var t = new iron_RenderTargetRaw();
	t.name = "gbuffer0";
	t.width = 0;
	t.height = 0;
	t.displayp = armory_renderpath_Inc.getDisplayp();
	t.format = "RGBA64";
	t.scale = armory_renderpath_Inc.getSuperSampling();
	t.depth_buffer = "main";
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t);
	var t1 = new iron_RenderTargetRaw();
	t1.name = "tex";
	t1.width = 0;
	t1.height = 0;
	t1.displayp = armory_renderpath_Inc.getDisplayp();
	t1.format = armory_renderpath_Inc.getHdrFormat();
	t1.scale = armory_renderpath_Inc.getSuperSampling();
	t1.depth_buffer = "main";
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t1);
	var t2 = new iron_RenderTargetRaw();
	t2.name = "buf";
	t2.width = 0;
	t2.height = 0;
	t2.displayp = armory_renderpath_Inc.getDisplayp();
	t2.format = armory_renderpath_Inc.getHdrFormat();
	t2.scale = armory_renderpath_Inc.getSuperSampling();
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t2);
	var t3 = new iron_RenderTargetRaw();
	t3.name = "gbuffer1";
	t3.width = 0;
	t3.height = 0;
	t3.displayp = armory_renderpath_Inc.getDisplayp();
	t3.format = "RGBA64";
	t3.scale = armory_renderpath_Inc.getSuperSampling();
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t3);
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/deferred_light/deferred_light");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/ssao_pass/ssao_pass");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/blur_edge_pass/blur_edge_pass_x");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/blur_edge_pass/blur_edge_pass_y");
	var t4 = new iron_RenderTargetRaw();
	t4.name = "singlea";
	t4.width = 0;
	t4.height = 0;
	t4.displayp = armory_renderpath_Inc.getDisplayp();
	t4.format = "R8";
	t4.scale = armory_renderpath_Inc.getSuperSampling();
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t4);
	var t5 = new iron_RenderTargetRaw();
	t5.name = "singleb";
	t5.width = 0;
	t5.height = 0;
	t5.displayp = armory_renderpath_Inc.getDisplayp();
	t5.format = "R8";
	t5.scale = armory_renderpath_Inc.getSuperSampling();
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t5);
	var t6 = new iron_RenderTargetRaw();
	t6.name = "bufa";
	t6.width = 0;
	t6.height = 0;
	t6.displayp = armory_renderpath_Inc.getDisplayp();
	t6.format = "RGBA32";
	t6.scale = armory_renderpath_Inc.getSuperSampling();
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t6);
	var t7 = new iron_RenderTargetRaw();
	t7.name = "bufb";
	t7.width = 0;
	t7.height = 0;
	t7.displayp = armory_renderpath_Inc.getDisplayp();
	t7.format = "RGBA32";
	t7.scale = armory_renderpath_Inc.getSuperSampling();
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t7);
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/compositor_pass/compositor_pass");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/smaa_edge_detect/smaa_edge_detect");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/smaa_blend_weight/smaa_blend_weight");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/smaa_neighborhood_blend/smaa_neighborhood_blend");
	var t8 = new iron_RenderTargetRaw();
	t8.name = "bloomtex";
	t8.width = 0;
	t8.height = 0;
	t8.scale = 0.25;
	t8.format = armory_renderpath_Inc.getHdrFormat();
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t8);
	var t9 = new iron_RenderTargetRaw();
	t9.name = "bloomtex2";
	t9.width = 0;
	t9.height = 0;
	t9.scale = 0.25;
	t9.format = armory_renderpath_Inc.getHdrFormat();
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t9);
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/bloom_pass/bloom_pass");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/blur_gaus_pass/blur_gaus_pass_x");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y_blend");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/downsample_depth/downsample_depth");
	var t10 = new iron_RenderTargetRaw();
	t10.name = "half";
	t10.width = 0;
	t10.height = 0;
	t10.scale = armory_renderpath_Inc.getSuperSampling() * 0.5;
	t10.format = "R32";
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t10);
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/ssr_pass/ssr_pass");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/blur_adaptive_pass/blur_adaptive_pass_x");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/blur_adaptive_pass/blur_adaptive_pass_y3_blend");
	var t11 = new iron_RenderTargetRaw();
	t11.name = "ssra";
	t11.width = 0;
	t11.height = 0;
	t11.scale = armory_renderpath_Inc.getSuperSampling() * 0.5;
	t11.format = armory_renderpath_Inc.getHdrFormat();
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t11);
	var t12 = new iron_RenderTargetRaw();
	t12.name = "ssrb";
	t12.width = 0;
	t12.height = 0;
	t12.scale = armory_renderpath_Inc.getSuperSampling() * 0.5;
	t12.format = armory_renderpath_Inc.getHdrFormat();
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t12);
};
armory_renderpath_RenderPathDeferred.commands = function() {
	armory_renderpath_RenderPathDeferred.path.setTarget("gbuffer0");
	armory_renderpath_RenderPathDeferred.path.clearTarget(null,1.0);
	armory_renderpath_RenderPathCreator.setTargetMeshes();
	armory_renderpath_RenderPathCreator.drawMeshes();
	armory_renderpath_RenderPathDeferred.path.setTarget("half");
	armory_renderpath_RenderPathDeferred.path.bindTarget("_main","texdepth");
	armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/downsample_depth/downsample_depth");
	if(armory_data_Config.raw.rp_ssgi != false) {
		armory_renderpath_RenderPathDeferred.path.setTarget("singlea");
		armory_renderpath_RenderPathDeferred.path.bindTarget("_main","gbufferD");
		armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/ssao_pass/ssao_pass");
		armory_renderpath_RenderPathDeferred.path.setTarget("singleb");
		armory_renderpath_RenderPathDeferred.path.bindTarget("singlea","tex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_edge_pass/blur_edge_pass_x");
		armory_renderpath_RenderPathDeferred.path.setTarget("singlea");
		armory_renderpath_RenderPathDeferred.path.bindTarget("singleb","tex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_edge_pass/blur_edge_pass_y");
	}
	armory_renderpath_Inc.drawShadowMap();
	armory_renderpath_RenderPathDeferred.path.setDepthFrom("tex","gbuffer1");
	armory_renderpath_RenderPathDeferred.path.setTarget("tex");
	armory_renderpath_RenderPathDeferred.path.bindTarget("_main","gbufferD");
	armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
	armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer1","gbuffer1");
	if(armory_data_Config.raw.rp_ssgi != false) {
		armory_renderpath_RenderPathDeferred.path.bindTarget("singlea","ssaotex");
	} else {
		armory_renderpath_RenderPathDeferred.path.bindTarget("empty_white","ssaotex");
	}
	var voxelao_pass = false;
	armory_renderpath_Inc.bindShadowMap();
	if(voxelao_pass) {
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/deferred_light/deferred_light_VoxelAOvar");
	} else {
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/deferred_light/deferred_light");
	}
	armory_renderpath_RenderPathDeferred.path.setDepthFrom("tex","gbuffer0");
	armory_renderpath_RenderPathDeferred.path.setTarget("tex");
	armory_renderpath_RenderPathDeferred.path.drawSkydome("shader_datas/world_pass/world_pass");
	if(armory_data_Config.raw.rp_bloom != false) {
		armory_renderpath_RenderPathDeferred.path.setTarget("bloomtex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("tex","tex");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/bloom_pass/bloom_pass");
		armory_renderpath_RenderPathDeferred.path.setTarget("bloomtex2");
		armory_renderpath_RenderPathDeferred.path.bindTarget("bloomtex","tex");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_x");
		armory_renderpath_RenderPathDeferred.path.setTarget("bloomtex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("bloomtex2","tex");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y");
		armory_renderpath_RenderPathDeferred.path.setTarget("bloomtex2");
		armory_renderpath_RenderPathDeferred.path.bindTarget("bloomtex","tex");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_x");
		armory_renderpath_RenderPathDeferred.path.setTarget("bloomtex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("bloomtex2","tex");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y");
		armory_renderpath_RenderPathDeferred.path.setTarget("bloomtex2");
		armory_renderpath_RenderPathDeferred.path.bindTarget("bloomtex","tex");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_x");
		armory_renderpath_RenderPathDeferred.path.setTarget("bloomtex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("bloomtex2","tex");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y");
		armory_renderpath_RenderPathDeferred.path.setTarget("bloomtex2");
		armory_renderpath_RenderPathDeferred.path.bindTarget("bloomtex","tex");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_x");
		armory_renderpath_RenderPathDeferred.path.setTarget("tex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("bloomtex2","tex");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_gaus_pass/blur_gaus_pass_y_blend");
	}
	if(armory_data_Config.raw.rp_ssr != false) {
		var targeta = "ssra";
		var targetb = "ssrb";
		armory_renderpath_RenderPathDeferred.path.setTarget(targeta);
		armory_renderpath_RenderPathDeferred.path.bindTarget("tex","tex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("half","gbufferD");
		armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer1","gbuffer1");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/ssr_pass/ssr_pass");
		armory_renderpath_RenderPathDeferred.path.setTarget(targetb);
		armory_renderpath_RenderPathDeferred.path.bindTarget(targeta,"tex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_adaptive_pass/blur_adaptive_pass_x");
		armory_renderpath_RenderPathDeferred.path.setTarget("tex");
		armory_renderpath_RenderPathDeferred.path.bindTarget(targetb,"tex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_adaptive_pass/blur_adaptive_pass_y3_blend");
	}
	var framebuffer = "";
	armory_renderpath_RenderPathCreator.finalTarget = armory_renderpath_RenderPathDeferred.path.currentTarget;
	var target = "";
	target = "buf";
	armory_renderpath_RenderPathDeferred.path.setTarget(target);
	armory_renderpath_RenderPathDeferred.path.bindTarget("tex","tex");
	var isProbe = false;
	if(!isProbe) {
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/compositor_pass/compositor_pass");
	} else {
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/copy_pass/copy_pass");
	}
	armory_renderpath_RenderPathDeferred.path.setTarget("bufa");
	armory_renderpath_RenderPathDeferred.path.clearTarget(0);
	armory_renderpath_RenderPathDeferred.path.bindTarget("buf","colorTex");
	armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/smaa_edge_detect/smaa_edge_detect");
	armory_renderpath_RenderPathDeferred.path.setTarget("bufb");
	armory_renderpath_RenderPathDeferred.path.clearTarget(0);
	armory_renderpath_RenderPathDeferred.path.bindTarget("bufa","edgesTex");
	armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/smaa_blend_weight/smaa_blend_weight");
	armory_renderpath_RenderPathDeferred.path.setTarget(framebuffer);
	armory_renderpath_RenderPathDeferred.path.bindTarget("buf","colorTex");
	armory_renderpath_RenderPathDeferred.path.bindTarget("bufb","blendTex");
	armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/smaa_neighborhood_blend/smaa_neighborhood_blend");
};
var armory_renderpath_RenderPathCreator = function() { };
$hxClasses["armory.renderpath.RenderPathCreator"] = armory_renderpath_RenderPathCreator;
armory_renderpath_RenderPathCreator.__name__ = "armory.renderpath.RenderPathCreator";
armory_renderpath_RenderPathCreator.get = function() {
	armory_renderpath_RenderPathCreator.path = new iron_RenderPath();
	armory_renderpath_Inc.init(armory_renderpath_RenderPathCreator.path);
	armory_renderpath_RenderPathDeferred.init(armory_renderpath_RenderPathCreator.path);
	armory_renderpath_RenderPathCreator.path.commands = armory_renderpath_RenderPathDeferred.commands;
	return armory_renderpath_RenderPathCreator.path;
};
var armory_system_Event = function() { };
$hxClasses["armory.system.Event"] = armory_system_Event;
armory_system_Event.__name__ = "armory.system.Event";
armory_system_Event.send = function(name,mask) {
	if(mask == null) {
		mask = -1;
	}
	var entries = armory_system_Event.get(name);
	if(entries != null) {
		var _g = 0;
		while(_g < entries.length) {
			var e = entries[_g];
			++_g;
			if(mask == -1 || mask == e.mask) {
				e.onEvent();
			}
		}
	}
};
armory_system_Event.get = function(name) {
	return armory_system_Event.events.get(name);
};
armory_system_Event.add = function(name,onEvent,mask) {
	if(mask == null) {
		mask = -1;
	}
	var e = { name : name, onEvent : onEvent, mask : mask};
	var entries = armory_system_Event.events.get(name);
	if(entries != null) {
		entries.push(e);
	} else {
		armory_system_Event.events.set(name,[e]);
	}
	return e;
};
armory_system_Event.remove = function(name) {
	armory_system_Event.events.remove(name);
};
armory_system_Event.removeListener = function(event) {
	var entries = armory_system_Event.events.get(event.name);
	if(entries != null) {
		HxOverrides.remove(entries,event);
	}
};
var armory_system_Starter = function() { };
$hxClasses["armory.system.Starter"] = armory_system_Starter;
armory_system_Starter.__name__ = "armory.system.Starter";
armory_system_Starter.main = function(scene,mode,resize,min,max,w,h,msaa,vsync,getRenderPath) {
	var start = function() {
		if(armory_system_Starter.tasks > 0) {
			return;
		}
		if(armory_data_Config.raw == null) {
			armory_data_Config.raw = { };
		}
		var c = armory_data_Config.raw;
		if(c.window_mode == null) {
			c.window_mode = mode;
		}
		if(c.window_resizable == null) {
			c.window_resizable = resize;
		}
		if(c.window_minimizable == null) {
			c.window_minimizable = min;
		}
		if(c.window_maximizable == null) {
			c.window_maximizable = max;
		}
		if(c.window_w == null) {
			c.window_w = w;
		}
		if(c.window_h == null) {
			c.window_h = h;
		}
		if(c.window_scale == null) {
			c.window_scale = 1.0;
		}
		if(c.window_msaa == null) {
			c.window_msaa = msaa;
		}
		if(c.window_vsync == null) {
			c.window_vsync = vsync;
		}
		armory_object_Uniforms.register();
		var windowMode = c.window_mode == 0 ? 0 : 1;
		var windowFeatures = 0;
		if(c.window_resizable) {
			windowFeatures = windowFeatures | 1;
		}
		if(c.window_maximizable) {
			windowFeatures = windowFeatures | 4;
		}
		if(c.window_minimizable) {
			windowFeatures = windowFeatures | 2;
		}
		try {
			kha_System.start(new kha_SystemOptions("third_person",c.window_w,c.window_h,new kha_WindowOptions(null,null,null,null,null,null,null,windowFeatures,windowMode),new kha_FramebufferOptions(null,c.window_vsync,null,null,null,c.window_msaa)),function($window) {
				iron_App.init(function() {
					var load = null;
					load = function(g) {
						if(iron_Scene.active != null && iron_Scene.active.ready) {
							iron_App.removeRender2D(load);
						} else {
							armory_system_Starter.drawLoading(g,iron_data_Data.assetsLoaded,armory_system_Starter.numAssets);
						}
					};
					iron_App.notifyOnRender2D(load);
					iron_Scene.setActive(scene,function(object) {
						iron_RenderPath.setActive(getRenderPath());
					});
				});
			});
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(!kha_SystemImpl.gl2) {
				haxe_Log.trace("This project was not compiled with legacy shaders flag - please use WebGL 2 capable browser.",{ fileName : "Sources/armory/system/Starter.hx", lineNumber : 70, className : "armory.system.Starter", methodName : "main"});
			}
		}
	};
	var loadLibAmmo = function(name) {
		kha_Assets.loadBlobFromPath(name,function(b) {
			var print = function(s) {
				haxe_Log.trace(s,{ fileName : "Sources/armory/system/Starter.hx", lineNumber : 79, className : "armory.system.Starter", methodName : "main"});
			};
			var loaded = function() {
				armory_system_Starter.tasks--;
				start();
			};
			(1, eval)(b.toString());
			Ammo({print:print}).then(loaded);
		},null,{ fileName : "Sources/armory/system/Starter.hx", lineNumber : 78, className : "armory.system.Starter", methodName : "main"});
	};
	armory_system_Starter.tasks = 1;
	armory_system_Starter.tasks++;
	loadLibAmmo("ammo.js");
	armory_system_Starter.tasks--;
	start();
};
var armory_trait_internal_CanvasScript = function(canvasName,font) {
	if(font == null) {
		font = "font_default.ttf";
	}
	this.onReady = null;
	this.canvas = null;
	var _gthis = this;
	iron_Trait.call(this);
	iron_data_Data.getBlob(canvasName + ".json",function(blob) {
		iron_data_Data.getBlob("_themes.json",function(tBlob) {
			if(tBlob.get_length() != 0) {
				zui_Canvas.themes = JSON.parse(tBlob.toString());
			} else {
				haxe_Log.trace("\"_themes.json\" is empty! Using default theme instead.",{ fileName : "Sources/armory/trait/internal/CanvasScript.hx", lineNumber : 34, className : "armory.trait.internal.CanvasScript", methodName : "new"});
			}
			if(zui_Canvas.themes.length == 0) {
				zui_Canvas.themes.push(zui_Themes.light);
			}
			iron_data_Data.getFont(font,function(f) {
				var c = JSON.parse(blob.toString());
				if(c.theme == null) {
					c.theme = zui_Canvas.themes[0].NAME;
				}
				var tmp = zui_Canvas.getTheme(c.theme);
				_gthis.cui = new zui_Zui({ font : f, theme : tmp});
				if(c.assets == null || c.assets.length == 0) {
					_gthis.canvas = c;
				} else {
					var loaded = 0;
					var _g = 0;
					var _g1 = c.assets;
					while(_g < _g1.length) {
						var asset = [_g1[_g]];
						++_g;
						var file = asset[0].name;
						iron_data_Data.getImage(file,(function(asset1) {
							return function(image) {
								zui_Canvas.assetMap.set(asset1[0].id,image);
								if((loaded += 1) >= c.assets.length) {
									_gthis.canvas = c;
								}
							};
						})(asset));
					}
				}
			});
		});
	});
	this.notifyOnRender2D(function(g) {
		if(_gthis.canvas == null) {
			return;
		}
		var events = zui_Canvas.draw(_gthis.cui,_gthis.canvas,g);
		var _g2 = 0;
		while(_g2 < events.length) {
			var e = events[_g2];
			++_g2;
			var all = armory_system_Event.get(e);
			if(all != null) {
				var _g3 = 0;
				while(_g3 < all.length) {
					var entry = all[_g3];
					++_g3;
					entry.onEvent();
				}
			}
		}
		if(_gthis.onReady != null) {
			_gthis.onReady();
			_gthis.onReady = null;
		}
	});
};
$hxClasses["armory.trait.internal.CanvasScript"] = armory_trait_internal_CanvasScript;
armory_trait_internal_CanvasScript.__name__ = "armory.trait.internal.CanvasScript";
armory_trait_internal_CanvasScript.__super__ = iron_Trait;
armory_trait_internal_CanvasScript.prototype = $extend(iron_Trait.prototype,{
	cui: null
	,canvas: null
	,ready: null
	,get_ready: function() {
		return this.canvas != null;
	}
	,onReady: null
	,notifyOnReady: function(f) {
		this.onReady = f;
	}
	,getElement: function(name) {
		var _g = 0;
		var _g1 = this.canvas.elements;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.name == name) {
				return e;
			}
		}
		return null;
	}
	,getElements: function() {
		return this.canvas.elements;
	}
	,getCanvas: function() {
		return this.canvas;
	}
	,setCanvasVisibility: function(visible) {
		var _g = 0;
		var _g1 = this.canvas.elements;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.visible = visible;
		}
	}
	,setCanvasFontSize: function(fontSize) {
		this.cui.t.FONT_SIZE = fontSize;
	}
	,getHandle: function(name) {
		return zui_Canvas.h.children.get(this.getElement(name).id);
	}
	,__class__: armory_trait_internal_CanvasScript
	,__properties__: {get_ready:"get_ready"}
});
var armory_trait_internal_LoadingScreen = function() { };
$hxClasses["armory.trait.internal.LoadingScreen"] = armory_trait_internal_LoadingScreen;
armory_trait_internal_LoadingScreen.__name__ = "armory.trait.internal.LoadingScreen";
armory_trait_internal_LoadingScreen.render = function(g,assetsLoaded,assetsTotal) {
	g.set_color(-3200189);
	g.fillRect(0,iron_App.h() - 6,iron_App.w() / assetsTotal * assetsLoaded,6);
};
var armory_trait_physics_bullet_Hit = function(rb,pos,normal) {
	this.rb = rb;
	this.pos = pos;
	this.normal = normal;
};
$hxClasses["armory.trait.physics.bullet.Hit"] = armory_trait_physics_bullet_Hit;
armory_trait_physics_bullet_Hit.__name__ = "armory.trait.physics.bullet.Hit";
armory_trait_physics_bullet_Hit.prototype = {
	rb: null
	,pos: null
	,normal: null
	,__class__: armory_trait_physics_bullet_Hit
};
var armory_trait_physics_bullet_ContactPair = function(a,b) {
	this.a = a;
	this.b = b;
};
$hxClasses["armory.trait.physics.bullet.ContactPair"] = armory_trait_physics_bullet_ContactPair;
armory_trait_physics_bullet_ContactPair.__name__ = "armory.trait.physics.bullet.ContactPair";
armory_trait_physics_bullet_ContactPair.prototype = {
	a: null
	,b: null
	,posA: null
	,posB: null
	,normOnB: null
	,impulse: null
	,distance: null
	,__class__: armory_trait_physics_bullet_ContactPair
};
var armory_trait_physics_bullet_PhysicsWorld = function(timeScale,timeStep,solverIterations) {
	if(solverIterations == null) {
		solverIterations = 10;
	}
	if(timeStep == null) {
		timeStep = 0.016666666666666666;
	}
	if(timeScale == null) {
		timeScale = 1.0;
	}
	this.pairCache = false;
	this.hitNormalWorld = new iron_math_Vec4();
	this.hitPointWorld = new iron_math_Vec4();
	this.solverIterations = 10;
	this.maxSteps = 1;
	this.timeStep = 0.016666666666666666;
	this.timeScale = 1.0;
	this.preUpdates = null;
	this.gimpactRegistered = false;
	iron_Trait.call(this);
	if(armory_trait_physics_bullet_PhysicsWorld.nullvec) {
		armory_trait_physics_bullet_PhysicsWorld.nullvec = false;
		armory_trait_physics_bullet_PhysicsWorld.vec1 = new Ammo.btVector3(0,0,0);
		armory_trait_physics_bullet_PhysicsWorld.vec2 = new Ammo.btVector3(0,0,0);
	}
	if(armory_trait_physics_bullet_PhysicsWorld.active != null && !armory_trait_physics_bullet_PhysicsWorld.sceneRemoved) {
		return;
	}
	armory_trait_physics_bullet_PhysicsWorld.sceneRemoved = false;
	this.timeScale = timeScale;
	this.timeStep = timeStep;
	this.maxSteps = timeStep < 0.016666666666666666 ? 10 : 1;
	this.solverIterations = solverIterations;
	if(armory_trait_physics_bullet_PhysicsWorld.active == null) {
		this.createPhysics();
	} else {
		this.world = armory_trait_physics_bullet_PhysicsWorld.active.world;
		this.dispatcher = armory_trait_physics_bullet_PhysicsWorld.active.dispatcher;
		this.gimpactRegistered = armory_trait_physics_bullet_PhysicsWorld.active.gimpactRegistered;
	}
	this.contacts = [];
	this.rbMap = new haxe_ds_IntMap();
	armory_trait_physics_bullet_PhysicsWorld.active = this;
	this._lateUpdate = [$bind(this,this.lateUpdate)];
	iron_App.traitLateUpdates.splice(0,0,$bind(this,this.lateUpdate));
	iron_Scene.active.notifyOnRemove(function() {
		armory_trait_physics_bullet_PhysicsWorld.sceneRemoved = true;
	});
};
$hxClasses["armory.trait.physics.bullet.PhysicsWorld"] = armory_trait_physics_bullet_PhysicsWorld;
armory_trait_physics_bullet_PhysicsWorld.__name__ = "armory.trait.physics.bullet.PhysicsWorld";
armory_trait_physics_bullet_PhysicsWorld.__super__ = iron_Trait;
armory_trait_physics_bullet_PhysicsWorld.prototype = $extend(iron_Trait.prototype,{
	world: null
	,dispatcher: null
	,gimpactRegistered: null
	,contacts: null
	,preUpdates: null
	,rbMap: null
	,timeScale: null
	,timeStep: null
	,maxSteps: null
	,solverIterations: null
	,hitPointWorld: null
	,hitNormalWorld: null
	,pairCache: null
	,reset: function() {
		var rb = armory_trait_physics_bullet_PhysicsWorld.active.rbMap.iterator();
		while(rb.hasNext()) {
			var rb1 = rb.next();
			this.removeRigidBody(rb1);
		}
	}
	,createPhysics: function() {
		var broadphase = new Ammo.btDbvtBroadphase();
		var collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
		this.dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);
		var solver = new Ammo.btSequentialImpulseConstraintSolver();
		var g = iron_Scene.active.raw.gravity;
		var gravity = g == null ? new iron_math_Vec4(0,0,-9.81) : new iron_math_Vec4(g[0],g[1],g[2]);
		this.world = new Ammo.btDiscreteDynamicsWorld(this.dispatcher,broadphase,solver,collisionConfiguration);
		this.setGravity(gravity);
	}
	,setGravity: function(v) {
		armory_trait_physics_bullet_PhysicsWorld.vec1.setValue(v.x,v.y,v.z);
		this.world.setGravity(armory_trait_physics_bullet_PhysicsWorld.vec1);
	}
	,addRigidBody: function(body) {
		this.world.addRigidBody(body.body,body.group,body.mask);
		this.rbMap.set(body.id,body);
	}
	,removeRigidBody: function(body) {
		if(body.destroyed) {
			return;
		}
		body.destroyed = true;
		if(this.world != null) {
			this.world.removeRigidBody(body.body);
		}
		this.rbMap.remove(body.id);
		body.delete();
	}
	,getContacts: function(body) {
		if(this.contacts.length == 0) {
			return null;
		}
		var res = [];
		var _g = 0;
		var _g1 = this.contacts.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.contacts[i];
			var rb = null;
			if(c.a == body.body.userIndex) {
				rb = this.rbMap.get(c.b);
			} else if(c.b == body.body.userIndex) {
				rb = this.rbMap.get(c.a);
			}
			if(rb != null && res.indexOf(rb) == -1) {
				res.push(rb);
			}
		}
		return res;
	}
	,getContactPairs: function(body) {
		if(this.contacts.length == 0) {
			return null;
		}
		var res = [];
		var _g = 0;
		var _g1 = this.contacts.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.contacts[i];
			if(c.a == body.body.userIndex) {
				res.push(c);
			} else if(c.b == body.body.userIndex) {
				res.push(c);
			}
		}
		return res;
	}
	,findBody: function(id) {
		var rb = this.rbMap.get(id);
		return rb;
	}
	,lateUpdate: function() {
		var t = iron_system_Time.get_delta() * this.timeScale;
		if(t == 0.0) {
			return;
		}
		if(this.preUpdates != null) {
			var _g = 0;
			var _g1 = this.preUpdates;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f();
			}
		}
		this.world.stepSimulation(this.timeStep,this.maxSteps,t);
		this.updateContacts();
		var rb = this.rbMap.iterator();
		while(rb.hasNext()) {
			var rb1 = rb.next();
			rb1.physicsUpdate();
		}
	}
	,updateContacts: function() {
		this.contacts = [];
		var disp = this.dispatcher;
		var numManifolds = disp.getNumManifolds();
		var _g = 0;
		var _g1 = numManifolds;
		while(_g < _g1) {
			var i = _g++;
			var contactManifold = disp.getManifoldByIndexInternal(i);
			var body0 = Ammo.btRigidBody.prototype;
			var body01 = contactManifold.getBody0();
			var body02 = body0.upcast(body01);
			var body1 = Ammo.btRigidBody.prototype;
			var body11 = contactManifold.getBody1();
			var body12 = body1.upcast(body11);
			var numContacts = contactManifold.getNumContacts();
			var pt = null;
			var posA = null;
			var posB = null;
			var nor = null;
			var cp = null;
			var _g2 = 0;
			var _g11 = numContacts;
			while(_g2 < _g11) {
				var j = _g2++;
				pt = contactManifold.getContactPoint(j);
				posA = pt.get_m_positionWorldOnA();
				posB = pt.get_m_positionWorldOnB();
				nor = pt.get_m_normalWorldOnB();
				cp = new armory_trait_physics_bullet_ContactPair(body02.userIndex,body12.userIndex);
				cp.posA = new iron_math_Vec4(posA.x(),posA.y(),posA.z());
				cp.posB = new iron_math_Vec4(posB.x(),posB.y(),posB.z());
				cp.normOnB = new iron_math_Vec4(nor.x(),nor.y(),nor.z());
				cp.impulse = pt.getAppliedImpulse();
				cp.distance = pt.getDistance();
				this.contacts.push(cp);
			}
		}
	}
	,pickClosest: function(inputX,inputY) {
		var camera = iron_Scene.active.camera;
		var start = new iron_math_Vec4();
		var end = new iron_math_Vec4();
		iron_math_RayCaster.getDirection(start,end,inputX,inputY,camera);
		var hit = this.rayCast(camera.transform.world.getLoc(),end);
		var rb = hit != null ? hit.rb : null;
		return rb;
	}
	,rayCast: function(from,to,group,mask) {
		if(mask == null) {
			mask = -1;
		}
		if(group == null) {
			group = 1;
		}
		var rayFrom = armory_trait_physics_bullet_PhysicsWorld.vec1;
		var rayTo = armory_trait_physics_bullet_PhysicsWorld.vec2;
		rayFrom.setValue(from.x,from.y,from.z);
		rayTo.setValue(to.x,to.y,to.z);
		var rayCallback = new Ammo.ClosestRayResultCallback(rayFrom,rayTo);
		rayCallback.set_m_collisionFilterGroup(group);
		rayCallback.set_m_collisionFilterMask(mask);
		var worldDyn = this.world;
		var worldCol = worldDyn;
		worldCol.rayTest(rayFrom,rayTo,rayCallback);
		var rb = null;
		var hitInfo = null;
		var rc = rayCallback;
		if(rc.hasHit()) {
			var co = rayCallback.get_m_collisionObject();
			var body = Ammo.btRigidBody.prototype.upcast(co);
			var hit = rayCallback.get_m_hitPointWorld();
			this.hitPointWorld.set(hit.x(),hit.y(),hit.z());
			var norm = rayCallback.get_m_hitNormalWorld();
			this.hitNormalWorld.set(norm.x(),norm.y(),norm.z());
			rb = this.rbMap.get(body.userIndex);
			hitInfo = new armory_trait_physics_bullet_Hit(rb,this.hitPointWorld,this.hitNormalWorld);
		}
		Ammo.destroy(rayCallback);
		return hitInfo;
	}
	,notifyOnPreUpdate: function(f) {
		if(this.preUpdates == null) {
			this.preUpdates = [];
		}
		this.preUpdates.push(f);
	}
	,removePreUpdate: function(f) {
		HxOverrides.remove(this.preUpdates,f);
	}
	,__class__: armory_trait_physics_bullet_PhysicsWorld
});
var kha_math_FastMatrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.FastMatrix4"] = kha_math_FastMatrix4;
kha_math_FastMatrix4.__name__ = "kha.math.FastMatrix4";
kha_math_FastMatrix4.fromMatrix4 = function(m) {
	return new kha_math_FastMatrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_FastMatrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_FastMatrix4(2 / (right - left),0,0,tx,0,2.0 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_FastMatrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_FastMatrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_FastMatrix4.lookAt = function(eye,at,up) {
	var _this = new kha_math_FastVector3(at.x - eye.x,at.y - eye.y,at.z - eye.z);
	var v = new kha_math_FastVector3(_this.x,_this.y,_this.z);
	var currentLength = v.get_length();
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		v.x *= mul;
		v.y *= mul;
		v.z *= mul;
	}
	var zaxis = v;
	var _x = zaxis.y * up.z - zaxis.z * up.y;
	var _y = zaxis.z * up.x - zaxis.x * up.z;
	var _z = zaxis.x * up.y - zaxis.y * up.x;
	var _this1 = new kha_math_FastVector3(_x,_y,_z);
	var v1 = new kha_math_FastVector3(_this1.x,_this1.y,_this1.z);
	var currentLength1 = v1.get_length();
	if(currentLength1 != 0) {
		var mul1 = 1 / currentLength1;
		v1.x *= mul1;
		v1.y *= mul1;
		v1.z *= mul1;
	}
	var xaxis = v1;
	var _x1 = xaxis.y * zaxis.z - xaxis.z * zaxis.y;
	var _y1 = xaxis.z * zaxis.x - xaxis.x * zaxis.z;
	var _z1 = xaxis.x * zaxis.y - xaxis.y * zaxis.x;
	var yaxis = new kha_math_FastVector3(_x1,_y1,_z1);
	return new kha_math_FastMatrix4(xaxis.x,xaxis.y,xaxis.z,-(xaxis.x * eye.x + xaxis.y * eye.y + xaxis.z * eye.z),yaxis.x,yaxis.y,yaxis.z,-(yaxis.x * eye.x + yaxis.y * eye.y + yaxis.z * eye.z),-zaxis.x,-zaxis.y,-zaxis.z,zaxis.x * eye.x + zaxis.y * eye.y + zaxis.z * eye.z,0,0,0,1);
};
kha_math_FastMatrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_FastMatrix4
};
var iron_math_Vec4 = function(x,y,z,w) {
	if(w == null) {
		w = 1.0;
	}
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["iron.math.Vec4"] = iron_math_Vec4;
iron_math_Vec4.__name__ = "iron.math.Vec4";
iron_math_Vec4.distance = function(v1,v2) {
	return iron_math_Vec4.distancef(v1.x,v1.y,v1.z,v2.x,v2.y,v2.z);
};
iron_math_Vec4.distancef = function(v1x,v1y,v1z,v2x,v2y,v2z) {
	var vx = v1x - v2x;
	var vy = v1y - v2y;
	var vz = v1z - v2z;
	return Math.sqrt(vx * vx + vy * vy + vz * vz);
};
iron_math_Vec4.xAxis = function() {
	return new iron_math_Vec4(1.0,0.0,0.0);
};
iron_math_Vec4.yAxis = function() {
	return new iron_math_Vec4(0.0,1.0,0.0);
};
iron_math_Vec4.zAxis = function() {
	return new iron_math_Vec4(0.0,0.0,1.0);
};
iron_math_Vec4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,cross: function(v) {
		var ax = this.x;
		var ay = this.y;
		var az = this.z;
		var vx = v.x;
		var vy = v.y;
		var vz = v.z;
		this.x = ay * vz - az * vy;
		this.y = az * vx - ax * vz;
		this.z = ax * vy - ay * vx;
		return this;
	}
	,crossvecs: function(a,b) {
		var ax = a.x;
		var ay = a.y;
		var az = a.z;
		var bx = b.x;
		var by = b.y;
		var bz = b.z;
		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;
		return this;
	}
	,set: function(x,y,z,w) {
		if(w == null) {
			w = 1.0;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,add: function(v) {
		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		return this;
	}
	,addf: function(x,y,z) {
		this.x += x;
		this.y += y;
		this.z += z;
		return this;
	}
	,addvecs: function(a,b) {
		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		return this;
	}
	,subvecs: function(a,b) {
		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		return this;
	}
	,normalize: function() {
		var n = this.length();
		if(n > 0.0) {
			var invN = 1.0 / n;
			this.x *= invN;
			this.y *= invN;
			this.z *= invN;
		}
		return this;
	}
	,mult: function(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
		return this;
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,setFrom: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = v.w;
		return this;
	}
	,clone: function() {
		return new iron_math_Vec4(this.x,this.y,this.z,this.w);
	}
	,lerp: function(from,to,s) {
		this.x = from.x + (to.x - from.x) * s;
		this.y = from.y + (to.y - from.y) * s;
		this.z = from.z + (to.z - from.z) * s;
		return this;
	}
	,applyproj: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var d = 1.0 / (m.get__03() * x + m.get__13() * y + m.get__23() * z + m.get__33());
		this.x = (m.get__00() * x + m.get__10() * y + m.get__20() * z + m.get__30()) * d;
		this.y = (m.get__01() * x + m.get__11() * y + m.get__21() * z + m.get__31()) * d;
		this.z = (m.get__02() * x + m.get__12() * y + m.get__22() * z + m.get__32()) * d;
		return this;
	}
	,applymat: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		this.x = m.get__00() * x + m.get__10() * y + m.get__20() * z + m.get__30();
		this.y = m.get__01() * x + m.get__11() * y + m.get__21() * z + m.get__31();
		this.z = m.get__02() * x + m.get__12() * y + m.get__22() * z + m.get__32();
		return this;
	}
	,applymat4: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var w = this.w;
		this.x = m.get__00() * x + m.get__10() * y + m.get__20() * z + m.get__30() * w;
		this.y = m.get__01() * x + m.get__11() * y + m.get__21() * z + m.get__31() * w;
		this.z = m.get__02() * x + m.get__12() * y + m.get__22() * z + m.get__32() * w;
		this.w = m.get__03() * x + m.get__13() * y + m.get__23() * z + m.get__33() * w;
		return this;
	}
	,applyAxisAngle: function(axis,angle) {
		var quat = new iron_math_Quat();
		quat.fromAxisAngle(axis,angle);
		return this.applyQuat(quat);
	}
	,applyQuat: function(q) {
		var ix = q.w * this.x + q.y * this.z - q.z * this.y;
		var iy = q.w * this.y + q.z * this.x - q.x * this.z;
		var iz = q.w * this.z + q.x * this.y - q.y * this.x;
		var iw = -q.x * this.x - q.y * this.y - q.z * this.z;
		this.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;
		this.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;
		this.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;
		return this;
	}
	,equals: function(v) {
		if(this.x == v.x && this.y == v.y) {
			return this.z == v.z;
		} else {
			return false;
		}
	}
	,almostEquals: function(v,prec) {
		if(Math.abs(this.x - v.x) < prec && Math.abs(this.y - v.y) < prec) {
			return Math.abs(this.z - v.z) < prec;
		} else {
			return false;
		}
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,sub: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		return this;
	}
	,distanceTo: function(p) {
		return Math.sqrt((p.x - this.x) * (p.x - this.x) + (p.y - this.y) * (p.y - this.y) + (p.z - this.z) * (p.z - this.z));
	}
	,reflect: function(n) {
		var d = 2 * this.dot(n);
		this.x -= d * n.x;
		this.y -= d * n.y;
		this.z -= d * n.z;
		return this;
	}
	,clamp: function(min,max) {
		var l = this.length();
		if(l < min) {
			this.normalize().mult(min);
		} else if(l > max) {
			this.normalize().mult(max);
		}
		return this;
	}
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: iron_math_Vec4
};
var iron_math_Mat4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this.self = new kha_math_FastMatrix4(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33);
};
$hxClasses["iron.math.Mat4"] = iron_math_Mat4;
iron_math_Mat4.__name__ = "iron.math.Mat4";
iron_math_Mat4.fromFloat32Array = function(a,offset) {
	if(offset == null) {
		offset = 0;
	}
	return new iron_math_Mat4(a[offset],a[1 + offset],a[2 + offset],a[3 + offset],a[4 + offset],a[5 + offset],a[6 + offset],a[7 + offset],a[8 + offset],a[9 + offset],a[10 + offset],a[11 + offset],a[12 + offset],a[13 + offset],a[14 + offset],a[15 + offset]);
};
iron_math_Mat4.identity = function() {
	return new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
};
iron_math_Mat4.persp = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new iron_math_Mat4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
iron_math_Mat4.ortho = function(left,right,bottom,top,near,far) {
	var rl = right - left;
	var tb = top - bottom;
	var fn = far - near;
	var tx = -(right + left) / rl;
	var ty = -(top + bottom) / tb;
	var tz = -(far + near) / fn;
	return new iron_math_Mat4(2 / rl,0,0,tx,0,2 / tb,0,ty,0,0,-2 / fn,tz,0,0,0,1);
};
iron_math_Mat4.prototype = {
	self: null
	,compose: function(loc,quat,sc) {
		this.fromQuat(quat);
		this.scale(sc);
		this.setLoc(loc);
		return this;
	}
	,decompose: function(loc,quat,scale) {
		loc.x = this.get__30();
		loc.y = this.get__31();
		loc.z = this.get__32();
		scale.x = iron_math_Mat4.helpVec.set(this.get__00(),this.get__01(),this.get__02()).length();
		scale.y = iron_math_Mat4.helpVec.set(this.get__10(),this.get__11(),this.get__12()).length();
		scale.z = iron_math_Mat4.helpVec.set(this.get__20(),this.get__21(),this.get__22()).length();
		var _this = this.self;
		var m3 = _this._12;
		var m4 = _this._22;
		var m5 = _this._32;
		var m6 = _this._13;
		var m7 = _this._23;
		var m8 = _this._33;
		var c00 = _this._11 * (m4 * m8 - m5 * m7) - _this._21 * (m3 * m8 - m5 * m6) + _this._31 * (m3 * m7 - m4 * m6);
		var m31 = _this._12;
		var m41 = _this._22;
		var m51 = _this._32;
		var m61 = _this._13;
		var m71 = _this._23;
		var m81 = _this._33;
		var c01 = _this._10 * (m41 * m81 - m51 * m71) - _this._20 * (m31 * m81 - m51 * m61) + _this._30 * (m31 * m71 - m41 * m61);
		var m32 = _this._11;
		var m42 = _this._21;
		var m52 = _this._31;
		var m62 = _this._13;
		var m72 = _this._23;
		var m82 = _this._33;
		var c02 = _this._10 * (m42 * m82 - m52 * m72) - _this._20 * (m32 * m82 - m52 * m62) + _this._30 * (m32 * m72 - m42 * m62);
		var m33 = _this._11;
		var m43 = _this._21;
		var m53 = _this._31;
		var m63 = _this._12;
		var m73 = _this._22;
		var m83 = _this._32;
		var c03 = _this._10 * (m43 * m83 - m53 * m73) - _this._20 * (m33 * m83 - m53 * m63) + _this._30 * (m33 * m73 - m43 * m63);
		if(_this._00 * c00 - _this._01 * c01 + _this._02 * c02 - _this._03 * c03 < 0.0) {
			scale.x = -scale.x;
		}
		var invs = 1.0 / scale.x;
		iron_math_Mat4.helpMat.set__00(this.get__00() * invs);
		iron_math_Mat4.helpMat.set__01(this.get__01() * invs);
		iron_math_Mat4.helpMat.set__02(this.get__02() * invs);
		invs = 1.0 / scale.y;
		iron_math_Mat4.helpMat.set__10(this.get__10() * invs);
		iron_math_Mat4.helpMat.set__11(this.get__11() * invs);
		iron_math_Mat4.helpMat.set__12(this.get__12() * invs);
		invs = 1.0 / scale.z;
		iron_math_Mat4.helpMat.set__20(this.get__20() * invs);
		iron_math_Mat4.helpMat.set__21(this.get__21() * invs);
		iron_math_Mat4.helpMat.set__22(this.get__22() * invs);
		quat.fromRotationMat(iron_math_Mat4.helpMat);
		return this;
	}
	,setLoc: function(v) {
		this.set__30(v.x);
		this.set__31(v.y);
		this.set__32(v.z);
		return this;
	}
	,fromQuat: function(q) {
		var x = q.x;
		var y = q.y;
		var z = q.z;
		var w = q.w;
		var x2 = x + x;
		var y2 = y + y;
		var z2 = z + z;
		var xx = x * x2;
		var xy = x * y2;
		var xz = x * z2;
		var yy = y * y2;
		var yz = y * z2;
		var zz = z * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this.set__00(1.0 - (yy + zz));
		this.set__10(xy - wz);
		this.set__20(xz + wy);
		this.set__01(xy + wz);
		this.set__11(1.0 - (xx + zz));
		this.set__21(yz - wx);
		this.set__02(xz - wy);
		this.set__12(yz + wx);
		this.set__22(1.0 - (xx + yy));
		this.set__03(0.0);
		this.set__13(0.0);
		this.set__23(0.0);
		this.set__30(0.0);
		this.set__31(0.0);
		this.set__32(0.0);
		this.set__33(1.0);
		return this;
	}
	,setIdentity: function() {
		this.set__00(1.0);
		this.set__01(0.0);
		this.set__02(0.0);
		this.set__03(0.0);
		this.set__10(0.0);
		this.set__11(1.0);
		this.set__12(0.0);
		this.set__13(0.0);
		this.set__20(0.0);
		this.set__21(0.0);
		this.set__22(1.0);
		this.set__23(0.0);
		this.set__30(0.0);
		this.set__31(0.0);
		this.set__32(0.0);
		this.set__33(1.0);
		return this;
	}
	,initTranslate: function(x,y,z) {
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.set__00(1.0);
		this.set__01(0.0);
		this.set__02(0.0);
		this.set__03(0.0);
		this.set__10(0.0);
		this.set__11(1.0);
		this.set__12(0.0);
		this.set__13(0.0);
		this.set__20(0.0);
		this.set__21(0.0);
		this.set__22(1.0);
		this.set__23(0.0);
		this.set__30(x);
		this.set__31(y);
		this.set__32(z);
		this.set__33(1.0);
		return this;
	}
	,translate: function(x,y,z) {
		var _g = this;
		_g.set__00(_g.get__00() + x * this.get__03());
		var _g1 = this;
		_g1.set__01(_g1.get__01() + y * this.get__03());
		var _g2 = this;
		_g2.set__02(_g2.get__02() + z * this.get__03());
		var _g3 = this;
		_g3.set__10(_g3.get__10() + x * this.get__13());
		var _g4 = this;
		_g4.set__11(_g4.get__11() + y * this.get__13());
		var _g5 = this;
		_g5.set__12(_g5.get__12() + z * this.get__13());
		var _g6 = this;
		_g6.set__20(_g6.get__20() + x * this.get__23());
		var _g7 = this;
		_g7.set__21(_g7.get__21() + y * this.get__23());
		var _g8 = this;
		_g8.set__22(_g8.get__22() + z * this.get__23());
		var _g9 = this;
		_g9.set__30(_g9.get__30() + x * this.get__33());
		var _g10 = this;
		_g10.set__31(_g10.get__31() + y * this.get__33());
		var _g11 = this;
		_g11.set__32(_g11.get__32() + z * this.get__33());
		return this;
	}
	,scale: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var _g = this;
		_g.set__00(_g.get__00() * x);
		var _g1 = this;
		_g1.set__01(_g1.get__01() * x);
		var _g2 = this;
		_g2.set__02(_g2.get__02() * x);
		var _g3 = this;
		_g3.set__03(_g3.get__03() * x);
		var _g4 = this;
		_g4.set__10(_g4.get__10() * y);
		var _g5 = this;
		_g5.set__11(_g5.get__11() * y);
		var _g6 = this;
		_g6.set__12(_g6.get__12() * y);
		var _g7 = this;
		_g7.set__13(_g7.get__13() * y);
		var _g8 = this;
		_g8.set__20(_g8.get__20() * z);
		var _g9 = this;
		_g9.set__21(_g9.get__21() * z);
		var _g10 = this;
		_g10.set__22(_g10.get__22() * z);
		var _g11 = this;
		_g11.set__23(_g11.get__23() * z);
		return this;
	}
	,multmats3x4: function(a,b) {
		var a00 = a.get__00();
		var a01 = a.get__01();
		var a02 = a.get__02();
		var a03 = a.get__03();
		var a10 = a.get__10();
		var a11 = a.get__11();
		var a12 = a.get__12();
		var a13 = a.get__13();
		var a20 = a.get__20();
		var a21 = a.get__21();
		var a22 = a.get__22();
		var a23 = a.get__23();
		var a30 = a.get__30();
		var a31 = a.get__31();
		var a32 = a.get__32();
		var a33 = a.get__33();
		var b0 = b.get__00();
		var b1 = b.get__10();
		var b2 = b.get__20();
		var b3 = b.get__30();
		this.set__00(a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3);
		this.set__10(a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3);
		this.set__20(a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3);
		this.set__30(a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3);
		b0 = b.get__01();
		b1 = b.get__11();
		b2 = b.get__21();
		b3 = b.get__31();
		this.set__01(a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3);
		this.set__11(a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3);
		this.set__21(a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3);
		this.set__31(a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3);
		b0 = b.get__02();
		b1 = b.get__12();
		b2 = b.get__22();
		b3 = b.get__32();
		this.set__02(a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3);
		this.set__12(a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3);
		this.set__22(a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3);
		this.set__32(a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3);
		this.set__03(0);
		this.set__13(0);
		this.set__23(0);
		this.set__33(1);
		return this;
	}
	,multmats: function(b,a) {
		var a00 = a.get__00();
		var a01 = a.get__01();
		var a02 = a.get__02();
		var a03 = a.get__03();
		var a10 = a.get__10();
		var a11 = a.get__11();
		var a12 = a.get__12();
		var a13 = a.get__13();
		var a20 = a.get__20();
		var a21 = a.get__21();
		var a22 = a.get__22();
		var a23 = a.get__23();
		var a30 = a.get__30();
		var a31 = a.get__31();
		var a32 = a.get__32();
		var a33 = a.get__33();
		var b0 = b.get__00();
		var b1 = b.get__10();
		var b2 = b.get__20();
		var b3 = b.get__30();
		this.set__00(a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3);
		this.set__10(a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3);
		this.set__20(a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3);
		this.set__30(a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3);
		b0 = b.get__01();
		b1 = b.get__11();
		b2 = b.get__21();
		b3 = b.get__31();
		this.set__01(a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3);
		this.set__11(a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3);
		this.set__21(a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3);
		this.set__31(a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3);
		b0 = b.get__02();
		b1 = b.get__12();
		b2 = b.get__22();
		b3 = b.get__32();
		this.set__02(a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3);
		this.set__12(a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3);
		this.set__22(a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3);
		this.set__32(a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3);
		b0 = b.get__03();
		b1 = b.get__13();
		b2 = b.get__23();
		b3 = b.get__33();
		this.set__03(a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3);
		this.set__13(a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3);
		this.set__23(a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3);
		this.set__33(a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3);
		return this;
	}
	,multmat: function(m) {
		var a00 = this.get__00();
		var a01 = this.get__01();
		var a02 = this.get__02();
		var a03 = this.get__03();
		var a10 = this.get__10();
		var a11 = this.get__11();
		var a12 = this.get__12();
		var a13 = this.get__13();
		var a20 = this.get__20();
		var a21 = this.get__21();
		var a22 = this.get__22();
		var a23 = this.get__23();
		var a30 = this.get__30();
		var a31 = this.get__31();
		var a32 = this.get__32();
		var a33 = this.get__33();
		var b0 = m.get__00();
		var b1 = m.get__10();
		var b2 = m.get__20();
		var b3 = m.get__30();
		this.set__00(a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3);
		this.set__10(a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3);
		this.set__20(a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3);
		this.set__30(a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3);
		b0 = m.get__01();
		b1 = m.get__11();
		b2 = m.get__21();
		b3 = m.get__31();
		this.set__01(a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3);
		this.set__11(a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3);
		this.set__21(a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3);
		this.set__31(a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3);
		b0 = m.get__02();
		b1 = m.get__12();
		b2 = m.get__22();
		b3 = m.get__32();
		this.set__02(a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3);
		this.set__12(a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3);
		this.set__22(a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3);
		this.set__32(a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3);
		b0 = m.get__03();
		b1 = m.get__13();
		b2 = m.get__23();
		b3 = m.get__33();
		this.set__03(a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3);
		this.set__13(a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3);
		this.set__23(a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3);
		this.set__33(a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3);
		return this;
	}
	,getInverse: function(m) {
		var a00 = m.get__00();
		var a01 = m.get__01();
		var a02 = m.get__02();
		var a03 = m.get__03();
		var a10 = m.get__10();
		var a11 = m.get__11();
		var a12 = m.get__12();
		var a13 = m.get__13();
		var a20 = m.get__20();
		var a21 = m.get__21();
		var a22 = m.get__22();
		var a23 = m.get__23();
		var a30 = m.get__30();
		var a31 = m.get__31();
		var a32 = m.get__32();
		var a33 = m.get__33();
		var b00 = a00 * a11 - a01 * a10;
		var b01 = a00 * a12 - a02 * a10;
		var b02 = a00 * a13 - a03 * a10;
		var b03 = a01 * a12 - a02 * a11;
		var b04 = a01 * a13 - a03 * a11;
		var b05 = a02 * a13 - a03 * a12;
		var b06 = a20 * a31 - a21 * a30;
		var b07 = a20 * a32 - a22 * a30;
		var b08 = a20 * a33 - a23 * a30;
		var b09 = a21 * a32 - a22 * a31;
		var b10 = a21 * a33 - a23 * a31;
		var b11 = a22 * a33 - a23 * a32;
		var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		if(det == 0.0) {
			return this.setIdentity();
		}
		det = 1.0 / det;
		this.set__00((a11 * b11 - a12 * b10 + a13 * b09) * det);
		this.set__01((a02 * b10 - a01 * b11 - a03 * b09) * det);
		this.set__02((a31 * b05 - a32 * b04 + a33 * b03) * det);
		this.set__03((a22 * b04 - a21 * b05 - a23 * b03) * det);
		this.set__10((a12 * b08 - a10 * b11 - a13 * b07) * det);
		this.set__11((a00 * b11 - a02 * b08 + a03 * b07) * det);
		this.set__12((a32 * b02 - a30 * b05 - a33 * b01) * det);
		this.set__13((a20 * b05 - a22 * b02 + a23 * b01) * det);
		this.set__20((a10 * b10 - a11 * b08 + a13 * b06) * det);
		this.set__21((a01 * b08 - a00 * b10 - a03 * b06) * det);
		this.set__22((a30 * b04 - a31 * b02 + a33 * b00) * det);
		this.set__23((a21 * b02 - a20 * b04 - a23 * b00) * det);
		this.set__30((a11 * b07 - a10 * b09 - a12 * b06) * det);
		this.set__31((a00 * b09 - a01 * b07 + a02 * b06) * det);
		this.set__32((a31 * b01 - a30 * b03 - a32 * b00) * det);
		this.set__33((a20 * b03 - a21 * b01 + a22 * b00) * det);
		return this;
	}
	,transpose: function() {
		var f = this.get__01();
		this.set__01(this.get__10());
		this.set__10(f);
		f = this.get__02();
		this.set__02(this.get__20());
		this.set__20(f);
		f = this.get__03();
		this.set__03(this.get__30());
		this.set__30(f);
		f = this.get__12();
		this.set__12(this.get__21());
		this.set__21(f);
		f = this.get__13();
		this.set__13(this.get__31());
		this.set__31(f);
		f = this.get__23();
		this.set__23(this.get__32());
		this.set__32(f);
		return this;
	}
	,transpose3x3: function() {
		var f = this.get__01();
		this.set__01(this.get__10());
		this.set__10(f);
		f = this.get__02();
		this.set__02(this.get__20());
		this.set__20(f);
		f = this.get__12();
		this.set__12(this.get__21());
		this.set__21(f);
		return this;
	}
	,clone: function() {
		return new iron_math_Mat4(this.get__00(),this.get__10(),this.get__20(),this.get__30(),this.get__01(),this.get__11(),this.get__21(),this.get__31(),this.get__02(),this.get__12(),this.get__22(),this.get__32(),this.get__03(),this.get__13(),this.get__23(),this.get__33());
	}
	,setF32: function(a,offset) {
		if(offset == null) {
			offset = 0;
		}
		this.set__00(a[offset]);
		this.set__10(a[1 + offset]);
		this.set__20(a[2 + offset]);
		this.set__30(a[3 + offset]);
		this.set__01(a[4 + offset]);
		this.set__11(a[5 + offset]);
		this.set__21(a[6 + offset]);
		this.set__31(a[7 + offset]);
		this.set__02(a[8 + offset]);
		this.set__12(a[9 + offset]);
		this.set__22(a[10 + offset]);
		this.set__32(a[11 + offset]);
		this.set__03(a[12 + offset]);
		this.set__13(a[13 + offset]);
		this.set__23(a[14 + offset]);
		this.set__33(a[15 + offset]);
		return this;
	}
	,setFrom: function(m) {
		this.set__00(m.get__00());
		this.set__01(m.get__01());
		this.set__02(m.get__02());
		this.set__03(m.get__03());
		this.set__10(m.get__10());
		this.set__11(m.get__11());
		this.set__12(m.get__12());
		this.set__13(m.get__13());
		this.set__20(m.get__20());
		this.set__21(m.get__21());
		this.set__22(m.get__22());
		this.set__23(m.get__23());
		this.set__30(m.get__30());
		this.set__31(m.get__31());
		this.set__32(m.get__32());
		this.set__33(m.get__33());
		return this;
	}
	,getLoc: function() {
		return new iron_math_Vec4(this.get__30(),this.get__31(),this.get__32(),this.get__33());
	}
	,getScale: function() {
		return new iron_math_Vec4(Math.sqrt(this.get__00() * this.get__00() + this.get__10() * this.get__10() + this.get__20() * this.get__20()),Math.sqrt(this.get__01() * this.get__01() + this.get__11() * this.get__11() + this.get__21() * this.get__21()),Math.sqrt(this.get__02() * this.get__02() + this.get__12() * this.get__12() + this.get__22() * this.get__22()));
	}
	,mult: function(s) {
		var _g = this;
		_g.set__00(_g.get__00() * s);
		var _g1 = this;
		_g1.set__10(_g1.get__10() * s);
		var _g2 = this;
		_g2.set__20(_g2.get__20() * s);
		var _g3 = this;
		_g3.set__30(_g3.get__30() * s);
		var _g4 = this;
		_g4.set__01(_g4.get__01() * s);
		var _g5 = this;
		_g5.set__11(_g5.get__11() * s);
		var _g6 = this;
		_g6.set__21(_g6.get__21() * s);
		var _g7 = this;
		_g7.set__31(_g7.get__31() * s);
		var _g8 = this;
		_g8.set__02(_g8.get__02() * s);
		var _g9 = this;
		_g9.set__12(_g9.get__12() * s);
		var _g10 = this;
		_g10.set__22(_g10.get__22() * s);
		var _g11 = this;
		_g11.set__32(_g11.get__32() * s);
		var _g12 = this;
		_g12.set__03(_g12.get__03() * s);
		var _g13 = this;
		_g13.set__13(_g13.get__13() * s);
		var _g14 = this;
		_g14.set__23(_g14.get__23() * s);
		var _g15 = this;
		_g15.set__33(_g15.get__33() * s);
		return this;
	}
	,toRotation: function() {
		var scale = 1.0 / iron_math_Mat4.helpVec.set(this.get__00(),this.get__01(),this.get__02()).length();
		this.set__00(this.get__00() * scale);
		this.set__01(this.get__01() * scale);
		this.set__02(this.get__02() * scale);
		scale = 1.0 / iron_math_Mat4.helpVec.set(this.get__10(),this.get__11(),this.get__12()).length();
		this.set__10(this.get__10() * scale);
		this.set__11(this.get__11() * scale);
		this.set__12(this.get__12() * scale);
		scale = 1.0 / iron_math_Mat4.helpVec.set(this.get__20(),this.get__21(),this.get__22()).length();
		this.set__20(this.get__20() * scale);
		this.set__21(this.get__21() * scale);
		this.set__22(this.get__22() * scale);
		this.set__03(0.0);
		this.set__13(0.0);
		this.set__23(0.0);
		this.set__30(0.0);
		this.set__31(0.0);
		this.set__32(0.0);
		this.set__33(1.0);
		return this;
	}
	,setLookAt: function(eye,center,up) {
		var f0 = center.x - eye.x;
		var f1 = center.y - eye.y;
		var f2 = center.z - eye.z;
		var n = 1.0 / Math.sqrt(f0 * f0 + f1 * f1 + f2 * f2);
		f0 *= n;
		f1 *= n;
		f2 *= n;
		var s0 = f1 * up.z - f2 * up.y;
		var s1 = f2 * up.x - f0 * up.z;
		var s2 = f0 * up.y - f1 * up.x;
		n = 1.0 / Math.sqrt(s0 * s0 + s1 * s1 + s2 * s2);
		s0 *= n;
		s1 *= n;
		s2 *= n;
		var u0 = s1 * f2 - s2 * f1;
		var u1 = s2 * f0 - s0 * f2;
		var u2 = s0 * f1 - s1 * f0;
		var d0 = -eye.x * s0 - eye.y * s1 - eye.z * s2;
		var d1 = -eye.x * u0 - eye.y * u1 - eye.z * u2;
		var d2 = eye.x * f0 + eye.y * f1 + eye.z * f2;
		this.set__00(s0);
		this.set__10(s1);
		this.set__20(s2);
		this.set__30(d0);
		this.set__01(u0);
		this.set__11(u1);
		this.set__21(u2);
		this.set__31(d1);
		this.set__02(-f0);
		this.set__12(-f1);
		this.set__22(-f2);
		this.set__32(d2);
		this.set__03(0.0);
		this.set__13(0.0);
		this.set__23(0.0);
		this.set__33(1.0);
		return this;
	}
	,applyQuat: function(q) {
		iron_math_Mat4.helpMat.fromQuat(q);
		this.multmat(iron_math_Mat4.helpMat);
	}
	,right: function() {
		return new iron_math_Vec4(this.get__00(),this.get__01(),this.get__02());
	}
	,look: function() {
		return new iron_math_Vec4(this.get__10(),this.get__11(),this.get__12());
	}
	,up: function() {
		return new iron_math_Vec4(this.get__20(),this.get__21(),this.get__22());
	}
	,get__00: function() {
		return this.self._00;
	}
	,set__00: function(f) {
		return this.self._00 = f;
	}
	,get__01: function() {
		return this.self._01;
	}
	,set__01: function(f) {
		return this.self._01 = f;
	}
	,get__02: function() {
		return this.self._02;
	}
	,set__02: function(f) {
		return this.self._02 = f;
	}
	,get__03: function() {
		return this.self._03;
	}
	,set__03: function(f) {
		return this.self._03 = f;
	}
	,get__10: function() {
		return this.self._10;
	}
	,set__10: function(f) {
		return this.self._10 = f;
	}
	,get__11: function() {
		return this.self._11;
	}
	,set__11: function(f) {
		return this.self._11 = f;
	}
	,get__12: function() {
		return this.self._12;
	}
	,set__12: function(f) {
		return this.self._12 = f;
	}
	,get__13: function() {
		return this.self._13;
	}
	,set__13: function(f) {
		return this.self._13 = f;
	}
	,get__20: function() {
		return this.self._20;
	}
	,set__20: function(f) {
		return this.self._20 = f;
	}
	,get__21: function() {
		return this.self._21;
	}
	,set__21: function(f) {
		return this.self._21 = f;
	}
	,get__22: function() {
		return this.self._22;
	}
	,set__22: function(f) {
		return this.self._22 = f;
	}
	,get__23: function() {
		return this.self._23;
	}
	,set__23: function(f) {
		return this.self._23 = f;
	}
	,get__30: function() {
		return this.self._30;
	}
	,set__30: function(f) {
		return this.self._30 = f;
	}
	,get__31: function() {
		return this.self._31;
	}
	,set__31: function(f) {
		return this.self._31 = f;
	}
	,get__32: function() {
		return this.self._32;
	}
	,set__32: function(f) {
		return this.self._32 = f;
	}
	,get__33: function() {
		return this.self._33;
	}
	,set__33: function(f) {
		return this.self._33 = f;
	}
	,toString: function() {
		return "[[" + this.get__00() + ", " + this.get__10() + ", " + this.get__20() + ", " + this.get__30() + "], [" + this.get__01() + ", " + this.get__11() + ", " + this.get__21() + ", " + this.get__31() + "], [" + this.get__02() + ", " + this.get__12() + ", " + this.get__22() + ", " + this.get__32() + "], [" + this.get__03() + ", " + this.get__13() + ", " + this.get__23() + ", " + this.get__33() + "]]";
	}
	,__class__: iron_math_Mat4
	,__properties__: {set__33:"set__33",get__33:"get__33",set__32:"set__32",get__32:"get__32",set__31:"set__31",get__31:"get__31",set__30:"set__30",get__30:"get__30",set__23:"set__23",get__23:"get__23",set__22:"set__22",get__22:"get__22",set__21:"set__21",get__21:"get__21",set__20:"set__20",get__20:"get__20",set__13:"set__13",get__13:"get__13",set__12:"set__12",get__12:"get__12",set__11:"set__11",get__11:"get__11",set__10:"set__10",get__10:"get__10",set__03:"set__03",get__03:"get__03",set__02:"set__02",get__02:"get__02",set__01:"set__01",get__01:"get__01",set__00:"set__00",get__00:"get__00"}
};
var iron_math_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.0;
	}
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["iron.math.Quat"] = iron_math_Quat;
iron_math_Quat.__name__ = "iron.math.Quat";
iron_math_Quat.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,set: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,fromAxisAngle: function(axis,angle) {
		var s = Math.sin(angle * 0.5);
		this.x = axis.x * s;
		this.y = axis.y * s;
		this.z = axis.z * s;
		this.w = Math.cos(angle * 0.5);
		return this.normalize();
	}
	,toAxisAngle: function(axis) {
		this.normalize();
		var angle = 2 * Math.acos(this.w);
		var s = Math.sqrt(1 - this.w * this.w);
		if(s < 0.001) {
			axis.x = this.x;
			axis.y = this.y;
			axis.z = this.z;
		} else {
			axis.x = this.x / s;
			axis.y = this.y / s;
			axis.z = this.z / s;
		}
		return angle;
	}
	,fromMat: function(m) {
		iron_math_Quat.helpMat.setFrom(m);
		iron_math_Quat.helpMat.toRotation();
		return this.fromRotationMat(iron_math_Quat.helpMat);
	}
	,fromRotationMat: function(m) {
		var m11 = m.get__00();
		var m12 = m.get__10();
		var m13 = m.get__20();
		var m21 = m.get__01();
		var m22 = m.get__11();
		var m23 = m.get__21();
		var m31 = m.get__02();
		var m32 = m.get__12();
		var m33 = m.get__22();
		var tr = m11 + m22 + m33;
		var s = 0.0;
		if(tr > 0) {
			s = 0.5 / Math.sqrt(tr + 1.0);
			this.w = 0.25 / s;
			this.x = (m32 - m23) * s;
			this.y = (m13 - m31) * s;
			this.z = (m21 - m12) * s;
		} else if(m11 > m22 && m11 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
			this.w = (m32 - m23) / s;
			this.x = 0.25 * s;
			this.y = (m12 + m21) / s;
			this.z = (m13 + m31) / s;
		} else if(m22 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
			this.w = (m13 - m31) / s;
			this.x = (m12 + m21) / s;
			this.y = 0.25 * s;
			this.z = (m23 + m32) / s;
		} else {
			s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
			this.w = (m21 - m12) / s;
			this.x = (m13 + m31) / s;
			this.y = (m23 + m32) / s;
			this.z = 0.25 * s;
		}
		return this;
	}
	,mult: function(q) {
		return this.multquats(this,q);
	}
	,multquats: function(q1,q2) {
		var q1x = q1.x;
		var q1y = q1.y;
		var q1z = q1.z;
		var q1w = q1.w;
		var q2x = q2.x;
		var q2y = q2.y;
		var q2z = q2.z;
		var q2w = q2.w;
		this.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;
		this.y = q1w * q2y - q1x * q2z + q1y * q2w + q1z * q2x;
		this.z = q1w * q2z + q1x * q2y - q1y * q2x + q1z * q2w;
		this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
		return this;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(l == 0.0) {
			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 0;
		} else {
			l = 1.0 / l;
			this.x *= l;
			this.y *= l;
			this.z *= l;
			this.w *= l;
		}
		return this;
	}
	,setFrom: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
		return this;
	}
	,getEuler: function() {
		var a = -2 * (this.x * this.z - this.w * this.y);
		var b = this.w * this.w + this.x * this.x - this.y * this.y - this.z * this.z;
		var c = 2 * (this.x * this.y + this.w * this.z);
		var d = -2 * (this.y * this.z - this.w * this.x);
		var e = this.w * this.w - this.x * this.x + this.y * this.y - this.z * this.z;
		return new iron_math_Vec4(Math.atan2(d,e),Math.atan2(a,b),Math.asin(c));
	}
	,fromEuler: function(x,y,z) {
		var f = x / 2;
		var c1 = Math.cos(f);
		var s1 = Math.sin(f);
		f = y / 2;
		var c2 = Math.cos(f);
		var s2 = Math.sin(f);
		f = z / 2;
		var c3 = Math.cos(f);
		var s3 = Math.sin(f);
		this.x = s1 * c2 * c3 + c1 * s2 * s3;
		this.y = c1 * s2 * c3 + s1 * c2 * s3;
		this.z = c1 * c2 * s3 - s1 * s2 * c3;
		this.w = c1 * c2 * c3 - s1 * s2 * s3;
		return this;
	}
	,lerp: function(from,to,s) {
		var fromx = from.x;
		var fromy = from.y;
		var fromz = from.z;
		var fromw = from.w;
		var dot = from.dot(to);
		if(dot < 0.0) {
			fromx = -fromx;
			fromy = -fromy;
			fromz = -fromz;
			fromw = -fromw;
		}
		this.x = fromx + (to.x - fromx) * s;
		this.y = fromy + (to.y - fromy) * s;
		this.z = fromz + (to.z - fromz) * s;
		this.w = fromw + (to.w - fromw) * s;
		return this.normalize();
	}
	,dot: function(q) {
		return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
	}
	,fromTo: function(v1,v2) {
		var a = iron_math_Quat.helpVec0;
		var dot = v1.dot(v2);
		if(dot < -0.999999) {
			a.crossvecs(iron_math_Quat.xAxis,v1);
			if(a.length() < 0.000001) {
				a.crossvecs(iron_math_Quat.yAxis,v1);
			}
			a.normalize();
			this.fromAxisAngle(a,Math.PI);
		} else if(dot > 0.999999) {
			this.set(0,0,0,1);
		} else {
			a.crossvecs(v1,v2);
			this.set(a.x,a.y,a.z,1 + dot);
			this.normalize();
		}
		return this;
	}
	,toString: function() {
		return this.x + ", " + this.y + ", " + this.z + ", " + this.w;
	}
	,__class__: iron_math_Quat
};
var armory_trait_physics_bullet_RigidBody = function(shape,mass,friction,restitution,group,mask,params,flags) {
	if(mask == null) {
		mask = 1;
	}
	if(group == null) {
		group = 1;
	}
	if(restitution == null) {
		restitution = 0.0;
	}
	if(friction == null) {
		friction = 0.5;
	}
	if(mass == null) {
		mass = 1.0;
	}
	if(shape == null) {
		shape = 0;
	}
	this.heightData = null;
	this.onContact = null;
	this.onReady = null;
	this.id = 0;
	this.ready = false;
	this.body = null;
	this.trigger = false;
	this.mask = 1;
	this.group = 1;
	this.ccd = false;
	this.destroyed = false;
	this.transform = null;
	iron_Trait.call(this);
	if(armory_trait_physics_bullet_RigidBody.nullvec) {
		armory_trait_physics_bullet_RigidBody.nullvec = false;
		armory_trait_physics_bullet_RigidBody.vec1 = new Ammo.btVector3(0,0,0);
		armory_trait_physics_bullet_RigidBody.vec2 = new Ammo.btVector3(0,0,0);
		armory_trait_physics_bullet_RigidBody.vec3 = new Ammo.btVector3(0,0,0);
		armory_trait_physics_bullet_RigidBody.quat1 = new Ammo.btQuaternion(0,0,0,0);
		armory_trait_physics_bullet_RigidBody.trans1 = new Ammo.btTransform();
		armory_trait_physics_bullet_RigidBody.trans2 = new Ammo.btTransform();
	}
	this.shape = shape;
	this.mass = mass;
	this.friction = friction;
	this.restitution = restitution;
	this.group = group;
	this.mask = mask;
	if(params == null) {
		params = [0.04,0.1,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0];
	}
	if(flags == null) {
		flags = [false,false,false];
	}
	this.linearDamping = params[0];
	this.angularDamping = params[1];
	this.linearFactors = [params[2],params[3],params[4]];
	this.angularFactors = [params[5],params[6],params[7]];
	this.collisionMargin = params[8];
	this.deactivationParams = [params[9],params[10],params[11]];
	this.animated = flags[0];
	this.trigger = flags[1];
	this.ccd = flags[2];
	this.staticObj = flags[3];
	this.notifyOnAdd($bind(this,this.init));
};
$hxClasses["armory.trait.physics.bullet.RigidBody"] = armory_trait_physics_bullet_RigidBody;
armory_trait_physics_bullet_RigidBody.__name__ = "armory.trait.physics.bullet.RigidBody";
armory_trait_physics_bullet_RigidBody.__super__ = iron_Trait;
armory_trait_physics_bullet_RigidBody.prototype = $extend(iron_Trait.prototype,{
	shape: null
	,physics: null
	,transform: null
	,mass: null
	,friction: null
	,restitution: null
	,collisionMargin: null
	,linearDamping: null
	,angularDamping: null
	,animated: null
	,staticObj: null
	,destroyed: null
	,linearFactors: null
	,angularFactors: null
	,deactivationParams: null
	,ccd: null
	,group: null
	,mask: null
	,trigger: null
	,bodyScaleX: null
	,bodyScaleY: null
	,bodyScaleZ: null
	,currentScaleX: null
	,currentScaleY: null
	,currentScaleZ: null
	,body: null
	,motionState: null
	,btshape: null
	,ready: null
	,id: null
	,onReady: null
	,onContact: null
	,heightData: null
	,withMargin: function(f) {
		return f - f * this.collisionMargin;
	}
	,notifyOnReady: function(f) {
		this.onReady = f;
		if(this.ready) {
			this.onReady();
		}
	}
	,init: function() {
		if(this.ready) {
			return;
		}
		this.ready = true;
		if(!((this.object) instanceof iron_object_MeshObject)) {
			return;
		}
		this.transform = this.object.transform;
		this.physics = armory_trait_physics_bullet_PhysicsWorld.active;
		if(this.shape == 0) {
			armory_trait_physics_bullet_RigidBody.vec1.setX(this.withMargin(this.transform.dim.x / 2));
			armory_trait_physics_bullet_RigidBody.vec1.setY(this.withMargin(this.transform.dim.y / 2));
			armory_trait_physics_bullet_RigidBody.vec1.setZ(this.withMargin(this.transform.dim.z / 2));
			this.btshape = new Ammo.btBoxShape(armory_trait_physics_bullet_RigidBody.vec1);
		} else if(this.shape == 1) {
			this.btshape = new Ammo.btSphereShape(this.withMargin(this.transform.dim.x / 2));
		} else if(this.shape == 2) {
			var shapeConvex = this.fillConvexHull(this.transform.scale,this.collisionMargin);
			this.btshape = shapeConvex;
		} else if(this.shape == 4) {
			var coneZ = new Ammo.btConeShapeZ(this.withMargin(this.transform.dim.x / 2),this.withMargin(this.transform.dim.z));
			var cone = coneZ;
			this.btshape = cone;
		} else if(this.shape == 5) {
			armory_trait_physics_bullet_RigidBody.vec1.setX(this.withMargin(this.transform.dim.x / 2));
			armory_trait_physics_bullet_RigidBody.vec1.setY(this.withMargin(this.transform.dim.y / 2));
			armory_trait_physics_bullet_RigidBody.vec1.setZ(this.withMargin(this.transform.dim.z / 2));
			var cylZ = new Ammo.btCylinderShapeZ(armory_trait_physics_bullet_RigidBody.vec1);
			var cyl = cylZ;
			this.btshape = cyl;
		} else if(this.shape == 6) {
			var r = this.transform.dim.x / 2;
			var capsZ = new Ammo.btCapsuleShapeZ(this.withMargin(r),this.withMargin(this.transform.dim.z - r * 2));
			var caps = capsZ;
			this.btshape = caps;
		} else if(this.shape == 3) {
			var meshInterface = this.fillTriangleMesh(this.transform.scale);
			if(this.mass > 0) {
				var shapeGImpact = new Ammo.btGImpactMeshShape(meshInterface);
				shapeGImpact.updateBound();
				var shapeConcave = shapeGImpact;
				this.btshape = shapeConcave;
				if(!this.physics.gimpactRegistered) {
					new Ammo.GImpactCollisionAlgorithm().registerAlgorithm(this.physics.dispatcher);
					this.physics.gimpactRegistered = true;
				}
			} else {
				var shapeBvh = new Ammo.btBvhTriangleMeshShape(meshInterface,true,true);
				var shapeTri = shapeBvh;
				var shapeConcave1 = shapeTri;
				this.btshape = shapeConcave1;
			}
		} else if(this.shape == 7) {
			var length = this.heightData.length;
			if(armory_trait_physics_bullet_RigidBody.ammoArray == -1) {
				armory_trait_physics_bullet_RigidBody.ammoArray = Ammo._malloc(length);
			}
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				Ammo.HEAPU8[armory_trait_physics_bullet_RigidBody.ammoArray + i] = this.heightData.get(i);
			}
			var slice = Std.int(Math.sqrt(length));
			var axis = 2;
			var dataType = 5;
			this.btshape = new Ammo.btHeightfieldTerrainShape(slice,slice,armory_trait_physics_bullet_RigidBody.ammoArray,0.00392156862745098,0,1,axis,dataType,false);
			armory_trait_physics_bullet_RigidBody.vec1.setX(this.transform.dim.x / slice);
			armory_trait_physics_bullet_RigidBody.vec1.setY(this.transform.dim.y / slice);
			armory_trait_physics_bullet_RigidBody.vec1.setZ(this.transform.dim.z);
			this.btshape.setLocalScaling(armory_trait_physics_bullet_RigidBody.vec1);
		}
		armory_trait_physics_bullet_RigidBody.trans1.setIdentity();
		armory_trait_physics_bullet_RigidBody.vec1.setX(this.transform.worldx());
		armory_trait_physics_bullet_RigidBody.vec1.setY(this.transform.worldy());
		armory_trait_physics_bullet_RigidBody.vec1.setZ(this.transform.worldz());
		armory_trait_physics_bullet_RigidBody.trans1.setOrigin(armory_trait_physics_bullet_RigidBody.vec1);
		armory_trait_physics_bullet_RigidBody.quat.fromMat(this.transform.world);
		armory_trait_physics_bullet_RigidBody.quat1.setValue(armory_trait_physics_bullet_RigidBody.quat.x,armory_trait_physics_bullet_RigidBody.quat.y,armory_trait_physics_bullet_RigidBody.quat.z,armory_trait_physics_bullet_RigidBody.quat.w);
		armory_trait_physics_bullet_RigidBody.trans1.setRotation(armory_trait_physics_bullet_RigidBody.quat1);
		var centerOfMassOffset = armory_trait_physics_bullet_RigidBody.trans2;
		centerOfMassOffset.setIdentity();
		this.motionState = new Ammo.btDefaultMotionState(armory_trait_physics_bullet_RigidBody.trans1,centerOfMassOffset);
		armory_trait_physics_bullet_RigidBody.vec1.setX(0);
		armory_trait_physics_bullet_RigidBody.vec1.setY(0);
		armory_trait_physics_bullet_RigidBody.vec1.setZ(0);
		var inertia = armory_trait_physics_bullet_RigidBody.vec1;
		if(this.staticObj || this.animated) {
			this.mass = 0;
		}
		if(this.mass > 0) {
			this.btshape.calculateLocalInertia(this.mass,inertia);
		}
		var bodyCI = new Ammo.btRigidBodyConstructionInfo(this.mass,this.motionState,this.btshape,inertia);
		this.body = new Ammo.btRigidBody(bodyCI);
		var bodyColl = this.body;
		bodyColl.setFriction(this.friction);
		if(this.shape == 1 || this.shape == 5 || this.shape == 4 || this.shape == 6) {
			this.angularDamping += this.friction;
		}
		bodyColl.setRestitution(this.restitution);
		if(this.deactivationParams != null) {
			this.setDeactivationParams(this.deactivationParams[0],this.deactivationParams[1],this.deactivationParams[2]);
		} else {
			this.setActivationState(4);
		}
		if(this.linearDamping != 0.04 || this.angularDamping != 0.1) {
			this.body.setDamping(this.linearDamping,this.angularDamping);
		}
		if(this.linearFactors != null) {
			this.setLinearFactor(this.linearFactors[0],this.linearFactors[1],this.linearFactors[2]);
		}
		if(this.angularFactors != null) {
			this.setAngularFactor(this.angularFactors[0],this.angularFactors[1],this.angularFactors[2]);
		}
		if(this.trigger) {
			bodyColl.setCollisionFlags(bodyColl.getCollisionFlags() | armory_trait_physics_bullet_RigidBody.CF_NO_CONTACT_RESPONSE);
		}
		if(this.animated) {
			bodyColl.setCollisionFlags(bodyColl.getCollisionFlags() | armory_trait_physics_bullet_RigidBody.CF_KINEMATIC_OBJECT);
			bodyColl.setCollisionFlags(bodyColl.getCollisionFlags() & ~armory_trait_physics_bullet_RigidBody.CF_STATIC_OBJECT);
		}
		if(this.staticObj && !this.animated) {
			bodyColl.setCollisionFlags(bodyColl.getCollisionFlags() | armory_trait_physics_bullet_RigidBody.CF_STATIC_OBJECT);
		}
		if(this.ccd) {
			this.setCcd(this.transform.radius);
		}
		this.bodyScaleX = this.currentScaleX = this.transform.scale.x;
		this.bodyScaleY = this.currentScaleY = this.transform.scale.y;
		this.bodyScaleZ = this.currentScaleZ = this.transform.scale.z;
		this.id = armory_trait_physics_bullet_RigidBody.nextId;
		armory_trait_physics_bullet_RigidBody.nextId++;
		this.body.userIndex = this.id;
		this.physics.addRigidBody(this);
		this.notifyOnRemove($bind(this,this.removeFromWorld));
		if(this.onReady != null) {
			this.onReady();
		}
		Ammo.destroy(bodyCI);
	}
	,physicsUpdate: function() {
		if(!this.ready) {
			return;
		}
		if(this.animated) {
			this.syncTransform();
		} else {
			var bodyColl = this.body;
			var trans = bodyColl.getWorldTransform();
			var p = trans.getOrigin();
			var q = trans.getRotation();
			var qw = q;
			this.transform.loc.set(p.x(),p.y(),p.z());
			this.transform.rot.set(qw.x(),qw.y(),qw.z(),qw.w());
			if(this.object.parent != null) {
				var ptransform = this.object.parent.transform;
				this.transform.loc.x -= ptransform.worldx();
				this.transform.loc.y -= ptransform.worldy();
				this.transform.loc.z -= ptransform.worldz();
			}
			this.transform.buildMatrix();
		}
		if(this.onContact != null) {
			var rbs = this.physics.getContacts(this);
			if(rbs != null) {
				var _g = 0;
				while(_g < rbs.length) {
					var rb = rbs[_g];
					++_g;
					var _g1 = 0;
					var _g11 = this.onContact;
					while(_g1 < _g11.length) {
						var f = _g11[_g1];
						++_g1;
						f(rb);
					}
				}
			}
		}
	}
	,removeFromWorld: function() {
		if(this.physics != null) {
			this.physics.removeRigidBody(this);
		}
	}
	,activate: function() {
		var bodyColl = this.body;
		bodyColl.activate(false);
	}
	,disableGravity: function() {
		armory_trait_physics_bullet_RigidBody.vec1.setValue(0,0,0);
		this.body.setGravity(armory_trait_physics_bullet_RigidBody.vec1);
	}
	,enableGravity: function() {
		this.body.setGravity(this.physics.world.getGravity());
	}
	,setGravity: function(v) {
		armory_trait_physics_bullet_RigidBody.vec1.setValue(v.x,v.y,v.z);
		this.body.setGravity(armory_trait_physics_bullet_RigidBody.vec1);
	}
	,setActivationState: function(newState) {
		var bodyColl = this.body;
		bodyColl.setActivationState(newState);
	}
	,setDeactivationParams: function(linearThreshold,angularThreshold,time) {
		this.body.setSleepingThresholds(linearThreshold,angularThreshold);
	}
	,applyForce: function(force,loc) {
		this.activate();
		armory_trait_physics_bullet_RigidBody.vec1.setValue(force.x,force.y,force.z);
		if(loc == null) {
			this.body.applyCentralForce(armory_trait_physics_bullet_RigidBody.vec1);
		} else {
			armory_trait_physics_bullet_RigidBody.vec2.setValue(loc.x,loc.y,loc.z);
			this.body.applyForce(armory_trait_physics_bullet_RigidBody.vec1,armory_trait_physics_bullet_RigidBody.vec2);
		}
	}
	,applyImpulse: function(impulse,loc) {
		this.activate();
		armory_trait_physics_bullet_RigidBody.vec1.setValue(impulse.x,impulse.y,impulse.z);
		if(loc == null) {
			this.body.applyCentralImpulse(armory_trait_physics_bullet_RigidBody.vec1);
		} else {
			armory_trait_physics_bullet_RigidBody.vec2.setValue(loc.x,loc.y,loc.z);
			this.body.applyImpulse(armory_trait_physics_bullet_RigidBody.vec1,armory_trait_physics_bullet_RigidBody.vec2);
		}
	}
	,applyTorque: function(torque) {
		this.activate();
		armory_trait_physics_bullet_RigidBody.vec1.setValue(torque.x,torque.y,torque.z);
		this.body.applyTorque(armory_trait_physics_bullet_RigidBody.vec1);
	}
	,applyTorqueImpulse: function(torque) {
		this.activate();
		armory_trait_physics_bullet_RigidBody.vec1.setValue(torque.x,torque.y,torque.z);
		this.body.applyTorqueImpulse(armory_trait_physics_bullet_RigidBody.vec1);
	}
	,setLinearFactor: function(x,y,z) {
		armory_trait_physics_bullet_RigidBody.vec1.setValue(x,y,z);
		this.body.setLinearFactor(armory_trait_physics_bullet_RigidBody.vec1);
	}
	,setAngularFactor: function(x,y,z) {
		armory_trait_physics_bullet_RigidBody.vec1.setValue(x,y,z);
		this.body.setAngularFactor(armory_trait_physics_bullet_RigidBody.vec1);
	}
	,getLinearVelocity: function() {
		var v = this.body.getLinearVelocity();
		return new iron_math_Vec4(v.x(),v.y(),v.z());
	}
	,setLinearVelocity: function(x,y,z) {
		armory_trait_physics_bullet_RigidBody.vec1.setValue(x,y,z);
		this.body.setLinearVelocity(armory_trait_physics_bullet_RigidBody.vec1);
	}
	,getAngularVelocity: function() {
		var v = this.body.getAngularVelocity();
		return new iron_math_Vec4(v.x(),v.y(),v.z());
	}
	,setAngularVelocity: function(x,y,z) {
		armory_trait_physics_bullet_RigidBody.vec1.setValue(x,y,z);
		this.body.setAngularVelocity(armory_trait_physics_bullet_RigidBody.vec1);
	}
	,setFriction: function(f) {
		var bodyColl = this.body;
		bodyColl.setFriction(f);
		this.friction = f;
	}
	,notifyOnContact: function(f) {
		if(this.onContact == null) {
			this.onContact = [];
		}
		this.onContact.push(f);
	}
	,removeContact: function(f) {
		HxOverrides.remove(this.onContact,f);
	}
	,setScale: function(v) {
		this.currentScaleX = v.x;
		this.currentScaleY = v.y;
		this.currentScaleZ = v.z;
		armory_trait_physics_bullet_RigidBody.vec1.setX(v.x / this.bodyScaleX);
		armory_trait_physics_bullet_RigidBody.vec1.setY(v.y / this.bodyScaleY);
		armory_trait_physics_bullet_RigidBody.vec1.setZ(v.z / this.bodyScaleZ);
		this.btshape.setLocalScaling(armory_trait_physics_bullet_RigidBody.vec1);
		var worldDyn = this.physics.world;
		var worldCol = worldDyn;
		worldCol.updateSingleAabb(this.body);
	}
	,syncTransform: function() {
		var t = this.transform;
		t.buildMatrix();
		armory_trait_physics_bullet_RigidBody.vec1.setValue(t.worldx(),t.worldy(),t.worldz());
		armory_trait_physics_bullet_RigidBody.trans1.setOrigin(armory_trait_physics_bullet_RigidBody.vec1);
		armory_trait_physics_bullet_RigidBody.quat.fromMat(t.world);
		armory_trait_physics_bullet_RigidBody.quat1.setValue(armory_trait_physics_bullet_RigidBody.quat.x,armory_trait_physics_bullet_RigidBody.quat.y,armory_trait_physics_bullet_RigidBody.quat.z,armory_trait_physics_bullet_RigidBody.quat.w);
		armory_trait_physics_bullet_RigidBody.trans1.setRotation(armory_trait_physics_bullet_RigidBody.quat1);
		if(this.animated) {
			this.body.getMotionState().setWorldTransform(armory_trait_physics_bullet_RigidBody.trans1);
		} else {
			this.body.setCenterOfMassTransform(armory_trait_physics_bullet_RigidBody.trans1);
		}
		if(this.currentScaleX != t.scale.x || this.currentScaleY != t.scale.y || this.currentScaleZ != t.scale.z) {
			this.setScale(t.scale);
		}
		this.activate();
	}
	,setCcd: function(sphereRadius,motionThreshold) {
		if(motionThreshold == null) {
			motionThreshold = 1e-7;
		}
		var bodyColl = this.body;
		bodyColl.setCcdSweptSphereRadius(sphereRadius);
		bodyColl.setCcdMotionThreshold(motionThreshold);
	}
	,fillConvexHull: function(scale,margin) {
		var data = (js_Boot.__cast(this.object , iron_object_MeshObject)).data;
		var shape = armory_trait_physics_bullet_RigidBody.convexHullCache.get(data);
		if(shape != null) {
			armory_trait_physics_bullet_RigidBody.usersCache.set(data,armory_trait_physics_bullet_RigidBody.usersCache.get(data) + 1);
			return shape;
		}
		shape = new Ammo.btConvexHullShape();
		armory_trait_physics_bullet_RigidBody.convexHullCache.set(data,shape);
		armory_trait_physics_bullet_RigidBody.usersCache.set(data,1);
		var positions = data.geom.positions.values;
		var sx = scale.x * (1.0 - margin) * 3.0518509475997192e-005;
		var sy = scale.y * (1.0 - margin) * 3.0518509475997192e-005;
		var sz = scale.z * (1.0 - margin) * 3.0518509475997192e-005;
		if(data.raw.scale_pos != null) {
			sx *= data.raw.scale_pos;
			sy *= data.raw.scale_pos;
			sz *= data.raw.scale_pos;
		}
		var _g = 0;
		var _g1 = Std.int(positions.length / 4);
		while(_g < _g1) {
			var i = _g++;
			armory_trait_physics_bullet_RigidBody.vec1.setX(positions[i * 4] * sx);
			armory_trait_physics_bullet_RigidBody.vec1.setY(positions[i * 4 + 1] * sy);
			armory_trait_physics_bullet_RigidBody.vec1.setZ(positions[i * 4 + 2] * sz);
			shape.addPoint(armory_trait_physics_bullet_RigidBody.vec1,true);
		}
		return shape;
	}
	,fillTriangleMesh: function(scale) {
		var data = (js_Boot.__cast(this.object , iron_object_MeshObject)).data;
		var triangleMesh = armory_trait_physics_bullet_RigidBody.triangleMeshCache.get(data);
		if(triangleMesh != null) {
			armory_trait_physics_bullet_RigidBody.usersCache.set(data,armory_trait_physics_bullet_RigidBody.usersCache.get(data) + 1);
			return triangleMesh;
		}
		triangleMesh = new Ammo.btTriangleMesh(true,true);
		armory_trait_physics_bullet_RigidBody.triangleMeshCache.set(data,triangleMesh);
		armory_trait_physics_bullet_RigidBody.usersCache.set(data,1);
		var positions = data.geom.positions.values;
		var indices = data.geom.indices;
		var sx = scale.x * 3.0518509475997192e-005;
		var sy = scale.y * 3.0518509475997192e-005;
		var sz = scale.z * 3.0518509475997192e-005;
		if(data.raw.scale_pos != null) {
			sx *= data.raw.scale_pos;
			sy *= data.raw.scale_pos;
			sz *= data.raw.scale_pos;
		}
		var _g = 0;
		while(_g < indices.length) {
			var ar = indices[_g];
			++_g;
			var _g1 = 0;
			var _g11 = Std.int(ar.length / 3);
			while(_g1 < _g11) {
				var i = _g1++;
				armory_trait_physics_bullet_RigidBody.vec1.setX(positions[ar[i * 3] * 4] * sx);
				armory_trait_physics_bullet_RigidBody.vec1.setY(positions[ar[i * 3] * 4 + 1] * sy);
				armory_trait_physics_bullet_RigidBody.vec1.setZ(positions[ar[i * 3] * 4 + 2] * sz);
				armory_trait_physics_bullet_RigidBody.vec2.setX(positions[ar[i * 3 + 1] * 4] * sx);
				armory_trait_physics_bullet_RigidBody.vec2.setY(positions[ar[i * 3 + 1] * 4 + 1] * sy);
				armory_trait_physics_bullet_RigidBody.vec2.setZ(positions[ar[i * 3 + 1] * 4 + 2] * sz);
				armory_trait_physics_bullet_RigidBody.vec3.setX(positions[ar[i * 3 + 2] * 4] * sx);
				armory_trait_physics_bullet_RigidBody.vec3.setY(positions[ar[i * 3 + 2] * 4 + 1] * sy);
				armory_trait_physics_bullet_RigidBody.vec3.setZ(positions[ar[i * 3 + 2] * 4 + 2] * sz);
				triangleMesh.addTriangle(armory_trait_physics_bullet_RigidBody.vec1,armory_trait_physics_bullet_RigidBody.vec2,armory_trait_physics_bullet_RigidBody.vec3);
			}
		}
		return triangleMesh;
	}
	,'delete': function() {
		Ammo.destroy(this.motionState);
		Ammo.destroy(this.body);
		if(this.shape == 2 || this.shape == 3) {
			var data = (js_Boot.__cast(this.object , iron_object_MeshObject)).data;
			var i = armory_trait_physics_bullet_RigidBody.usersCache.get(data) - 1;
			armory_trait_physics_bullet_RigidBody.usersCache.set(data,i);
			if(i <= 0) {
				this.deleteShape();
				if(this.shape == 2) {
					armory_trait_physics_bullet_RigidBody.convexHullCache.remove(data);
				} else {
					armory_trait_physics_bullet_RigidBody.triangleMeshCache.remove(data);
				}
			}
		} else {
			this.deleteShape();
		}
	}
	,deleteShape: function() {
		Ammo.destroy(this.btshape);
	}
	,__class__: armory_trait_physics_bullet_RigidBody
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[StringTools.fastCodeAt(haxe_Unserializer.BASE64,i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,get: function(p) {
		return StringTools.fastCodeAt(this.buf,p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.get(this.pos);
			if(StringTools.isEof(c)) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.get(this.pos);
			if(StringTools.isEof(c)) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.get(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			Reflect.setField(o,k,v);
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.get(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.get(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.get(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.get(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.get(this.pos) != 104) {
				var s1 = this.unserialize();
				h1.set(s1,this.unserialize());
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl)[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.get(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h2.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = haxe_io_Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.get(this.pos) >= 48 && this.get(this.pos) <= 57 && this.get(this.pos + 1) >= 48 && this.get(this.pos + 1) <= 57 && this.get(this.pos + 2) >= 48 && this.get(this.pos + 2) <= 57 && this.get(this.pos + 3) >= 48 && this.get(this.pos + 3) <= 57 && this.get(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = StringTools.urlDecode(s2);
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = StringTools.fastCodeAt(s,i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = StringTools.fastCodeAt(s,i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | StringTools.fastCodeAt(s,i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		this.initData();
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		this.initData();
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		this.initData();
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		this.initData();
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		this.initData();
		return this.data.getUint16(pos,true);
	}
	,getInt32: function(pos) {
		this.initData();
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		this.initData();
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = Std.int(b.length * 8 / nbits);
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0 ? 0 : 1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.get(buf >> curbits & mask));
		}
		if(curbits > 0) {
			out.set(pout++,base.get(buf << nbits - curbits & mask));
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) this.h.hasOwnProperty(key) ? a.push(key | 0) : null;
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return (obj.__id__ = js_Lib.getNextHaxeUID());
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = haxe_ds_ObjectMap.getId(key) || haxe_ds_ObjectMap.assignId(key);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[haxe_ds_ObjectMap.getId(key)];
	}
	,remove: function(key) {
		var id = haxe_ds_ObjectMap.getId(key);
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,isReserved: function(key) {
		return __map_reserved[key] != null;
	}
	,set: function(key,value) {
		if(this.isReserved(key)) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(this.isReserved(key)) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(this.isReserved(key)) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(this.isReserved(key)) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return haxe_io_Bytes.alloc(0);
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = haxe_io_Bytes.alloc(nbytes);
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readInt8: function() {
		var n = this.readByte();
		if(n >= 128) {
			return n - 256;
		}
		return n;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = haxe_io_Bytes.alloc(len);
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,get_position: function() {
		return this.pos;
	}
	,get_length: function() {
		return this.totlen;
	}
	,set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.get_length()) {
			p = this.get_length();
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
	,__properties__: $extend(haxe_io_Input.prototype.__properties__,{get_length:"get_length",set_position:"set_position",get_position:"get_position"})
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeInt16: function(x) {
		if(x < -32768 || x >= 32768) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		this.writeUInt16(x & 65535);
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
var haxe_io__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["haxe.io._UInt8Array.UInt8Array_Impl_"] = haxe_io__$UInt8Array_UInt8Array_$Impl_$;
haxe_io__$UInt8Array_UInt8Array_$Impl_$.__name__ = "haxe.io._UInt8Array.UInt8Array_Impl_";
haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.getData(),bytePos,length);
};
var iron_App = function(_appReady) {
	_appReady();
	kha_System.notifyOnFrames(iron_App.render);
	kha_Scheduler.addTimeTask(iron_App.update,0,iron_system_Time.get_delta());
};
$hxClasses["iron.App"] = iron_App;
iron_App.__name__ = "iron.App";
iron_App.w = function() {
	return kha_System.windowWidth();
};
iron_App.h = function() {
	return kha_System.windowHeight();
};
iron_App.x = function() {
	return 0;
};
iron_App.y = function() {
	return 0;
};
iron_App.init = function(_appReady) {
	new iron_App(_appReady);
};
iron_App.reset = function() {
	iron_App.traitInits = [];
	iron_App.traitUpdates = [];
	iron_App.traitLateUpdates = [];
	iron_App.traitRenders = [];
	iron_App.traitRenders2D = [];
	if(iron_App.onResets != null) {
		var _g = 0;
		var _g1 = iron_App.onResets;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f();
		}
	}
};
iron_App.update = function() {
	if(iron_Scene.active == null || !iron_Scene.active.ready) {
		return;
	}
	if(iron_App.pauseUpdates) {
		return;
	}
	iron_Scene.active.updateFrame();
	var i = 0;
	var l = iron_App.traitUpdates.length;
	while(i < l) {
		if(iron_App.traitInits.length > 0) {
			var _g = 0;
			var _g1 = iron_App.traitInits;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if(iron_App.traitInits.length > 0) {
					f();
				} else {
					break;
				}
			}
			iron_App.traitInits.splice(0,iron_App.traitInits.length);
		}
		iron_App.traitUpdates[i]();
		if(l <= iron_App.traitUpdates.length) {
			++i;
		} else {
			l = iron_App.traitUpdates.length;
		}
	}
	i = 0;
	l = iron_App.traitLateUpdates.length;
	while(i < l) {
		iron_App.traitLateUpdates[i]();
		if(l <= iron_App.traitLateUpdates.length) {
			++i;
		} else {
			l = iron_App.traitLateUpdates.length;
		}
	}
	if(iron_App.onEndFrames != null) {
		var _g2 = 0;
		var _g11 = iron_App.onEndFrames;
		while(_g2 < _g11.length) {
			var f1 = _g11[_g2];
			++_g2;
			f1();
		}
	}
	if(iron_App.lastw == -1) {
		iron_App.lastw = iron_App.w();
		iron_App.lasth = iron_App.h();
	}
	if(iron_App.lastw != iron_App.w() || iron_App.lasth != iron_App.h()) {
		if(iron_App.onResize != null) {
			iron_App.onResize();
		} else if(iron_Scene.active != null && iron_Scene.active.camera != null) {
			iron_Scene.active.camera.buildProjection();
		}
	}
	iron_App.lastw = iron_App.w();
	iron_App.lasth = iron_App.h();
};
iron_App.render = function(frames) {
	var frame = frames[0];
	iron_App.framebuffer = frame;
	iron_system_Time.update();
	if(iron_Scene.active == null || !iron_Scene.active.ready) {
		iron_App.render2D(frame);
		return;
	}
	if(iron_App.traitInits.length > 0) {
		var _g = 0;
		var _g1 = iron_App.traitInits;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(iron_App.traitInits.length > 0) {
				f();
			} else {
				break;
			}
		}
		iron_App.traitInits.splice(0,iron_App.traitInits.length);
	}
	iron_Scene.active.renderFrame(frame.get_g4());
	var _g2 = 0;
	var _g11 = iron_App.traitRenders;
	while(_g2 < _g11.length) {
		var f1 = _g11[_g2];
		++_g2;
		if(iron_App.traitRenders.length > 0) {
			f1(frame.get_g4());
		} else {
			break;
		}
	}
	iron_App.render2D(frame);
};
iron_App.render2D = function(frame) {
	if(iron_App.traitRenders2D.length > 0) {
		frame.get_g2().begin(false);
		var _g = 0;
		var _g1 = iron_App.traitRenders2D;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(iron_App.traitRenders2D.length > 0) {
				f(frame.get_g2());
			} else {
				break;
			}
		}
		frame.get_g2().end();
	}
};
iron_App.notifyOnInit = function(f) {
	iron_App.traitInits.push(f);
};
iron_App.removeInit = function(f) {
	HxOverrides.remove(iron_App.traitInits,f);
};
iron_App.notifyOnUpdate = function(f) {
	iron_App.traitUpdates.push(f);
};
iron_App.removeUpdate = function(f) {
	HxOverrides.remove(iron_App.traitUpdates,f);
};
iron_App.notifyOnLateUpdate = function(f) {
	iron_App.traitLateUpdates.push(f);
};
iron_App.removeLateUpdate = function(f) {
	HxOverrides.remove(iron_App.traitLateUpdates,f);
};
iron_App.notifyOnRender = function(f) {
	iron_App.traitRenders.push(f);
};
iron_App.removeRender = function(f) {
	HxOverrides.remove(iron_App.traitRenders,f);
};
iron_App.notifyOnRender2D = function(f) {
	iron_App.traitRenders2D.push(f);
};
iron_App.removeRender2D = function(f) {
	HxOverrides.remove(iron_App.traitRenders2D,f);
};
iron_App.notifyOnReset = function(f) {
	if(iron_App.onResets == null) {
		iron_App.onResets = [];
	}
	iron_App.onResets.push(f);
};
iron_App.removeReset = function(f) {
	HxOverrides.remove(iron_App.onResets,f);
};
iron_App.notifyOnEndFrame = function(f) {
	if(iron_App.onEndFrames == null) {
		iron_App.onEndFrames = [];
	}
	iron_App.onEndFrames.push(f);
};
iron_App.removeEndFrame = function(f) {
	HxOverrides.remove(iron_App.onEndFrames,f);
};
iron_App.prototype = {
	__class__: iron_App
};
var iron_RenderPath = function() {
	this.depthBuffers = [];
	this.cachedShaderContexts = new haxe_ds_StringMap();
	this.loading = 0;
	this.lastFrameTime = 0.0;
	this.viewportScaled = false;
	this.scissorSet = false;
	this.lastH = 0;
	this.lastW = 0;
	this.depthToRenderTarget = new haxe_ds_StringMap();
	this.renderTargets = new haxe_ds_StringMap();
	this.commands = null;
	this.paused = false;
	this.drawOrder = 0;
	this.currentG = null;
	this.isProbe = false;
	this.isProbeCube = false;
	this.isProbePlanar = false;
	this.point = null;
	this.sun = null;
	this.light = null;
	this.currentTarget = null;
	this.frame = 0;
	this.frameTime = 0.0;
	this.frameScissorH = 0;
	this.frameScissorW = 0;
	this.frameScissorY = 0;
	this.frameScissorX = 0;
	this.frameScissor = false;
};
$hxClasses["iron.RenderPath"] = iron_RenderPath;
iron_RenderPath.__name__ = "iron.RenderPath";
iron_RenderPath.setActive = function(renderPath) {
	iron_RenderPath.active = renderPath;
};
iron_RenderPath.sortMeshesDistance = function(meshes) {
	meshes.sort(function(a,b) {
		if(a.cameraDistance >= b.cameraDistance) {
			return 1;
		} else {
			return -1;
		}
	});
};
iron_RenderPath.sortMeshesShader = function(meshes) {
	meshes.sort(function(a,b) {
		if(a.materials[0].name >= b.materials[0].name) {
			return 1;
		} else {
			return -1;
		}
	});
};
iron_RenderPath.prototype = {
	frameScissor: null
	,frameScissorX: null
	,frameScissorY: null
	,frameScissorW: null
	,frameScissorH: null
	,frameTime: null
	,frame: null
	,currentTarget: null
	,currentFace: null
	,light: null
	,sun: null
	,point: null
	,isProbePlanar: null
	,isProbeCube: null
	,isProbe: null
	,currentG: null
	,frameG: null
	,drawOrder: null
	,paused: null
	,ready: null
	,get_ready: function() {
		return this.loading == 0;
	}
	,commands: null
	,renderTargets: null
	,depthToRenderTarget: null
	,currentW: null
	,currentH: null
	,currentD: null
	,lastW: null
	,lastH: null
	,bindParams: null
	,meshesSorted: null
	,scissorSet: null
	,viewportScaled: null
	,lastFrameTime: null
	,loading: null
	,cachedShaderContexts: null
	,depthBuffers: null
	,additionalTargets: null
	,renderFrame: function(g) {
		if(!this.get_ready() || this.paused || iron_App.w() == 0 || iron_App.h() == 0) {
			return;
		}
		if(this.lastW > 0 && (this.lastW != iron_App.w() || this.lastH != iron_App.h())) {
			this.resize();
		}
		this.lastW = iron_App.w();
		this.lastH = iron_App.h();
		this.frameTime = iron_system_Time.time() - this.lastFrameTime;
		this.lastFrameTime = iron_system_Time.time();
		var cam = iron_Scene.active.camera;
		this.isProbePlanar = cam != null && cam.renderTarget != null;
		this.isProbeCube = cam != null && cam.renderTargetCube != null;
		this.isProbe = this.isProbePlanar || this.isProbeCube;
		if(this.isProbePlanar) {
			this.frameG = cam.renderTarget.get_g4();
		} else if(this.isProbeCube) {
			this.frameG = cam.renderTargetCube.get_g4();
		} else {
			this.frameG = g;
		}
		this.currentW = iron_App.w();
		this.currentH = iron_App.h();
		this.currentD = 1;
		this.currentFace = -1;
		this.meshesSorted = false;
		var _g = 0;
		var _g1 = iron_Scene.active.lights;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.visible) {
				l.buildMatrix(iron_Scene.active.camera);
			}
			if(l.data.raw.type == "sun") {
				this.sun = l;
			} else {
				this.point = l;
			}
		}
		this.light = iron_Scene.active.lights[0];
		this.commands();
		if(!this.isProbe) {
			this.frame++;
		}
	}
	,setTarget: function(target,additional,viewportScale) {
		if(viewportScale == null) {
			viewportScale = 1.0;
		}
		if(target == "") {
			this.currentD = 1;
			this.currentTarget = null;
			this.currentFace = -1;
			if(this.isProbeCube) {
				this.currentW = iron_Scene.active.camera.renderTargetCube.get_width();
				this.currentH = iron_Scene.active.camera.renderTargetCube.get_height();
				this.begin(this.frameG,null,iron_Scene.active.camera.currentFace);
			} else {
				this.currentW = iron_App.w();
				this.currentH = iron_App.h();
				if(this.frameScissor) {
					this.setFrameScissor();
				}
				this.begin(this.frameG);
			}
		} else {
			var rt = this.renderTargets.get(target);
			this.currentTarget = rt;
			var additionalImages = null;
			if(additional != null) {
				additionalImages = [];
				var _g = 0;
				while(_g < additional.length) {
					var s = additional[_g];
					++_g;
					var t = this.renderTargets.get(s);
					additionalImages.push(t.image);
				}
			}
			var targetG = rt.isCubeMap ? rt.cubeMap.get_g4() : rt.image.get_g4();
			this.currentW = rt.isCubeMap ? rt.cubeMap.get_width() : rt.image.get_width();
			this.currentH = rt.isCubeMap ? rt.cubeMap.get_height() : rt.image.get_height();
			if(rt.is3D) {
				this.currentD = rt.image.get_depth();
			}
			this.begin(targetG,additionalImages,this.currentFace);
		}
		if(viewportScale != 1.0) {
			this.viewportScaled = true;
			var viewW = Std.int(this.currentW * viewportScale);
			var viewH = Std.int(this.currentH * viewportScale);
			this.currentG.viewport(0,viewH,viewW,viewH);
			this.currentG.scissor(0,viewH,viewW,viewH);
		} else if(this.viewportScaled) {
			this.viewportScaled = false;
			this.setCurrentViewport(this.currentW,this.currentH);
			this.setCurrentScissor(this.currentW,this.currentH);
		}
		this.bindParams = null;
	}
	,setDepthFrom: function(target,from) {
		var rt = this.renderTargets.get(target);
		rt.image.setDepthStencilFrom(this.renderTargets.get(from).image);
	}
	,begin: function(g,additionalRenderTargets,face) {
		if(face == null) {
			face = -1;
		}
		if(this.currentG != null) {
			this.end();
		}
		this.currentG = g;
		this.additionalTargets = additionalRenderTargets;
		if(face >= 0) {
			g.beginFace(face);
		} else {
			g.begin(additionalRenderTargets);
		}
	}
	,end: function() {
		if(this.scissorSet) {
			this.currentG.disableScissor();
			this.scissorSet = false;
		}
		this.currentG.end();
		this.currentG = null;
		this.bindParams = null;
	}
	,setCurrentViewport: function(viewW,viewH) {
		this.currentG.viewport(iron_App.x(),this.currentH - (viewH - iron_App.y()),viewW,viewH);
	}
	,setCurrentScissor: function(viewW,viewH) {
		this.currentG.scissor(iron_App.x(),this.currentH - (viewH - iron_App.y()),viewW,viewH);
		this.scissorSet = true;
	}
	,setFrameScissor: function() {
		this.frameG.scissor(this.frameScissorX,this.currentH - (this.frameScissorH - this.frameScissorY),this.frameScissorW,this.frameScissorH);
	}
	,setViewport: function(viewW,viewH) {
		this.setCurrentViewport(viewW,viewH);
		this.setCurrentScissor(viewW,viewH);
	}
	,clearTarget: function(colorFlag,depthFlag) {
		if(colorFlag == -1) {
			if(iron_Scene.active.world != null) {
				colorFlag = iron_Scene.active.world.raw.background_color;
			} else if(iron_Scene.active.camera != null) {
				var cc = iron_Scene.active.camera.data.raw.clear_color;
				if(cc != null) {
					colorFlag = kha__$Color_Color_$Impl_$.fromFloats(cc[0],cc[1],cc[2]);
				}
			}
		}
		this.currentG.clear(colorFlag,depthFlag,null);
	}
	,clearImage: function(target,color) {
		var rt = this.renderTargets.get(target);
		rt.image.clear(0,0,0,rt.image.get_width(),rt.image.get_height(),rt.image.get_depth(),color);
	}
	,generateMipmaps: function(target) {
		var rt = this.renderTargets.get(target);
		rt.image.generateMipmaps(1000);
	}
	,drawMeshes: function(context) {
		var isShadows = context == "shadowmap";
		if(isShadows) {
			if(this.light == null || !this.light.data.raw.cast_shadow || !this.light.visible || this.light.data.raw.strength == 0) {
				return;
			}
		}
		if(this.currentFace >= 0 && this.light != null) {
			this.light.setCubeFace(this.currentFace,iron_Scene.active.camera);
		}
		var drawn = false;
		if(isShadows && this.light.data.raw.type == "sun") {
			var step = this.currentH;
			var _g = 0;
			var _g1 = iron_object_LightObject.cascadeCount;
			while(_g < _g1) {
				var i = _g++;
				this.light.setCascade(iron_Scene.active.camera,i);
				this.currentG.viewport(i * step,0,step,step);
				this.submitDraw(context);
			}
			drawn = true;
		}
		if(context == "mesh") {
			iron_object_LightObject.updateClusters(iron_Scene.active.camera);
		}
		if(!drawn) {
			this.submitDraw(context);
		}
		this.end();
	}
	,submitDraw: function(context) {
		var camera = iron_Scene.active.camera;
		var meshes = iron_Scene.active.meshes;
		iron_object_MeshObject.lastPipeline = null;
		if(!this.meshesSorted && camera != null) {
			var camX = camera.transform.worldx();
			var camY = camera.transform.worldy();
			var camZ = camera.transform.worldz();
			var _g = 0;
			while(_g < meshes.length) {
				var mesh = meshes[_g];
				++_g;
				mesh.computeCameraDistance(camX,camY,camZ);
			}
			if(this.drawOrder == 1) {
				iron_RenderPath.sortMeshesShader(meshes);
			} else {
				iron_RenderPath.sortMeshesDistance(meshes);
			}
			this.meshesSorted = true;
		}
		var _g1 = 0;
		while(_g1 < meshes.length) {
			var m = meshes[_g1];
			++_g1;
			m.render(this.currentG,context,this.bindParams);
		}
	}
	,drawSkydome: function(handle) {
		if(iron_data_ConstData.skydomeVB == null) {
			iron_data_ConstData.createSkydomeData();
		}
		var cc = this.cachedShaderContexts.get(handle);
		if(cc.context == null) {
			return;
		}
		this.currentG.setPipeline(cc.context.pipeState);
		iron_object_Uniforms.setContextConstants(this.currentG,cc.context,this.bindParams);
		iron_object_Uniforms.setObjectConstants(this.currentG,cc.context,null);
		this.currentG.setVertexBuffer(iron_data_ConstData.skydomeVB);
		this.currentG.setIndexBuffer(iron_data_ConstData.skydomeIB);
		this.currentG.drawIndexedVertices();
		this.end();
	}
	,bindTarget: function(target,uniform) {
		if(this.bindParams != null) {
			this.bindParams.push(target);
			this.bindParams.push(uniform);
		} else {
			this.bindParams = [target,uniform];
		}
	}
	,drawShader: function(handle) {
		var cc = this.cachedShaderContexts.get(handle);
		if(iron_data_ConstData.screenAlignedVB == null) {
			iron_data_ConstData.createScreenAlignedData();
		}
		this.currentG.setPipeline(cc.context.pipeState);
		iron_object_Uniforms.setContextConstants(this.currentG,cc.context,this.bindParams);
		iron_object_Uniforms.setObjectConstants(this.currentG,cc.context,null);
		this.currentG.setVertexBuffer(iron_data_ConstData.screenAlignedVB);
		this.currentG.setIndexBuffer(iron_data_ConstData.screenAlignedIB);
		this.currentG.drawIndexedVertices();
		this.end();
	}
	,getComputeShader: function(handle) {
		return Reflect.field(kha_Shaders,handle + "_comp");
	}
	,loadShader: function(handle) {
		var _gthis = this;
		this.loading++;
		var cc = this.cachedShaderContexts.get(handle);
		if(cc != null) {
			this.loading--;
			return;
		}
		cc = new iron_CachedShaderContext();
		this.cachedShaderContexts.set(handle,cc);
		var shaderPath = handle.split("/");
		iron_data_Data.getShader(shaderPath[0],shaderPath[1],function(res) {
			cc.context = res.getContext(shaderPath[2]);
			_gthis.loading--;
		});
	}
	,unload: function() {
		var rt = this.renderTargets.iterator();
		while(rt.hasNext()) {
			var rt1 = rt.next();
			rt1.unload();
		}
	}
	,resize: function() {
		if(kha_System.windowWidth() == 0 || kha_System.windowHeight() == 0) {
			return;
		}
		var rt = this.renderTargets.iterator();
		while(rt.hasNext()) {
			var rt1 = rt.next();
			if(rt1.raw.width > 0 || rt1.depthStencilFrom == "" || rt1 == this.depthToRenderTarget.get(rt1.depthStencilFrom)) {
				continue;
			}
			var nodepth = null;
			var rt2 = this.renderTargets.iterator();
			while(rt2.hasNext()) {
				var rt21 = rt2.next();
				if(rt21.raw.width > 0 || rt21.depthStencilFrom != "" || this.depthToRenderTarget.get(rt21.raw.depth_buffer) != null) {
					continue;
				}
				nodepth = rt21;
				break;
			}
			if(nodepth != null) {
				rt1.image.setDepthStencilFrom(nodepth.image);
			}
		}
		var rt3 = this.renderTargets.iterator();
		while(rt3.hasNext()) {
			var rt4 = rt3.next();
			if(rt4.raw.width == 0) {
				rt4.image.unload();
				rt4.image = this.createImage(rt4.raw,rt4.depthStencil);
			}
		}
		var rt5 = this.renderTargets.iterator();
		while(rt5.hasNext()) {
			var rt6 = rt5.next();
			if(rt6.depthStencilFrom != "") {
				rt6.image.setDepthStencilFrom(this.depthToRenderTarget.get(rt6.depthStencilFrom).image);
			}
		}
	}
	,createRenderTarget: function(t) {
		var rt = this.createTarget(t);
		this.renderTargets.set(t.name,rt);
		return rt;
	}
	,createDepthBuffer: function(name,format) {
		this.depthBuffers.push({ name : name, format : format});
	}
	,createTarget: function(t) {
		var rt = new iron_RenderTarget(t);
		if(t.depth_buffer != null) {
			rt.hasDepth = true;
			var depthTarget = this.depthToRenderTarget.get(t.depth_buffer);
			if(depthTarget == null) {
				var _g = 0;
				var _g1 = this.depthBuffers;
				while(_g < _g1.length) {
					var db = _g1[_g];
					++_g;
					if(db.name == t.depth_buffer) {
						this.depthToRenderTarget.set(db.name,rt);
						rt.depthStencil = this.getDepthStencilFormat(db.format);
						rt.image = this.createImage(t,rt.depthStencil);
						break;
					}
				}
			} else {
				rt.depthStencil = 0;
				rt.depthStencilFrom = t.depth_buffer;
				rt.image = this.createImage(t,rt.depthStencil);
				rt.image.setDepthStencilFrom(depthTarget.image);
			}
		} else {
			rt.hasDepth = false;
			if(t.depth != null && t.depth > 1) {
				rt.is3D = true;
			}
			if(t.is_cubemap) {
				rt.isCubeMap = true;
				rt.depthStencil = 0;
				rt.cubeMap = this.createCubeMap(t,rt.depthStencil);
			} else {
				rt.depthStencil = 0;
				rt.image = this.createImage(t,rt.depthStencil);
			}
		}
		return rt;
	}
	,createImage: function(t,depthStencil) {
		var width = t.width == 0 ? iron_App.w() : t.width;
		var height = t.height == 0 ? iron_App.h() : t.height;
		var depth = t.depth != null ? t.depth : 0;
		if(t.displayp != null) {
			if(width > height) {
				width = Std.int(width * (t.displayp / height));
				height = t.displayp;
			} else {
				height = Std.int(height * (t.displayp / width));
				width = t.displayp;
			}
		}
		if(t.scale != null) {
			width = Std.int(width * t.scale);
			height = Std.int(height * t.scale);
			depth = Std.int(depth * t.scale);
		}
		if(width < 1) {
			width = 1;
		}
		if(height < 1) {
			height = 1;
		}
		if(t.depth != null && t.depth > 1) {
			var img = kha_Image.create3D(width,height,depth,t.format != null ? this.getTextureFormat(t.format) : 0);
			if(t.mipmaps) {
				img.generateMipmaps(1000);
			}
			return img;
		} else if(t.is_image != null && t.is_image) {
			return kha_Image.create(width,height,t.format != null ? this.getTextureFormat(t.format) : 0);
		} else {
			return kha_Image.createRenderTarget(width,height,t.format != null ? this.getTextureFormat(t.format) : 0,depthStencil);
		}
	}
	,createCubeMap: function(t,depthStencil) {
		return kha_graphics4_CubeMap.createRenderTarget(t.width,t.format != null ? this.getTextureFormat(t.format) : 0,depthStencil);
	}
	,getTextureFormat: function(s) {
		switch(s) {
		case "DEPTH16":
			return 3;
		case "R16":
			return 6;
		case "R32":
			return 5;
		case "R8":
			return 1;
		case "RGBA128":
			return 2;
		case "RGBA32":
			return 0;
		case "RGBA64":
			return 4;
		default:
			return 0;
		}
	}
	,getDepthStencilFormat: function(s) {
		if(s == null || s == "") {
			return 1;
		}
		switch(s) {
		case "DEPTH16":
			return 5;
		case "DEPTH24":
			return 1;
		default:
			return 1;
		}
	}
	,__class__: iron_RenderPath
	,__properties__: {get_ready:"get_ready"}
};
var iron_RenderTargetRaw = function() {
	this.is_cubemap = null;
	this.is_image = null;
	this.depth = null;
	this.mipmaps = null;
	this.depth_buffer = null;
	this.displayp = null;
	this.scale = null;
	this.format = null;
};
$hxClasses["iron.RenderTargetRaw"] = iron_RenderTargetRaw;
iron_RenderTargetRaw.__name__ = "iron.RenderTargetRaw";
iron_RenderTargetRaw.prototype = {
	name: null
	,width: null
	,height: null
	,format: null
	,scale: null
	,displayp: null
	,depth_buffer: null
	,mipmaps: null
	,depth: null
	,is_image: null
	,is_cubemap: null
	,__class__: iron_RenderTargetRaw
};
var iron_RenderTarget = function(raw) {
	this.isCubeMap = false;
	this.is3D = false;
	this.hasDepth = false;
	this.cubeMap = null;
	this.image = null;
	this.depthStencilFrom = "";
	this.raw = raw;
};
$hxClasses["iron.RenderTarget"] = iron_RenderTarget;
iron_RenderTarget.__name__ = "iron.RenderTarget";
iron_RenderTarget.prototype = {
	raw: null
	,depthStencil: null
	,depthStencilFrom: null
	,image: null
	,cubeMap: null
	,hasDepth: null
	,is3D: null
	,isCubeMap: null
	,unload: function() {
		if(this.image != null) {
			this.image.unload();
		}
		if(this.cubeMap != null) {
			this.cubeMap.unload();
		}
	}
	,__class__: iron_RenderTarget
};
var iron_CachedShaderContext = function() {
};
$hxClasses["iron.CachedShaderContext"] = iron_CachedShaderContext;
iron_CachedShaderContext.__name__ = "iron.CachedShaderContext";
iron_CachedShaderContext.prototype = {
	context: null
	,__class__: iron_CachedShaderContext
};
var iron_Scene = function() {
	this.traitRemoves = [];
	this.traitInits = [];
	this.groups = null;
	this.uid = iron_Scene.uidCounter++;
	this.meshes = [];
	this.lights = [];
	this.cameras = [];
	this.speakers = [];
	this.empties = [];
	this.animations = [];
	this.armatures = [];
	this.embedded = new haxe_ds_StringMap();
	this.root = new iron_object_Object();
	this.root.name = "Root";
	this.traitInits = [];
	this.traitRemoves = [];
	this.initializing = true;
	if(iron_Scene.global == null) {
		iron_Scene.global = new iron_object_Object();
	}
};
$hxClasses["iron.Scene"] = iron_Scene;
iron_Scene.__name__ = "iron.Scene";
iron_Scene.create = function(format,done) {
	iron_Scene.active = new iron_Scene();
	iron_Scene.active.ready = false;
	iron_Scene.active.raw = format;
	iron_data_Data.getWorld(format.name,format.world_ref,function(world) {
		iron_Scene.active.world = world;
		iron_Scene.active.addScene(format.name,null,function(sceneObject) {
			var _g = 0;
			var _g1 = sceneObject.getChildren(true);
			while(_g < _g1.length) {
				var object = _g1[_g];
				++_g;
				iron_Scene.createTraits(iron_Scene.getRawObjectByName(format,object.name).traits,object);
			}
			if(iron_Scene.active.cameras.length == 0) {
				haxe_Log.trace("No camera found for scene \"" + format.name + "\"",{ fileName : "Sources/iron/Scene.hx", lineNumber : 131, className : "iron.Scene", methodName : "create"});
			}
			iron_Scene.active.camera = iron_Scene.active.getCamera(format.camera_ref);
			iron_Scene.active.ready = true;
			var _g2 = 0;
			var _g3 = iron_Scene.active.traitInits;
			while(_g2 < _g3.length) {
				var f = _g3[_g2];
				++_g2;
				f();
			}
			iron_Scene.active.traitInits = [];
			iron_Scene.active.sceneParent = sceneObject;
			iron_Scene.active.initializing = false;
			done(sceneObject);
		});
	});
};
iron_Scene.setActive = function(sceneName,done) {
	if(!iron_Scene.framePassed) {
		return;
	}
	iron_Scene.framePassed = false;
	if(iron_Scene.active != null) {
		iron_Scene.active.remove();
	}
	iron_data_Data.getSceneRaw(sceneName,function(format) {
		iron_Scene.create(format,function(o) {
			if(done != null) {
				done(o);
			}
		});
	});
};
iron_Scene.getRawObjectByName = function(format,name) {
	return iron_Scene.traverseObjs(format.objects,name);
};
iron_Scene.traverseObjs = function(children,name) {
	var _g = 0;
	while(_g < children.length) {
		var o = children[_g];
		++_g;
		if(o.name == name) {
			return o;
		}
		if(o.children != null) {
			var res = iron_Scene.traverseObjs(o.children,name);
			if(res != null) {
				return res;
			}
		}
	}
	return null;
};
iron_Scene.generateTransform = function(object,transform) {
	transform.world = object.transform != null ? iron_math_Mat4.fromFloat32Array(object.transform.values) : iron_math_Mat4.identity();
	transform.world.decompose(transform.loc,transform.rot,transform.scale);
	if(object.local_only != null) {
		transform.localOnly = object.local_only;
	}
	if(transform.object.parent != null) {
		transform.update();
	}
};
iron_Scene.createTraits = function(traits,object) {
	if(traits == null) {
		return;
	}
	var _g = 0;
	while(_g < traits.length) {
		var t = traits[_g];
		++_g;
		if(t.type == "Script") {
			var args = [];
			if(t.parameters != null) {
				var _g1 = 0;
				var _g11 = t.parameters;
				while(_g1 < _g11.length) {
					var param = _g11[_g1];
					++_g1;
					args.push(iron_Scene.parseArg(param));
				}
			}
			var traitInst = iron_Scene.createTraitClassInstance(t.class_name,args);
			if(traitInst == null) {
				haxe_Log.trace("Error: Trait '" + t.class_name + "' referenced in object '" + object.name + "' not found",{ fileName : "Sources/iron/Scene.hx", lineNumber : 799, className : "iron.Scene", methodName : "createTraits"});
				continue;
			}
			if(t.props != null) {
				var _g2 = 0;
				var _g12 = Std.int(t.props.length / 3);
				while(_g2 < _g12) {
					var i = _g2++;
					var pname = t.props[i * 3];
					var ptype = t.props[i * 3 + 1];
					var pval = t.props[i * 3 + 2];
					if(StringTools.endsWith(ptype,"Object") && pval != "") {
						Reflect.setProperty(traitInst,pname,iron_Scene.active.getChild(pval));
					} else {
						switch(ptype) {
						case "Vec2":
							Reflect.setProperty(traitInst,pname,new iron_math_Vec2(pval[0],pval[1]));
							break;
						case "Vec3":
							Reflect.setProperty(traitInst,pname,new iron_math_Vec3(pval[0],pval[1],pval[2]));
							break;
						case "Vec4":
							Reflect.setProperty(traitInst,pname,new iron_math_Vec4(pval[0],pval[1],pval[2],pval[3]));
							break;
						default:
							Reflect.setProperty(traitInst,pname,pval);
						}
					}
				}
			}
			object.addTrait(traitInst);
		}
	}
};
iron_Scene.parseArg = function(str) {
	if(str == "true") {
		return true;
	} else if(str == "false") {
		return false;
	} else if(str == "null") {
		return null;
	} else if(str.charAt(0) == "'") {
		return StringTools.replace(str,"'","");
	} else if(str.charAt(0) == "\"") {
		return StringTools.replace(str,"\"","");
	} else if(str.charAt(0) == "[") {
		str = StringTools.replace(str,"[","");
		str = StringTools.replace(str,"]","");
		str = StringTools.replace(str," ","");
		var ar = [];
		var vals = str.split(",");
		var _g = 0;
		while(_g < vals.length) {
			var v = vals[_g];
			++_g;
			ar.push(iron_Scene.parseArg(v));
		}
		return ar;
	} else {
		var f = Std.parseFloat(str);
		var i = Std.parseInt(str);
		if(f == i) {
			return i;
		} else {
			return f;
		}
	}
};
iron_Scene.createConstraints = function(constraints,object) {
	if(constraints == null) {
		return;
	}
	object.constraints = [];
	var _g = 0;
	while(_g < constraints.length) {
		var c = constraints[_g];
		++_g;
		var constr = new iron_object_Constraint(c);
		object.constraints.push(constr);
	}
};
iron_Scene.createTraitClassInstance = function(traitName,args) {
	var cname = Type.resolveClass(traitName);
	if(cname == null) {
		return null;
	}
	return Type.createInstance(cname,args);
};
iron_Scene.prototype = {
	uid: null
	,raw: null
	,root: null
	,sceneParent: null
	,camera: null
	,world: null
	,meshes: null
	,lights: null
	,cameras: null
	,speakers: null
	,empties: null
	,animations: null
	,armatures: null
	,groups: null
	,embedded: null
	,ready: null
	,traitInits: null
	,traitRemoves: null
	,initializing: null
	,remove: function() {
		var _g = 0;
		var _g1 = this.traitRemoves;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f();
		}
		var _g2 = 0;
		var _g3 = this.meshes;
		while(_g2 < _g3.length) {
			var o = _g3[_g2];
			++_g2;
			o.remove();
		}
		var _g4 = 0;
		var _g5 = this.lights;
		while(_g4 < _g5.length) {
			var o1 = _g5[_g4];
			++_g4;
			o1.remove();
		}
		var _g6 = 0;
		var _g7 = this.cameras;
		while(_g6 < _g7.length) {
			var o2 = _g7[_g6];
			++_g6;
			o2.remove();
		}
		var _g8 = 0;
		var _g9 = this.speakers;
		while(_g8 < _g9.length) {
			var o3 = _g9[_g8];
			++_g8;
			o3.remove();
		}
		var _g10 = 0;
		var _g11 = this.empties;
		while(_g10 < _g11.length) {
			var o4 = _g11[_g10];
			++_g10;
			o4.remove();
		}
		this.groups = null;
		this.root.remove();
	}
	,updateFrame: function() {
		if(!this.ready) {
			return;
		}
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var anim = _g1[_g];
			++_g;
			anim.update(iron_system_Time.get_delta());
		}
		var _g2 = 0;
		var _g3 = this.empties;
		while(_g2 < _g3.length) {
			var e = _g3[_g2];
			++_g2;
			if(e != null && e.parent != null) {
				e.transform.update();
			}
		}
	}
	,renderFrame: function(g) {
		if(!this.ready || iron_RenderPath.active == null) {
			return;
		}
		iron_Scene.framePassed = true;
		if(this.camera != null) {
			this.camera.renderFrame(g);
		} else {
			iron_RenderPath.active.renderFrame(g);
		}
	}
	,addObject: function(parent) {
		var object = new iron_object_Object();
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,getChildren: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		return this.root.getChildren(recursive);
	}
	,getChild: function(name) {
		return this.root.getChild(name);
	}
	,getTrait: function(c) {
		if(this.root.children.length > 0) {
			return this.root.children[0].getTrait(c);
		} else {
			return null;
		}
	}
	,getMesh: function(name) {
		var _g = 0;
		var _g1 = this.meshes;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.name == name) {
				return m;
			}
		}
		return null;
	}
	,getLight: function(name) {
		var _g = 0;
		var _g1 = this.lights;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.name == name) {
				return l;
			}
		}
		return null;
	}
	,getCamera: function(name) {
		var _g = 0;
		var _g1 = this.cameras;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == name) {
				return c;
			}
		}
		return null;
	}
	,getSpeaker: function(name) {
		var _g = 0;
		var _g1 = this.speakers;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.name == name) {
				return s;
			}
		}
		return null;
	}
	,getEmpty: function(name) {
		var _g = 0;
		var _g1 = this.empties;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.name == name) {
				return e;
			}
		}
		return null;
	}
	,getGroup: function(name) {
		if(this.groups == null) {
			this.groups = new haxe_ds_StringMap();
		}
		var g = this.groups.get(name);
		if(g == null) {
			g = [];
			this.groups.set(name,g);
			var refs = this.getGroupObjectRefs(name);
			if(refs == null) {
				return g;
			}
			var _g = 0;
			while(_g < refs.length) {
				var ref = refs[_g];
				++_g;
				var c = this.getChild(ref);
				if(c != null) {
					g.push(c);
				}
			}
		}
		return g;
	}
	,addMeshObject: function(data,materials,parent) {
		var object = new iron_object_MeshObject(data,materials);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addLightObject: function(data,parent) {
		var object = new iron_object_LightObject(data);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addCameraObject: function(data,parent) {
		var object = new iron_object_CameraObject(data);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addSpeakerObject: function(data,parent) {
		var object = new iron_object_SpeakerObject(data);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addScene: function(sceneName,parent,done) {
		var _gthis = this;
		if(parent == null) {
			parent = this.addObject();
			parent.name = sceneName;
		}
		iron_data_Data.getSceneRaw(sceneName,function(format) {
			iron_Scene.createTraits(format.traits,parent);
			_gthis.loadEmbeddedData(format.embedded_datas,function() {
				var objectsTraversed = 0;
				var objectsCount = _gthis.getObjectsCount(format.objects);
				var traverseObjects = null;
				traverseObjects = function(parent1,objects,parentObject,done1) {
					if(objects == null) {
						return;
					}
					var _g = 0;
					var _g1 = objects.length;
					while(_g < _g1) {
						var i = _g++;
						var o = [objects[i]];
						if(o[0].spawn != null && o[0].spawn == false) {
							if((objectsTraversed += 1) == objectsCount) {
								done1();
							}
							continue;
						}
						var o1 = o[0];
						var traverseObjects1 = (function(o2) {
							return function(object) {
								if(object != null) {
									traverseObjects(object,o2[0].children,o2[0],done1);
								}
								if((objectsTraversed += 1) == objectsCount) {
									done1();
								}
							};
						})(o);
						_gthis.createObject(o1,format,parent1,parentObject,traverseObjects1);
					}
				};
				if(format.objects == null || format.objects.length == 0) {
					done(parent);
				} else {
					traverseObjects(parent,format.objects,null,function() {
						done(parent);
					});
				}
			});
		});
	}
	,getObjectsCount: function(objects,discardNoSpawn) {
		if(discardNoSpawn == null) {
			discardNoSpawn = true;
		}
		if(objects == null) {
			return 0;
		}
		var result = objects.length;
		var _g = 0;
		while(_g < objects.length) {
			var o = objects[_g];
			++_g;
			if(discardNoSpawn && o.spawn != null && o.spawn == false) {
				continue;
			}
			if(o.children != null) {
				result += this.getObjectsCount(o.children);
			}
		}
		return result;
	}
	,spawnObject: function(name,parent,done,spawnChildren) {
		if(spawnChildren == null) {
			spawnChildren = true;
		}
		var _gthis = this;
		var objectsTraversed = 0;
		var obj = iron_Scene.getRawObjectByName(this.raw,name);
		var objectsCount = spawnChildren ? this.getObjectsCount([obj],false) : 1;
		var spawnObjectTree = null;
		spawnObjectTree = function(obj1,parent1,parentObject,done1) {
			_gthis.createObject(obj1,_gthis.raw,parent1,parentObject,function(object) {
				if(spawnChildren && obj1.children != null) {
					var _g = 0;
					var _g1 = obj1.children;
					while(_g < _g1.length) {
						var child = _g1[_g];
						++_g;
						spawnObjectTree(child,object,obj1,done1);
					}
				}
				if((objectsTraversed += 1) == objectsCount && done1 != null) {
					while(object.name != name) object = object.parent;
					done1(object);
				}
			});
		};
		spawnObjectTree(obj,parent,null,done);
	}
	,parseObject: function(sceneName,objectName,parent,done) {
		var _gthis = this;
		iron_data_Data.getSceneRaw(sceneName,function(format) {
			var o = iron_Scene.getRawObjectByName(format,objectName);
			if(o == null) {
				done(null);
			}
			_gthis.createObject(o,format,parent,null,done);
		});
	}
	,createObject: function(o,format,parent,parentObject,done) {
		var _gthis = this;
		var sceneName = format.name;
		if(o.type == "camera_object") {
			iron_data_Data.getCamera(sceneName,o.data_ref,function(b) {
				var object = _gthis.addCameraObject(b,parent);
				_gthis.returnObject(object,o,done);
			});
		} else if(o.type == "light_object") {
			iron_data_Data.getLight(sceneName,o.data_ref,function(b1) {
				var object1 = _gthis.addLightObject(b1,parent);
				_gthis.returnObject(object1,o,done);
			});
		} else if(o.type == "mesh_object") {
			if(o.material_refs == null || o.material_refs.length == 0) {
				this.createMeshObject(o,format,parent,parentObject,null,done);
			} else {
				var this1 = new Array(o.material_refs.length);
				var materials = this1;
				var materialsLoaded = 0;
				var _g = 0;
				var _g1 = o.material_refs.length;
				while(_g < _g1) {
					var i = [_g++];
					var ref = o.material_refs[i[0]];
					iron_data_Data.getMaterial(sceneName,ref,(function(i1) {
						return function(mat) {
							materials[i1[0]] = mat;
							materialsLoaded += 1;
							if(materialsLoaded == o.material_refs.length) {
								_gthis.createMeshObject(o,format,parent,parentObject,materials,done);
							}
						};
					})(i));
				}
			}
		} else if(o.type == "speaker_object") {
			var object2 = this.addSpeakerObject(iron_data_Data.getSpeakerRawByName(format.speaker_datas,o.data_ref),parent);
			this.returnObject(object2,o,done);
		} else if(o.type == "object") {
			var object3 = this.addObject(parent);
			this.returnObject(object3,o,function(ro) {
				if(o.group_ref != null) {
					var spawned = 0;
					var object_refs = _gthis.getGroupObjectRefs(o.group_ref);
					if(object_refs.length == 0) {
						done(ro);
					} else {
						var _g2 = 0;
						while(_g2 < object_refs.length) {
							var s = object_refs[_g2];
							++_g2;
							_gthis.spawnObject(s,ro,function(spawnedObject) {
								if(!_gthis.isObjectInGroup(o.group_ref,spawnedObject.parent)) {
									var _g3 = 0;
									var _g11 = format.groups;
									while(_g3 < _g11.length) {
										var group = _g11[_g3];
										++_g3;
										if(group.name == o.group_ref) {
											spawnedObject.transform.translate(-group.instance_offset[0],-group.instance_offset[1],-group.instance_offset[2]);
											break;
										}
									}
								}
								if((spawned += 1) == object_refs.length) {
									done(ro);
								}
							});
						}
					}
				} else {
					done(ro);
				}
			});
		} else {
			done(null);
		}
	}
	,getGroupObjectRefs: function(group_ref) {
		var _g = 0;
		var _g1 = iron_Scene.active.raw.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.name == group_ref) {
				return g.object_refs;
			}
		}
		return null;
	}
	,getGroupObjectsRaw: function(groupRef) {
		var objectRefs = this.getGroupObjectRefs(groupRef);
		var objects = [];
		if(objectRefs == null) {
			return objects;
		}
		var _g = 0;
		while(_g < objectRefs.length) {
			var objRef = objectRefs[_g];
			++_g;
			var rawObj = iron_Scene.getRawObjectByName(this.raw,objRef);
			objects.push(rawObj);
			var childRefs = this.getChildObjectsRaw(rawObj);
			objects = objects.concat(childRefs);
		}
		return objects;
	}
	,getChildObjectsRaw: function(rawObj,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var children = rawObj.children;
		if(children == null) {
			return [];
		}
		children = children.slice();
		if(recursive) {
			var _g = 0;
			var _g1 = rawObj.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				var childRefs = this.getChildObjectsRaw(child);
				children = children.concat(childRefs);
			}
		}
		return children;
	}
	,isObjectInGroup: function(groupRef,object) {
		var _g = 0;
		var _g1 = this.getGroupObjectsRaw(groupRef);
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			if(obj.name == object.name) {
				return true;
			}
		}
		return false;
	}
	,isLod: function(raw) {
		if(raw != null && raw.lods != null) {
			return raw.lods.length > 0;
		} else {
			return false;
		}
	}
	,createMeshObject: function(o,format,parent,parentObject,materials,done) {
		var _gthis = this;
		var ref = o.data_ref.split("/");
		var object_file = "";
		var data_ref = "";
		var sceneName = format.name;
		if(ref.length == 2) {
			object_file = ref[0];
			data_ref = ref[1];
		} else {
			object_file = sceneName;
			data_ref = o.data_ref;
		}
		if(parentObject != null && parentObject.bone_actions != null) {
			var bactions = [];
			var _g = 0;
			var _g1 = parentObject.bone_actions;
			while(_g < _g1.length) {
				var ref1 = _g1[_g];
				++_g;
				iron_data_Data.getSceneRaw(ref1,function(action) {
					bactions.push(action);
					if(bactions.length == parentObject.bone_actions.length) {
						var armature = null;
						var _g2 = 0;
						var _g11 = _gthis.armatures;
						while(_g2 < _g11.length) {
							var a = _g11[_g2];
							++_g2;
							if(a.uid == parent.uid) {
								armature = a;
								break;
							}
						}
						if(armature == null) {
							var _g21 = 0;
							var _g3 = _gthis.armatures;
							while(_g21 < _g3.length) {
								var a1 = _g3[_g21];
								++_g21;
								if(a1.name == parent.name) {
									parent.name += "." + parent.uid;
									break;
								}
							}
							armature = new iron_data_Armature(parent.uid,parent.name,bactions);
							_gthis.armatures.push(armature);
						}
						_gthis.returnMeshObject(object_file,data_ref,sceneName,armature,materials,parent,o,done);
					}
				});
			}
		} else {
			this.returnMeshObject(object_file,data_ref,sceneName,null,materials,parent,o,done);
		}
	}
	,returnMeshObject: function(object_file,data_ref,sceneName,armature,materials,parent,o,done) {
		var _gthis = this;
		iron_data_Data.getMesh(object_file,data_ref,function(mesh) {
			if(mesh.isSkinned) {
				var g = mesh.geom;
				if(armature != null) {
					g.addArmature(armature);
				} else {
					g.addAction(mesh.format.objects,"none");
				}
			}
			var object = _gthis.addMeshObject(mesh,materials,parent);
			if(o.particle_refs != null) {
				var _g = 0;
				var _g1 = o.particle_refs;
				while(_g < _g1.length) {
					var ref = _g1[_g];
					++_g;
					(js_Boot.__cast(object , iron_object_MeshObject)).setupParticleSystem(sceneName,ref);
				}
			}
			if(o.tilesheet_ref != null) {
				(js_Boot.__cast(object , iron_object_MeshObject)).setupTilesheet(sceneName,o.tilesheet_ref,o.tilesheet_action_ref);
			}
			_gthis.returnObject(object,o,done);
		});
	}
	,returnObject: function(object,o,done) {
		var _gthis = this;
		if(object != null && o.object_actions != null) {
			var oactions = [];
			while(oactions.length < o.object_actions.length) oactions.push(null);
			var actionsLoaded = 0;
			var _g = 0;
			var _g1 = o.object_actions.length;
			while(_g < _g1) {
				var i = [_g++];
				var ref = o.object_actions[i[0]];
				if(ref == "null") {
					actionsLoaded += 1;
					continue;
				}
				iron_data_Data.getSceneRaw(ref,(function(i1) {
					return function(action) {
						oactions[i1[0]] = action;
						actionsLoaded += 1;
						if(actionsLoaded == o.object_actions.length) {
							_gthis.returnObjectLoaded(object,o,oactions,done);
						}
					};
				})(i));
			}
		} else {
			this.returnObjectLoaded(object,o,null,done);
		}
	}
	,returnObjectLoaded: function(object,o,oactions,done) {
		if(object != null) {
			object.raw = o;
			object.name = o.name;
			if(o.visible != null) {
				object.visible = o.visible;
			}
			if(o.visible_mesh != null) {
				object.visibleMesh = o.visible_mesh;
			}
			if(o.visible_shadow != null) {
				object.visibleShadow = o.visible_shadow;
			}
			iron_Scene.createConstraints(o.constraints,object);
			iron_Scene.generateTransform(o,object.transform);
			object.setupAnimation(oactions);
			if(o.properties != null) {
				object.properties = new haxe_ds_StringMap();
				var _g = 0;
				var _g1 = o.properties;
				while(_g < _g1.length) {
					var p = _g1[_g];
					++_g;
					object.properties.set(p.name,p.value);
				}
			}
			if(!iron_Scene.active.initializing) {
				iron_Scene.createTraits(o.traits,object);
			}
		}
		done(object);
	}
	,loadEmbeddedData: function(datas,done) {
		if(datas == null) {
			done();
			return;
		}
		var loaded = 0;
		var _g = 0;
		while(_g < datas.length) {
			var file = datas[_g];
			++_g;
			this.embedData(file,function() {
				loaded += 1;
				if(loaded == datas.length) {
					done();
				}
			});
		}
	}
	,embedData: function(file,done) {
		var _gthis = this;
		if(StringTools.endsWith(file,".raw")) {
			iron_data_Data.getBlob(file,function(blob) {
				var b = blob.toBytes();
				var w = Std.int(Math.pow(b.length,0.33333333333333331)) + 1;
				var image = kha_Image.fromBytes3D(b,w,w,w,1);
				_gthis.embedded.set(file,image);
				done();
			});
		} else {
			iron_data_Data.getImage(file,function(image1) {
				_gthis.embedded.set(file,image1);
				done();
			});
		}
	}
	,notifyOnInit: function(f) {
		if(this.ready) {
			f();
		} else {
			this.traitInits.push(f);
		}
	}
	,removeInit: function(f) {
		HxOverrides.remove(this.traitInits,f);
	}
	,notifyOnRemove: function(f) {
		this.traitRemoves.push(f);
	}
	,__class__: iron_Scene
};
var iron_data_Armature = function(uid,name,actions) {
	this.matsReady = false;
	this.actions = [];
	this.uid = uid;
	this.name = name;
	var _g = 0;
	while(_g < actions.length) {
		var a = actions[_g];
		++_g;
		var _g1 = 0;
		var _g11 = a.objects;
		while(_g1 < _g11.length) {
			var o = _g11[_g1];
			++_g1;
			iron_data_Armature.setParents(o);
		}
		var bones = [[]];
		iron_data_Armature.traverseBones(a.objects,(function(bones1) {
			return function(object) {
				bones1[0].push(object);
			};
		})(bones));
		this.actions.push({ name : a.name, bones : bones[0], mats : null});
	}
};
$hxClasses["iron.data.Armature"] = iron_data_Armature;
iron_data_Armature.__name__ = "iron.data.Armature";
iron_data_Armature.setParents = function(object) {
	if(object.children == null) {
		return;
	}
	var _g = 0;
	var _g1 = object.children;
	while(_g < _g1.length) {
		var o = _g1[_g];
		++_g;
		o.parent = object;
		iron_data_Armature.setParents(o);
	}
};
iron_data_Armature.traverseBones = function(objects,callback) {
	var _g = 0;
	var _g1 = objects.length;
	while(_g < _g1) {
		var i = _g++;
		iron_data_Armature.traverseBonesStep(objects[i],callback);
	}
};
iron_data_Armature.traverseBonesStep = function(object,callback) {
	if(object.type == "bone_object") {
		callback(object);
	}
	if(object.children == null) {
		return;
	}
	var _g = 0;
	var _g1 = object.children.length;
	while(_g < _g1) {
		var i = _g++;
		iron_data_Armature.traverseBonesStep(object.children[i],callback);
	}
};
iron_data_Armature.prototype = {
	uid: null
	,name: null
	,actions: null
	,matsReady: null
	,initMats: function() {
		if(this.matsReady) {
			return;
		}
		this.matsReady = true;
		var _g = 0;
		var _g1 = this.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.mats != null) {
				continue;
			}
			a.mats = [];
			var _g2 = 0;
			var _g11 = a.bones;
			while(_g2 < _g11.length) {
				var b = _g11[_g2];
				++_g2;
				a.mats.push(iron_math_Mat4.fromFloat32Array(b.transform.values));
			}
		}
	}
	,getAction: function(name) {
		var _g = 0;
		var _g1 = this.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.name == name) {
				return a;
			}
		}
		return null;
	}
	,__class__: iron_data_Armature
};
var iron_data_CameraData = function(raw,done) {
	this.raw = raw;
	this.name = raw.name;
	done(this);
};
$hxClasses["iron.data.CameraData"] = iron_data_CameraData;
iron_data_CameraData.__name__ = "iron.data.CameraData";
iron_data_CameraData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getCameraRawByName(format.camera_datas,id);
		if(raw == null) {
			haxe_Log.trace("Camera data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/CameraData.hx", lineNumber : 20, className : "iron.data.CameraData", methodName : "parse"});
			done(null);
		}
		new iron_data_CameraData(raw,done);
	});
};
iron_data_CameraData.prototype = {
	name: null
	,raw: null
	,__class__: iron_data_CameraData
};
var iron_data_ConstData = function() { };
$hxClasses["iron.data.ConstData"] = iron_data_ConstData;
iron_data_ConstData.__name__ = "iron.data.ConstData";
iron_data_ConstData.createScreenAlignedData = function() {
	var data = [-1.0,-1.0,3.0,-1.0,-1.0,3.0];
	var indices = [0,1,2];
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",1);
	iron_data_ConstData.screenAlignedVB = new kha_graphics4_VertexBuffer(Std.int(data.length / Std.int(structure.byteSize() / 4)),structure,0);
	var vertices = iron_data_ConstData.screenAlignedVB.lock();
	var _g = 0;
	var _g1 = vertices.length;
	while(_g < _g1) {
		var i = _g++;
		vertices[i] = data[i];
	}
	iron_data_ConstData.screenAlignedVB.unlock();
	iron_data_ConstData.screenAlignedIB = new kha_graphics4_IndexBuffer(indices.length,0);
	var id = iron_data_ConstData.screenAlignedIB.lock();
	var _g2 = 0;
	var _g3 = id.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		id[i1] = indices[i1];
	}
	iron_data_ConstData.screenAlignedIB.unlock();
};
iron_data_ConstData.createSkydomeData = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",2);
	structure.add("nor",2);
	var structLength = Std.int(structure.byteSize() / 4);
	var pos = iron_data_ConstData.skydomePos;
	var nor = iron_data_ConstData.skydomeNor;
	iron_data_ConstData.skydomeVB = new kha_graphics4_VertexBuffer(Std.int(pos.length / 3),structure,0);
	var vertices = iron_data_ConstData.skydomeVB.lock();
	var _g = 0;
	var _g1 = Std.int(vertices.length / structLength);
	while(_g < _g1) {
		var i = _g++;
		vertices[i * structLength] = pos[i * 3];
		vertices[i * structLength + 1] = pos[i * 3 + 1];
		vertices[i * structLength + 2] = pos[i * 3 + 2];
		vertices[i * structLength + 3] = -nor[i * 3];
		vertices[i * structLength + 4] = -nor[i * 3 + 1];
		vertices[i * structLength + 5] = -nor[i * 3 + 2];
	}
	iron_data_ConstData.skydomeVB.unlock();
	var indices = iron_data_ConstData.skydomeIndices;
	iron_data_ConstData.skydomeIB = new kha_graphics4_IndexBuffer(indices.length,0);
	var id = iron_data_ConstData.skydomeIB.lock();
	var _g2 = 0;
	var _g3 = id.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		id[i1] = indices[i1];
	}
	iron_data_ConstData.skydomeIB.unlock();
};
var iron_data_Data = function() {
};
$hxClasses["iron.data.Data"] = iron_data_Data;
iron_data_Data.__name__ = "iron.data.Data";
iron_data_Data.deleteAll = function() {
	var c = iron_data_Data.cachedMeshes.iterator();
	while(c.hasNext()) {
		var c1 = c.next();
		c1.delete();
	}
	iron_data_Data.cachedMeshes = new haxe_ds_StringMap();
	var c2 = iron_data_Data.cachedShaders.iterator();
	while(c2.hasNext()) {
		var c3 = c2.next();
		c3.delete();
	}
	iron_data_Data.cachedShaders = new haxe_ds_StringMap();
	iron_data_Data.cachedSceneRaws = new haxe_ds_StringMap();
	iron_data_Data.cachedLights = new haxe_ds_StringMap();
	iron_data_Data.cachedCameras = new haxe_ds_StringMap();
	iron_data_Data.cachedMaterials = new haxe_ds_StringMap();
	iron_data_Data.cachedParticles = new haxe_ds_StringMap();
	iron_data_Data.cachedWorlds = new haxe_ds_StringMap();
	if(iron_RenderPath.active != null) {
		iron_RenderPath.active.unload();
	}
	var c4 = iron_data_Data.cachedBlobs.iterator();
	while(c4.hasNext()) {
		var c5 = c4.next();
		c5.unload();
	}
	iron_data_Data.cachedBlobs = new haxe_ds_StringMap();
	var c6 = iron_data_Data.cachedImages.iterator();
	while(c6.hasNext()) {
		var c7 = c6.next();
		c7.unload();
	}
	iron_data_Data.cachedImages = new haxe_ds_StringMap();
	var c8 = iron_data_Data.cachedSounds.iterator();
	while(c8.hasNext()) {
		var c9 = c8.next();
		c9.unload();
	}
	iron_data_Data.cachedSounds = new haxe_ds_StringMap();
	var c10 = iron_data_Data.cachedVideos.iterator();
	while(c10.hasNext()) {
		var c11 = c10.next();
		c11.unload();
	}
	iron_data_Data.cachedVideos = new haxe_ds_StringMap();
	var c12 = iron_data_Data.cachedFonts.iterator();
	while(c12.hasNext()) {
		var c13 = c12.next();
		c13.unload();
	}
	iron_data_Data.cachedFonts = new haxe_ds_StringMap();
};
iron_data_Data.getMesh = function(file,name,done) {
	var handle = file + name;
	var cached = iron_data_Data.cachedMeshes.get(handle);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingMeshes.get(handle);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingMeshes.set(handle,[done]);
	iron_data_MeshData.parse(file,name,function(b) {
		iron_data_Data.cachedMeshes.set(handle,b);
		b.handle = handle;
		var _g = 0;
		var _g1 = iron_data_Data.loadingMeshes.get(handle);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingMeshes.remove(handle);
	});
};
iron_data_Data.deleteMesh = function(handle) {
	var mesh = iron_data_Data.cachedMeshes.get(handle);
	if(mesh == null) {
		return;
	}
	mesh.delete();
	iron_data_Data.cachedMeshes.remove(handle);
};
iron_data_Data.getLight = function(file,name,done) {
	var handle = file + name;
	var cached = iron_data_Data.cachedLights.get(handle);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingLights.get(handle);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingLights.set(handle,[done]);
	iron_data_LightData.parse(file,name,function(b) {
		iron_data_Data.cachedLights.set(handle,b);
		var _g = 0;
		var _g1 = iron_data_Data.loadingLights.get(handle);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingLights.remove(handle);
	});
};
iron_data_Data.getCamera = function(file,name,done) {
	var handle = file + name;
	var cached = iron_data_Data.cachedCameras.get(handle);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingCameras.get(handle);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingCameras.set(handle,[done]);
	iron_data_CameraData.parse(file,name,function(b) {
		iron_data_Data.cachedCameras.set(handle,b);
		var _g = 0;
		var _g1 = iron_data_Data.loadingCameras.get(handle);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingCameras.remove(handle);
	});
};
iron_data_Data.getMaterial = function(file,name,done) {
	var handle = file + name;
	var cached = iron_data_Data.cachedMaterials.get(handle);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingMaterials.get(handle);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingMaterials.set(handle,[done]);
	iron_data_MaterialData.parse(file,name,function(b) {
		iron_data_Data.cachedMaterials.set(handle,b);
		var _g = 0;
		var _g1 = iron_data_Data.loadingMaterials.get(handle);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingMaterials.remove(handle);
	});
};
iron_data_Data.getParticle = function(file,name,done) {
	var handle = file + name;
	var cached = iron_data_Data.cachedParticles.get(handle);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingParticles.get(handle);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingParticles.set(handle,[done]);
	iron_data_ParticleData.parse(file,name,function(b) {
		iron_data_Data.cachedParticles.set(handle,b);
		var _g = 0;
		var _g1 = iron_data_Data.loadingParticles.get(handle);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingParticles.remove(handle);
	});
};
iron_data_Data.getWorld = function(file,name,done) {
	if(name == null) {
		done(null);
		return;
	}
	var handle = file + name;
	var cached = iron_data_Data.cachedWorlds.get(handle);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingWorlds.get(handle);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingWorlds.set(handle,[done]);
	iron_data_WorldData.parse(file,name,function(b) {
		iron_data_Data.cachedWorlds.set(handle,b);
		var _g = 0;
		var _g1 = iron_data_Data.loadingWorlds.get(handle);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingWorlds.remove(handle);
	});
};
iron_data_Data.getShader = function(file,name,done,overrideContext) {
	var cacheName = name;
	if(overrideContext != null) {
		cacheName += "2";
	}
	var cached = iron_data_Data.cachedShaders.get(cacheName);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingShaders.get(cacheName);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingShaders.set(cacheName,[done]);
	iron_data_ShaderData.parse(file,name,function(b) {
		iron_data_Data.cachedShaders.set(cacheName,b);
		var _g = 0;
		var _g1 = iron_data_Data.loadingShaders.get(cacheName);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingShaders.remove(cacheName);
	},overrideContext);
};
iron_data_Data.getSceneRaw = function(file,done) {
	var cached = iron_data_Data.cachedSceneRaws.get(file);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingSceneRaws.get(file);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingSceneRaws.set(file,[done]);
	var compressed = StringTools.endsWith(file,".lz4");
	var isJson = StringTools.endsWith(file,".json");
	var ext = compressed || isJson || StringTools.endsWith(file,".arm") ? "" : ".arm";
	iron_data_Data.getBlob(file + ext,function(b) {
		var compressed1 = compressed;
		var parsed = null;
		if(isJson) {
			var s = b.toString();
			parsed = s.charAt(0) == "{" ? JSON.parse(s) : iron_system_ArmPack.decode(b.toBytes());
		} else {
			parsed = iron_system_ArmPack.decode(b.toBytes());
		}
		iron_data_Data.returnSceneRaw(file,parsed);
	});
};
iron_data_Data.returnSceneRaw = function(file,parsed) {
	iron_data_Data.cachedSceneRaws.set(file,parsed);
	var _g = 0;
	var _g1 = iron_data_Data.loadingSceneRaws.get(file);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		f(parsed);
	}
	iron_data_Data.loadingSceneRaws.remove(file);
};
iron_data_Data.getMeshRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getLightRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getCameraRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getMaterialRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getParticleRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getWorldRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getShaderRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getSpeakerRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getBlob = function(file,done) {
	var cached = iron_data_Data.cachedBlobs.get(file);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingBlobs.get(file);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingBlobs.set(file,[done]);
	kha_Assets.loadBlobFromPath(iron_data_Data.resolvePath(file),function(b) {
		iron_data_Data.cachedBlobs.set(file,b);
		var _g = 0;
		var _g1 = iron_data_Data.loadingBlobs.get(file);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingBlobs.remove(file);
		iron_data_Data.assetsLoaded++;
	},null,{ fileName : "Sources/iron/data/Data.hx", lineNumber : 350, className : "iron.data.Data", methodName : "getBlob"});
};
iron_data_Data.deleteBlob = function(handle) {
	var blob = iron_data_Data.cachedBlobs.get(handle);
	if(blob == null) {
		return;
	}
	blob.unload();
	iron_data_Data.cachedBlobs.remove(handle);
};
iron_data_Data.getImage = function(file,done,readable,format) {
	if(format == null) {
		format = "RGBA32";
	}
	if(readable == null) {
		readable = false;
	}
	var cached = iron_data_Data.cachedImages.get(file);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingImages.get(file);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingImages.set(file,[done]);
	kha_Assets.loadImageFromPath(iron_data_Data.resolvePath(file),readable,function(b) {
		iron_data_Data.cachedImages.set(file,b);
		var _g = 0;
		var _g1 = iron_data_Data.loadingImages.get(file);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingImages.remove(file);
		iron_data_Data.assetsLoaded++;
	},null,{ fileName : "Sources/iron/data/Data.hx", lineNumber : 378, className : "iron.data.Data", methodName : "getImage"});
};
iron_data_Data.deleteImage = function(handle) {
	var image = iron_data_Data.cachedImages.get(handle);
	if(image == null) {
		return;
	}
	image.unload();
	iron_data_Data.cachedImages.remove(handle);
};
iron_data_Data.getSound = function(file,done) {
	if(StringTools.endsWith(file,".wav")) {
		file = file.substring(0,file.length - 4) + ".ogg";
	}
	var cached = iron_data_Data.cachedSounds.get(file);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingSounds.get(file);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingSounds.set(file,[done]);
	kha_Assets.loadSoundFromPath(iron_data_Data.resolvePath(file),function(b) {
		b.uncompress(function() {
			iron_data_Data.cachedSounds.set(file,b);
			var _g = 0;
			var _g1 = iron_data_Data.loadingSounds.get(file);
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f(b);
			}
			iron_data_Data.loadingSounds.remove(file);
			iron_data_Data.assetsLoaded++;
		});
	},null,{ fileName : "Sources/iron/data/Data.hx", lineNumber : 412, className : "iron.data.Data", methodName : "getSound"});
};
iron_data_Data.deleteSound = function(handle) {
	var sound = iron_data_Data.cachedSounds.get(handle);
	if(sound == null) {
		return;
	}
	sound.unload();
	iron_data_Data.cachedSounds.remove(handle);
};
iron_data_Data.getVideo = function(file,done) {
	var cached = iron_data_Data.cachedVideos.get(file);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingVideos.get(file);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingVideos.set(file,[done]);
	kha_Assets.loadVideoFromPath(iron_data_Data.resolvePath(file),function(b) {
		iron_data_Data.cachedVideos.set(file,b);
		var _g = 0;
		var _g1 = iron_data_Data.loadingVideos.get(file);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingVideos.remove(file);
		iron_data_Data.assetsLoaded++;
	},null,{ fileName : "Sources/iron/data/Data.hx", lineNumber : 448, className : "iron.data.Data", methodName : "getVideo"});
};
iron_data_Data.deleteVideo = function(handle) {
	var video = iron_data_Data.cachedVideos.get(handle);
	if(video == null) {
		return;
	}
	video.unload();
	iron_data_Data.cachedVideos.remove(handle);
};
iron_data_Data.getFont = function(file,done) {
	var cached = iron_data_Data.cachedFonts.get(file);
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = iron_data_Data.loadingFonts.get(file);
	if(loading != null) {
		loading.push(done);
		return;
	}
	iron_data_Data.loadingFonts.set(file,[done]);
	kha_Assets.loadFontFromPath(iron_data_Data.resolvePath(file),function(b) {
		iron_data_Data.cachedFonts.set(file,b);
		var _g = 0;
		var _g1 = iron_data_Data.loadingFonts.get(file);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingFonts.remove(file);
		iron_data_Data.assetsLoaded++;
	},null,{ fileName : "Sources/iron/data/Data.hx", lineNumber : 472, className : "iron.data.Data", methodName : "getFont"});
};
iron_data_Data.deleteFont = function(handle) {
	var font = iron_data_Data.cachedFonts.get(handle);
	if(font == null) {
		return;
	}
	font.unload();
	iron_data_Data.cachedFonts.remove(handle);
};
iron_data_Data.isAbsolute = function(file) {
	if(!(file.charAt(0) == "/" || file.charAt(1) == ":")) {
		if(file.charAt(0) == "\\") {
			return file.charAt(1) == "\\";
		} else {
			return false;
		}
	} else {
		return true;
	}
};
iron_data_Data.isUp = function(file) {
	if(file.charAt(0) == ".") {
		return file.charAt(1) == ".";
	} else {
		return false;
	}
};
iron_data_Data.baseName = function(path) {
	var slash = path.lastIndexOf("/");
	if(slash >= 0) {
		return HxOverrides.substr(path,slash + 1,null);
	} else {
		return path;
	}
};
iron_data_Data.resolvePath = function(file) {
	if(iron_data_Data.isAbsolute(file) || iron_data_Data.isUp(file)) {
		return file;
	}
	return iron_data_Data.baseName(file);
};
iron_data_Data.prototype = {
	__class__: iron_data_Data
};
var iron_data_Geometry = function(data,indices,materialIndices,usage) {
	this.mats = null;
	this.actions = null;
	this.skeletonBoneLens = null;
	this.skeletonBoneRefs = null;
	this.skeletonTransformsI = null;
	this.skinBoneWeights = null;
	this.skinBoneIndices = null;
	this.skinBoneCounts = null;
	this.aabbMax = null;
	this.aabbMin = null;
	this.aabb = null;
	this.instanceCount = 0;
	this.instanced = false;
	this.instancedVB = null;
	this.numTris = 0;
	this.ready = false;
	this.name = "";
	this.count = -1;
	this.start = 0;
	this.vertexBufferMap = new haxe_ds_StringMap();
	if(usage == null) {
		usage = 0;
	}
	this.indices = indices;
	this.materialIndices = materialIndices;
	this.usage = usage;
	this.vertexArrays = data.raw.vertex_arrays;
	this.positions = this.getVArray("pos");
	this.normals = this.getVArray("nor");
	this.uvs = this.getVArray("tex");
	this.cols = this.getVArray("col");
	this.data = data;
	this.struct = iron_data_Geometry.getVertexStructure(this.vertexArrays);
	this.structLength = Std.int(this.struct.byteSize() / 2);
	this.structStr = "";
	var _g = 0;
	var _g1 = this.struct.elements;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		this.structStr += e.name;
	}
};
$hxClasses["iron.data.Geometry"] = iron_data_Geometry;
iron_data_Geometry.__name__ = "iron.data.Geometry";
iron_data_Geometry.getVertexStructure = function(vertexArrays) {
	var structure = new kha_graphics4_VertexStructure();
	var _g = 0;
	var _g1 = vertexArrays.length;
	while(_g < _g1) {
		var i = _g++;
		structure.add(vertexArrays[i].attrib,iron_data_Geometry.getVertexData(vertexArrays[i].data));
	}
	return structure;
};
iron_data_Geometry.getVertexData = function(data) {
	switch(data) {
	case "short2norm":
		return 5;
	case "short4norm":
		return 6;
	default:
		return 6;
	}
};
iron_data_Geometry.buildVertices = function(vertices,vertexArrays,offset,fakeUVs,uvsIndex) {
	if(uvsIndex == null) {
		uvsIndex = -1;
	}
	if(fakeUVs == null) {
		fakeUVs = false;
	}
	if(offset == null) {
		offset = 0;
	}
	var numVertices = iron_data_Geometry.verticesCount(vertexArrays[0]);
	var di = -1 + offset;
	var _g = 0;
	var _g1 = numVertices;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g11 = vertexArrays.length;
		while(_g2 < _g11) {
			var va = _g2++;
			if(fakeUVs && va == uvsIndex) {
				vertices[++di] = 0;
				vertices[++di] = 0;
				continue;
			}
			var l = vertexArrays[va].size;
			var _g3 = 0;
			var _g12 = l;
			while(_g3 < _g12) {
				var o = _g3++;
				vertices[++di] = vertexArrays[va].values[i * l + o];
			}
			if(vertexArrays[va].padding != null) {
				if(vertexArrays[va].padding == 1) {
					vertices[++di] = 0;
				}
			}
		}
	}
};
iron_data_Geometry.verticesCount = function(arr) {
	return Std.int(arr.values.length / arr.size);
};
iron_data_Geometry.prototype = {
	vertexBuffer: null
	,vertexBufferMap: null
	,indexBuffers: null
	,start: null
	,count: null
	,name: null
	,ready: null
	,vertices: null
	,indices: null
	,numTris: null
	,materialIndices: null
	,struct: null
	,structLength: null
	,structStr: null
	,usage: null
	,instancedVB: null
	,instanced: null
	,instanceCount: null
	,positions: null
	,normals: null
	,uvs: null
	,cols: null
	,vertexArrays: null
	,data: null
	,aabb: null
	,aabbMin: null
	,aabbMax: null
	,skinBoneCounts: null
	,skinBoneIndices: null
	,skinBoneWeights: null
	,skeletonTransformsI: null
	,skeletonBoneRefs: null
	,skeletonBoneLens: null
	,actions: null
	,mats: null
	,'delete': function() {
		var buf = this.vertexBufferMap.iterator();
		while(buf.hasNext()) {
			var buf1 = buf.next();
			if(buf1 != null) {
				buf1.delete();
			}
		}
		var _g = 0;
		var _g1 = this.indexBuffers;
		while(_g < _g1.length) {
			var buf2 = _g1[_g];
			++_g;
			buf2.delete();
		}
	}
	,applyScale: function(sx,sy,sz) {
		this.data.scalePos *= sx;
	}
	,getVArray: function(name) {
		var _g = 0;
		var _g1 = this.vertexArrays.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.vertexArrays[i].attrib == name) {
				return this.vertexArrays[i];
			}
		}
		return null;
	}
	,setupInstanced: function(data,instancedType,usage) {
		var structure = new kha_graphics4_VertexStructure();
		structure.instanced = true;
		this.instanced = true;
		structure.add("ipos",2);
		if(instancedType == 2 || instancedType == 4) {
			structure.add("irot",2);
		}
		if(instancedType == 3 || instancedType == 4) {
			structure.add("iscl",2);
		}
		this.instanceCount = Std.int(data.length / Std.int(structure.byteSize() / 4));
		this.instancedVB = new kha_graphics4_VertexBuffer(this.instanceCount,structure,usage,1);
		var vertices = this.instancedVB.lock();
		var _g = 0;
		var _g1 = vertices.length;
		while(_g < _g1) {
			var i = _g++;
			vertices[i] = data[i];
		}
		this.instancedVB.unlock();
	}
	,copyVertices: function(vertices,offset,fakeUVs) {
		if(fakeUVs == null) {
			fakeUVs = false;
		}
		if(offset == null) {
			offset = 0;
		}
		iron_data_Geometry.buildVertices(vertices,this.vertexArrays,offset,fakeUVs);
	}
	,getVerticesLength: function() {
		var res = 0;
		var _g = 0;
		var _g1 = this.vertexArrays.length;
		while(_g < _g1) {
			var i = _g++;
			res += this.vertexArrays[i].values.length;
		}
		return res;
	}
	,get: function(vs) {
		var key = "";
		var _g = 0;
		while(_g < vs.length) {
			var e = vs[_g];
			++_g;
			key += e.name;
		}
		var vb = this.vertexBufferMap.get(key);
		if(vb == null) {
			var nVertexArrays = [];
			var atex = false;
			var texOffset = -1;
			var acol = false;
			var _g1 = 0;
			var _g2 = vs.length;
			while(_g1 < _g2) {
				var e1 = _g1++;
				if(vs[e1].name == "tex") {
					atex = true;
					texOffset = e1;
				}
				if(vs[e1].name == "col") {
					acol = true;
				}
				var _g11 = 0;
				var _g21 = this.vertexArrays.length;
				while(_g11 < _g21) {
					var va = _g11++;
					if(vs[e1].name == this.vertexArrays[va].attrib) {
						nVertexArrays.push(this.vertexArrays[va]);
					}
				}
			}
			var struct = iron_data_Geometry.getVertexStructure(nVertexArrays);
			vb = new kha_graphics4_VertexBuffer(Std.int(this.positions.values.length / this.positions.size),struct,this.usage);
			this.vertices = vb.lockInt16();
			iron_data_Geometry.buildVertices(this.vertices,nVertexArrays,0,atex && this.uvs == null,texOffset);
			vb.unlock();
			this.vertexBufferMap.set(key,vb);
			if(atex && this.uvs == null) {
				haxe_Log.trace("Armory Warning: Geometry " + this.name + " is missing UV map",{ fileName : "Sources/iron/data/Geometry.hx", lineNumber : 225, className : "iron.data.Geometry", methodName : "get"});
			}
			if(acol && this.cols == null) {
				haxe_Log.trace("Armory Warning: Geometry " + this.name + " is missing vertex colors",{ fileName : "Sources/iron/data/Geometry.hx", lineNumber : 226, className : "iron.data.Geometry", methodName : "get"});
			}
		}
		return vb;
	}
	,build: function() {
		if(this.ready) {
			return;
		}
		this.vertexBuffer = new kha_graphics4_VertexBuffer(Std.int(this.positions.values.length / this.positions.size),this.struct,this.usage);
		this.vertices = this.vertexBuffer.lockInt16();
		iron_data_Geometry.buildVertices(this.vertices,this.vertexArrays);
		this.vertexBuffer.unlock();
		this.vertexBufferMap.set(this.structStr,this.vertexBuffer);
		this.indexBuffers = [];
		var _g = 0;
		var _g1 = this.indices;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			if(id.length == 0) {
				continue;
			}
			var indexBuffer = new kha_graphics4_IndexBuffer(id.length,this.usage);
			this.numTris += Std.int(id.length / 3);
			var indicesA = indexBuffer.lock();
			var _g2 = 0;
			var _g11 = indicesA.length;
			while(_g2 < _g11) {
				var i = _g2++;
				indicesA[i] = id[i];
			}
			indexBuffer.unlock();
			this.indexBuffers.push(indexBuffer);
		}
		if(this.data.raw.instanced_data != null) {
			this.setupInstanced(this.data.raw.instanced_data,this.data.raw.instanced_type,this.usage);
		}
		this.ready = true;
	}
	,getVerticesCount: function() {
		return Std.int(this.positions.values.length / this.positions.size);
	}
	,addArmature: function(armature) {
		var _g = 0;
		var _g1 = armature.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.addAction(a.bones,a.name);
		}
	}
	,addAction: function(bones,name) {
		if(bones == null) {
			return;
		}
		if(this.actions == null) {
			this.actions = new haxe_ds_StringMap();
			this.mats = new haxe_ds_StringMap();
		}
		if(this.actions.get(name) != null) {
			return;
		}
		var actionBones = [];
		var _g = 0;
		var _g1 = this.skeletonBoneRefs;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < bones.length) {
				var b = bones[_g2];
				++_g2;
				if(b.name == s) {
					actionBones.push(b);
				}
			}
		}
		this.actions.set(name,actionBones);
		var actionMats = [];
		var _g21 = 0;
		while(_g21 < actionBones.length) {
			var b1 = actionBones[_g21];
			++_g21;
			actionMats.push(iron_math_Mat4.fromFloat32Array(b1.transform.values));
		}
		this.mats.set(name,actionMats);
	}
	,initSkeletonTransforms: function(transformsI) {
		this.skeletonTransformsI = [];
		var _g = 0;
		while(_g < transformsI.length) {
			var t = transformsI[_g];
			++_g;
			var mi = iron_math_Mat4.fromFloat32Array(t);
			this.skeletonTransformsI.push(mi);
		}
	}
	,calculateAABB: function() {
		this.aabbMin = new iron_math_Vec4(-0.01,-0.01,-0.01);
		this.aabbMax = new iron_math_Vec4(0.01,0.01,0.01);
		this.aabb = new iron_math_Vec4();
		var i = 0;
		while(i < this.positions.values.length) {
			if(this.positions.values[i] > this.aabbMax.x) {
				this.aabbMax.x = this.positions.values[i];
			}
			if(this.positions.values[i + 1] > this.aabbMax.y) {
				this.aabbMax.y = this.positions.values[i + 1];
			}
			if(this.positions.values[i + 2] > this.aabbMax.z) {
				this.aabbMax.z = this.positions.values[i + 2];
			}
			if(this.positions.values[i] < this.aabbMin.x) {
				this.aabbMin.x = this.positions.values[i];
			}
			if(this.positions.values[i + 1] < this.aabbMin.y) {
				this.aabbMin.y = this.positions.values[i + 1];
			}
			if(this.positions.values[i + 2] < this.aabbMin.z) {
				this.aabbMin.z = this.positions.values[i + 2];
			}
			i += 4;
		}
		this.aabb.x = (Math.abs(this.aabbMin.x) + Math.abs(this.aabbMax.x)) / 32767 * this.data.scalePos;
		this.aabb.y = (Math.abs(this.aabbMin.y) + Math.abs(this.aabbMax.y)) / 32767 * this.data.scalePos;
		this.aabb.z = (Math.abs(this.aabbMin.z) + Math.abs(this.aabbMax.z)) / 32767 * this.data.scalePos;
	}
	,calculateTangents: function() {
	}
	,__class__: iron_data_Geometry
};
var iron_data_LightData = function(raw,done) {
	this.raw = raw;
	this.name = raw.name;
	done(this);
};
$hxClasses["iron.data.LightData"] = iron_data_LightData;
iron_data_LightData.__name__ = "iron.data.LightData";
iron_data_LightData.typeToInt = function(s) {
	switch(s) {
	case "area":
		return 3;
	case "point":
		return 1;
	case "spot":
		return 2;
	case "sun":
		return 0;
	default:
		return 0;
	}
};
iron_data_LightData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getLightRawByName(format.light_datas,id);
		if(raw == null) {
			haxe_Log.trace("Light data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/LightData.hx", lineNumber : 30, className : "iron.data.LightData", methodName : "parse"});
			done(null);
		}
		new iron_data_LightData(raw,done);
	});
};
iron_data_LightData.prototype = {
	name: null
	,raw: null
	,__class__: iron_data_LightData
};
var iron_data_MaterialData = function(raw,done,file) {
	if(file == null) {
		file = "";
	}
	this.contexts = null;
	var _gthis = this;
	this.uid = ++iron_data_MaterialData.uidCounter;
	this.raw = raw;
	this.name = raw.name;
	var ref = raw.shader.split("/");
	var object_file = "";
	var data_ref = "";
	if(ref.length == 2) {
		object_file = ref[0];
		data_ref = ref[1];
	} else {
		object_file = file;
		data_ref = raw.shader;
	}
	iron_data_Data.getShader(object_file,data_ref,function(b) {
		_gthis.shader = b;
		_gthis.contexts = [];
		while(_gthis.contexts.length < raw.contexts.length) _gthis.contexts.push(null);
		var contextsLoaded = 0;
		var _g = 0;
		var _g1 = raw.contexts.length;
		while(_g < _g1) {
			var i = [_g++];
			var c = raw.contexts[i[0]];
			new iron_data_MaterialContext(c,(function(i1) {
				return function(self) {
					_gthis.contexts[i1[0]] = self;
					contextsLoaded += 1;
					if(contextsLoaded == raw.contexts.length) {
						done(_gthis);
					}
				};
			})(i));
		}
	},raw.override_context);
};
$hxClasses["iron.data.MaterialData"] = iron_data_MaterialData;
iron_data_MaterialData.__name__ = "iron.data.MaterialData";
iron_data_MaterialData.parse = function(file,name,done) {
	iron_data_Data.getSceneRaw(file,function(format) {
		var raw = iron_data_Data.getMaterialRawByName(format.material_datas,name);
		if(raw == null) {
			haxe_Log.trace("Material data \"" + name + "\" not found!",{ fileName : "Sources/iron/data/MaterialData.hx", lineNumber : 58, className : "iron.data.MaterialData", methodName : "parse"});
			done(null);
		}
		new iron_data_MaterialData(raw,done,file);
	});
};
iron_data_MaterialData.prototype = {
	uid: null
	,name: null
	,raw: null
	,shader: null
	,contexts: null
	,getContext: function(name) {
		var _g = 0;
		var _g1 = this.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(HxOverrides.substr(c.raw.name,0,name.length) == name) {
				return c;
			}
		}
		return null;
	}
	,__class__: iron_data_MaterialData
};
var iron_data_MaterialContext = function(raw,done) {
	this.id = 0;
	this.textures = null;
	var _gthis = this;
	this.raw = raw;
	this.id = iron_data_MaterialContext.num++;
	if(raw.bind_textures != null && raw.bind_textures.length > 0) {
		var this1 = new Array(raw.bind_textures.length);
		this.textures = this1;
		var texturesLoaded = 0;
		var _g = 0;
		var _g1 = raw.bind_textures.length;
		while(_g < _g1) {
			var i = [_g++];
			var tex = [raw.bind_textures[i[0]]];
			if(tex[0].file == "" || tex[0].source == "movie") {
				texturesLoaded += 1;
				if(texturesLoaded == raw.bind_textures.length) {
					done(this);
				}
				continue;
			}
			iron_data_Data.getImage(tex[0].file,(function(tex1,i1) {
				return function(image) {
					_gthis.textures[i1[0]] = image;
					texturesLoaded += 1;
					if(tex1[0].mipmaps != null) {
						var mipmaps = [];
						while(mipmaps.length < tex1[0].mipmaps.length) mipmaps.push(null);
						var mipmapsLoaded = 0;
						var _g2 = 0;
						var _g11 = tex1[0].mipmaps.length;
						while(_g2 < _g11) {
							var j = [_g2++];
							var name = tex1[0].mipmaps[j[0]];
							iron_data_Data.getImage(name,(function(j1,tex2) {
								return function(mipimg) {
									mipmaps[j1[0]] = mipimg;
									mipmapsLoaded += 1;
									if(mipmapsLoaded == tex2[0].mipmaps.length) {
										image.setMipmaps(mipmaps);
										tex2[0].mipmaps = null;
										tex2[0].generate_mipmaps = false;
										if(texturesLoaded == raw.bind_textures.length) {
											done(_gthis);
										}
									}
								};
							})(j,tex1));
						}
					} else if(tex1[0].generate_mipmaps == true && image != null) {
						image.generateMipmaps(1000);
						tex1[0].mipmaps = null;
						tex1[0].generate_mipmaps = false;
						if(texturesLoaded == raw.bind_textures.length) {
							done(_gthis);
						}
					} else if(texturesLoaded == raw.bind_textures.length) {
						done(_gthis);
					}
				};
			})(tex,i),false,tex[0].format != null ? tex[0].format : "RGBA32");
		}
	} else {
		done(this);
	}
};
$hxClasses["iron.data.MaterialContext"] = iron_data_MaterialContext;
iron_data_MaterialContext.__name__ = "iron.data.MaterialContext";
iron_data_MaterialContext.prototype = {
	raw: null
	,textures: null
	,id: null
	,setTextureParameters: function(g,textureIndex,context,unitIndex) {
		context.setTextureParameters(g,unitIndex,this.raw.bind_textures[textureIndex]);
	}
	,__class__: iron_data_MaterialContext
};
var iron_data_MeshData = function(raw,done) {
	this.scaleTex = 1.0;
	this.scalePos = 1.0;
	this.refcount = 0;
	this.count = -1;
	this.start = 0;
	this.raw = raw;
	this.name = raw.name;
	if(raw.scale_pos != null) {
		this.scalePos = raw.scale_pos;
	}
	if(raw.scale_tex != null) {
		this.scaleTex = raw.scale_tex;
	}
	var indices = [];
	var materialIndices = [];
	var _g = 0;
	var _g1 = raw.index_arrays;
	while(_g < _g1.length) {
		var ind = _g1[_g];
		++_g;
		indices.push(ind.values);
		materialIndices.push(ind.material);
	}
	this.isSkinned = raw.skin != null;
	var vertexArrays = raw.vertex_arrays;
	if(this.isSkinned) {
		vertexArrays.push({ attrib : "bone", values : null, data : "short4norm"});
		vertexArrays.push({ attrib : "weight", values : null, data : "short4norm"});
	}
	var _g2 = 0;
	var _g3 = vertexArrays.length;
	while(_g2 < _g3) {
		var i = _g2++;
		var vertexArrays1 = vertexArrays[i].data;
		var tmp = this.getPadding(vertexArrays[i].padding);
		vertexArrays[i].size = this.getVertexSize(vertexArrays1,tmp);
	}
	var parsedUsage = 0;
	if(raw.dynamic_usage != null && raw.dynamic_usage == true) {
		parsedUsage = 1;
	}
	var usage = parsedUsage;
	if(this.isSkinned) {
		var bonea = null;
		var weighta = null;
		var vertex_length = Std.int(vertexArrays[0].values.length / vertexArrays[0].size);
		var l = vertex_length * 4;
		var this1 = new Int16Array(l);
		bonea = this1;
		var this2 = new Int16Array(l);
		weighta = this2;
		var index = 0;
		var ai = 0;
		var _g4 = 0;
		var _g5 = vertex_length;
		while(_g4 < _g5) {
			var i1 = _g4++;
			var boneCount = raw.skin.bone_count_array[i1];
			var _g41 = index;
			var _g51 = index + boneCount;
			while(_g41 < _g51) {
				var j = _g41++;
				bonea[ai] = raw.skin.bone_index_array[j];
				weighta[ai] = raw.skin.bone_weight_array[j];
				++ai;
			}
			var _g6 = boneCount;
			var _g7 = 4;
			while(_g6 < _g7) {
				var j1 = _g6++;
				bonea[ai] = 0;
				weighta[ai] = 0;
				++ai;
			}
			index += boneCount;
		}
		vertexArrays[vertexArrays.length - 2].values = bonea;
		vertexArrays[vertexArrays.length - 1].values = weighta;
	}
	this.geom = new iron_data_Geometry(this,indices,materialIndices,usage);
	this.geom.name = this.name;
	done(this);
};
$hxClasses["iron.data.MeshData"] = iron_data_MeshData;
iron_data_MeshData.__name__ = "iron.data.MeshData";
iron_data_MeshData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getMeshRawByName(format.mesh_datas,id);
		if(raw == null) {
			haxe_Log.trace("Mesh data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/MeshData.hx", lineNumber : 101, className : "iron.data.MeshData", methodName : "parse"});
			done(null);
		}
		new iron_data_MeshData(raw,function(dat) {
			dat.format = format;
			if(raw.skin != null) {
				dat.geom.skinBoneCounts = raw.skin.bone_count_array;
				dat.geom.skinBoneIndices = raw.skin.bone_index_array;
				dat.geom.skinBoneWeights = raw.skin.bone_weight_array;
				dat.geom.skeletonBoneRefs = raw.skin.bone_ref_array;
				dat.geom.skeletonBoneLens = raw.skin.bone_len_array;
				dat.geom.initSkeletonTransforms(raw.skin.transformsI);
			}
			done(dat);
		});
	});
};
iron_data_MeshData.prototype = {
	name: null
	,raw: null
	,format: null
	,geom: null
	,start: null
	,count: null
	,refcount: null
	,handle: null
	,scalePos: null
	,scaleTex: null
	,isSkinned: null
	,'delete': function() {
		this.geom.delete();
	}
	,getVertexSize: function(vertex_data,padding) {
		if(padding == null) {
			padding = 0;
		}
		switch(vertex_data) {
		case "short2norm":
			return 2 - padding;
		case "short4norm":
			return 4 - padding;
		default:
			return 0;
		}
	}
	,getPadding: function(padding) {
		if(padding != null) {
			return padding;
		} else {
			return 0;
		}
	}
	,__class__: iron_data_MeshData
};
var iron_data_ParticleData = function(raw,done) {
	this.raw = raw;
	this.name = raw.name;
	done(this);
};
$hxClasses["iron.data.ParticleData"] = iron_data_ParticleData;
iron_data_ParticleData.__name__ = "iron.data.ParticleData";
iron_data_ParticleData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getParticleRawByName(format.particle_datas,id);
		if(raw == null) {
			haxe_Log.trace("Particle data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/ParticleData.hx", lineNumber : 21, className : "iron.data.ParticleData", methodName : "parse"});
			done(null);
		}
		new iron_data_ParticleData(raw,done);
	});
};
iron_data_ParticleData.prototype = {
	name: null
	,raw: null
	,__class__: iron_data_ParticleData
};
var iron_data_ProbeData = function() { };
$hxClasses["iron.data.ProbeData"] = iron_data_ProbeData;
iron_data_ProbeData.__name__ = "iron.data.ProbeData";
var iron_data_ShaderData = function(raw,done,overrideContext) {
	this.contexts = [];
	var _gthis = this;
	this.raw = raw;
	this.name = raw.name;
	var _g = 0;
	var _g1 = raw.contexts;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		this.contexts.push(null);
	}
	var contextsLoaded = 0;
	var _g2 = 0;
	var _g3 = raw.contexts.length;
	while(_g2 < _g3) {
		var i = [_g2++];
		var c1 = raw.contexts[i[0]];
		new iron_data_ShaderContext(c1,(function(i1) {
			return function(con) {
				_gthis.contexts[i1[0]] = con;
				contextsLoaded += 1;
				if(contextsLoaded == raw.contexts.length) {
					done(_gthis);
				}
			};
		})(i),overrideContext);
	}
};
$hxClasses["iron.data.ShaderData"] = iron_data_ShaderData;
iron_data_ShaderData.__name__ = "iron.data.ShaderData";
iron_data_ShaderData.parse = function(file,name,done,overrideContext) {
	iron_data_Data.getSceneRaw(file,function(format) {
		var raw = iron_data_Data.getShaderRawByName(format.shader_datas,name);
		if(raw == null) {
			haxe_Log.trace("Shader data \"" + name + "\" not found!",{ fileName : "Sources/iron/data/ShaderData.hx", lineNumber : 48, className : "iron.data.ShaderData", methodName : "parse"});
			done(null);
		}
		new iron_data_ShaderData(raw,done,overrideContext);
	});
};
iron_data_ShaderData.prototype = {
	name: null
	,raw: null
	,contexts: null
	,'delete': function() {
		var _g = 0;
		var _g1 = this.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.delete();
		}
	}
	,getContext: function(name) {
		var _g = 0;
		var _g1 = this.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.raw.name == name) {
				return c;
			}
		}
		return null;
	}
	,__class__: iron_data_ShaderData
};
var iron_data_ShaderContext = function(raw,done,overrideContext) {
	this.instancingType = 0;
	this.raw = raw;
	if(raw.name == "voxel") {
		done(this);
		return;
	}
	this.overrideContext = overrideContext;
	this.parseVertexStructure();
	this.compile(done);
};
$hxClasses["iron.data.ShaderContext"] = iron_data_ShaderContext;
iron_data_ShaderContext.__name__ = "iron.data.ShaderContext";
iron_data_ShaderContext.parseData = function(data) {
	if(data == "float1") {
		return 0;
	} else if(data == "float2") {
		return 1;
	} else if(data == "float3") {
		return 2;
	} else if(data == "float4") {
		return 3;
	} else if(data == "short2norm") {
		return 5;
	} else if(data == "short4norm") {
		return 6;
	}
	return 0;
};
iron_data_ShaderContext.prototype = {
	raw: null
	,pipeState: null
	,constants: null
	,textureUnits: null
	,overrideContext: null
	,structure: null
	,instancingType: null
	,compile: function(done) {
		if(this.pipeState != null) {
			this.pipeState.delete();
		}
		this.pipeState = new kha_graphics4_PipelineState();
		this.constants = [];
		this.textureUnits = [];
		if(this.instancingType > 0) {
			var instStruct = new kha_graphics4_VertexStructure();
			instStruct.add("ipos",2);
			if(this.instancingType == 2 || this.instancingType == 4) {
				instStruct.add("irot",2);
			}
			if(this.instancingType == 3 || this.instancingType == 4) {
				instStruct.add("iscl",2);
			}
			instStruct.instanced = true;
			this.pipeState.inputLayout = [this.structure,instStruct];
		} else {
			this.pipeState.inputLayout = [this.structure];
		}
		this.pipeState.depthWrite = this.raw.depth_write;
		this.pipeState.depthMode = this.getCompareMode(this.raw.compare_mode);
		this.pipeState.cullMode = this.getCullMode(this.raw.cull_mode);
		if(this.raw.blend_source != null) {
			this.pipeState.blendSource = this.getBlendingFactor(this.raw.blend_source);
		}
		if(this.raw.blend_destination != null) {
			this.pipeState.blendDestination = this.getBlendingFactor(this.raw.blend_destination);
		}
		if(this.raw.blend_operation != null) {
			this.pipeState.blendOperation = this.getBlendingOperation(this.raw.blend_operation);
		}
		if(this.raw.alpha_blend_source != null) {
			this.pipeState.alphaBlendSource = this.getBlendingFactor(this.raw.alpha_blend_source);
		}
		if(this.raw.alpha_blend_destination != null) {
			this.pipeState.alphaBlendDestination = this.getBlendingFactor(this.raw.alpha_blend_destination);
		}
		if(this.raw.alpha_blend_operation != null) {
			this.pipeState.alphaBlendOperation = this.getBlendingOperation(this.raw.alpha_blend_operation);
		}
		if(this.raw.color_writes_red != null) {
			var _g = 0;
			var _g1 = this.raw.color_writes_red.length;
			while(_g < _g1) {
				var i = _g++;
				this.pipeState.colorWriteMasksRed[i] = this.raw.color_writes_red[i];
			}
		}
		if(this.raw.color_writes_green != null) {
			var _g2 = 0;
			var _g11 = this.raw.color_writes_green.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.pipeState.colorWriteMasksGreen[i1] = this.raw.color_writes_green[i1];
			}
		}
		if(this.raw.color_writes_blue != null) {
			var _g3 = 0;
			var _g12 = this.raw.color_writes_blue.length;
			while(_g3 < _g12) {
				var i2 = _g3++;
				this.pipeState.colorWriteMasksBlue[i2] = this.raw.color_writes_blue[i2];
			}
		}
		if(this.raw.color_writes_alpha != null) {
			var _g4 = 0;
			var _g13 = this.raw.color_writes_alpha.length;
			while(_g4 < _g13) {
				var i3 = _g4++;
				this.pipeState.colorWriteMasksAlpha[i3] = this.raw.color_writes_alpha[i3];
			}
		}
		if(this.raw.conservative_raster != null) {
			this.pipeState.conservativeRasterization = this.raw.conservative_raster;
		}
		if(this.raw.shader_from_source) {
			this.pipeState.vertexShader = kha_graphics4_VertexShader.fromSource(this.raw.vertex_shader);
			this.pipeState.fragmentShader = kha_graphics4_FragmentShader.fromSource(this.raw.fragment_shader);
			this.finishCompile(done);
		} else {
			var tmp = StringTools.replace(this.raw.fragment_shader,".","_");
			this.pipeState.fragmentShader = Reflect.field(kha_Shaders,tmp);
			var tmp1 = StringTools.replace(this.raw.vertex_shader,".","_");
			this.pipeState.vertexShader = Reflect.field(kha_Shaders,tmp1);
			if(this.raw.geometry_shader != null) {
				var tmp2 = StringTools.replace(this.raw.geometry_shader,".","_");
				this.pipeState.geometryShader = Reflect.field(kha_Shaders,tmp2);
			}
			if(this.raw.tesscontrol_shader != null) {
				var tmp3 = StringTools.replace(this.raw.tesscontrol_shader,".","_");
				this.pipeState.tessellationControlShader = Reflect.field(kha_Shaders,tmp3);
			}
			if(this.raw.tesseval_shader != null) {
				var tmp4 = StringTools.replace(this.raw.tesseval_shader,".","_");
				this.pipeState.tessellationEvaluationShader = Reflect.field(kha_Shaders,tmp4);
			}
			this.finishCompile(done);
		}
	}
	,finishCompile: function(done) {
		if(this.overrideContext != null) {
			if(this.overrideContext.cull_mode != null) {
				this.pipeState.cullMode = this.getCullMode(this.overrideContext.cull_mode);
			}
		}
		this.pipeState.compile();
		if(this.raw.constants != null) {
			var _g = 0;
			var _g1 = this.raw.constants;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				this.addConstant(c);
			}
		}
		if(this.raw.texture_units != null) {
			var _g2 = 0;
			var _g11 = this.raw.texture_units;
			while(_g2 < _g11.length) {
				var tu = _g11[_g2];
				++_g2;
				this.addTexture(tu);
			}
		}
		done(this);
	}
	,parseVertexStructure: function() {
		this.structure = new kha_graphics4_VertexStructure();
		var ipos = false;
		var irot = false;
		var iscl = false;
		var _g = 0;
		var _g1 = this.raw.vertex_elements;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem.name == "ipos") {
				ipos = true;
				continue;
			}
			if(elem.name == "irot") {
				irot = true;
				continue;
			}
			if(elem.name == "iscl") {
				iscl = true;
				continue;
			}
			this.structure.add(elem.name,iron_data_ShaderContext.parseData(elem.data));
		}
		if(ipos && !irot && !iscl) {
			this.instancingType = 1;
		} else if(ipos && irot && !iscl) {
			this.instancingType = 2;
		} else if(ipos && !irot && iscl) {
			this.instancingType = 3;
		} else if(ipos && irot && iscl) {
			this.instancingType = 4;
		}
	}
	,'delete': function() {
		if(this.pipeState.fragmentShader != null) {
			this.pipeState.fragmentShader.delete();
		}
		if(this.pipeState.vertexShader != null) {
			this.pipeState.vertexShader.delete();
		}
		if(this.pipeState.geometryShader != null) {
			this.pipeState.geometryShader.delete();
		}
		if(this.pipeState.tessellationControlShader != null) {
			this.pipeState.tessellationControlShader.delete();
		}
		if(this.pipeState.tessellationEvaluationShader != null) {
			this.pipeState.tessellationEvaluationShader.delete();
		}
		this.pipeState.delete();
	}
	,getCompareMode: function(s) {
		switch(s) {
		case "always":
			return 0;
		case "equal":
			return 2;
		case "greater":
			return 6;
		case "greater_equal":
			return 7;
		case "less":
			return 4;
		case "less_equal":
			return 5;
		case "never":
			return 1;
		case "not_equal":
			return 3;
		default:
			return 4;
		}
	}
	,getCullMode: function(s) {
		switch(s) {
		case "clockwise":
			return 0;
		case "none":
			return 2;
		default:
			return 1;
		}
	}
	,getBlendingOperation: function(s) {
		switch(s) {
		case "add":
			return 0;
		case "max":
			return 4;
		case "min":
			return 3;
		case "reverse_subtract":
			return 2;
		case "subtract":
			return 1;
		default:
			return 0;
		}
	}
	,getBlendingFactor: function(s) {
		switch(s) {
		case "blend_one":
			return 1;
		case "blend_zero":
			return 2;
		case "destination_alpha":
			return 4;
		case "destination_color":
			return 8;
		case "inverse_destination_alpha":
			return 6;
		case "inverse_destination_color":
			return 10;
		case "inverse_source_alpha":
			return 5;
		case "inverse_source_color":
			return 9;
		case "source_alpha":
			return 3;
		case "source_color":
			return 7;
		default:
			return 0;
		}
	}
	,getTextureAddresing: function(s) {
		switch(s) {
		case "mirror":
			return 1;
		case "repeat":
			return 0;
		default:
			return 2;
		}
	}
	,getTextureFilter: function(s) {
		switch(s) {
		case "linear":
			return 1;
		case "point":
			return 0;
		default:
			return 2;
		}
	}
	,getMipmapFilter: function(s) {
		switch(s) {
		case "no":
			return 0;
		case "point":
			return 1;
		default:
			return 2;
		}
	}
	,addConstant: function(c) {
		this.constants.push(this.pipeState.getConstantLocation(c.name));
	}
	,addTexture: function(tu) {
		var unit = this.pipeState.getTextureUnit(tu.name);
		this.textureUnits.push(unit);
	}
	,setTextureParameters: function(g,unitIndex,tex) {
		var unit = this.textureUnits[unitIndex];
		g.setTextureParameters(unit,tex.u_addressing == null ? 0 : this.getTextureAddresing(tex.u_addressing),tex.v_addressing == null ? 0 : this.getTextureAddresing(tex.v_addressing),tex.min_filter == null ? 1 : this.getTextureFilter(tex.min_filter),tex.mag_filter == null ? 1 : this.getTextureFilter(tex.mag_filter),tex.mipmap_filter == null ? 0 : this.getMipmapFilter(tex.mipmap_filter));
	}
	,__class__: iron_data_ShaderContext
};
var iron_data_WorldData = function(raw,done) {
	var _gthis = this;
	this.raw = raw;
	this.name = raw.name;
	if(raw.probe != null) {
		new iron_data_Probe(raw.probe,function(self) {
			_gthis.probe = self;
			_gthis.loadEnvmap(done);
		});
	} else {
		this.loadEnvmap(done);
	}
};
$hxClasses["iron.data.WorldData"] = iron_data_WorldData;
iron_data_WorldData.__name__ = "iron.data.WorldData";
iron_data_WorldData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getWorldRawByName(format.world_datas,id);
		if(raw == null) {
			haxe_Log.trace("World data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/WorldData.hx", lineNumber : 57, className : "iron.data.WorldData", methodName : "parse"});
			done(null);
		}
		new iron_data_WorldData(raw,done);
	});
};
iron_data_WorldData.getEmptyIrradiance = function() {
	if(iron_data_WorldData.emptyIrr == null) {
		var this1 = new Float32Array(28);
		iron_data_WorldData.emptyIrr = this1;
		var _g = 0;
		var _g1 = iron_data_WorldData.emptyIrr.length;
		while(_g < _g1) {
			var i = _g++;
			iron_data_WorldData.emptyIrr[i] = 0.0;
		}
	}
	return iron_data_WorldData.emptyIrr;
};
iron_data_WorldData.prototype = {
	name: null
	,raw: null
	,envmap: null
	,probe: null
	,loadEnvmap: function(done) {
		var _gthis = this;
		if(this.raw.envmap != null) {
			iron_data_Data.getImage(this.raw.envmap,function(image) {
				_gthis.envmap = image;
				done(_gthis);
			});
		} else {
			done(this);
		}
	}
	,__class__: iron_data_WorldData
};
var iron_data_Probe = function(raw,done) {
	this.radianceMipmaps = [];
	var _gthis = this;
	this.raw = raw;
	this.setIrradiance(function(irr) {
		_gthis.irradiance = irr;
		if(raw.radiance != null) {
			iron_data_Data.getImage(raw.radiance,function(rad) {
				_gthis.radiance = rad;
				while(_gthis.radianceMipmaps.length < raw.radiance_mipmaps) _gthis.radianceMipmaps.push(null);
				var dot = raw.radiance.lastIndexOf(".");
				var ext = raw.radiance.substring(dot);
				var base = raw.radiance.substring(0,dot);
				var mipsLoaded = 0;
				var _g = 0;
				var _g1 = raw.radiance_mipmaps;
				while(_g < _g1) {
					var i = [_g++];
					iron_data_Data.getImage(base + "_" + i[0] + ext,(function(i1) {
						return function(mipimg) {
							_gthis.radianceMipmaps[i1[0]] = mipimg;
							mipsLoaded += 1;
							if(mipsLoaded == raw.radiance_mipmaps) {
								_gthis.radiance.setMipmaps(_gthis.radianceMipmaps);
								done(_gthis);
							}
						};
					})(i),true);
				}
			});
		} else {
			done(_gthis);
		}
	});
};
$hxClasses["iron.data.Probe"] = iron_data_Probe;
iron_data_Probe.__name__ = "iron.data.Probe";
iron_data_Probe.prototype = {
	raw: null
	,radiance: null
	,radianceMipmaps: null
	,irradiance: null
	,setIrradiance: function(done) {
		if(this.raw.irradiance == null) {
			var tmp = iron_data_WorldData.getEmptyIrradiance();
			done(tmp);
		} else {
			var ext = StringTools.endsWith(this.raw.irradiance,".json") ? "" : ".arm";
			iron_data_Data.getBlob(this.raw.irradiance + ext,function(b) {
				var irradianceParsed = ext == "" ? JSON.parse(b.toString()) : iron_system_ArmPack.decode(b.toBytes());
				var this1 = new Float32Array(28);
				var irr = this1;
				irr[0] = irradianceParsed.irradiance[0];
				irr[1] = irradianceParsed.irradiance[1];
				irr[2] = irradianceParsed.irradiance[2];
				irr[3] = irradianceParsed.irradiance[3];
				irr[4] = irradianceParsed.irradiance[4];
				irr[5] = irradianceParsed.irradiance[5];
				irr[6] = irradianceParsed.irradiance[6];
				irr[7] = irradianceParsed.irradiance[7];
				irr[8] = irradianceParsed.irradiance[8];
				irr[9] = irradianceParsed.irradiance[9];
				irr[10] = irradianceParsed.irradiance[10];
				irr[11] = irradianceParsed.irradiance[11];
				irr[12] = irradianceParsed.irradiance[12];
				irr[13] = irradianceParsed.irradiance[13];
				irr[14] = irradianceParsed.irradiance[14];
				irr[15] = irradianceParsed.irradiance[15];
				irr[16] = irradianceParsed.irradiance[16];
				irr[17] = irradianceParsed.irradiance[17];
				irr[18] = irradianceParsed.irradiance[18];
				irr[19] = irradianceParsed.irradiance[19];
				irr[20] = irradianceParsed.irradiance[20];
				irr[21] = irradianceParsed.irradiance[21];
				irr[22] = irradianceParsed.irradiance[22];
				irr[23] = irradianceParsed.irradiance[23];
				irr[24] = irradianceParsed.irradiance[24];
				irr[25] = irradianceParsed.irradiance[25];
				irr[26] = irradianceParsed.irradiance[26];
				done(irr);
			});
		}
	}
	,__class__: iron_data_Probe
};
var iron_math_Mat3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this.self = new kha_math_FastMatrix3(_00,_10,_20,_01,_11,_21,_02,_12,_22);
};
$hxClasses["iron.math.Mat3"] = iron_math_Mat3;
iron_math_Mat3.__name__ = "iron.math.Mat3";
iron_math_Mat3.identity = function() {
	return new iron_math_Mat3(1,0,0,0,1,0,0,0,1);
};
iron_math_Mat3.prototype = {
	self: null
	,setFrom4: function(m) {
		this.set__00(m.get__00());
		this.set__01(m.get__01());
		this.set__02(m.get__02());
		this.set__10(m.get__10());
		this.set__11(m.get__11());
		this.set__12(m.get__12());
		this.set__20(m.get__20());
		this.set__21(m.get__21());
		this.set__22(m.get__22());
	}
	,get__00: function() {
		return this.self._00;
	}
	,set__00: function(f) {
		return this.self._00 = f;
	}
	,get__01: function() {
		return this.self._01;
	}
	,set__01: function(f) {
		return this.self._01 = f;
	}
	,get__02: function() {
		return this.self._02;
	}
	,set__02: function(f) {
		return this.self._02 = f;
	}
	,get__10: function() {
		return this.self._10;
	}
	,set__10: function(f) {
		return this.self._10 = f;
	}
	,get__11: function() {
		return this.self._11;
	}
	,set__11: function(f) {
		return this.self._11 = f;
	}
	,get__12: function() {
		return this.self._12;
	}
	,set__12: function(f) {
		return this.self._12 = f;
	}
	,get__20: function() {
		return this.self._20;
	}
	,set__20: function(f) {
		return this.self._20 = f;
	}
	,get__21: function() {
		return this.self._21;
	}
	,set__21: function(f) {
		return this.self._21 = f;
	}
	,get__22: function() {
		return this.self._22;
	}
	,set__22: function(f) {
		return this.self._22 = f;
	}
	,__class__: iron_math_Mat3
	,__properties__: {set__22:"set__22",get__22:"get__22",set__21:"set__21",get__21:"get__21",set__20:"set__20",get__20:"get__20",set__12:"set__12",get__12:"get__12",set__11:"set__11",get__11:"get__11",set__10:"set__10",get__10:"get__10",set__02:"set__02",get__02:"get__02",set__01:"set__01",get__01:"get__01",set__00:"set__00",get__00:"get__00"}
};
var iron_math_Ray = function(origin,direction) {
	this.origin = origin == null ? new iron_math_Vec4() : origin;
	this.direction = direction == null ? new iron_math_Vec4() : direction;
};
$hxClasses["iron.math.Ray"] = iron_math_Ray;
iron_math_Ray.__name__ = "iron.math.Ray";
iron_math_Ray.prototype = {
	origin: null
	,direction: null
	,at: function(t) {
		var result = new iron_math_Vec4();
		return result.setFrom(this.direction).mult(t).add(this.origin);
	}
	,distanceToPoint: function(point) {
		var v1 = new iron_math_Vec4();
		var directionDistance = v1.subvecs(point,this.origin).dot(this.direction);
		if(directionDistance < 0) {
			return this.origin.distanceTo(point);
		}
		v1.setFrom(this.direction).mult(directionDistance).add(this.origin);
		return v1.distanceTo(point);
	}
	,intersectsSphere: function(sphereCenter,sphereRadius) {
		return this.distanceToPoint(sphereCenter) <= sphereRadius;
	}
	,intersectsPlane: function(plane) {
		var distToPoint = plane.distanceToPoint(this.origin);
		if(distToPoint == 0) {
			return true;
		}
		var denominator = plane.normal.dot(this.direction);
		if(denominator * distToPoint < 0) {
			return true;
		}
		return false;
	}
	,distanceToPlane: function(plane) {
		var denominator = plane.normal.dot(this.direction);
		if(denominator == 0) {
			if(plane.distanceToPoint(this.origin) == 0) {
				return 0;
			}
			return -1;
		}
		var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
		if(t >= 0) {
			return t;
		} else {
			return -1;
		}
	}
	,intersectPlane: function(plane) {
		var t = this.distanceToPlane(plane);
		if(t == -1) {
			return null;
		}
		return this.at(t);
	}
	,intersectsBox: function(center,dim) {
		return this.intersectBox(center,dim) != null;
	}
	,intersectBox: function(center,dim) {
		var tmin;
		var tmax;
		var tymin;
		var tymax;
		var tzmin;
		var tzmax;
		var halfX = dim.x / 2;
		var halfY = dim.y / 2;
		var halfZ = dim.z / 2;
		var boxMinX = center.x - halfX;
		var boxMinY = center.y - halfY;
		var boxMinZ = center.z - halfZ;
		var boxMaxX = center.x + halfX;
		var boxMaxY = center.y + halfY;
		var boxMaxZ = center.z + halfZ;
		var invdirx = 1 / this.direction.x;
		var invdiry = 1 / this.direction.y;
		var invdirz = 1 / this.direction.z;
		var origin = this.origin;
		if(invdirx >= 0) {
			tmin = (boxMinX - origin.x) * invdirx;
			tmax = (boxMaxX - origin.x) * invdirx;
		} else {
			tmin = (boxMaxX - origin.x) * invdirx;
			tmax = (boxMinX - origin.x) * invdirx;
		}
		if(invdiry >= 0) {
			tymin = (boxMinY - origin.y) * invdiry;
			tymax = (boxMaxY - origin.y) * invdiry;
		} else {
			tymin = (boxMaxY - origin.y) * invdiry;
			tymax = (boxMinY - origin.y) * invdiry;
		}
		if(tmin > tymax || tymin > tmax) {
			return null;
		}
		if(tymin > tmin || tmin != tmin) {
			tmin = tymin;
		}
		if(tymax < tmax || tmax != tmax) {
			tmax = tymax;
		}
		if(invdirz >= 0) {
			tzmin = (boxMinZ - origin.z) * invdirz;
			tzmax = (boxMaxZ - origin.z) * invdirz;
		} else {
			tzmin = (boxMaxZ - origin.z) * invdirz;
			tzmax = (boxMinZ - origin.z) * invdirz;
		}
		if(tmin > tzmax || tzmin > tmax) {
			return null;
		}
		if(tzmin > tmin || tmin != tmin) {
			tmin = tzmin;
		}
		if(tzmax < tmax || tmax != tmax) {
			tmax = tzmax;
		}
		if(tmax < 0) {
			return null;
		}
		return this.at(tmin >= 0 ? tmin : tmax);
	}
	,intersectTriangle: function(a,b,c,backfaceCulling) {
		var diff = new iron_math_Vec4();
		var edge1 = new iron_math_Vec4();
		var edge2 = new iron_math_Vec4();
		var normal = new iron_math_Vec4();
		edge1.subvecs(b,a);
		edge2.subvecs(c,a);
		normal.crossvecs(edge1,edge2);
		var DdN = this.direction.dot(normal);
		var sign;
		if(DdN > 0) {
			if(backfaceCulling) {
				return null;
			}
			sign = 1;
		} else if(DdN < 0) {
			sign = -1;
			DdN = -DdN;
		} else {
			return null;
		}
		diff.subvecs(this.origin,a);
		var DdQxE2 = sign * this.direction.dot(edge2.crossvecs(diff,edge2));
		if(DdQxE2 < 0) {
			return null;
		}
		var DdE1xQ = sign * this.direction.dot(edge1.cross(diff));
		if(DdE1xQ < 0) {
			return null;
		}
		if(DdQxE2 + DdE1xQ > DdN) {
			return null;
		}
		var QdN = -sign * diff.dot(normal);
		if(QdN < 0) {
			return null;
		}
		return this.at(QdN / DdN);
	}
	,__class__: iron_math_Ray
};
var iron_math_Plane = function() {
	this.constant = 0.0;
	this.normal = new iron_math_Vec4(1.0,0.0,0.0);
};
$hxClasses["iron.math.Plane"] = iron_math_Plane;
iron_math_Plane.__name__ = "iron.math.Plane";
iron_math_Plane.prototype = {
	normal: null
	,constant: null
	,distanceToPoint: function(point) {
		return this.normal.dot(point) + this.constant;
	}
	,set: function(normal,point) {
		this.normal.setFrom(normal);
		this.constant = -point.dot(this.normal);
		return this;
	}
	,__class__: iron_math_Plane
};
var iron_math_RayCaster = function() { };
$hxClasses["iron.math.RayCaster"] = iron_math_RayCaster;
iron_math_RayCaster.__name__ = "iron.math.RayCaster";
iron_math_RayCaster.getRay = function(inputX,inputY,camera) {
	var start = new iron_math_Vec4();
	var end = new iron_math_Vec4();
	iron_math_RayCaster.getDirection(start,end,inputX,inputY,camera);
	end.sub(start);
	end.normalize();
	end.x *= camera.data.raw.far_plane;
	end.y *= camera.data.raw.far_plane;
	end.z *= camera.data.raw.far_plane;
	return new iron_math_Ray(start,end);
};
iron_math_RayCaster.getDirection = function(start,end,inputX,inputY,camera) {
	start.x = inputX / iron_App.w() * 2.0 - 1.0;
	start.y = -(inputY / iron_App.h() * 2.0 - 1.0);
	start.z = -1.0;
	end.x = start.x;
	end.y = start.y;
	end.z = 1.0;
	iron_math_RayCaster.PInv.getInverse(camera.P);
	iron_math_RayCaster.VInv.getInverse(camera.V);
	iron_math_RayCaster.VPInv.multmats(iron_math_RayCaster.VInv,iron_math_RayCaster.PInv);
	start.applyproj(iron_math_RayCaster.VPInv);
	end.applyproj(iron_math_RayCaster.VPInv);
};
iron_math_RayCaster.boxIntersect = function(transform,inputX,inputY,camera) {
	var ray = iron_math_RayCaster.getRay(inputX,inputY,camera);
	var t = transform;
	var c = new iron_math_Vec4(t.worldx(),t.worldy(),t.worldz());
	var s = new iron_math_Vec4(t.dim.x,t.dim.y,t.dim.z);
	return ray.intersectBox(c,s);
};
iron_math_RayCaster.closestBoxIntersect = function(transforms,inputX,inputY,camera) {
	var intersects = [];
	var _g = 0;
	while(_g < transforms.length) {
		var t = transforms[_g];
		++_g;
		var intersect = iron_math_RayCaster.boxIntersect(t,inputX,inputY,camera);
		if(intersect != null) {
			intersects.push(t);
		}
	}
	if(intersects.length == 0) {
		return null;
	}
	var closest = null;
	var minDist = Infinity;
	var _g1 = 0;
	while(_g1 < intersects.length) {
		var t1 = intersects[_g1];
		++_g1;
		var dist = iron_math_Vec4.distance(t1.loc,camera.transform.loc);
		if(dist < minDist) {
			minDist = dist;
			closest = t1;
		}
	}
	return closest;
};
iron_math_RayCaster.planeIntersect = function(normal,a,inputX,inputY,camera) {
	var ray = iron_math_RayCaster.getRay(inputX,inputY,camera);
	var plane = new iron_math_Plane();
	plane.set(normal,a);
	return ray.intersectPlane(plane);
};
iron_math_RayCaster.getPlaneUV = function(obj,screenX,screenY,camera) {
	iron_math_RayCaster.nor = obj.transform.up();
	iron_math_RayCaster.loc.set(obj.transform.worldx(),obj.transform.worldy(),obj.transform.worldz());
	var hit = iron_math_RayCaster.planeIntersect(iron_math_RayCaster.nor,iron_math_RayCaster.loc,screenX,screenY,camera);
	if(hit != null) {
		var normals = obj.data.geom.normals.values;
		iron_math_RayCaster.nor.set(normals[0],normals[1],normals[2]);
		var a = iron_math_RayCaster.nor.x;
		var b = iron_math_RayCaster.nor.y;
		var c = iron_math_RayCaster.nor.z;
		var e = 0.0001;
		var u = a >= e && b >= e ? new iron_math_Vec4(b,-a,0) : new iron_math_Vec4(c,-a,0);
		u.normalize();
		var v = iron_math_RayCaster.nor.clone();
		v.cross(u);
		iron_math_RayCaster.m.setFrom(obj.transform.world);
		iron_math_RayCaster.m.getInverse(iron_math_RayCaster.m);
		iron_math_RayCaster.m.transpose3x3();
		iron_math_RayCaster.m.set__30(iron_math_RayCaster.m.set__31(iron_math_RayCaster.m.set__32(0)));
		u.applymat(iron_math_RayCaster.m);
		u.normalize();
		v.applymat(iron_math_RayCaster.m);
		v.normalize();
		hit.sub(iron_math_RayCaster.loc);
		var ucoord = u.dot(hit);
		var vcoord = v.dot(hit);
		var dim = obj.transform.dim;
		var size = dim.x > dim.y ? dim.x / 2 : dim.y / 2;
		var ix = ucoord / size * -0.5 + 0.5;
		var iy = vcoord / size * -0.5 + 0.5;
		return new iron_math_Vec2(ix,iy);
	}
	return null;
};
var iron_math_Vec2 = function(x,y) {
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["iron.math.Vec2"] = iron_math_Vec2;
iron_math_Vec2.__name__ = "iron.math.Vec2";
iron_math_Vec2.distance = function(v1,v2) {
	return iron_math_Vec2.distancef(v1.x,v1.y,v2.x,v2.y);
};
iron_math_Vec2.distancef = function(v1x,v1y,v2x,v2y) {
	var vx = v1x - v2x;
	var vy = v1y - v2y;
	return Math.sqrt(vx * vx + vy * vy);
};
iron_math_Vec2.xAxis = function() {
	return new iron_math_Vec2(1.0,0.0);
};
iron_math_Vec2.yAxis = function() {
	return new iron_math_Vec2(0.0,1.0);
};
iron_math_Vec2.prototype = {
	x: null
	,y: null
	,cross: function(v) {
		return this.x * v.y - this.y * v.x;
	}
	,set: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,add: function(v) {
		this.x += v.x;
		this.y += v.y;
		return this;
	}
	,addf: function(x,y) {
		this.x += x;
		this.y += y;
		return this;
	}
	,addvecs: function(a,b) {
		this.x = a.x + b.x;
		this.y = a.y + b.y;
		return this;
	}
	,subvecs: function(a,b) {
		this.x = a.x - b.x;
		this.y = a.y - b.y;
		return this;
	}
	,normalize: function() {
		var a = this.x;
		var b = this.y;
		var l = a * a + b * b;
		if(l > 0.0) {
			l = 1.0 / Math.sqrt(l);
			this.x = a * l;
			this.y = b * l;
		}
		return this;
	}
	,mult: function(f) {
		this.x *= f;
		this.y *= f;
		return this;
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y;
	}
	,setFrom: function(v) {
		this.x = v.x;
		this.y = v.y;
		return this;
	}
	,clone: function() {
		return new iron_math_Vec2(this.x,this.y);
	}
	,lerp: function(from,to,s) {
		this.x = from.x + (to.x - from.x) * s;
		this.y = from.y + (to.y - from.y) * s;
		return this;
	}
	,equals: function(v) {
		if(this.x == v.x) {
			return this.y == v.y;
		} else {
			return false;
		}
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,sub: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		return this;
	}
	,distanceTo: function(p) {
		return Math.sqrt((p.x - this.x) * (p.x - this.x) + (p.y - this.y) * (p.y - this.y));
	}
	,clamp: function(min,max) {
		var l = this.length();
		if(l < min) {
			this.normalize().mult(min);
		} else if(l > max) {
			this.normalize().mult(max);
		}
		return this;
	}
	,toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: iron_math_Vec2
};
var iron_math_Vec3 = function(x,y,z) {
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["iron.math.Vec3"] = iron_math_Vec3;
iron_math_Vec3.__name__ = "iron.math.Vec3";
iron_math_Vec3.distance = function(v1,v2) {
	return iron_math_Vec3.distancef(v1.x,v1.y,v1.z,v2.x,v2.y,v2.z);
};
iron_math_Vec3.distancef = function(v1x,v1y,v1z,v2x,v2y,v2z) {
	var vx = v1x - v2x;
	var vy = v1y - v2y;
	var vz = v1z - v2z;
	return Math.sqrt(vx * vx + vy * vy + vz * vz);
};
iron_math_Vec3.xAxis = function() {
	return new iron_math_Vec3(1.0,0.0,0.0);
};
iron_math_Vec3.yAxis = function() {
	return new iron_math_Vec3(0.0,1.0,0.0);
};
iron_math_Vec3.zAxis = function() {
	return new iron_math_Vec3(0.0,0.0,1.0);
};
iron_math_Vec3.prototype = {
	x: null
	,y: null
	,z: null
	,cross: function(v) {
		var ax = this.x;
		var ay = this.y;
		var az = this.z;
		var vx = v.x;
		var vy = v.y;
		var vz = v.z;
		this.x = ay * vz - az * vy;
		this.y = az * vx - ax * vz;
		this.z = ax * vy - ay * vx;
		return this;
	}
	,crossvecs: function(a,b) {
		var ax = a.x;
		var ay = a.y;
		var az = a.z;
		var bx = b.x;
		var by = b.y;
		var bz = b.z;
		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;
		return this;
	}
	,set: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
		return this;
	}
	,add: function(v) {
		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		return this;
	}
	,addf: function(x,y,z) {
		this.x += x;
		this.y += y;
		this.z += z;
		return this;
	}
	,addvecs: function(a,b) {
		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		return this;
	}
	,subvecs: function(a,b) {
		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		return this;
	}
	,normalize: function() {
		var n = this.length();
		if(n > 0.0) {
			var invN = 1.0 / n;
			this.x *= invN;
			this.y *= invN;
			this.z *= invN;
		}
		return this;
	}
	,mult: function(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
		return this;
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,setFrom: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		return this;
	}
	,clone: function() {
		return new iron_math_Vec3(this.x,this.y,this.z);
	}
	,lerp: function(from,to,s) {
		this.x = from.x + (to.x - from.x) * s;
		this.y = from.y + (to.y - from.y) * s;
		this.z = from.z + (to.z - from.z) * s;
		return this;
	}
	,applyproj: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var d = 1.0 / (m.get__03() * x + m.get__13() * y + m.get__23() * z + m.get__33());
		this.x = (m.get__00() * x + m.get__10() * y + m.get__20() * z + m.get__30()) * d;
		this.y = (m.get__01() * x + m.get__11() * y + m.get__21() * z + m.get__31()) * d;
		this.z = (m.get__02() * x + m.get__12() * y + m.get__22() * z + m.get__32()) * d;
		return this;
	}
	,applymat: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		this.x = m.get__00() * x + m.get__10() * y + m.get__20() * z + m.get__30();
		this.y = m.get__01() * x + m.get__11() * y + m.get__21() * z + m.get__31();
		this.z = m.get__02() * x + m.get__12() * y + m.get__22() * z + m.get__32();
		return this;
	}
	,equals: function(v) {
		if(this.x == v.x && this.y == v.y) {
			return this.z == v.z;
		} else {
			return false;
		}
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,sub: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		return this;
	}
	,distanceTo: function(p) {
		return Math.sqrt((p.x - this.x) * (p.x - this.x) + (p.y - this.y) * (p.y - this.y) + (p.z - this.z) * (p.z - this.z));
	}
	,clamp: function(min,max) {
		var l = this.length();
		if(l < min) {
			this.normalize().mult(min);
		} else if(l > max) {
			this.normalize().mult(max);
		}
		return this;
	}
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: iron_math_Vec3
};
var iron_object_Animation = function() {
	this.markerEvents = null;
	this.lastFrameIndex = -1;
	this.blendFactor = 0.0;
	this.blendAction = "";
	this.blendCurrent = 0.0;
	this.blendTime = 0.0;
	this.frameTime = 0.016666666666666666;
	this.paused = false;
	this.onComplete = null;
	this.frameIndex = 0;
	this.loop = true;
	this.speed = 1.0;
	this.time = 0.0;
	this.action = "";
	iron_Scene.active.animations.push(this);
	if(iron_Scene.active.raw.frame_time != null) {
		this.frameTime = iron_Scene.active.raw.frame_time;
	}
	this.play();
};
$hxClasses["iron.object.Animation"] = iron_object_Animation;
iron_object_Animation.__name__ = "iron.object.Animation";
iron_object_Animation.prototype = {
	isSkinned: null
	,isSampled: null
	,action: null
	,armature: null
	,time: null
	,speed: null
	,loop: null
	,frameIndex: null
	,onComplete: null
	,paused: null
	,frameTime: null
	,blendTime: null
	,blendCurrent: null
	,blendAction: null
	,blendFactor: null
	,lastFrameIndex: null
	,markerEvents: null
	,play: function(action,onComplete,blendTime,speed,loop) {
		if(loop == null) {
			loop = true;
		}
		if(speed == null) {
			speed = 1.0;
		}
		if(blendTime == null) {
			blendTime = 0.0;
		}
		if(action == null) {
			action = "";
		}
		if(blendTime > 0) {
			this.blendTime = blendTime;
			this.blendCurrent = 0.0;
			this.blendAction = this.action;
			this.frameIndex = 0;
			this.time = 0.0;
		} else {
			this.frameIndex = -1;
		}
		this.action = action;
		this.onComplete = onComplete;
		this.speed = speed;
		this.loop = loop;
		this.paused = false;
	}
	,blend: function(action1,action2,factor) {
		this.blendTime = 1.0;
		this.blendFactor = factor;
	}
	,pause: function() {
		this.paused = true;
	}
	,resume: function() {
		this.paused = false;
	}
	,remove: function() {
		HxOverrides.remove(iron_Scene.active.animations,this);
	}
	,update: function(delta) {
		if(this.paused || this.speed == 0.0) {
			return;
		}
		this.time += delta * this.speed;
		if(this.blendTime > 0 && this.blendFactor == 0) {
			this.blendCurrent += delta;
			if(this.blendCurrent >= this.blendTime) {
				this.blendTime = 0.0;
			}
		}
	}
	,isTrackEnd: function(track) {
		if(this.speed > 0) {
			return this.frameIndex >= track.frames.length - 1;
		} else {
			return this.frameIndex <= 0;
		}
	}
	,checkFrameIndex: function(frameValues) {
		if(this.speed > 0) {
			if(this.frameIndex + 1 < frameValues.length) {
				return this.time > frameValues[this.frameIndex + 1] * this.frameTime;
			} else {
				return false;
			}
		} else if(this.frameIndex - 1 > -1) {
			return this.time < frameValues[this.frameIndex - 1] * this.frameTime;
		} else {
			return false;
		}
	}
	,rewind: function(track) {
		this.frameIndex = this.speed > 0 ? 0 : track.frames.length - 1;
		this.time = track.frames[this.frameIndex] * this.frameTime;
	}
	,updateTrack: function(anim) {
		if(anim == null) {
			return;
		}
		var track = anim.tracks[0];
		if(this.frameIndex == -1) {
			this.rewind(track);
		}
		var sign = this.speed > 0 ? 1 : -1;
		while(this.checkFrameIndex(track.frames)) this.frameIndex += sign;
		if(this.markerEvents != null && anim.marker_names != null && this.frameIndex != this.lastFrameIndex) {
			var _g = 0;
			var _g1 = anim.marker_frames.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.frameIndex == anim.marker_frames[i]) {
					var ar = this.markerEvents.get(anim.marker_names[i]);
					var _g2 = 0;
					while(_g2 < ar.length) {
						var f = ar[_g2];
						++_g2;
						f();
					}
				}
			}
			this.lastFrameIndex = this.frameIndex;
		}
		if(this.isTrackEnd(track)) {
			if(this.loop || this.blendTime > 0) {
				this.rewind(track);
			} else {
				this.frameIndex -= sign;
				this.paused = true;
			}
			if(this.onComplete != null && this.blendTime == 0) {
				this.onComplete();
			}
		}
	}
	,updateAnimSampled: function(anim,m) {
		if(anim == null) {
			return;
		}
		var track = anim.tracks[0];
		var sign = this.speed > 0 ? 1 : -1;
		var t = this.time;
		var ti = this.frameIndex;
		var t1 = track.frames[ti] * this.frameTime;
		var t2 = track.frames[ti + sign] * this.frameTime;
		var s = (t - t1) / (t2 - t1);
		iron_object_Animation.m1.setF32(track.values,ti * 16);
		iron_object_Animation.m2.setF32(track.values,(ti + sign) * 16);
		iron_object_Animation.m1.decompose(iron_object_Animation.vpos,iron_object_Animation.q1,iron_object_Animation.vscl);
		iron_object_Animation.m2.decompose(iron_object_Animation.vpos2,iron_object_Animation.q2,iron_object_Animation.vscl2);
		iron_object_Animation.vp.lerp(iron_object_Animation.vpos,iron_object_Animation.vpos2,s);
		iron_object_Animation.vs.lerp(iron_object_Animation.vscl,iron_object_Animation.vscl2,s);
		iron_object_Animation.q3.lerp(iron_object_Animation.q1,iron_object_Animation.q2,s);
		m.fromQuat(iron_object_Animation.q3);
		m.scale(iron_object_Animation.vs);
		m.set__30(iron_object_Animation.vp.x);
		m.set__31(iron_object_Animation.vp.y);
		m.set__32(iron_object_Animation.vp.z);
	}
	,notifyOnMarker: function(name,onMarker) {
		if(this.markerEvents == null) {
			this.markerEvents = new haxe_ds_StringMap();
		}
		var ar = this.markerEvents.get(name);
		if(ar == null) {
			ar = [];
			this.markerEvents.set(name,ar);
		}
		ar.push(onMarker);
	}
	,removeMarker: function(name,onMarker) {
		HxOverrides.remove(this.markerEvents.get(name),onMarker);
	}
	,currentFrame: function() {
		return Std.int(this.time / this.frameTime);
	}
	,totalFrames: function() {
		return 0;
	}
	,__class__: iron_object_Animation
};
var iron_object_BoneAnimation = function(armatureName) {
	if(armatureName == null) {
		armatureName = "";
	}
	this.onUpdates = null;
	this.constraintMats = null;
	this.constraintTargetsI = null;
	this.constraintTargets = null;
	this.boneChildren = null;
	this.matsFastBlendSort = [];
	this.matsFastBlend = [];
	this.matsFastSort = [];
	this.matsFast = [];
	this.applyParent = null;
	this.absMats = null;
	this.skeletonMatsBlend = null;
	this.skeletonBonesBlend = null;
	this.skeletonMats = null;
	this.skeletonBones = null;
	iron_object_Animation.call(this);
	this.isSampled = false;
	var _g = 0;
	var _g1 = iron_Scene.active.armatures;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		if(a.name == armatureName) {
			this.armature = a;
			break;
		}
	}
};
$hxClasses["iron.object.BoneAnimation"] = iron_object_BoneAnimation;
iron_object_BoneAnimation.__name__ = "iron.object.BoneAnimation";
iron_object_BoneAnimation.__super__ = iron_object_Animation;
iron_object_BoneAnimation.prototype = $extend(iron_object_Animation.prototype,{
	object: null
	,data: null
	,skinBuffer: null
	,skeletonBones: null
	,skeletonMats: null
	,skeletonBonesBlend: null
	,skeletonMatsBlend: null
	,absMats: null
	,applyParent: null
	,matsFast: null
	,matsFastSort: null
	,matsFastBlend: null
	,matsFastBlendSort: null
	,boneChildren: null
	,constraintTargets: null
	,constraintTargetsI: null
	,constraintMats: null
	,setSkin: function(mo) {
		var _gthis = this;
		this.object = mo;
		this.data = mo != null ? mo.data : null;
		this.isSkinned = this.data != null && this.data.isSkinned;
		if(this.isSkinned) {
			var boneSize = 8;
			var this1 = new Float32Array(iron_object_BoneAnimation.skinMaxBones * boneSize);
			this.skinBuffer = this1;
			var _g = 0;
			var _g1 = this.skinBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				this.skinBuffer[i] = 0;
			}
			this.object.transform.rot.set(0,0,0,1);
			this.object.transform.buildMatrix();
			var refs = mo.parent.raw.bone_actions;
			if(refs != null && refs.length > 0) {
				iron_data_Data.getSceneRaw(refs[0],function(action) {
					_gthis.play(action.name);
				});
			}
		}
	}
	,addBoneChild: function(bone,o) {
		if(this.boneChildren == null) {
			this.boneChildren = new haxe_ds_StringMap();
		}
		var ar = this.boneChildren.get(bone);
		if(ar == null) {
			ar = [];
			this.boneChildren.set(bone,ar);
		}
		ar.push(o);
	}
	,updateBoneChildren: function(bone,bm) {
		var ar = this.boneChildren.get(bone.name);
		if(ar == null) {
			return;
		}
		var _g = 0;
		while(_g < ar.length) {
			var o = ar[_g];
			++_g;
			var t = o.transform;
			if(t.boneParent == null) {
				t.boneParent = iron_math_Mat4.identity();
			}
			if(o.raw.parent_bone_tail != null) {
				if(o.raw.parent_bone_connected || this.isSkinned) {
					var v = o.raw.parent_bone_tail;
					t.boneParent.initTranslate(v[0],v[1],v[2]);
					t.boneParent.multmat(bm);
				} else {
					var v1 = o.raw.parent_bone_tail_pose;
					t.boneParent.setFrom(bm);
					t.boneParent.translate(v1[0],v1[1],v1[2]);
				}
			} else {
				t.boneParent.setFrom(bm);
			}
			t.buildMatrix();
		}
	}
	,numParents: function(b) {
		var i = 0;
		var p = b.parent;
		while(p != null) {
			++i;
			p = p.parent;
		}
		return i;
	}
	,setMats: function() {
		var _gthis = this;
		while(this.matsFast.length < this.skeletonBones.length) {
			this.matsFast.push(iron_math_Mat4.identity());
			this.matsFastSort.push(this.matsFastSort.length);
		}
		this.matsFastSort.sort(function(a,b) {
			var i = _gthis.numParents(_gthis.skeletonBones[a]);
			var j = _gthis.numParents(_gthis.skeletonBones[b]);
			if(i < j) {
				return -1;
			} else if(i > j) {
				return 1;
			} else {
				return 0;
			}
		});
		if(this.skeletonBonesBlend != null) {
			while(this.matsFastBlend.length < this.skeletonBonesBlend.length) {
				this.matsFastBlend.push(iron_math_Mat4.identity());
				this.matsFastBlendSort.push(this.matsFastBlendSort.length);
			}
			this.matsFastBlendSort.sort(function(a1,b1) {
				var i1 = _gthis.numParents(_gthis.skeletonBonesBlend[a1]);
				var j1 = _gthis.numParents(_gthis.skeletonBonesBlend[b1]);
				if(i1 < j1) {
					return -1;
				} else if(i1 > j1) {
					return 1;
				} else {
					return 0;
				}
			});
		}
	}
	,setAction: function(action) {
		if(this.isSkinned) {
			this.skeletonBones = this.data.geom.actions.get(action);
			this.skeletonMats = this.data.geom.mats.get(action);
			this.skeletonBonesBlend = null;
			this.skeletonMatsBlend = null;
		} else {
			this.armature.initMats();
			var a = this.armature.getAction(action);
			this.skeletonBones = a.bones;
			this.skeletonMats = a.mats;
		}
		this.setMats();
	}
	,setActionBlend: function(action) {
		if(this.isSkinned) {
			this.skeletonBonesBlend = this.skeletonBones;
			this.skeletonMatsBlend = this.skeletonMats;
			this.skeletonBones = this.data.geom.actions.get(action);
			this.skeletonMats = this.data.geom.mats.get(action);
		} else {
			this.armature.initMats();
			var a = this.armature.getAction(action);
			this.skeletonBones = a.bones;
			this.skeletonMats = a.mats;
		}
		this.setMats();
	}
	,play: function(action,onComplete,blendTime,speed,loop) {
		if(loop == null) {
			loop = true;
		}
		if(speed == null) {
			speed = 1.0;
		}
		if(blendTime == null) {
			blendTime = 0.2;
		}
		if(action == null) {
			action = "";
		}
		iron_object_Animation.prototype.play.call(this,action,onComplete,blendTime,speed,loop);
		if(action != "") {
			if(blendTime > 0) {
				this.setActionBlend(action);
			} else {
				this.setAction(action);
			}
		}
		this.blendFactor = 0.0;
	}
	,blend: function(action1,action2,factor) {
		if(factor == 0.0) {
			this.setAction(action1);
			return;
		}
		this.setAction(action2);
		this.setActionBlend(action1);
		iron_object_Animation.prototype.blend.call(this,action1,action2,factor);
	}
	,update: function(delta) {
		if(!this.isSkinned && this.skeletonBones == null) {
			this.setAction(this.armature.actions[0].name);
		}
		if(this.object != null && (!this.object.visible || this.object.culled)) {
			return;
		}
		if(this.skeletonBones == null || this.skeletonBones.length == 0) {
			return;
		}
		iron_object_Animation.prototype.update.call(this,delta);
		if(this.paused || this.speed == 0.0) {
			return;
		}
		var lastBones = this.skeletonBones;
		var _g = 0;
		var _g1 = this.skeletonBones;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.anim != null) {
				this.updateTrack(b.anim);
				break;
			}
		}
		if(lastBones != this.skeletonBones) {
			return;
		}
		var _g2 = 0;
		var _g3 = this.skeletonBones.length;
		while(_g2 < _g3) {
			var i = _g2++;
			this.updateAnimSampled(this.skeletonBones[i].anim,this.skeletonMats[i]);
		}
		if(this.blendTime > 0 && this.skeletonBonesBlend != null) {
			var _g4 = 0;
			var _g5 = this.skeletonBonesBlend;
			while(_g4 < _g5.length) {
				var b1 = _g5[_g4];
				++_g4;
				if(b1.anim != null) {
					this.updateTrack(b1.anim);
					break;
				}
			}
			var _g6 = 0;
			var _g7 = this.skeletonBonesBlend.length;
			while(_g6 < _g7) {
				var i1 = _g6++;
				this.updateAnimSampled(this.skeletonBonesBlend[i1].anim,this.skeletonMatsBlend[i1]);
			}
		}
		this.updateConstraints();
		if(this.onUpdates != null) {
			var _g41 = 0;
			var _g51 = this.onUpdates;
			while(_g41 < _g51.length) {
				var f = _g51[_g41];
				++_g41;
				f();
			}
		}
		var _g42 = 0;
		var _g52 = this.skeletonBones.length;
		while(_g42 < _g52) {
			var i2 = _g42++;
			this.multParent(this.matsFastSort[i2],this.matsFast,this.skeletonBones,this.skeletonMats);
		}
		if(this.skeletonBonesBlend != null) {
			var _g61 = 0;
			var _g71 = this.skeletonBonesBlend.length;
			while(_g61 < _g71) {
				var i3 = _g61++;
				this.multParent(this.matsFastBlendSort[i3],this.matsFastBlend,this.skeletonBonesBlend,this.skeletonMatsBlend);
			}
		}
		if(this.isSkinned) {
			this.updateSkinGpu();
		} else {
			this.updateBonesOnly();
		}
	}
	,multParent: function(i,fasts,bones,mats) {
		var f = fasts[i];
		if(this.applyParent != null && !this.applyParent[i]) {
			f.setFrom(mats[i]);
			return;
		}
		var p = bones[i].parent;
		var bi = this.getBoneIndex(p,bones);
		if(p == null || bi == -1) {
			f.setFrom(mats[i]);
		} else {
			f.multmats(fasts[bi],mats[i]);
		}
	}
	,multParents: function(m,i,bones,mats) {
		var bone = bones[i];
		var p = bone.parent;
		while(p != null) {
			var i1 = this.getBoneIndex(p,bones);
			if(i1 == -1) {
				continue;
			}
			m.multmat(mats[i1]);
			p = p.parent;
		}
	}
	,updateConstraints: function() {
		if(this.data == null) {
			return;
		}
		var cs = this.data.raw.skin.constraints;
		if(cs == null) {
			return;
		}
		if(this.constraintTargets == null) {
			this.constraintTargets = [];
			this.constraintTargetsI = [];
			var _g = 0;
			while(_g < cs.length) {
				var c = cs[_g];
				++_g;
				var o = iron_Scene.active.getChild(c.target);
				this.constraintTargets.push(o);
				var m = null;
				if(o != null) {
					m = iron_math_Mat4.fromFloat32Array(o.raw.transform.values);
					m.getInverse(m);
				}
				this.constraintTargetsI.push(m);
			}
			this.constraintMats = new haxe_ds_ObjectMap();
		}
		var _g1 = 0;
		var _g11 = cs.length;
		while(_g1 < _g11) {
			var i = _g1++;
			var c1 = cs[i];
			var bone = this.getBone(c1.bone);
			if(bone == null) {
				continue;
			}
			var o1 = this.constraintTargets[i];
			if(o1 == null) {
				continue;
			}
			if(c1.type == "CHILD_OF") {
				var m1 = this.constraintMats.get(bone);
				if(m1 == null) {
					m1 = iron_math_Mat4.identity();
					this.constraintMats.set(bone,m1);
				}
				m1.setFrom(this.object.parent.transform.world);
				m1.multmat(this.constraintTargetsI[i]);
				m1.multmat(o1.transform.world);
				iron_object_BoneAnimation.m1.getInverse(this.object.parent.transform.world);
				m1.multmat(iron_object_BoneAnimation.m1);
			}
		}
	}
	,onUpdates: null
	,notifyOnUpdate: function(f) {
		if(this.onUpdates == null) {
			this.onUpdates = [];
		}
		this.onUpdates.push(f);
	}
	,removeUpdate: function(f) {
		HxOverrides.remove(this.onUpdates,f);
	}
	,updateBonesOnly: function() {
		if(this.boneChildren != null) {
			var _g = 0;
			var _g1 = this.skeletonBones.length;
			while(_g < _g1) {
				var i = _g++;
				var b = this.skeletonBones[i];
				iron_object_BoneAnimation.m.setFrom(this.matsFast[i]);
				this.updateBoneChildren(b,iron_object_BoneAnimation.m);
			}
		}
	}
	,updateSkinGpu: function() {
		var bones = this.skeletonBones;
		var s = this.blendCurrent / this.blendTime;
		s = s * s * (3.0 - 2.0 * s);
		if(this.blendFactor != 0.0) {
			s = 1.0 - this.blendFactor;
		}
		var _g = 0;
		var _g1 = bones.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.constraintMats != null) {
				var m = this.constraintMats.get(bones[i]);
				if(m != null) {
					this.updateSkinBuffer(m,i);
					continue;
				}
			}
			iron_object_BoneAnimation.m.setFrom(this.matsFast[i]);
			if(this.blendTime > 0 && this.skeletonBonesBlend != null) {
				iron_object_BoneAnimation.m1.setFrom(this.matsFastBlend[i]);
				iron_object_BoneAnimation.m1.decompose(iron_object_BoneAnimation.vpos,iron_object_BoneAnimation.q1,iron_object_BoneAnimation.vscl);
				iron_object_BoneAnimation.m.decompose(iron_object_BoneAnimation.vpos2,iron_object_BoneAnimation.q2,iron_object_BoneAnimation.vscl2);
				iron_object_BoneAnimation.v1.lerp(iron_object_BoneAnimation.vpos,iron_object_BoneAnimation.vpos2,s);
				iron_object_BoneAnimation.v2.lerp(iron_object_BoneAnimation.vscl,iron_object_BoneAnimation.vscl2,s);
				iron_object_BoneAnimation.q3.lerp(iron_object_BoneAnimation.q1,iron_object_BoneAnimation.q2,s);
				iron_object_BoneAnimation.m.fromQuat(iron_object_BoneAnimation.q3);
				iron_object_BoneAnimation.m.scale(iron_object_BoneAnimation.v2);
				iron_object_BoneAnimation.m.set__30(iron_object_BoneAnimation.v1.x);
				iron_object_BoneAnimation.m.set__31(iron_object_BoneAnimation.v1.y);
				iron_object_BoneAnimation.m.set__32(iron_object_BoneAnimation.v1.z);
			}
			if(this.absMats != null && i < this.absMats.length) {
				this.absMats[i].setFrom(iron_object_BoneAnimation.m);
			}
			if(this.boneChildren != null) {
				this.updateBoneChildren(bones[i],iron_object_BoneAnimation.m);
			}
			iron_object_BoneAnimation.m.multmats(iron_object_BoneAnimation.m,this.data.geom.skeletonTransformsI[i]);
			this.updateSkinBuffer(iron_object_BoneAnimation.m,i);
		}
	}
	,updateSkinBuffer: function(m,i) {
		m.decompose(iron_object_BoneAnimation.vpos,iron_object_BoneAnimation.q1,iron_object_BoneAnimation.vscl);
		iron_object_BoneAnimation.q1.normalize();
		iron_object_BoneAnimation.q2.set(iron_object_BoneAnimation.vpos.x,iron_object_BoneAnimation.vpos.y,iron_object_BoneAnimation.vpos.z,0.0);
		iron_object_BoneAnimation.q2.multquats(iron_object_BoneAnimation.q2,iron_object_BoneAnimation.q1);
		this.skinBuffer[i * 8] = iron_object_BoneAnimation.q1.x;
		this.skinBuffer[i * 8 + 1] = iron_object_BoneAnimation.q1.y;
		this.skinBuffer[i * 8 + 2] = iron_object_BoneAnimation.q1.z;
		this.skinBuffer[i * 8 + 3] = iron_object_BoneAnimation.q1.w;
		this.skinBuffer[i * 8 + 4] = iron_object_BoneAnimation.q2.x * 0.5;
		this.skinBuffer[i * 8 + 5] = iron_object_BoneAnimation.q2.y * 0.5;
		this.skinBuffer[i * 8 + 6] = iron_object_BoneAnimation.q2.z * 0.5;
		this.skinBuffer[i * 8 + 7] = iron_object_BoneAnimation.q2.w * 0.5;
	}
	,totalFrames: function() {
		if(this.skeletonBones == null) {
			return 0;
		}
		var track = this.skeletonBones[0].anim.tracks[0];
		return Std.int(track.frames[track.frames.length - 1] - track.frames[0]);
	}
	,getBone: function(name) {
		if(this.skeletonBones == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.skeletonBones;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.name == name) {
				return b;
			}
		}
		return null;
	}
	,getBoneIndex: function(bone,bones) {
		if(bones == null) {
			bones = this.skeletonBones;
		}
		if(bones != null) {
			var _g = 0;
			var _g1 = bones.length;
			while(_g < _g1) {
				var i = _g++;
				if(bones[i] == bone) {
					return i;
				}
			}
		}
		return -1;
	}
	,getBoneMat: function(bone) {
		if(this.skeletonMats != null) {
			return this.skeletonMats[this.getBoneIndex(bone)];
		} else {
			return null;
		}
	}
	,getBoneMatBlend: function(bone) {
		if(this.skeletonMatsBlend != null) {
			return this.skeletonMatsBlend[this.getBoneIndex(bone)];
		} else {
			return null;
		}
	}
	,getAbsMat: function(bone) {
		if(this.skeletonMats == null) {
			return null;
		}
		if(this.absMats == null) {
			this.absMats = [];
			while(this.absMats.length < this.skeletonMats.length) this.absMats.push(iron_math_Mat4.identity());
		}
		return this.absMats[this.getBoneIndex(bone)];
	}
	,getWorldMat: function(bone) {
		if(this.skeletonMats == null) {
			return null;
		}
		if(this.applyParent == null) {
			this.applyParent = [];
			var _g = 0;
			var _g1 = this.skeletonMats;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				this.applyParent.push(true);
			}
		}
		var i = this.getBoneIndex(bone);
		iron_object_BoneAnimation.wm.setFrom(this.skeletonMats[i]);
		this.multParents(iron_object_BoneAnimation.wm,i,this.skeletonBones,this.skeletonMats);
		return iron_object_BoneAnimation.wm;
	}
	,getBoneLen: function(bone) {
		var refs = this.data.geom.skeletonBoneRefs;
		var lens = this.data.geom.skeletonBoneLens;
		var _g = 0;
		var _g1 = refs.length;
		while(_g < _g1) {
			var i = _g++;
			if(refs[i] == bone.name) {
				return lens[i];
			}
		}
		return 0.0;
	}
	,solveIK: function(effector,goal,precission,maxIterations) {
		if(maxIterations == null) {
			maxIterations = 6;
		}
		if(precission == null) {
			precission = 0.1;
		}
		var bones = [];
		var lengths = [];
		var start = effector;
		while(start.parent != null) {
			bones.push(start);
			lengths.push(this.getBoneLen(start));
			start = start.parent;
		}
		start = bones[bones.length - 1];
		var armsc = this.object.parent.transform.scale;
		goal.x *= 1 / armsc.x;
		goal.y *= 1 / armsc.y;
		goal.z *= 1 / armsc.z;
		var startLoc = this.getWorldMat(start).getLoc();
		startLoc.z -= this.getBoneLen(start.parent);
		var dist = iron_math_Vec4.distance(goal,startLoc);
		var x = 0.0;
		var _g = 0;
		while(_g < lengths.length) {
			var l = lengths[_g];
			++_g;
			x += l;
		}
		iron_object_BoneAnimation.v1.set(0,1,0);
		if(dist > x) {
			var m = this.getBoneMat(start);
			var w = this.getWorldMat(start);
			var iw = iron_math_Mat4.identity();
			iw.getInverse(w);
			m.setFrom(w);
			m.decompose(iron_object_BoneAnimation.vpos,iron_object_BoneAnimation.q1,iron_object_BoneAnimation.vscl);
			iron_object_BoneAnimation.v2.setFrom(goal).sub(startLoc).normalize();
			iron_object_BoneAnimation.q1.fromTo(iron_object_BoneAnimation.v1,iron_object_BoneAnimation.v2);
			m.compose(iron_object_BoneAnimation.vpos,iron_object_BoneAnimation.q1,iron_object_BoneAnimation.vscl);
			m.multmat(iw);
			var _g1 = 0;
			var _g2 = bones.length - 1;
			while(_g1 < _g2) {
				var i = _g1++;
				var b = bones[i];
				var m1 = this.skeletonMats[this.getBoneIndex(b)];
				m1.decompose(iron_object_BoneAnimation.vpos,iron_object_BoneAnimation.q1,iron_object_BoneAnimation.vscl);
				m1.compose(iron_object_BoneAnimation.vpos,new iron_math_Quat(),iron_object_BoneAnimation.vscl);
			}
			var _g3 = 0;
			while(_g3 < bones.length) {
				var b1 = bones[_g3];
				++_g3;
				this.applyParent[this.getBoneIndex(b1)] = true;
			}
			return;
		}
		var vec = new iron_math_Vec4();
		var locs = [];
		var _g11 = 0;
		while(_g11 < bones.length) {
			var b2 = bones[_g11];
			++_g11;
			locs.push(this.getWorldMat(b2).getLoc());
		}
		var _g21 = 0;
		var _g31 = maxIterations;
		while(_g21 < _g31) {
			var i1 = _g21++;
			vec.setFrom(goal);
			vec.sub(locs[0]);
			vec.normalize();
			vec.mult(lengths[0]);
			locs[0].setFrom(goal);
			locs[0].sub(vec);
			var _g22 = 1;
			var _g32 = locs.length;
			while(_g22 < _g32) {
				var j = _g22++;
				vec.setFrom(locs[j]);
				vec.sub(locs[j - 1]);
				vec.normalize();
				vec.mult(lengths[j]);
				locs[j].setFrom(locs[j - 1]);
				locs[j].add(vec);
			}
			locs[locs.length - 1].setFrom(startLoc);
			var l1 = locs.length;
			var _g4 = 1;
			var _g5 = l1;
			while(_g4 < _g5) {
				var j1 = _g4++;
				vec.setFrom(locs[l1 - j1 - 1]);
				vec.sub(locs[l1 - j1]);
				vec.normalize();
				vec.mult(lengths[l1 - j1]);
				locs[l1 - j1 - 1].setFrom(locs[l1 - j1]);
				locs[l1 - j1 - 1].add(vec);
			}
			if(iron_math_Vec4.distance(locs[0],goal) <= precission) {
				break;
			}
		}
		var _g41 = 0;
		while(_g41 < bones.length) {
			var b3 = bones[_g41];
			++_g41;
			this.applyParent[this.getBoneIndex(b3)] = false;
		}
		var _g51 = 0;
		var _g6 = bones.length;
		while(_g51 < _g6) {
			var i2 = _g51++;
			var m2 = this.getBoneMat(bones[i2]);
			m2.decompose(iron_object_BoneAnimation.vpos,iron_object_BoneAnimation.q1,iron_object_BoneAnimation.vscl);
			var l11 = i2 == 0 ? locs[i2] : locs[i2 - 1];
			var l2 = i2 == 0 ? locs[i2 + 1] : locs[i2];
			iron_object_BoneAnimation.v2.setFrom(l11).sub(l2).normalize();
			iron_object_BoneAnimation.q1.fromTo(iron_object_BoneAnimation.v1,iron_object_BoneAnimation.v2);
			vec.setFrom(locs[i2]);
			m2.compose(vec,iron_object_BoneAnimation.q1,iron_object_BoneAnimation.vscl);
		}
	}
	,__class__: iron_object_BoneAnimation
});
var iron_object_Object = function() {
	this.isEmpty = false;
	this.properties = null;
	this.culledShadow = false;
	this.culledMesh = false;
	this.culled = false;
	this.visibleShadow = true;
	this.visibleMesh = true;
	this.visible = true;
	this.animation = null;
	this.lods = null;
	this.children = [];
	this.parent = null;
	this.traits = [];
	this.constraints = null;
	this.name = "";
	this.raw = null;
	this.uid = iron_object_Object.uidCounter++;
	this.urandom = iron_object_Object.seededRandom();
	this.transform = new iron_object_Transform(this);
	this.isEmpty = Type.getClass(this) == iron_object_Object;
	if(this.isEmpty && iron_Scene.active != null) {
		iron_Scene.active.empties.push(this);
	}
};
$hxClasses["iron.object.Object"] = iron_object_Object;
iron_object_Object.__name__ = "iron.object.Object";
iron_object_Object.seededRandom = function() {
	iron_object_Object.seed = (iron_object_Object.seed * 9301 + 49297) % 233280;
	return iron_object_Object.seed / 233280.0;
};
iron_object_Object.prototype = {
	uid: null
	,urandom: null
	,raw: null
	,name: null
	,transform: null
	,constraints: null
	,traits: null
	,parent: null
	,children: null
	,lods: null
	,animation: null
	,visible: null
	,visibleMesh: null
	,visibleShadow: null
	,culled: null
	,culledMesh: null
	,culledShadow: null
	,properties: null
	,isEmpty: null
	,addChild: function(o,parentInverse) {
		if(parentInverse == null) {
			parentInverse = false;
		}
		if(o.parent == this) {
			return;
		}
		this.children.push(o);
		o.parent = this;
		if(parentInverse) {
			o.transform.applyParentInverse();
		}
	}
	,removeChild: function(o,keepTransform) {
		if(keepTransform == null) {
			keepTransform = false;
		}
		if(keepTransform) {
			o.transform.applyParent();
		}
		o.parent = null;
		o.transform.buildMatrix();
		HxOverrides.remove(this.children,o);
	}
	,remove: function() {
		if(this.isEmpty && iron_Scene.active != null) {
			HxOverrides.remove(iron_Scene.active.empties,this);
		}
		if(this.animation != null) {
			this.animation.remove();
		}
		while(this.children.length > 0) this.children[0].remove();
		while(this.traits.length > 0) this.traits[0].remove();
		if(this.parent != null) {
			HxOverrides.remove(this.parent.children,this);
			this.parent = null;
		}
	}
	,getChild: function(name) {
		if(this.name == name) {
			return this;
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var r = c.getChild(name);
				if(r != null) {
					return r;
				}
			}
		}
		return null;
	}
	,getChildren: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(!recursive) {
			return this.children;
		}
		var retChildren = this.children.slice();
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			retChildren = retChildren.concat(child.getChildren(recursive));
		}
		return retChildren;
	}
	,getChildOfType: function(type) {
		if(Std.is(this,type)) {
			return this;
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var r = c.getChildOfType(type);
				if(r != null) {
					return r;
				}
			}
		}
		return null;
	}
	,addTrait: function(t) {
		this.traits.push(t);
		t.object = this;
		if(t._add != null) {
			var _g = 0;
			var _g1 = t._add;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f();
			}
			t._add = null;
		}
	}
	,removeTrait: function(t) {
		if(t._init != null) {
			var _g = 0;
			var _g1 = t._init;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				iron_App.removeInit(f);
			}
			t._init = null;
		}
		if(t._update != null) {
			var _g2 = 0;
			var _g11 = t._update;
			while(_g2 < _g11.length) {
				var f1 = _g11[_g2];
				++_g2;
				iron_App.removeUpdate(f1);
			}
			t._update = null;
		}
		if(t._lateUpdate != null) {
			var _g3 = 0;
			var _g12 = t._lateUpdate;
			while(_g3 < _g12.length) {
				var f2 = _g12[_g3];
				++_g3;
				iron_App.removeLateUpdate(f2);
			}
			t._lateUpdate = null;
		}
		if(t._render != null) {
			var _g4 = 0;
			var _g13 = t._render;
			while(_g4 < _g13.length) {
				var f3 = _g13[_g4];
				++_g4;
				iron_App.removeRender(f3);
			}
			t._render = null;
		}
		if(t._render2D != null) {
			var _g5 = 0;
			var _g14 = t._render2D;
			while(_g5 < _g14.length) {
				var f4 = _g14[_g5];
				++_g5;
				iron_App.removeRender2D(f4);
			}
			t._render2D = null;
		}
		if(t._remove != null) {
			var _g6 = 0;
			var _g15 = t._remove;
			while(_g6 < _g15.length) {
				var f5 = _g15[_g6];
				++_g6;
				f5();
			}
			t._remove = null;
		}
		HxOverrides.remove(this.traits,t);
	}
	,getTrait: function(c) {
		var _g = 0;
		var _g1 = this.traits;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(Type.getClass(t) == c) {
				return t;
			}
		}
		return null;
	}
	,getParentArmature: function(name) {
		var _g = 0;
		var _g1 = iron_Scene.active.animations;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.armature != null && a.armature.name == name) {
				return a;
			}
		}
		return null;
	}
	,setupAnimation: function(oactions) {
		var _gthis = this;
		if(this.raw.parent_bone != null) {
			iron_Scene.active.notifyOnInit(function() {
				var banim = _gthis.getParentArmature(_gthis.parent.name);
				if(banim != null) {
					banim.addBoneChild(_gthis.raw.parent_bone,_gthis);
				}
			});
		}
		if(oactions == null) {
			return;
		}
		this.animation = new iron_object_ObjectAnimation(this,oactions);
	}
	,__class__: iron_object_Object
};
var iron_object_CameraObject = function(data) {
	this.currentFace = 0;
	this.renderTargetCube = null;
	this.renderTarget = null;
	this.frustumPlanes = null;
	this.prevV = null;
	iron_object_Object.call(this);
	this.data = data;
	this.buildProjection();
	this.V = iron_math_Mat4.identity();
	this.VP = iron_math_Mat4.identity();
	if(data.raw.frustum_culling) {
		this.frustumPlanes = [];
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
	}
	iron_Scene.active.cameras.push(this);
};
$hxClasses["iron.object.CameraObject"] = iron_object_CameraObject;
iron_object_CameraObject.__name__ = "iron.object.CameraObject";
iron_object_CameraObject.buildViewFrustum = function(VP,frustumPlanes) {
	var tmp = VP.get__03() + VP.get__00();
	var tmp1 = VP.get__13() + VP.get__10();
	var tmp2 = VP.get__23() + VP.get__20();
	var tmp3 = VP.get__33() + VP.get__30();
	frustumPlanes[0].setComponents(tmp,tmp1,tmp2,tmp3);
	var tmp4 = VP.get__03() - VP.get__00();
	var tmp5 = VP.get__13() - VP.get__10();
	var tmp6 = VP.get__23() - VP.get__20();
	var tmp7 = VP.get__33() - VP.get__30();
	frustumPlanes[1].setComponents(tmp4,tmp5,tmp6,tmp7);
	var tmp8 = VP.get__03() - VP.get__01();
	var tmp9 = VP.get__13() - VP.get__11();
	var tmp10 = VP.get__23() - VP.get__21();
	var tmp11 = VP.get__33() - VP.get__31();
	frustumPlanes[2].setComponents(tmp8,tmp9,tmp10,tmp11);
	var tmp12 = VP.get__03() + VP.get__01();
	var tmp13 = VP.get__13() + VP.get__11();
	var tmp14 = VP.get__23() + VP.get__21();
	var tmp15 = VP.get__33() + VP.get__31();
	frustumPlanes[3].setComponents(tmp12,tmp13,tmp14,tmp15);
	var tmp16 = VP.get__02();
	var tmp17 = VP.get__12();
	var tmp18 = VP.get__22();
	var tmp19 = VP.get__32();
	frustumPlanes[4].setComponents(tmp16,tmp17,tmp18,tmp19);
	var tmp20 = VP.get__03() - VP.get__02();
	var tmp21 = VP.get__13() - VP.get__12();
	var tmp22 = VP.get__23() - VP.get__22();
	var tmp23 = VP.get__33() - VP.get__32();
	frustumPlanes[5].setComponents(tmp20,tmp21,tmp22,tmp23);
	var _g = 0;
	while(_g < frustumPlanes.length) {
		var plane = frustumPlanes[_g];
		++_g;
		plane.normalize();
	}
};
iron_object_CameraObject.sphereInFrustum = function(frustumPlanes,t,radiusScale,offsetX,offsetY,offsetZ) {
	if(offsetZ == null) {
		offsetZ = 0.0;
	}
	if(offsetY == null) {
		offsetY = 0.0;
	}
	if(offsetX == null) {
		offsetX = 0.0;
	}
	if(radiusScale == null) {
		radiusScale = 1.0;
	}
	var radius = t.radius * radiusScale;
	var _g = 0;
	while(_g < frustumPlanes.length) {
		var plane = frustumPlanes[_g];
		++_g;
		iron_object_CameraObject.sphereCenter.set(t.worldx() + offsetX,t.worldy() + offsetY,t.worldz() + offsetZ);
		if(plane.distanceToSphere(iron_object_CameraObject.sphereCenter,radius) + radius * 2 < 0) {
			return false;
		}
	}
	return true;
};
iron_object_CameraObject.setCubeFace = function(m,eye,face,flip) {
	if(flip == null) {
		flip = false;
	}
	iron_object_CameraObject.vcenter.setFrom(eye);
	var f = flip ? -1.0 : 1.0;
	switch(face) {
	case 0:
		iron_object_CameraObject.vcenter.addf(f,0.0,0.0);
		iron_object_CameraObject.vup.set(0.0,-1.0 * f,0.0);
		break;
	case 1:
		iron_object_CameraObject.vcenter.addf(-1.0 * f,0.0,0.0);
		iron_object_CameraObject.vup.set(0.0,-1.0 * f,0.0);
		break;
	case 2:
		iron_object_CameraObject.vcenter.addf(0.0,f,0.0);
		iron_object_CameraObject.vup.set(0.0,0.0,f);
		break;
	case 3:
		iron_object_CameraObject.vcenter.addf(0.0,-1.0 * f,0.0);
		iron_object_CameraObject.vup.set(0.0,0.0,-1.0 * f);
		break;
	case 4:
		iron_object_CameraObject.vcenter.addf(0.0,0.0,f);
		iron_object_CameraObject.vup.set(0.0,-1.0 * f,0.0);
		break;
	case 5:
		iron_object_CameraObject.vcenter.addf(0.0,0.0,-1.0 * f);
		iron_object_CameraObject.vup.set(0.0,-1.0 * f,0.0);
		break;
	}
	m.setLookAt(eye,iron_object_CameraObject.vcenter,iron_object_CameraObject.vup);
};
iron_object_CameraObject.__super__ = iron_object_Object;
iron_object_CameraObject.prototype = $extend(iron_object_Object.prototype,{
	data: null
	,P: null
	,V: null
	,prevV: null
	,VP: null
	,frustumPlanes: null
	,renderTarget: null
	,renderTargetCube: null
	,currentFace: null
	,buildProjection: function(screenAspect) {
		if(this.data.raw.ortho != null) {
			this.P = iron_math_Mat4.ortho(this.data.raw.ortho[0],this.data.raw.ortho[1],this.data.raw.ortho[2],this.data.raw.ortho[3],this.data.raw.near_plane,this.data.raw.far_plane);
		} else {
			if(screenAspect == null) {
				screenAspect = iron_App.w() / iron_App.h();
			}
			var aspect = this.data.raw.aspect != null ? this.data.raw.aspect : screenAspect;
			this.P = iron_math_Mat4.persp(this.data.raw.fov,aspect,this.data.raw.near_plane,this.data.raw.far_plane);
		}
	}
	,remove: function() {
		HxOverrides.remove(iron_Scene.active.cameras,this);
		iron_object_Object.prototype.remove.call(this);
	}
	,renderFrame: function(g) {
		this.buildMatrix();
		if(this.prevV == null) {
			this.prevV = iron_math_Mat4.identity();
			this.prevV.setFrom(this.V);
		}
		iron_RenderPath.active.renderFrame(g);
		this.prevV.setFrom(this.V);
	}
	,buildMatrix: function() {
		this.transform.buildMatrix();
		var sc = this.transform.world.getScale();
		if(sc.x != 1.0 || sc.y != 1.0 || sc.z != 1.0) {
			iron_object_CameraObject.temp.set(1.0 / sc.x,1.0 / sc.y,1.0 / sc.z);
			this.transform.world.scale(iron_object_CameraObject.temp);
		}
		this.V.getInverse(this.transform.world);
		this.VP.multmats(this.P,this.V);
		if(this.data.raw.frustum_culling) {
			iron_object_CameraObject.buildViewFrustum(this.VP,this.frustumPlanes);
		}
	}
	,right: function() {
		return new iron_math_Vec4(this.transform.local.get__00(),this.transform.local.get__01(),this.transform.local.get__02());
	}
	,up: function() {
		return new iron_math_Vec4(this.transform.local.get__10(),this.transform.local.get__11(),this.transform.local.get__12());
	}
	,look: function() {
		return new iron_math_Vec4(-this.transform.local.get__20(),-this.transform.local.get__21(),-this.transform.local.get__22());
	}
	,rightWorld: function() {
		return new iron_math_Vec4(this.transform.world.get__00(),this.transform.world.get__01(),this.transform.world.get__02());
	}
	,upWorld: function() {
		return new iron_math_Vec4(this.transform.world.get__10(),this.transform.world.get__11(),this.transform.world.get__12());
	}
	,lookWorld: function() {
		return new iron_math_Vec4(-this.transform.world.get__20(),-this.transform.world.get__21(),-this.transform.world.get__22());
	}
	,__class__: iron_object_CameraObject
});
var iron_object_FrustumPlane = function() {
	this.constant = 0.0;
	this.normal = new iron_math_Vec4(1.0,0.0,0.0);
};
$hxClasses["iron.object.FrustumPlane"] = iron_object_FrustumPlane;
iron_object_FrustumPlane.__name__ = "iron.object.FrustumPlane";
iron_object_FrustumPlane.prototype = {
	normal: null
	,constant: null
	,normalize: function() {
		var inverseNormalLength = 1.0 / this.normal.length();
		this.normal.mult(inverseNormalLength);
		this.constant *= inverseNormalLength;
	}
	,distanceToSphere: function(sphereCenter,sphereRadius) {
		return this.normal.dot(sphereCenter) + this.constant - sphereRadius;
	}
	,setComponents: function(x,y,z,w) {
		this.normal.set(x,y,z);
		this.constant = w;
	}
	,__class__: iron_object_FrustumPlane
};
var iron_object_Constraint = function(constr) {
	this.target = null;
	this.raw = constr;
};
$hxClasses["iron.object.Constraint"] = iron_object_Constraint;
iron_object_Constraint.__name__ = "iron.object.Constraint";
iron_object_Constraint.prototype = {
	raw: null
	,target: null
	,apply: function(transform) {
		if(this.target == null && this.raw.target != null) {
			this.target = iron_Scene.active.getChild(this.raw.target).transform;
		}
		if(this.raw.type == "COPY_LOCATION") {
			if(this.raw.use_x) {
				transform.world.set__30(this.target.loc.x);
				if(this.raw.use_offset) {
					var _g = transform.world;
					_g.set__30(_g.get__30() + transform.loc.x);
				}
			}
			if(this.raw.use_y) {
				transform.world.set__31(this.target.loc.y);
				if(this.raw.use_offset) {
					var _g1 = transform.world;
					_g1.set__31(_g1.get__31() + transform.loc.y);
				}
			}
			if(this.raw.use_z) {
				transform.world.set__32(this.target.loc.z);
				if(this.raw.use_offset) {
					var _g2 = transform.world;
					_g2.set__32(_g2.get__32() + transform.loc.z);
				}
			}
		}
	}
	,__class__: iron_object_Constraint
};
var iron_object_DecalObject = function() {
	iron_object_Object.call(this);
};
$hxClasses["iron.object.DecalObject"] = iron_object_DecalObject;
iron_object_DecalObject.__name__ = "iron.object.DecalObject";
iron_object_DecalObject.__super__ = iron_object_Object;
iron_object_DecalObject.prototype = $extend(iron_object_Object.prototype,{
	__class__: iron_object_DecalObject
});
var iron_object_LightObject = function(data) {
	this.frustumPlanes = null;
	this.VP = iron_math_Mat4.identity();
	this.P = null;
	this.V = iron_math_Mat4.identity();
	this.bias = iron_math_Mat4.identity();
	this.camSlicedP = null;
	this.cascadeData = null;
	iron_object_Object.call(this);
	this.data = data;
	var type = data.raw.type;
	var fov = data.raw.fov;
	if(type == "sun") {
		if(iron_object_LightObject.corners == null) {
			iron_object_LightObject.corners = [];
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
		}
		this.P = iron_math_Mat4.identity();
	} else if(type == "point" || type == "area") {
		this.P = iron_math_Mat4.persp(fov,1,data.raw.near_plane,data.raw.far_plane);
	} else if(type == "spot") {
		this.P = iron_math_Mat4.persp(fov,1,data.raw.near_plane,data.raw.far_plane);
	}
	iron_Scene.active.lights.push(this);
};
$hxClasses["iron.object.LightObject"] = iron_object_LightObject;
iron_object_LightObject.__name__ = "iron.object.LightObject";
iron_object_LightObject.setCorners = function() {
	iron_object_LightObject.corners[0].set(-1.0,-1.0,1.0);
	iron_object_LightObject.corners[1].set(-1.0,-1.0,-1.0);
	iron_object_LightObject.corners[2].set(-1.0,1.0,1.0);
	iron_object_LightObject.corners[3].set(-1.0,1.0,-1.0);
	iron_object_LightObject.corners[4].set(1.0,-1.0,1.0);
	iron_object_LightObject.corners[5].set(1.0,-1.0,-1.0);
	iron_object_LightObject.corners[6].set(1.0,1.0,1.0);
	iron_object_LightObject.corners[7].set(1.0,1.0,-1.0);
};
iron_object_LightObject.mix = function(a,b,f) {
	return a * (1 - f) + b * f;
};
iron_object_LightObject.getRadius = function(strength) {
	return Math.sqrt(strength / 0.004);
};
iron_object_LightObject.distSliceX = function(f,lpos) {
	return (lpos.x - f * lpos.z) / Math.sqrt(1.0 + f * f);
};
iron_object_LightObject.distSliceY = function(f,lpos) {
	return (lpos.y - f * lpos.z) / Math.sqrt(1.0 + f * f);
};
iron_object_LightObject.sliceToDist = function(camera,z) {
	var cnear = 3.0 + camera.data.raw.near_plane;
	if(z == 0) {
		return camera.data.raw.near_plane;
	} else if(z == 1) {
		return cnear;
	} else {
		var depthl = (z - 1) / (iron_object_LightObject.slicesZ - 1);
		return Math.exp(depthl * Math.log(camera.data.raw.far_plane - cnear + 1.0)) + cnear - 1.0;
	}
};
iron_object_LightObject.updateClusters = function(camera) {
	var lights = iron_Scene.active.lights;
	lights.sort(function(a,b) {
		if(a.data.raw.type >= b.data.raw.type) {
			return 1;
		} else {
			return -1;
		}
	});
	iron_object_LightObject.updateLightsArray();
	if(iron_object_LightObject.clustersData == null) {
		var lines = 2;
		iron_object_LightObject.clustersData = kha_Image.create(iron_object_LightObject.slicesX * iron_object_LightObject.slicesY * iron_object_LightObject.slicesZ,lines + 4,1,1);
	}
	var bytes = iron_object_LightObject.clustersData.lock();
	var stride = iron_object_LightObject.slicesX * iron_object_LightObject.slicesY * iron_object_LightObject.slicesZ;
	var _g = 0;
	var _g1 = stride;
	while(_g < _g1) {
		var i = _g++;
		bytes.set(i,0);
	}
	var _g2 = 0;
	var _g3 = stride;
	while(_g2 < _g3) {
		var i1 = _g2++;
		bytes.set(i1 + stride * 5,0);
	}
	var fovtan = Math.tan(camera.data.raw.fov * 0.5);
	var stepY = 2.0 * fovtan / iron_object_LightObject.slicesY;
	var aspect = iron_RenderPath.active.currentW / iron_RenderPath.active.currentH;
	var stepX = 2.0 * fovtan * aspect / iron_object_LightObject.slicesX;
	var n = lights.length > 16 ? 16 : lights.length;
	var i2 = 0;
	var _g4 = 0;
	while(_g4 < lights.length) {
		var l = lights[_g4];
		++_g4;
		if(!l.visible || l.data.raw.strength == 0.0 || l.data.raw.type == "sun") {
			continue;
		}
		if(i2 >= n) {
			break;
		}
		iron_object_LightObject.lpos.set(l.transform.worldx(),l.transform.worldy(),l.transform.worldz());
		iron_object_LightObject.lpos.applymat4(camera.V);
		iron_object_LightObject.lpos.z *= -1.0;
		var radius = iron_object_LightObject.getRadius(l.data.raw.strength);
		var minX = 0;
		var minY = 0;
		var minZ = 0;
		var maxX = iron_object_LightObject.slicesX;
		var maxY = iron_object_LightObject.slicesY;
		var maxZ = iron_object_LightObject.slicesZ;
		while(minX <= iron_object_LightObject.slicesX) {
			if(iron_object_LightObject.distSliceX(stepX * (minX + 1 - iron_object_LightObject.slicesX * 0.5),iron_object_LightObject.lpos) <= radius) {
				break;
			}
			++minX;
		}
		while(maxX >= minX) {
			if(-iron_object_LightObject.distSliceX(stepX * (maxX - 1 - iron_object_LightObject.slicesX * 0.5),iron_object_LightObject.lpos) <= radius) {
				--maxX;
				break;
			}
			--maxX;
		}
		while(minY <= iron_object_LightObject.slicesY) {
			if(iron_object_LightObject.distSliceY(stepY * (minY + 1 - iron_object_LightObject.slicesY * 0.5),iron_object_LightObject.lpos) <= radius) {
				break;
			}
			++minY;
		}
		while(maxY >= minY) {
			if(-iron_object_LightObject.distSliceY(stepY * (maxY - 1 - iron_object_LightObject.slicesY * 0.5),iron_object_LightObject.lpos) <= radius) {
				--maxY;
				break;
			}
			--maxY;
		}
		while(minZ <= iron_object_LightObject.slicesZ) {
			if(iron_object_LightObject.sliceToDist(camera,minZ + 1) >= iron_object_LightObject.lpos.z - radius) {
				break;
			}
			++minZ;
		}
		while(maxZ >= minZ) {
			if(iron_object_LightObject.sliceToDist(camera,maxZ - 1) <= iron_object_LightObject.lpos.z + radius) {
				break;
			}
			--maxZ;
		}
		var _g41 = minZ;
		var _g5 = maxZ + 1;
		while(_g41 < _g5) {
			var z = _g41++;
			var _g42 = minY;
			var _g51 = maxY + 1;
			while(_g42 < _g51) {
				var y = _g42++;
				var _g43 = minX;
				var _g52 = maxX + 1;
				while(_g43 < _g52) {
					var x = _g43++;
					var cluster = x + y * iron_object_LightObject.slicesX + z * iron_object_LightObject.slicesX * iron_object_LightObject.slicesY;
					var numLights = bytes.get(cluster);
					if(numLights < 4) {
						++numLights;
						bytes.set(cluster,numLights);
						bytes.set(cluster + stride * numLights,i2);
						if(l.data.raw.type == "spot") {
							var numSpots = bytes.get(cluster + stride * 5) + 1;
							bytes.set(cluster + stride * 5,numSpots);
						}
					}
				}
			}
		}
		++i2;
	}
	iron_object_LightObject.clustersData.unlock();
};
iron_object_LightObject.updateLightsArray = function() {
	if(iron_object_LightObject.lightsArray == null) {
		var this1 = new Float32Array(128);
		iron_object_LightObject.lightsArray = this1;
		var this2 = new Float32Array(64);
		iron_object_LightObject.lightsArraySpot = this2;
	}
	var lights = iron_Scene.active.lights;
	var n = lights.length > 16 ? 16 : lights.length;
	var i = 0;
	var _g = 0;
	while(_g < lights.length) {
		var l = lights[_g];
		++_g;
		if(!l.visible || l.data.raw.type == "sun") {
			continue;
		}
		if(i >= n) {
			break;
		}
		iron_object_LightObject.lightsArray[i * 8] = l.transform.worldx();
		iron_object_LightObject.lightsArray[i * 8 + 1] = l.transform.worldy();
		iron_object_LightObject.lightsArray[i * 8 + 2] = l.transform.worldz();
		iron_object_LightObject.lightsArray[i * 8 + 3] = l.data.raw.shadows_bias;
		var f = l.data.raw.strength;
		iron_object_LightObject.lightsArray[i * 8 + 4] = l.data.raw.color[0] * f;
		iron_object_LightObject.lightsArray[i * 8 + 5] = l.data.raw.color[1] * f;
		iron_object_LightObject.lightsArray[i * 8 + 6] = l.data.raw.color[2] * f;
		if(l.data.raw.type == "spot") {
			var a = l.data.raw.type == "spot" ? l.data.raw.spot_size : 0.0;
			iron_object_LightObject.lightsArray[i * 8 + 7] = a;
			var dir = l.look();
			iron_object_LightObject.lightsArraySpot[i * 4] = dir.x;
			iron_object_LightObject.lightsArraySpot[i * 4 + 1] = dir.y;
			iron_object_LightObject.lightsArraySpot[i * 4 + 2] = dir.z;
			var b = a - l.data.raw.spot_blend;
			iron_object_LightObject.lightsArraySpot[i * 4 + 3] = b;
		}
		++i;
	}
};
iron_object_LightObject.__super__ = iron_object_Object;
iron_object_LightObject.prototype = $extend(iron_object_Object.prototype,{
	data: null
	,cascadeData: null
	,cascadeVP: null
	,camSlicedP: null
	,cascadeSplit: null
	,bias: null
	,V: null
	,P: null
	,VP: null
	,frustumPlanes: null
	,remove: function() {
		if(iron_Scene.active != null) {
			HxOverrides.remove(iron_Scene.active.lights,this);
		}
		iron_object_Object.prototype.remove.call(this);
	}
	,buildMatrix: function(camera) {
		this.transform.buildMatrix();
		if(this.data.raw.type != "sun") {
			this.V.getInverse(this.transform.world);
			this.updateViewFrustum(camera);
		}
	}
	,setCascade: function(camera,cascade) {
		iron_object_LightObject.m.setFrom(camera.V);
		if(this.camSlicedP == null) {
			this.camSlicedP = [];
			this.cascadeSplit = [];
			var ortho = camera.data.raw.ortho;
			if(ortho == null) {
				var aspect = camera.data.raw.aspect != null ? camera.data.raw.aspect : iron_App.w() / iron_App.h();
				var fov = camera.data.raw.fov;
				var near = camera.data.raw.near_plane;
				var far = camera.data.raw.far_plane;
				var factor = iron_object_LightObject.cascadeCount > 2 ? iron_object_LightObject.cascadeSplitFactor : iron_object_LightObject.cascadeSplitFactor * 0.25;
				var _g = 0;
				var _g1 = iron_object_LightObject.cascadeCount;
				while(_g < _g1) {
					var i = _g++;
					var f = i + 1.0;
					var cfar = iron_object_LightObject.mix(near + f / iron_object_LightObject.cascadeCount * (far - near),near * Math.pow(far / near,f / iron_object_LightObject.cascadeCount),factor);
					this.cascadeSplit.push(cfar);
					this.camSlicedP.push(iron_math_Mat4.persp(fov,aspect,near,cfar));
				}
			} else {
				var _g2 = 0;
				var _g11 = iron_object_LightObject.cascadeCount;
				while(_g2 < _g11) {
					var i1 = _g2++;
					this.cascadeSplit.push(this.data.raw.far_plane);
					this.camSlicedP.push(iron_math_Mat4.ortho(ortho[0],ortho[1],ortho[2],ortho[3],this.data.raw.near_plane,this.data.raw.far_plane));
				}
			}
		}
		iron_object_LightObject.m.multmat(this.camSlicedP[cascade]);
		iron_object_LightObject.m.getInverse(iron_object_LightObject.m);
		this.V.getInverse(this.transform.world);
		this.V.toRotation();
		iron_object_LightObject.m.multmat(this.V);
		iron_object_LightObject.setCorners();
		var _g3 = 0;
		var _g12 = iron_object_LightObject.corners;
		while(_g3 < _g12.length) {
			var v = _g12[_g3];
			++_g3;
			v.applymat4(iron_object_LightObject.m);
			v.set(v.x / v.w,v.y / v.w,v.z / v.w);
		}
		var minx = iron_object_LightObject.corners[0].x;
		var miny = iron_object_LightObject.corners[0].y;
		var minz = iron_object_LightObject.corners[0].z;
		var maxx = iron_object_LightObject.corners[0].x;
		var maxy = iron_object_LightObject.corners[0].y;
		var maxz = iron_object_LightObject.corners[0].z;
		var _g21 = 0;
		var _g31 = iron_object_LightObject.corners;
		while(_g21 < _g31.length) {
			var v1 = _g31[_g21];
			++_g21;
			if(v1.x < minx) {
				minx = v1.x;
			}
			if(v1.x > maxx) {
				maxx = v1.x;
			}
			if(v1.y < miny) {
				miny = v1.y;
			}
			if(v1.y > maxy) {
				maxy = v1.y;
			}
			if(v1.z < minz) {
				minz = v1.z;
			}
			if(v1.z > maxz) {
				maxz = v1.z;
			}
		}
		var diag0 = iron_math_Vec4.distance(iron_object_LightObject.corners[0],iron_object_LightObject.corners[7]);
		var offx = (diag0 - (maxx - minx)) * 0.5;
		var offy = (diag0 - (maxy - miny)) * 0.5;
		minx -= offx;
		maxx += offx;
		miny -= offy;
		maxy += offy;
		var smsize = this.data.raw.shadowmap_size;
		smsize = Std.int(smsize / 4);
		var worldPerTexelX = (maxx - minx) / smsize;
		var worldPerTexelY = (maxy - miny) / smsize;
		var worldPerTexelZ = (maxz - minz) / smsize;
		minx = Math.floor(minx / worldPerTexelX) * worldPerTexelX;
		miny = Math.floor(miny / worldPerTexelY) * worldPerTexelY;
		minz = Math.floor(minz / worldPerTexelZ) * worldPerTexelZ;
		maxx = Math.floor(maxx / worldPerTexelX) * worldPerTexelX;
		maxy = Math.floor(maxy / worldPerTexelY) * worldPerTexelY;
		maxz = Math.floor(maxz / worldPerTexelZ) * worldPerTexelZ;
		var hx = (maxx - minx) / 2;
		var hy = (maxy - miny) / 2;
		var hz = (maxz - minz) / 2;
		this.V.set__30(-(minx + hx));
		this.V.set__31(-(miny + hy));
		this.V.set__32(-(minz + hz));
		iron_object_LightObject.m = iron_math_Mat4.ortho(-hx,hx,-hy,hy,-hz * 4 * iron_object_LightObject.cascadeBounds,hz);
		this.P.setFrom(iron_object_LightObject.m);
		this.updateViewFrustum(camera);
		if(this.cascadeVP == null) {
			this.cascadeVP = [];
			var _g4 = 0;
			var _g5 = iron_object_LightObject.cascadeCount;
			while(_g4 < _g5) {
				var i2 = _g4++;
				this.cascadeVP.push(iron_math_Mat4.identity());
			}
		}
		this.cascadeVP[cascade].setFrom(this.VP);
	}
	,updateViewFrustum: function(camera) {
		this.VP.multmats(this.P,this.V);
		if(camera.data.raw.frustum_culling) {
			if(this.frustumPlanes == null) {
				this.frustumPlanes = [];
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
			}
			iron_object_CameraObject.buildViewFrustum(this.VP,this.frustumPlanes);
		}
	}
	,setCubeFace: function(face,camera) {
		iron_object_LightObject.eye.set(this.transform.worldx(),this.transform.worldy(),this.transform.worldz());
		var flip = false;
		iron_object_CameraObject.setCubeFace(this.V,iron_object_LightObject.eye,face,flip);
		this.updateViewFrustum(camera);
	}
	,getCascadeData: function() {
		if(this.cascadeData == null) {
			var this1 = new Float32Array(iron_object_LightObject.cascadeCount * 16 + 4);
			this.cascadeData = this1;
		}
		if(this.cascadeVP == null) {
			return this.cascadeData;
		}
		var _g = 0;
		var _g1 = iron_object_LightObject.cascadeCount;
		while(_g < _g1) {
			var i = _g++;
			iron_object_LightObject.m.setFrom(this.cascadeVP[i]);
			this.bias.setFrom(iron_object_Uniforms.biasMat);
			var _g2 = this.bias;
			_g2.set__00(_g2.get__00() / iron_object_LightObject.cascadeCount);
			var _g3 = this.bias;
			_g3.set__30(_g3.get__30() / iron_object_LightObject.cascadeCount);
			var _g4 = this.bias;
			_g4.set__30(_g4.get__30() + i * (1 / iron_object_LightObject.cascadeCount));
			iron_object_LightObject.m.multmat(this.bias);
			this.cascadeData[i * 16] = iron_object_LightObject.m.get__00();
			this.cascadeData[i * 16 + 1] = iron_object_LightObject.m.get__01();
			this.cascadeData[i * 16 + 2] = iron_object_LightObject.m.get__02();
			this.cascadeData[i * 16 + 3] = iron_object_LightObject.m.get__03();
			this.cascadeData[i * 16 + 4] = iron_object_LightObject.m.get__10();
			this.cascadeData[i * 16 + 5] = iron_object_LightObject.m.get__11();
			this.cascadeData[i * 16 + 6] = iron_object_LightObject.m.get__12();
			this.cascadeData[i * 16 + 7] = iron_object_LightObject.m.get__13();
			this.cascadeData[i * 16 + 8] = iron_object_LightObject.m.get__20();
			this.cascadeData[i * 16 + 9] = iron_object_LightObject.m.get__21();
			this.cascadeData[i * 16 + 10] = iron_object_LightObject.m.get__22();
			this.cascadeData[i * 16 + 11] = iron_object_LightObject.m.get__23();
			this.cascadeData[i * 16 + 12] = iron_object_LightObject.m.get__30();
			this.cascadeData[i * 16 + 13] = iron_object_LightObject.m.get__31();
			this.cascadeData[i * 16 + 14] = iron_object_LightObject.m.get__32();
			this.cascadeData[i * 16 + 15] = iron_object_LightObject.m.get__33();
		}
		this.cascadeData[iron_object_LightObject.cascadeCount * 16] = this.cascadeSplit[0];
		this.cascadeData[iron_object_LightObject.cascadeCount * 16 + 1] = this.cascadeSplit[1];
		this.cascadeData[iron_object_LightObject.cascadeCount * 16 + 2] = this.cascadeSplit[2];
		this.cascadeData[iron_object_LightObject.cascadeCount * 16 + 3] = this.cascadeSplit[3];
		return this.cascadeData;
	}
	,right: function() {
		return new iron_math_Vec4(this.V.get__00(),this.V.get__10(),this.V.get__20());
	}
	,up: function() {
		return new iron_math_Vec4(this.V.get__01(),this.V.get__11(),this.V.get__21());
	}
	,look: function() {
		return new iron_math_Vec4(this.V.get__02(),this.V.get__12(),this.V.get__22());
	}
	,__class__: iron_object_LightObject
});
var iron_object_MeshObject = function(data,materials) {
	this.force_context = null;
	this.skip_context = null;
	this.tilesheet = null;
	this.frustumCulling = true;
	this.screenSize = 0.0;
	this.particleIndex = -1;
	this.particleOwner = null;
	this.particleChildren = null;
	this.particleSystems = null;
	this.materialIndex = 0;
	this.data = null;
	iron_object_Object.call(this);
	this.materials = materials;
	this.setData(data);
	iron_Scene.active.meshes.push(this);
};
$hxClasses["iron.object.MeshObject"] = iron_object_MeshObject;
iron_object_MeshObject.__name__ = "iron.object.MeshObject";
iron_object_MeshObject.__super__ = iron_object_Object;
iron_object_MeshObject.prototype = $extend(iron_object_Object.prototype,{
	data: null
	,materials: null
	,materialIndex: null
	,particleSystems: null
	,particleChildren: null
	,particleOwner: null
	,particleIndex: null
	,cameraDistance: null
	,screenSize: null
	,frustumCulling: null
	,tilesheet: null
	,skip_context: null
	,force_context: null
	,setData: function(data) {
		this.data = data;
		data.refcount++;
		data.geom.build();
		this.transform.scaleWorld = data.scalePos;
	}
	,remove: function() {
		if(this.particleChildren != null) {
			var _g = 0;
			var _g1 = this.particleChildren;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.remove();
			}
			this.particleChildren = null;
		}
		if(this.particleSystems != null) {
			var _g2 = 0;
			var _g11 = this.particleSystems;
			while(_g2 < _g11.length) {
				var psys = _g11[_g2];
				++_g2;
				psys.remove();
			}
			this.particleSystems = null;
		}
		if(this.tilesheet != null) {
			this.tilesheet.remove();
		}
		if(iron_Scene.active != null) {
			HxOverrides.remove(iron_Scene.active.meshes,this);
		}
		this.data.refcount--;
		iron_object_Object.prototype.remove.call(this);
	}
	,setupAnimation: function(oactions) {
		var hasAction = this.parent != null && this.parent.raw != null && this.parent.raw.bone_actions != null;
		if(hasAction) {
			var armatureName = this.parent.name;
			this.animation = this.getParentArmature(armatureName);
			if(this.animation == null) {
				this.animation = new iron_object_BoneAnimation(armatureName);
			}
			if(this.data.isSkinned) {
				(js_Boot.__cast(this.animation , iron_object_BoneAnimation)).setSkin(this);
			}
		}
		iron_object_Object.prototype.setupAnimation.call(this,oactions);
	}
	,setupParticleSystem: function(sceneName,pref) {
		if(this.particleSystems == null) {
			this.particleSystems = [];
		}
		var psys = new iron_object_ParticleSystem(sceneName,pref);
		this.particleSystems.push(psys);
	}
	,setupTilesheet: function(sceneName,tilesheet_ref,tilesheet_action_ref) {
		this.tilesheet = new iron_object_Tilesheet(sceneName,tilesheet_ref,tilesheet_action_ref);
	}
	,isLodMaterial: function() {
		if(this.raw != null && this.raw.lod_material != null) {
			return this.raw.lod_material == true;
		} else {
			return false;
		}
	}
	,setCulled: function(isShadow,b) {
		if(isShadow) {
			this.culledShadow = b;
		} else {
			this.culledMesh = b;
		}
		this.culled = this.culledMesh && this.culledShadow;
		return b;
	}
	,cullMaterial: function(context) {
		var mats = this.materials;
		if(!this.isLodMaterial() && !this.validContext(mats,context)) {
			return true;
		}
		var isShadow = context == "shadowmap";
		if(!this.visibleMesh && !isShadow) {
			return this.setCulled(isShadow,true);
		}
		if(!this.visibleShadow && isShadow) {
			return this.setCulled(isShadow,true);
		}
		if(this.skip_context == context) {
			return this.setCulled(isShadow,true);
		}
		if(this.force_context != null && this.force_context != context) {
			return this.setCulled(isShadow,true);
		}
		if(context == "voxel" && this.raw != null && this.raw.mobile == true) {
			return this.setCulled(isShadow,true);
		}
		return this.setCulled(isShadow,false);
	}
	,cullMesh: function(context,camera,light) {
		if(camera == null) {
			return false;
		}
		if(camera.data.raw.frustum_culling && this.frustumCulling) {
			var radiusScale = this.data.isSkinned ? 2.0 : 1.0;
			if(this.particleSystems != null || this.particleOwner != null) {
				radiusScale *= 1000;
			}
			if(context == "voxel") {
				radiusScale *= 100;
			}
			if(this.data.geom.instanced) {
				radiusScale *= 100;
			}
			var isShadow = context == "shadowmap";
			var frustumPlanes = isShadow ? light.frustumPlanes : camera.frustumPlanes;
			if(isShadow && light.data.raw.type != "sun") {
				light.transform.radius = light.data.raw.far_plane;
				if(!iron_object_CameraObject.sphereInFrustum(camera.frustumPlanes,light.transform)) {
					return this.setCulled(isShadow,true);
				}
			}
			if(!iron_object_CameraObject.sphereInFrustum(frustumPlanes,this.transform,radiusScale)) {
				return this.setCulled(isShadow,true);
			}
		}
		this.culled = false;
		return this.culled;
	}
	,skipContext: function(context,mat) {
		if(mat.raw.skip_context != null && mat.raw.skip_context == context) {
			return true;
		}
		return false;
	}
	,getContexts: function(context,materials,materialContexts,shaderContexts) {
		var _g = 0;
		while(_g < materials.length) {
			var mat = materials[_g];
			++_g;
			var found = false;
			var _g1 = 0;
			var _g2 = mat.raw.contexts.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(HxOverrides.substr(mat.raw.contexts[i].name,0,context.length) == context) {
					materialContexts.push(mat.contexts[i]);
					shaderContexts.push(mat.shader.getContext(context));
					found = true;
					break;
				}
			}
			if(!found) {
				materialContexts.push(null);
				shaderContexts.push(null);
			}
		}
	}
	,render: function(g,context,bindParams) {
		var _gthis = this;
		if(this.data == null || !this.data.geom.ready) {
			return;
		}
		if(!this.visible) {
			return;
		}
		if(this.cullMesh(context,iron_Scene.active.camera,iron_RenderPath.active.light)) {
			return;
		}
		var meshContext = this.raw != null && context == "mesh";
		if(this.raw != null && this.raw.is_particle && this.particleOwner == null) {
			return;
		}
		if(this.particleSystems != null && meshContext) {
			if(this.particleChildren == null) {
				this.particleChildren = [];
				var _g = 0;
				var _g1 = this.particleSystems;
				while(_g < _g1.length) {
					var psys = _g1[_g];
					++_g;
					iron_Scene.active.spawnObject(psys.data.raw.instance_object,null,function(o) {
						if(o != null) {
							var c = o;
							_gthis.particleChildren.push(c);
							c.particleOwner = _gthis;
							c.particleIndex = _gthis.particleChildren.length - 1;
						}
					});
				}
			}
			var _g2 = 0;
			var _g11 = this.particleSystems.length;
			while(_g2 < _g11) {
				var i = _g2++;
				this.particleSystems[i].update(this.particleChildren[i],this);
			}
		}
		if(this.particleSystems != null && this.particleSystems.length > 0 && !this.particleSystems[0].data.raw.render_emitter) {
			return;
		}
		if(this.tilesheet != null) {
			this.tilesheet.update();
		}
		if(this.cullMaterial(context)) {
			return;
		}
		var mats = this.materials;
		var lod = this;
		if(this.raw != null && this.raw.lods != null && this.raw.lods.length > 0) {
			this.computeScreenSize(iron_Scene.active.camera);
			this.initLods();
			if(context == "voxel") {
				lod = this.lods[this.lods.length - 1];
			} else {
				var _g3 = 0;
				var _g12 = this.raw.lods.length;
				while(_g3 < _g12) {
					var i1 = _g3++;
					if(this.screenSize > this.raw.lods[i1].screen_size) {
						break;
					}
					lod = this.lods[i1];
					if(this.isLodMaterial()) {
						mats = lod.materials;
					}
				}
			}
			if(lod == null) {
				return;
			}
		}
		if(this.isLodMaterial() && !this.validContext(mats,context)) {
			return;
		}
		var materialContexts = [];
		var shaderContexts = [];
		this.getContexts(context,mats,materialContexts,shaderContexts);
		iron_object_Uniforms.posUnpack = this.data.scalePos;
		iron_object_Uniforms.texUnpack = this.data.scaleTex;
		this.transform.update();
		var ldata = lod.data;
		var _g4 = 0;
		var _g13 = ldata.geom.indexBuffers.length;
		while(_g4 < _g13) {
			var i2 = _g4++;
			var mi = ldata.geom.materialIndices[i2];
			if(shaderContexts.length <= mi || shaderContexts[mi] == null) {
				continue;
			}
			this.materialIndex = mi;
			if(this.materials.length > mi && this.skipContext(context,this.materials[mi])) {
				continue;
			}
			var scontext = shaderContexts[mi];
			if(scontext == null) {
				continue;
			}
			var elems = scontext.raw.vertex_elements;
			if(scontext.pipeState != iron_object_MeshObject.lastPipeline) {
				g.setPipeline(scontext.pipeState);
				iron_object_MeshObject.lastPipeline = scontext.pipeState;
			}
			iron_object_Uniforms.setContextConstants(g,scontext,bindParams);
			iron_object_Uniforms.setObjectConstants(g,scontext,this);
			if(materialContexts.length > mi) {
				iron_object_Uniforms.setMaterialConstants(g,scontext,materialContexts[mi]);
			}
			if(ldata.geom.instanced) {
				g.setVertexBuffers([ldata.geom.get(elems),ldata.geom.instancedVB]);
			} else {
				g.setVertexBuffer(ldata.geom.get(elems));
			}
			g.setIndexBuffer(ldata.geom.indexBuffers[i2]);
			if(ldata.geom.instanced) {
				g.drawIndexedVerticesInstanced(ldata.geom.instanceCount,ldata.geom.start,ldata.geom.count);
			} else {
				g.drawIndexedVertices(ldata.geom.start,ldata.geom.count);
			}
		}
	}
	,validContext: function(mats,context) {
		var _g = 0;
		while(_g < mats.length) {
			var mat = mats[_g];
			++_g;
			if(mat.getContext(context) != null) {
				return true;
			}
		}
		return false;
	}
	,computeCameraDistance: function(camX,camY,camZ) {
		this.cameraDistance = iron_math_Vec4.distancef(camX,camY,camZ,this.transform.worldx(),this.transform.worldy(),this.transform.worldz());
	}
	,computeScreenSize: function(camera) {
		var tr = this.transform;
		var volume = tr.dim.x * tr.dim.y * tr.dim.z;
		this.screenSize = volume * (1.0 / this.cameraDistance);
		this.screenSize = this.screenSize > 1.0 ? 1.0 : this.screenSize;
	}
	,initLods: function() {
		if(this.lods == null) {
			this.lods = [];
			var _g = 0;
			var _g1 = this.raw.lods;
			while(_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if(l.object_ref == "") {
					this.lods.push(null);
				} else {
					this.lods.push(iron_Scene.active.getChild(l.object_ref));
				}
			}
		}
	}
	,__class__: iron_object_MeshObject
});
var iron_object_ObjectAnimation = function(object,oactions) {
	this.bezierFrameIndex = -1;
	this.s0 = 0.0;
	this.object = object;
	this.oactions = oactions;
	this.isSkinned = false;
	iron_object_Animation.call(this);
};
$hxClasses["iron.object.ObjectAnimation"] = iron_object_ObjectAnimation;
iron_object_ObjectAnimation.__name__ = "iron.object.ObjectAnimation";
iron_object_ObjectAnimation.__super__ = iron_object_Animation;
iron_object_ObjectAnimation.prototype = $extend(iron_object_Animation.prototype,{
	object: null
	,oactions: null
	,oaction: null
	,s0: null
	,bezierFrameIndex: null
	,getAction: function(action) {
		var _g = 0;
		var _g1 = this.oactions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a != null && a.objects[0].name == action) {
				return a.objects[0];
			}
		}
		return null;
	}
	,play: function(action,onComplete,blendTime,speed,loop) {
		if(loop == null) {
			loop = true;
		}
		if(speed == null) {
			speed = 1.0;
		}
		if(blendTime == null) {
			blendTime = 0.0;
		}
		if(action == null) {
			action = "";
		}
		iron_object_Animation.prototype.play.call(this,action,onComplete,blendTime,speed,loop);
		if(this.action == "" && this.oactions[0] != null) {
			this.action = this.oactions[0].objects[0].name;
		}
		this.oaction = this.getAction(this.action);
		if(this.oaction != null) {
			this.isSampled = this.oaction.sampled != null && this.oaction.sampled;
		}
	}
	,update: function(delta) {
		if(!this.object.visible || this.object.culled || this.oaction == null) {
			return;
		}
		iron_object_Animation.prototype.update.call(this,delta);
		if(this.paused) {
			return;
		}
		if(!this.isSkinned) {
			this.updateObjectAnim();
		}
	}
	,updateObjectAnim: function() {
		this.updateTransformAnim(this.oaction.anim,this.object.transform);
		this.object.transform.buildMatrix();
	}
	,interpolateLinear: function(t,t1,t2,v1,v2) {
		var s = (t - t1) / (t2 - t1);
		return (1.0 - s) * v1 + s * v2;
	}
	,isTrackEnd: function(track) {
		if(this.speed > 0) {
			return this.frameIndex >= track.frames.length - 2;
		} else {
			return this.frameIndex <= 0;
		}
	}
	,checkFrameIndexT: function(frameValues,t) {
		if(this.speed > 0) {
			if(this.frameIndex < frameValues.length - 2) {
				return t > frameValues[this.frameIndex + 1] * this.frameTime;
			} else {
				return false;
			}
		} else if(this.frameIndex > 1) {
			return t > frameValues[this.frameIndex - 1] * this.frameTime;
		} else {
			return false;
		}
	}
	,updateTransformAnim: function(anim,transform) {
		if(anim == null) {
			return;
		}
		var total = anim.end * this.frameTime - anim.begin * this.frameTime;
		if(anim.has_delta) {
			var t = transform;
			if(t.dloc == null) {
				t.dloc = new iron_math_Vec4();
				t.drot = new iron_math_Quat();
				t.dscale = new iron_math_Vec4();
			}
			t.dloc.set(0,0,0);
			t.dscale.set(0,0,0);
			t._deulerX = t._deulerY = t._deulerZ = 0.0;
		}
		var _g = 0;
		var _g1 = anim.tracks;
		while(_g < _g1.length) {
			var track = _g1[_g];
			++_g;
			if(this.frameIndex == -1) {
				this.rewind(track);
			}
			var sign = this.speed > 0 ? 1 : -1;
			var t1 = this.time + anim.begin * this.frameTime;
			while(this.checkFrameIndexT(track.frames,t1)) this.frameIndex += sign;
			if(this.frameIndex >= track.frames.length) {
				continue;
			}
			if(this.time > total) {
				if(this.onComplete != null) {
					this.onComplete();
				}
				if(this.loop) {
					this.rewind(track);
				} else {
					this.frameIndex -= sign;
					this.paused = true;
				}
				return;
			}
			var ti = this.frameIndex;
			var t11 = track.frames[ti] * this.frameTime;
			var t2 = track.frames[ti + sign] * this.frameTime;
			var v1 = track.values[ti];
			var v2 = track.values[ti + sign];
			var value = this.interpolateLinear(t1,t11,t2,v1,v2);
			switch(track.target) {
			case "dqwrot":
				transform.drot.w = value;
				break;
			case "dqxrot":
				transform.drot.x = value;
				break;
			case "dqyrot":
				transform.drot.y = value;
				break;
			case "dqzrot":
				transform.drot.z = value;
				break;
			case "dxloc":
				transform.dloc.x = value;
				break;
			case "dxrot":
				transform._deulerX = value;
				break;
			case "dxscl":
				transform.dscale.x = value;
				break;
			case "dyloc":
				transform.dloc.y = value;
				break;
			case "dyrot":
				transform._deulerY = value;
				break;
			case "dyscl":
				transform.dscale.y = value;
				break;
			case "dzloc":
				transform.dloc.z = value;
				break;
			case "dzrot":
				transform._deulerZ = value;
				break;
			case "dzscl":
				transform.dscale.z = value;
				break;
			case "qwrot":
				transform.rot.w = value;
				break;
			case "qxrot":
				transform.rot.x = value;
				break;
			case "qyrot":
				transform.rot.y = value;
				break;
			case "qzrot":
				transform.rot.z = value;
				break;
			case "xloc":
				transform.loc.x = value;
				break;
			case "xrot":
				transform.setRotation(value,transform._eulerY,transform._eulerZ);
				break;
			case "xscl":
				transform.scale.x = value;
				break;
			case "yloc":
				transform.loc.y = value;
				break;
			case "yrot":
				transform.setRotation(transform._eulerX,value,transform._eulerZ);
				break;
			case "yscl":
				transform.scale.y = value;
				break;
			case "zloc":
				transform.loc.z = value;
				break;
			case "zrot":
				transform.setRotation(transform._eulerX,transform._eulerY,value);
				break;
			case "zscl":
				transform.scale.z = value;
				break;
			}
		}
	}
	,totalFrames: function() {
		if(this.oaction == null || this.oaction.anim == null) {
			return 0;
		}
		return this.oaction.anim.end - this.oaction.anim.begin;
	}
	,__class__: iron_object_ObjectAnimation
});
var iron_object_ParticleSystem = function(sceneName,pref) {
	this.m = iron_math_Mat4.identity();
	this.lapTime = 0.0;
	this.lap = 0;
	this.count = 0;
	this.seed = 0;
	this.spawnRate = 0.0;
	this.time = 0.0;
	this.animtime = 0.0;
	this.lifetime = 0.0;
	this.frameRate = 24;
	this.speed = 1.0;
	var _gthis = this;
	this.seed = pref.seed;
	this.particles = [];
	this.ready = false;
	iron_data_Data.getParticle(sceneName,pref.particle,function(b) {
		_gthis.data = b;
		_gthis.r = _gthis.data.raw;
		if(iron_Scene.active.raw.gravity != null) {
			_gthis.gx = iron_Scene.active.raw.gravity[0] * _gthis.r.weight_gravity;
			_gthis.gy = iron_Scene.active.raw.gravity[1] * _gthis.r.weight_gravity;
			_gthis.gz = iron_Scene.active.raw.gravity[2] * _gthis.r.weight_gravity;
		} else {
			_gthis.gx = 0;
			_gthis.gy = 0;
			_gthis.gz = -9.81 * _gthis.r.weight_gravity;
		}
		_gthis.alignx = _gthis.r.object_align_factor[0] / 2;
		_gthis.aligny = _gthis.r.object_align_factor[1] / 2;
		_gthis.alignz = _gthis.r.object_align_factor[2] / 2;
		_gthis.lifetime = _gthis.r.lifetime / _gthis.frameRate;
		_gthis.animtime = (_gthis.r.frame_end - _gthis.r.frame_start) / _gthis.frameRate;
		_gthis.spawnRate = (_gthis.r.frame_end - _gthis.r.frame_start) / _gthis.r.count / _gthis.frameRate;
		var _g = 0;
		var _g1 = _gthis.r.count;
		while(_g < _g1) {
			var i = _g++;
			_gthis.particles.push(new iron_object_Particle(i));
		}
		_gthis.ready = true;
	});
};
$hxClasses["iron.object.ParticleSystem"] = iron_object_ParticleSystem;
iron_object_ParticleSystem.__name__ = "iron.object.ParticleSystem";
iron_object_ParticleSystem.prototype = {
	data: null
	,speed: null
	,particles: null
	,ready: null
	,frameRate: null
	,lifetime: null
	,animtime: null
	,time: null
	,spawnRate: null
	,seed: null
	,r: null
	,gx: null
	,gy: null
	,gz: null
	,alignx: null
	,aligny: null
	,alignz: null
	,dimx: null
	,dimy: null
	,tilesx: null
	,tilesy: null
	,tilesFramerate: null
	,count: null
	,lap: null
	,lapTime: null
	,m: null
	,update: function(object,owner) {
		if(!this.ready || object == null || this.speed == 0.0) {
			return;
		}
		object.transform.loc = owner.transform.loc;
		object.transform.rot = owner.transform.rot;
		object.transform.buildMatrix();
		owner.transform.buildMatrix();
		object.transform.dim.setFrom(owner.transform.dim);
		this.dimx = object.transform.dim.x;
		this.dimy = object.transform.dim.y;
		if(object.tilesheet != null) {
			this.tilesx = object.tilesheet.raw.tilesx;
			this.tilesy = object.tilesheet.raw.tilesy;
			this.tilesFramerate = object.tilesheet.raw.framerate;
		}
		this.time += iron_system_Time.realDelta * this.speed;
		this.lap = Std.int(this.time / this.animtime);
		this.lapTime = this.time - this.lap * this.animtime;
		this.count = Std.int(this.lapTime / this.spawnRate);
		this.updateGpu(object,owner);
	}
	,getData: function() {
		var hair = this.r.type == 1;
		this.m.set__00(this.r.loop ? this.animtime : -this.animtime);
		this.m.set__01(hair ? 1 / this.particles.length : this.spawnRate);
		this.m.set__02(hair ? 1 : this.lifetime);
		this.m.set__03(this.particles.length);
		this.m.set__10(hair ? 0 : this.alignx);
		this.m.set__11(hair ? 0 : this.aligny);
		this.m.set__12(hair ? 0 : this.alignz);
		this.m.set__13(hair ? 0 : this.r.factor_random);
		this.m.set__20(hair ? 0 : this.gx * this.r.mass);
		this.m.set__21(hair ? 0 : this.gy * this.r.mass);
		this.m.set__22(hair ? 0 : this.gz * this.r.mass);
		this.m.set__23(hair ? 0 : this.r.lifetime_random);
		this.m.set__30(this.tilesx);
		this.m.set__31(this.tilesy);
		this.m.set__32(1 / this.tilesFramerate);
		this.m.set__33(hair ? 1 : this.lapTime);
		return this.m;
	}
	,updateGpu: function(object,owner) {
		if(!object.data.geom.instanced) {
			this.setupGeomGpu(object,owner);
		}
	}
	,setupGeomGpu: function(object,owner) {
		var this1 = new Float32Array(this.particles.length * 3);
		var instancedData = this1;
		var i = 0;
		if(this.r.emit_from == 0) {
			var pa = owner.data.geom.positions;
			var sc = owner.data.scalePos;
			var _g = 0;
			var _g1 = this.particles;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				var j = Std.int(this.fhash(i) * (pa.values.length / pa.size));
				instancedData[i] = pa.values[j * pa.size] / 32767 * sc;
				++i;
				instancedData[i] = pa.values[j * pa.size + 1] / 32767 * sc;
				++i;
				instancedData[i] = pa.values[j * pa.size + 2] / 32767 * sc;
				++i;
			}
		} else {
			var _g2 = 0;
			var _g11 = this.particles;
			while(_g2 < _g11.length) {
				var p1 = _g11[_g2];
				++_g2;
				instancedData[i] = (Math.random() * 2.0 - 1.0) * (object.transform.dim.x / 2.0);
				++i;
				instancedData[i] = (Math.random() * 2.0 - 1.0) * (object.transform.dim.y / 2.0);
				++i;
				instancedData[i] = (Math.random() * 2.0 - 1.0) * (object.transform.dim.z / 2.0);
				++i;
			}
		}
		if(this.r.particle_size != 1.0) {
			object.data.geom.applyScale(this.r.particle_size,this.r.particle_size,this.r.particle_size);
		}
		object.data.geom.setupInstanced(instancedData,1,0);
	}
	,fhash: function(n) {
		var s = n + 1.0;
		s *= 9301.0 % s;
		s = (s * 9301.0 + 49297.0) % 233280.0;
		return s / 233280.0;
	}
	,remove: function() {
	}
	,__class__: iron_object_ParticleSystem
};
var iron_object_Particle = function(i) {
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.i = i;
};
$hxClasses["iron.object.Particle"] = iron_object_Particle;
iron_object_Particle.__name__ = "iron.object.Particle";
iron_object_Particle.prototype = {
	i: null
	,x: null
	,y: null
	,z: null
	,cameraDistance: null
	,__class__: iron_object_Particle
};
var iron_object_ProbeObject = function() {
	iron_object_Object.call(this);
};
$hxClasses["iron.object.ProbeObject"] = iron_object_ProbeObject;
iron_object_ProbeObject.__name__ = "iron.object.ProbeObject";
iron_object_ProbeObject.__super__ = iron_object_Object;
iron_object_ProbeObject.prototype = $extend(iron_object_Object.prototype,{
	__class__: iron_object_ProbeObject
});
var iron_object_SpeakerObject = function(data) {
	this.paused = false;
	this.channels = [];
	this.sound = null;
	var _gthis = this;
	iron_object_Object.call(this);
	this.data = data;
	iron_Scene.active.speakers.push(this);
	if(data.sound == "") {
		return;
	}
	iron_data_Data.getSound(data.sound,function(sound) {
		_gthis.sound = sound;
		iron_App.notifyOnInit($bind(_gthis,_gthis.init));
	});
};
$hxClasses["iron.object.SpeakerObject"] = iron_object_SpeakerObject;
iron_object_SpeakerObject.__name__ = "iron.object.SpeakerObject";
iron_object_SpeakerObject.__super__ = iron_object_Object;
iron_object_SpeakerObject.prototype = $extend(iron_object_Object.prototype,{
	data: null
	,sound: null
	,channels: null
	,paused: null
	,init: function() {
		if(this.visible && this.data.play_on_start) {
			this.play();
		}
	}
	,play: function() {
		if(this.sound == null || this.data.muted) {
			return;
		}
		if(this.paused) {
			var _g = 0;
			var _g1 = this.channels;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.play();
			}
			this.paused = false;
			return;
		}
		var channel = iron_system_Audio.play(this.sound,this.data.loop,this.data.stream);
		this.channels.push(channel);
		if(this.data.attenuation > 0 && this.channels.length == 1) {
			iron_App.notifyOnUpdate($bind(this,this.update));
		}
	}
	,pause: function() {
		var _g = 0;
		var _g1 = this.channels;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.pause();
		}
		this.paused = true;
	}
	,stop: function() {
		var _g = 0;
		var _g1 = this.channels;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.stop();
		}
		this.channels.splice(0,this.channels.length);
	}
	,update: function() {
		if(this.paused) {
			return;
		}
		var _g = 0;
		var _g1 = this.channels;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_finished()) {
				HxOverrides.remove(this.channels,c);
			}
		}
		if(this.channels.length == 0) {
			iron_App.removeUpdate($bind(this,this.update));
			return;
		}
		var cam = iron_Scene.active.camera;
		var loc1 = cam.transform.world.getLoc();
		var loc2 = this.transform.world.getLoc();
		var d = iron_math_Vec4.distance(loc1,loc2);
		d *= this.data.attenuation;
		var vol = 1.0 - Math.min(d / 100,1);
		var _g2 = 0;
		var _g3 = this.channels;
		while(_g2 < _g3.length) {
			var c1 = _g3[_g2];
			++_g2;
			c1.set_volume(vol * this.data.volume);
		}
	}
	,remove: function() {
		if(iron_Scene.active != null) {
			HxOverrides.remove(iron_Scene.active.speakers,this);
		}
		iron_object_Object.prototype.remove.call(this);
	}
	,__class__: iron_object_SpeakerObject
});
var iron_object_Tilesheet = function(sceneName,tilesheet_ref,tilesheet_action_ref) {
	this.onActionComplete = null;
	this.time = 0.0;
	this.frame = 0;
	this.paused = false;
	this.action = null;
	this.tileY = 0.0;
	this.tileX = 0.0;
	var _gthis = this;
	this.ready = false;
	iron_data_Data.getSceneRaw(sceneName,function(format) {
		var _g = 0;
		var _g1 = format.tilesheet_datas;
		while(_g < _g1.length) {
			var ts = _g1[_g];
			++_g;
			if(ts.name == tilesheet_ref) {
				_gthis.raw = ts;
				_gthis.play(tilesheet_action_ref);
				_gthis.ready = true;
				break;
			}
		}
	});
};
$hxClasses["iron.object.Tilesheet"] = iron_object_Tilesheet;
iron_object_Tilesheet.__name__ = "iron.object.Tilesheet";
iron_object_Tilesheet.prototype = {
	tileX: null
	,tileY: null
	,raw: null
	,action: null
	,ready: null
	,paused: null
	,frame: null
	,time: null
	,onActionComplete: null
	,play: function(action_ref,onActionComplete) {
		this.onActionComplete = onActionComplete;
		var _g = 0;
		var _g1 = this.raw.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.name == action_ref) {
				this.action = a;
				break;
			}
		}
		this.setFrame(this.action.start);
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,resume: function() {
		this.paused = false;
	}
	,remove: function() {
	}
	,update: function() {
		if(!this.ready || this.paused || this.action.start >= this.action.end) {
			return;
		}
		this.time += iron_system_Time.get_delta();
		if(this.time >= 1 / this.raw.framerate) {
			this.setFrame(this.frame + 1);
		}
	}
	,setFrame: function(f) {
		this.frame = f;
		this.time = 0;
		var tx = this.frame % this.raw.tilesx;
		var ty = Std.int(this.frame / this.raw.tilesx);
		this.tileX = tx * (1 / this.raw.tilesx);
		this.tileY = ty * (1 / this.raw.tilesy);
		if(this.frame >= this.action.end && this.action.start < this.action.end) {
			if(this.onActionComplete != null) {
				this.onActionComplete();
			}
			if(this.action.loop) {
				this.setFrame(this.action.start);
			} else {
				this.paused = true;
			}
		}
	}
	,__class__: iron_object_Tilesheet
};
var iron_object_Transform = function(object) {
	this.dscale = null;
	this.drot = null;
	this.dloc = null;
	this.lastWorld = null;
	this.boneParent = null;
	this.scaleWorld = 1.0;
	this.localOnly = false;
	this.object = object;
	this.reset();
};
$hxClasses["iron.object.Transform"] = iron_object_Transform;
iron_object_Transform.__name__ = "iron.object.Transform";
iron_object_Transform.prototype = {
	world: null
	,localOnly: null
	,local: null
	,loc: null
	,rot: null
	,scale: null
	,scaleWorld: null
	,worldUnpack: null
	,dirty: null
	,object: null
	,dim: null
	,radius: null
	,boneParent: null
	,lastWorld: null
	,_eulerX: null
	,_eulerY: null
	,_eulerZ: null
	,dloc: null
	,drot: null
	,dscale: null
	,_deulerX: null
	,_deulerY: null
	,_deulerZ: null
	,reset: function() {
		this.world = iron_math_Mat4.identity();
		this.worldUnpack = iron_math_Mat4.identity();
		this.local = iron_math_Mat4.identity();
		this.loc = new iron_math_Vec4();
		this.rot = new iron_math_Quat();
		this.scale = new iron_math_Vec4(1.0,1.0,1.0);
		this.dim = new iron_math_Vec4(2.0,2.0,2.0);
		this.radius = 1.0;
		this.dirty = true;
	}
	,update: function() {
		if(this.dirty) {
			this.buildMatrix();
		}
	}
	,composeDelta: function() {
		this.dloc.addvecs(this.loc,this.dloc);
		this.dscale.addvecs(this.dscale,this.scale);
		this.drot.fromEuler(this._deulerX,this._deulerY,this._deulerZ);
		this.drot.multquats(this.rot,this.drot);
		this.local.compose(this.dloc,this.drot,this.dscale);
	}
	,buildMatrix: function() {
		if(this.dloc == null) {
			this.local.compose(this.loc,this.rot,this.scale);
		} else {
			this.composeDelta();
		}
		if(this.boneParent != null) {
			this.local.multmats(this.boneParent,this.local);
		}
		if(this.object.parent != null && !this.localOnly) {
			this.world.multmats3x4(this.local,this.object.parent.transform.world);
		} else {
			this.world.setFrom(this.local);
		}
		this.worldUnpack.setFrom(this.world);
		if(this.scaleWorld != 1.0) {
			var _g = this.worldUnpack;
			_g.set__00(_g.get__00() * this.scaleWorld);
			var _g1 = this.worldUnpack;
			_g1.set__01(_g1.get__01() * this.scaleWorld);
			var _g2 = this.worldUnpack;
			_g2.set__02(_g2.get__02() * this.scaleWorld);
			var _g3 = this.worldUnpack;
			_g3.set__03(_g3.get__03() * this.scaleWorld);
			var _g4 = this.worldUnpack;
			_g4.set__10(_g4.get__10() * this.scaleWorld);
			var _g5 = this.worldUnpack;
			_g5.set__11(_g5.get__11() * this.scaleWorld);
			var _g6 = this.worldUnpack;
			_g6.set__12(_g6.get__12() * this.scaleWorld);
			var _g7 = this.worldUnpack;
			_g7.set__13(_g7.get__13() * this.scaleWorld);
			var _g8 = this.worldUnpack;
			_g8.set__20(_g8.get__20() * this.scaleWorld);
			var _g9 = this.worldUnpack;
			_g9.set__21(_g9.get__21() * this.scaleWorld);
			var _g10 = this.worldUnpack;
			_g10.set__22(_g10.get__22() * this.scaleWorld);
			var _g11 = this.worldUnpack;
			_g11.set__23(_g11.get__23() * this.scaleWorld);
		}
		if(this.object.constraints != null) {
			var _g12 = 0;
			var _g13 = this.object.constraints;
			while(_g12 < _g13.length) {
				var c = _g13[_g12];
				++_g12;
				c.apply(this);
			}
		}
		this.computeDim();
		var _g14 = 0;
		var _g15 = this.object.children;
		while(_g14 < _g15.length) {
			var n = _g15[_g14];
			++_g14;
			n.transform.buildMatrix();
		}
		this.dirty = false;
	}
	,translate: function(x,y,z) {
		this.loc.x += x;
		this.loc.y += y;
		this.loc.z += z;
		this.buildMatrix();
	}
	,setMatrix: function(mat) {
		this.local.setFrom(mat);
		this.decompose();
		this.buildMatrix();
	}
	,multMatrix: function(mat) {
		this.local.multmat(mat);
		this.decompose();
		this.buildMatrix();
	}
	,decompose: function() {
		this.local.decompose(this.loc,this.rot,this.scale);
	}
	,rotate: function(axis,f) {
		iron_object_Transform.q.fromAxisAngle(axis,f);
		this.rot.multquats(iron_object_Transform.q,this.rot);
		this.buildMatrix();
	}
	,move: function(axis,f) {
		if(f == null) {
			f = 1.0;
		}
		this.loc.addf(axis.x * f,axis.y * f,axis.z * f);
		this.buildMatrix();
	}
	,setRotation: function(x,y,z) {
		this.rot.fromEuler(x,y,z);
		this._eulerX = x;
		this._eulerY = y;
		this._eulerZ = z;
		this.dirty = true;
	}
	,computeRadius: function() {
		this.radius = Math.sqrt(this.dim.x * this.dim.x + this.dim.y * this.dim.y + this.dim.z * this.dim.z);
	}
	,computeDim: function() {
		if(this.object.raw == null) {
			this.computeRadius();
			return;
		}
		var d = this.object.raw.dimensions;
		if(d == null) {
			this.dim.set(2 * this.scale.x,2 * this.scale.y,2 * this.scale.z);
		} else {
			this.dim.set(d[0] * this.scale.x,d[1] * this.scale.y,d[2] * this.scale.z);
		}
		this.computeRadius();
	}
	,applyParentInverse: function() {
		var pt = this.object.parent.transform;
		pt.buildMatrix();
		iron_object_Transform.temp.getInverse(pt.world);
		this.local.multmat(iron_object_Transform.temp);
		this.decompose();
		this.buildMatrix();
	}
	,applyParent: function() {
		var pt = this.object.parent.transform;
		pt.buildMatrix();
		this.local.multmat(pt.world);
		this.decompose();
		this.buildMatrix();
	}
	,diff: function() {
		if(this.lastWorld == null) {
			this.lastWorld = iron_math_Mat4.identity().setFrom(this.world);
			return false;
		}
		var a = this.world;
		var b = this.lastWorld;
		var r = a.get__00() != b.get__00() || a.get__01() != b.get__01() || a.get__02() != b.get__02() || a.get__03() != b.get__03() || a.get__10() != b.get__10() || a.get__11() != b.get__11() || a.get__12() != b.get__12() || a.get__13() != b.get__13() || a.get__20() != b.get__20() || a.get__21() != b.get__21() || a.get__22() != b.get__22() || a.get__23() != b.get__23() || a.get__30() != b.get__30() || a.get__31() != b.get__31() || a.get__32() != b.get__32() || a.get__33() != b.get__33();
		if(r) {
			this.lastWorld.setFrom(this.world);
		}
		return r;
	}
	,look: function() {
		return this.world.look();
	}
	,right: function() {
		return this.world.right();
	}
	,up: function() {
		return this.world.up();
	}
	,worldx: function() {
		return this.world.get__30();
	}
	,worldy: function() {
		return this.world.get__31();
	}
	,worldz: function() {
		return this.world.get__32();
	}
	,__class__: iron_object_Transform
};
var kha_math_FastMatrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.FastMatrix3"] = kha_math_FastMatrix3;
kha_math_FastMatrix3.__name__ = "kha.math.FastMatrix3";
kha_math_FastMatrix3.fromMatrix3 = function(m) {
	return new kha_math_FastMatrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_FastMatrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_FastMatrix3
};
var iron_object_Uniforms = function() { };
$hxClasses["iron.object.Uniforms"] = iron_object_Uniforms;
iron_object_Uniforms.__name__ = "iron.object.Uniforms";
iron_object_Uniforms.setContextConstants = function(g,context,bindParams) {
	if(context.raw.constants != null) {
		var _g = 0;
		var _g1 = context.raw.constants.length;
		while(_g < _g1) {
			var i = _g++;
			var c = context.raw.constants[i];
			iron_object_Uniforms.setContextConstant(g,context.constants[i],c);
		}
	}
	if(bindParams != null) {
		var _g2 = 0;
		var _g11 = Std.int(bindParams.length / 2);
		while(_g2 < _g11) {
			var i1 = _g2++;
			var pos = i1 * 2;
			var rtID = bindParams[pos];
			var samplerID = bindParams[pos + 1];
			var attachDepth = false;
			var char = rtID.charAt(0);
			if(char == "_") {
				attachDepth = true;
				rtID = HxOverrides.substr(rtID,1,null);
			}
			var rt = attachDepth ? iron_RenderPath.active.depthToRenderTarget.get(rtID) : iron_RenderPath.active.renderTargets.get(rtID);
			iron_object_Uniforms.bindRenderTarget(g,rt,context,samplerID,attachDepth);
		}
	}
	if(context.raw.texture_units != null) {
		var _g3 = 0;
		var _g12 = context.raw.texture_units.length;
		while(_g3 < _g12) {
			var j = _g3++;
			var tulink = context.raw.texture_units[j].link;
			if(tulink == null) {
				continue;
			}
			if(tulink.charAt(0) == "$") {
				g.setTexture(context.textureUnits[j],iron_Scene.active.embedded.get(HxOverrides.substr(tulink,1,null)));
				if(StringTools.endsWith(tulink,".raw")) {
					g.setTexture3DParameters(context.textureUnits[j],0,0,0,1,1,0);
				} else {
					g.setTextureParameters(context.textureUnits[j],0,0,1,1,0);
				}
			} else if(tulink == "_envmapRadiance") {
				var w = iron_Scene.active.world;
				if(w != null) {
					g.setTexture(context.textureUnits[j],w.probe.radiance);
					g.setTextureParameters(context.textureUnits[j],0,0,1,1,2);
				}
			} else if(tulink == "_envmap") {
				var w1 = iron_Scene.active.world;
				if(w1 != null) {
					g.setTexture(context.textureUnits[j],w1.envmap);
				}
			} else if(tulink == "_clustersData") {
				g.setTexture(context.textureUnits[j],iron_object_LightObject.clustersData);
				g.setTextureParameters(context.textureUnits[j],2,2,0,0,0);
			}
		}
	}
};
iron_object_Uniforms.setObjectConstants = function(g,context,object) {
	if(context.raw.constants != null) {
		var _g = 0;
		var _g1 = context.raw.constants.length;
		while(_g < _g1) {
			var i = _g++;
			var c = context.raw.constants[i];
			iron_object_Uniforms.setObjectConstant(g,object,context.constants[i],c);
		}
	}
	if(iron_object_Uniforms.externalTextureLinks != null) {
		if(context.raw.texture_units != null) {
			var _g2 = 0;
			var _g11 = context.raw.texture_units.length;
			while(_g2 < _g11) {
				var j = _g2++;
				var tulink = context.raw.texture_units[j].link;
				if(tulink == null) {
					continue;
				}
				var _g3 = 0;
				var _g12 = iron_object_Uniforms.externalTextureLinks;
				while(_g3 < _g12.length) {
					var f = _g12[_g3];
					++_g3;
					var image = f(object,iron_object_Uniforms.currentMat(object),tulink);
					if(image != null) {
						g.setTexture(context.textureUnits[j],image);
						break;
					}
				}
			}
		}
	}
};
iron_object_Uniforms.bindRenderTarget = function(g,rt,context,samplerID,attachDepth) {
	if(rt != null) {
		var tus = context.raw.texture_units;
		var _g = 0;
		var _g1 = tus.length;
		while(_g < _g1) {
			var j = _g++;
			if(samplerID == tus[j].name) {
				var isImage = tus[j].is_image != null && tus[j].is_image;
				var paramsSet = false;
				if(rt.raw.depth > 1) {
					g.setTexture3DParameters(context.textureUnits[j],2,2,2,1,2,2);
					paramsSet = true;
				}
				if(isImage) {
					g.setImageTexture(context.textureUnits[j],rt.image);
					g.setTexture3DParameters(context.textureUnits[j],2,2,2,1,0,2);
					paramsSet = true;
				} else if(rt.isCubeMap) {
					if(attachDepth) {
						g.setCubeMapDepth(context.textureUnits[j],rt.cubeMap);
					} else {
						g.setCubeMap(context.textureUnits[j],rt.cubeMap);
					}
				} else if(attachDepth) {
					g.setTextureDepth(context.textureUnits[j],rt.image);
				} else {
					g.setTexture(context.textureUnits[j],rt.image);
				}
				if(!paramsSet && rt.raw.mipmaps != null && rt.raw.mipmaps == true && !isImage) {
					g.setTextureParameters(context.textureUnits[j],2,2,1,1,2);
					paramsSet = true;
				}
				if(!paramsSet) {
					if(StringTools.startsWith(samplerID,"shadowMap")) {
						if(rt.isCubeMap) {
							g.setCubeMapCompareMode(context.textureUnits[j],true);
						} else {
							g.setTextureParameters(context.textureUnits[j],2,2,1,1,0);
							g.setTextureCompareMode(context.textureUnits[j],true);
						}
						paramsSet = true;
					} else if(attachDepth) {
						g.setTextureParameters(context.textureUnits[j],2,2,0,0,0);
						paramsSet = true;
					}
				}
				if(!paramsSet) {
					var oc = context.overrideContext;
					var allowParams = oc == null || oc.shared_sampler == null || oc.shared_sampler == samplerID;
					if(allowParams) {
						var addressing = oc != null && oc.addressing == "repeat" ? 0 : 2;
						var filter = oc != null && oc.filter == "point" ? 0 : iron_object_Uniforms.defaultFilter;
						g.setTextureParameters(context.textureUnits[j],addressing,addressing,filter,filter,0);
					}
					paramsSet = true;
				}
			}
		}
	}
};
iron_object_Uniforms.setContextConstant = function(g,location,c) {
	if(c.link == null) {
		return true;
	}
	var camera = iron_Scene.active.camera;
	var light = iron_RenderPath.active.light;
	if(c.type == "mat4") {
		var m = null;
		if(c.link == "_viewMatrix") {
			m = camera.V;
		} else if(c.link == "_transposeViewMatrix") {
			iron_object_Uniforms.helpMat.setFrom(camera.V);
			iron_object_Uniforms.helpMat.transpose3x3();
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_projectionMatrix") {
			m = camera.P;
		} else if(c.link == "_inverseProjectionMatrix") {
			iron_object_Uniforms.helpMat.getInverse(camera.P);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_inverseViewProjectionMatrix") {
			iron_object_Uniforms.helpMat.setFrom(camera.V);
			iron_object_Uniforms.helpMat.multmat(camera.P);
			iron_object_Uniforms.helpMat.getInverse(iron_object_Uniforms.helpMat);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_viewProjectionMatrix") {
			m = camera.VP;
		} else if(c.link == "_prevViewProjectionMatrix") {
			iron_object_Uniforms.helpMat.setFrom(camera.prevV);
			iron_object_Uniforms.helpMat.multmat(camera.P);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_lightViewProjectionMatrix") {
			if(light != null) {
				m = light.VP;
			}
		} else if(c.link == "_biasLightViewProjectionMatrix") {
			if(light != null) {
				iron_object_Uniforms.helpMat.setFrom(light.VP);
				iron_object_Uniforms.helpMat.multmat(iron_object_Uniforms.biasMat);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_skydomeMatrix") {
			var tr = camera.transform;
			iron_object_Uniforms.helpVec.set(tr.worldx(),tr.worldy(),tr.worldz() - 3.5);
			var bounds = camera.data.raw.far_plane * 0.95;
			iron_object_Uniforms.helpVec2.set(bounds,bounds,bounds);
			iron_object_Uniforms.helpMat.compose(iron_object_Uniforms.helpVec,iron_object_Uniforms.helpQuat,iron_object_Uniforms.helpVec2);
			iron_object_Uniforms.helpMat.multmat(camera.V);
			iron_object_Uniforms.helpMat.multmat(camera.P);
			m = iron_object_Uniforms.helpMat;
		}
		if(m != null) {
			g.setMatrix(location,m.self);
			return true;
		}
	} else if(c.type == "vec4") {
		var v = null;
		iron_object_Uniforms.helpVec.set(0,0,0);
		if(v != null) {
			g.setFloat4(location,v.x,v.y,v.z,v.w);
			return true;
		}
	} else if(c.type == "vec3") {
		var v1 = null;
		iron_object_Uniforms.helpVec.set(0,0,0);
		if(c.link == "_lightPosition") {
			if(light != null) {
				iron_object_Uniforms.helpVec.set(light.transform.worldx(),light.transform.worldy(),light.transform.worldz());
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_lightDirection") {
			if(light != null) {
				iron_object_Uniforms.helpVec = light.look().normalize();
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_sunDirection") {
			var sun = iron_RenderPath.active.sun;
			if(sun != null) {
				iron_object_Uniforms.helpVec = sun.look().normalize();
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_sunColor") {
			var sun1 = iron_RenderPath.active.sun;
			if(sun1 != null) {
				var str = sun1.visible ? sun1.data.raw.strength : 0.0;
				iron_object_Uniforms.helpVec.set(sun1.data.raw.color[0] * str,sun1.data.raw.color[1] * str,sun1.data.raw.color[2] * str);
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_pointPosition") {
			var point = iron_RenderPath.active.point;
			if(point != null) {
				iron_object_Uniforms.helpVec.set(point.transform.worldx(),point.transform.worldy(),point.transform.worldz());
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_spotDirection") {
			var point1 = iron_RenderPath.active.point;
			if(point1 != null) {
				iron_object_Uniforms.helpVec = point1.look().normalize();
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_pointColor") {
			var point2 = iron_RenderPath.active.point;
			if(point2 != null) {
				var str1 = point2.visible ? point2.data.raw.strength : 0.0;
				iron_object_Uniforms.helpVec.set(point2.data.raw.color[0] * str1,point2.data.raw.color[1] * str1,point2.data.raw.color[2] * str1);
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_cameraPosition") {
			iron_object_Uniforms.helpVec.set(camera.transform.worldx(),camera.transform.worldy(),camera.transform.worldz());
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_cameraLook") {
			iron_object_Uniforms.helpVec = camera.lookWorld().normalize();
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_backgroundCol") {
			if(camera.data.raw.clear_color != null) {
				iron_object_Uniforms.helpVec.set(camera.data.raw.clear_color[0],camera.data.raw.clear_color[1],camera.data.raw.clear_color[2]);
			}
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_hosekSunDirection") {
			var w = iron_Scene.active.world;
			if(w != null) {
				iron_object_Uniforms.helpVec.set(w.raw.sun_direction[0],w.raw.sun_direction[1],w.raw.sun_direction[2] > 0 ? w.raw.sun_direction[2] : 0);
				v1 = iron_object_Uniforms.helpVec;
			}
		}
		if(v1 != null) {
			g.setFloat3(location,v1.x,v1.y,v1.z);
			return true;
		}
	} else if(c.type == "vec2") {
		var v2 = null;
		iron_object_Uniforms.helpVec.set(0,0,0);
		if(c.link == "_vec2x") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 1.0;
			v2.y = 0.0;
		} else if(c.link == "_vec2xInv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 1.0 / iron_RenderPath.active.currentW;
			v2.y = 0.0;
		} else if(c.link == "_vec2x2") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 2.0;
			v2.y = 0.0;
		} else if(c.link == "_vec2x2Inv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 2.0 / iron_RenderPath.active.currentW;
			v2.y = 0.0;
		} else if(c.link == "_vec2y") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 1.0;
		} else if(c.link == "_vec2yInv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 1.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_vec2y2") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 2.0;
		} else if(c.link == "_vec2y2Inv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 2.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_vec2y3") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 3.0;
		} else if(c.link == "_vec2y3Inv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 3.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_windowSize") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = iron_App.w();
			v2.y = iron_App.h();
		} else if(c.link == "_screenSize") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = iron_RenderPath.active.currentW;
			v2.y = iron_RenderPath.active.currentH;
		} else if(c.link == "_screenSizeInv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 1.0 / iron_RenderPath.active.currentW;
			v2.y = 1.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_aspectRatio") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = iron_RenderPath.active.currentH / iron_RenderPath.active.currentW;
			v2.y = iron_RenderPath.active.currentW / iron_RenderPath.active.currentH;
			v2.x = v2.x > 1.0 ? 1.0 : v2.x;
			v2.y = v2.y > 1.0 ? 1.0 : v2.y;
		} else if(c.link == "_cameraPlane") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = camera.data.raw.near_plane;
			v2.y = camera.data.raw.far_plane;
		} else if(c.link == "_cameraPlaneProj") {
			var near = camera.data.raw.near_plane;
			var far = camera.data.raw.far_plane;
			v2 = iron_object_Uniforms.helpVec;
			v2.x = far / (far - near);
			v2.y = -far * near / (far - near);
		} else if(c.link == "_lightPlane") {
			if(light != null) {
				v2 = iron_object_Uniforms.helpVec;
				v2.x = light.data.raw.near_plane;
				v2.y = light.data.raw.far_plane;
			}
		} else if(c.link == "_lightPlaneProj") {
			if(light != null) {
				var near1 = light.data.raw.near_plane;
				var far1 = light.data.raw.far_plane;
				var a = far1 + near1;
				var b = far1 - near1;
				var f2 = 2.0;
				var c1 = f2 * far1 * near1;
				v2 = iron_object_Uniforms.helpVec;
				v2.x = a / b;
				v2.y = c1 / b;
			}
		} else if(c.link == "_spotData") {
			var point3 = iron_RenderPath.active.point;
			if(point3 != null) {
				v2 = iron_object_Uniforms.helpVec;
				v2.x = point3.data.raw.spot_size;
				v2.y = v2.x - point3.data.raw.spot_blend;
			}
		} else if(c.link == "_shadowMapSize") {
			if(light != null && light.data.raw.cast_shadow) {
				v2 = iron_object_Uniforms.helpVec;
				v2.x = v2.y = light.data.raw.shadowmap_size;
			}
		}
		if(v2 != null) {
			g.setFloat2(location,v2.x,v2.y);
			return true;
		}
	} else if(c.type == "float") {
		var f = null;
		if(c.link == "_time") {
			f = iron_system_Time.time();
		} else if(c.link == "_sunShadowsBias") {
			var sun2 = iron_RenderPath.active.sun;
			f = sun2 == null ? 0.0 : sun2.data.raw.shadows_bias;
		} else if(c.link == "_pointShadowsBias") {
			var point4 = iron_RenderPath.active.point;
			f = point4 == null ? 0.0 : point4.data.raw.shadows_bias;
		} else if(c.link == "_envmapStrength") {
			f = iron_Scene.active.world == null ? 0.0 : iron_Scene.active.world.probe.raw.strength;
		} else if(c.link == "_aspectRatioF") {
			f = iron_RenderPath.active.currentW / iron_RenderPath.active.currentH;
		} else if(c.link == "_aspectRatioWindowF") {
			f = iron_App.w() / iron_App.h();
		} else if(c.link == "_frameScale") {
			f = iron_RenderPath.active.frameTime / iron_system_Time.get_delta();
		}
		if(f != null) {
			g.setFloat(location,f);
			return true;
		}
	} else if(c.type == "floats") {
		var fa = null;
		if(c.link == "_envmapIrradiance") {
			fa = iron_Scene.active.world == null ? iron_data_WorldData.getEmptyIrradiance() : iron_Scene.active.world.probe.irradiance;
		} else if(c.link == "_lightsArray") {
			fa = iron_object_LightObject.lightsArray;
		} else if(c.link == "_lightsArraySpot") {
			fa = iron_object_LightObject.lightsArraySpot;
		} else if(c.link == "_cascadeData") {
			if(light != null) {
				fa = light.getCascadeData();
			}
		}
		if(fa != null) {
			g.setFloats(location,fa);
			return true;
		}
	} else if(c.type == "int") {
		var i = null;
		if(c.link == "_envmapNumMipmaps") {
			var w1 = iron_Scene.active.world;
			i = w1 != null ? w1.probe.raw.radiance_mipmaps + 1 - 2 : 1;
		}
		if(i != null) {
			g.setInt(location,i);
			return true;
		}
	}
	return false;
};
iron_object_Uniforms.setObjectConstant = function(g,object,location,c) {
	if(c.link == null) {
		return;
	}
	var camera = iron_Scene.active.camera;
	var light = iron_RenderPath.active.light;
	if(c.type == "mat4") {
		var m = null;
		if(c.link == "_worldMatrix") {
			m = object.transform.worldUnpack;
		} else if(c.link == "_inverseWorldMatrix") {
			iron_object_Uniforms.helpMat.getInverse(object.transform.worldUnpack);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewProjectionMatrix") {
			iron_object_Uniforms.helpMat.setFrom(object.transform.worldUnpack);
			iron_object_Uniforms.helpMat.multmat(camera.V);
			iron_object_Uniforms.helpMat.multmat(camera.P);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewProjectionMatrixSphere") {
			var t = object.transform;
			iron_object_Uniforms.helpMat.setFrom(t.worldUnpack);
			iron_object_Uniforms.helpMat.multmat(camera.V);
			iron_object_Uniforms.helpMat.set__00(t.scale.x);
			iron_object_Uniforms.helpMat.set__10(0.0);
			iron_object_Uniforms.helpMat.set__20(0.0);
			iron_object_Uniforms.helpMat.set__01(0.0);
			iron_object_Uniforms.helpMat.set__11(t.scale.y);
			iron_object_Uniforms.helpMat.set__21(0.0);
			iron_object_Uniforms.helpMat.set__02(0.0);
			iron_object_Uniforms.helpMat.set__12(0.0);
			iron_object_Uniforms.helpMat.set__22(t.scale.z);
			iron_object_Uniforms.helpMat.multmat(camera.P);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewProjectionMatrixCylinder") {
			var t1 = object.transform;
			iron_object_Uniforms.helpMat.setFrom(t1.worldUnpack);
			iron_object_Uniforms.helpMat.multmat(camera.V);
			iron_object_Uniforms.helpMat.set__00(t1.scale.x);
			iron_object_Uniforms.helpMat.set__20(0.0);
			iron_object_Uniforms.helpMat.set__01(0.0);
			iron_object_Uniforms.helpMat.set__21(0.0);
			iron_object_Uniforms.helpMat.set__02(0.0);
			iron_object_Uniforms.helpMat.set__22(t1.scale.z);
			iron_object_Uniforms.helpMat.multmat(camera.P);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewMatrix") {
			iron_object_Uniforms.helpMat.setFrom(object.transform.worldUnpack);
			iron_object_Uniforms.helpMat.multmat(camera.V);
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_lightWorldViewProjectionMatrix") {
			if(light != null) {
				if(object == null) {
					iron_object_Uniforms.helpMat.setIdentity();
				} else {
					iron_object_Uniforms.helpMat.setFrom(object.transform.worldUnpack);
				}
				iron_object_Uniforms.helpMat.multmat(light.VP);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_lightWorldViewProjectionMatrixSphere") {
			if(light != null) {
				iron_object_Uniforms.helpMat.setFrom(object.transform.worldUnpack);
				iron_object_Uniforms.helpMat.multmat(camera.V);
				iron_object_Uniforms.helpMat.set__00(1.0);
				iron_object_Uniforms.helpMat.set__10(0.0);
				iron_object_Uniforms.helpMat.set__20(0.0);
				iron_object_Uniforms.helpMat.set__01(0.0);
				iron_object_Uniforms.helpMat.set__11(1.0);
				iron_object_Uniforms.helpMat.set__21(0.0);
				iron_object_Uniforms.helpMat.set__02(0.0);
				iron_object_Uniforms.helpMat.set__12(0.0);
				iron_object_Uniforms.helpMat.set__22(1.0);
				iron_object_Uniforms.helpMat2.getInverse(camera.V);
				iron_object_Uniforms.helpMat.multmat(iron_object_Uniforms.helpMat2);
				iron_object_Uniforms.helpMat.multmat(light.VP);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_lightWorldViewProjectionMatrixCylinder") {
			if(light != null) {
				iron_object_Uniforms.helpMat.setFrom(object.transform.worldUnpack);
				iron_object_Uniforms.helpMat.multmat(camera.V);
				iron_object_Uniforms.helpMat.set__00(1.0);
				iron_object_Uniforms.helpMat.set__20(0.0);
				iron_object_Uniforms.helpMat.set__01(0.0);
				iron_object_Uniforms.helpMat.set__21(0.0);
				iron_object_Uniforms.helpMat.set__02(0.0);
				iron_object_Uniforms.helpMat.set__22(1.0);
				iron_object_Uniforms.helpMat2.getInverse(camera.V);
				iron_object_Uniforms.helpMat.multmat(iron_object_Uniforms.helpMat2);
				iron_object_Uniforms.helpMat.multmat(light.VP);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_biasLightWorldViewProjectionMatrix") {
			if(light != null) {
				if(object == null) {
					iron_object_Uniforms.helpMat.setIdentity();
				} else {
					iron_object_Uniforms.helpMat.setFrom(object.transform.worldUnpack);
				}
				iron_object_Uniforms.helpMat.multmat(light.VP);
				iron_object_Uniforms.helpMat.multmat(iron_object_Uniforms.biasMat);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(StringTools.startsWith(c.link,"_biasLightWorldViewProjectionMatrixSpot")) {
			var light1 = iron_object_Uniforms.getSpot(HxOverrides.cca(c.link,c.link.length - 1) - 48);
			if(light1 != null) {
				if(object == null) {
					iron_object_Uniforms.helpMat.setIdentity();
				} else {
					iron_object_Uniforms.helpMat.setFrom(object.transform.worldUnpack);
				}
				iron_object_Uniforms.helpMat.multmat(light1.VP);
				iron_object_Uniforms.helpMat.multmat(iron_object_Uniforms.biasMat);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(StringTools.startsWith(c.link,"_biasLightViewProjectionMatrixSpot")) {
			var light2 = iron_object_Uniforms.getSpot(HxOverrides.cca(c.link,c.link.length - 1) - 48);
			if(light2 != null) {
				iron_object_Uniforms.helpMat.setFrom(light2.VP);
				iron_object_Uniforms.helpMat.multmat(iron_object_Uniforms.biasMat);
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_particleData") {
			var mo = js_Boot.__cast(object , iron_object_MeshObject);
			if(mo.particleOwner != null && mo.particleOwner.particleSystems != null) {
				m = mo.particleOwner.particleSystems[mo.particleIndex].getData();
			}
		} else if(iron_object_Uniforms.externalMat4Links != null) {
			var _g = 0;
			var _g1 = iron_object_Uniforms.externalMat4Links;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				m = fn(object,iron_object_Uniforms.currentMat(object),c.link);
				if(m != null) {
					break;
				}
			}
		}
		if(m == null) {
			return;
		}
		g.setMatrix(location,m.self);
	} else if(c.type == "mat3") {
		var m1 = null;
		if(c.link == "_normalMatrix") {
			iron_object_Uniforms.helpMat.getInverse(object.transform.world);
			iron_object_Uniforms.helpMat.transpose3x3();
			iron_object_Uniforms.helpMat3.setFrom4(iron_object_Uniforms.helpMat);
			m1 = iron_object_Uniforms.helpMat3;
		}
		if(c.link == "_viewMatrix3") {
			iron_object_Uniforms.helpMat3.setFrom4(camera.V);
			m1 = iron_object_Uniforms.helpMat3;
		}
		if(m1 == null) {
			return;
		}
		g.setMatrix3(location,m1.self);
	} else if(c.type == "vec4") {
		var v = null;
		iron_object_Uniforms.helpVec.set(0,0,0);
		if(iron_object_Uniforms.externalVec4Links != null) {
			var _g2 = 0;
			var _g11 = iron_object_Uniforms.externalVec4Links;
			while(_g2 < _g11.length) {
				var fn1 = _g11[_g2];
				++_g2;
				v = fn1(object,iron_object_Uniforms.currentMat(object),c.link);
				if(v != null) {
					break;
				}
			}
		}
		if(v == null) {
			return;
		}
		g.setFloat4(location,v.x,v.y,v.z,v.w);
	} else if(c.type == "vec3") {
		var v1 = null;
		iron_object_Uniforms.helpVec.set(0,0,0);
		if(c.link == "_dim") {
			var d = object.transform.dim;
			var s = object.transform.scale;
			iron_object_Uniforms.helpVec.set(d.x / s.x,d.y / s.y,d.z / s.z);
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_halfDim") {
			var d1 = object.transform.dim;
			var s1 = object.transform.scale;
			iron_object_Uniforms.helpVec.set(d1.x / s1.x / 2,d1.y / s1.y / 2,d1.z / s1.z / 2);
			v1 = iron_object_Uniforms.helpVec;
		} else if(iron_object_Uniforms.externalVec3Links != null) {
			var _g3 = 0;
			var _g12 = iron_object_Uniforms.externalVec3Links;
			while(_g3 < _g12.length) {
				var f = _g12[_g3];
				++_g3;
				v1 = f(object,iron_object_Uniforms.currentMat(object),c.link);
				if(v1 != null) {
					break;
				}
			}
		}
		if(v1 == null) {
			return;
		}
		g.setFloat3(location,v1.x,v1.y,v1.z);
	} else if(c.type == "vec2") {
		var vx = null;
		var vy = 0;
		if(c.link == "_tilesheetOffset") {
			var ts = (js_Boot.__cast(object , iron_object_MeshObject)).tilesheet;
			vx = ts.tileX;
			vy = ts.tileY;
		} else if(iron_object_Uniforms.externalVec2Links != null) {
			var _g4 = 0;
			var _g13 = iron_object_Uniforms.externalVec2Links;
			while(_g4 < _g13.length) {
				var fn2 = _g13[_g4];
				++_g4;
				var v2 = fn2(object,iron_object_Uniforms.currentMat(object),c.link);
				if(v2 != null) {
					vx = v2.x;
					vy = v2.y;
					break;
				}
			}
		}
		if(vx == null) {
			return;
		}
		g.setFloat2(location,vx,vy);
	} else if(c.type == "float") {
		var f1 = null;
		if(c.link == "_objectInfoIndex") {
			f1 = object.uid;
		} else if(c.link == "_objectInfoMaterialIndex") {
			f1 = iron_object_Uniforms.currentMat(object).uid;
		} else if(c.link == "_objectInfoRandom") {
			f1 = object.urandom;
		} else if(c.link == "_posUnpack") {
			f1 = iron_object_Uniforms.posUnpack != null ? iron_object_Uniforms.posUnpack : 1.0;
		} else if(c.link == "_texUnpack") {
			f1 = iron_object_Uniforms.texUnpack != null ? iron_object_Uniforms.texUnpack : 1.0;
		} else if(iron_object_Uniforms.externalFloatLinks != null) {
			var _g5 = 0;
			var _g14 = iron_object_Uniforms.externalFloatLinks;
			while(_g5 < _g14.length) {
				var fn3 = _g14[_g5];
				++_g5;
				var res = fn3(object,iron_object_Uniforms.currentMat(object),c.link);
				if(res != null) {
					f1 = res;
					break;
				}
			}
		}
		if(f1 == null) {
			return;
		}
		g.setFloat(location,f1);
	} else if(c.type == "floats") {
		var fa = null;
		if(c.link == "_skinBones") {
			if(object.animation != null) {
				fa = (js_Boot.__cast(object.animation , iron_object_BoneAnimation)).skinBuffer;
			}
		}
		if(fa == null && iron_object_Uniforms.externalFloatsLinks != null) {
			var _g6 = 0;
			var _g15 = iron_object_Uniforms.externalFloatsLinks;
			while(_g6 < _g15.length) {
				var fn4 = _g15[_g6];
				++_g6;
				fa = fn4(object,iron_object_Uniforms.currentMat(object),c.link);
				if(fa != null) {
					break;
				}
			}
		}
		if(fa == null) {
			return;
		}
		g.setFloats(location,fa);
	} else if(c.type == "int") {
		var i = null;
		if(c.link == "_uid") {
			i = object.uid;
		} else if(iron_object_Uniforms.externalIntLinks != null) {
			var _g7 = 0;
			var _g16 = iron_object_Uniforms.externalIntLinks;
			while(_g7 < _g16.length) {
				var fn5 = _g16[_g7];
				++_g7;
				var res1 = fn5(object,iron_object_Uniforms.currentMat(object),c.link);
				if(res1 != null) {
					i = res1;
					break;
				}
			}
		}
		if(i == null) {
			return;
		}
		g.setInt(location,i);
	}
};
iron_object_Uniforms.setMaterialConstants = function(g,context,materialContext) {
	if(materialContext.raw.bind_constants != null) {
		var _g = 0;
		var _g1 = materialContext.raw.bind_constants.length;
		while(_g < _g1) {
			var i = _g++;
			var matc = materialContext.raw.bind_constants[i];
			var pos = -1;
			var _g2 = 0;
			var _g11 = context.raw.constants.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				if(context.raw.constants[i1].name == matc.name) {
					pos = i1;
					break;
				}
			}
			if(pos == -1) {
				continue;
			}
			var c = context.raw.constants[pos];
			iron_object_Uniforms.setMaterialConstant(g,context.constants[pos],c,matc);
		}
	}
	if(materialContext.textures != null) {
		var _g3 = 0;
		var _g12 = materialContext.textures.length;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var mname = materialContext.raw.bind_textures[i2].name;
			var _g4 = 0;
			var _g13 = context.textureUnits.length;
			while(_g4 < _g13) {
				var j = _g4++;
				var sname = context.raw.texture_units[j].name;
				if(mname == sname) {
					g.setTexture(context.textureUnits[j],materialContext.textures[i2]);
					materialContext.setTextureParameters(g,i2,context,j);
					break;
				}
			}
		}
	}
};
iron_object_Uniforms.getSpot = function(index) {
	var i = 0;
	var _g = 0;
	var _g1 = iron_Scene.active.lights;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.data.raw.type != "spot" && l.data.raw.type != "area") {
			continue;
		}
		if(i == index) {
			return l;
		}
		++i;
	}
	return null;
};
iron_object_Uniforms.currentMat = function(object) {
	if(object != null && ((object) instanceof iron_object_MeshObject)) {
		var mo = js_Boot.__cast(object , iron_object_MeshObject);
		return mo.materials[mo.materialIndex];
	}
	return null;
};
iron_object_Uniforms.setMaterialConstant = function(g,location,c,matc) {
	switch(c.type) {
	case "bool":
		g.setBool(location,matc.bool);
		break;
	case "float":
		g.setFloat(location,matc.float);
		break;
	case "int":
		g.setInt(location,matc.int);
		break;
	case "vec2":
		g.setFloat2(location,matc.vec2[0],matc.vec2[1]);
		break;
	case "vec3":
		g.setFloat3(location,matc.vec3[0],matc.vec3[1],matc.vec3[2]);
		break;
	case "vec4":
		g.setFloat4(location,matc.vec4[0],matc.vec4[1],matc.vec4[2],matc.vec4[3]);
		break;
	}
};
var iron_system_ArmPack = function() { };
$hxClasses["iron.system.ArmPack"] = iron_system_ArmPack;
iron_system_ArmPack.__name__ = "iron.system.ArmPack";
iron_system_ArmPack.decode = function(b) {
	var i = new haxe_io_BytesInput(b);
	i.set_bigEndian(false);
	return iron_system_ArmPack.read(i);
};
iron_system_ArmPack.read = function(i,key,parentKey) {
	if(parentKey == null) {
		parentKey = "";
	}
	if(key == null) {
		key = "";
	}
	try {
		var b = i.readByte();
		switch(b) {
		case 192:
			return null;
		case 194:
			return false;
		case 195:
			return true;
		case 196:
			return i.read(i.readByte());
		case 197:
			return i.read(i.readUInt16());
		case 198:
			return i.read(i.readInt32());
		case 202:
			return i.readFloat();
		case 204:
			return i.readByte();
		case 205:
			return i.readUInt16();
		case 206:
			return i.readInt32();
		case 208:
			return i.readInt8();
		case 209:
			return i.readInt16();
		case 210:
			return i.readInt32();
		case 217:
			return i.readString(i.readByte());
		case 218:
			return i.readString(i.readUInt16());
		case 219:
			return i.readString(i.readInt32());
		case 220:
			return iron_system_ArmPack.readArray(i,i.readUInt16(),key,parentKey);
		case 221:
			return iron_system_ArmPack.readArray(i,i.readInt32(),key,parentKey);
		case 222:
			return iron_system_ArmPack.readMap(i,i.readUInt16(),key,parentKey);
		case 223:
			return iron_system_ArmPack.readMap(i,i.readInt32(),key,parentKey);
		default:
			if(b < 128) {
				return b;
			} else if(b < 144) {
				return iron_system_ArmPack.readMap(i,15 & b,key,parentKey);
			} else if(b < 160) {
				return iron_system_ArmPack.readArray(i,15 & b,key,parentKey);
			} else if(b < 192) {
				return i.readString(31 & b);
			} else if(b > 223) {
				return -256 | b;
			}
		}
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(((e1) instanceof haxe_io_Eof)) {
			var e2 = e1;
		} else {
			throw e;
		}
	}
	return null;
};
iron_system_ArmPack.readArray = function(i,length,key,parentKey) {
	if(parentKey == null) {
		parentKey = "";
	}
	if(key == null) {
		key = "";
	}
	var b = i.readByte();
	var _g = i;
	_g.set_position(_g.get_position() - 1);
	if(b == 202) {
		var _g1 = i;
		_g1.set_position(_g1.get_position() + 1);
		var this1 = new Float32Array(length);
		var a = this1;
		var _g2 = 0;
		var _g11 = length;
		while(_g2 < _g11) {
			var x = _g2++;
			a[x] = i.readFloat();
		}
		return a;
	} else if(b == 210) {
		var _g3 = i;
		_g3.set_position(_g3.get_position() + 1);
		var this2 = new Uint32Array(length);
		var a1 = this2;
		var _g4 = 0;
		var _g12 = length;
		while(_g4 < _g12) {
			var x1 = _g4++;
			a1[x1] = i.readInt32();
		}
		return a1;
	} else if(b == 209) {
		var _g5 = i;
		_g5.set_position(_g5.get_position() + 1);
		var this3 = new Int16Array(length);
		var a2 = this3;
		var _g6 = 0;
		var _g13 = length;
		while(_g6 < _g13) {
			var x2 = _g6++;
			a2[x2] = i.readInt16();
		}
		return a2;
	} else {
		var a3 = [];
		var _g7 = 0;
		var _g14 = length;
		while(_g7 < _g14) {
			var x3 = _g7++;
			a3.push(iron_system_ArmPack.read(i,key,parentKey));
		}
		return a3;
	}
};
iron_system_ArmPack.readMap = function(i,length,key,parentKey) {
	if(parentKey == null) {
		parentKey = "";
	}
	if(key == null) {
		key = "";
	}
	var out = { };
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var n = _g++;
		var k = Std.string(iron_system_ArmPack.read(i));
		var v = iron_system_ArmPack.read(i,k,key);
		Reflect.setField(out,k,v);
	}
	return out;
};
iron_system_ArmPack.encode = function(d) {
	var o = new haxe_io_BytesOutput();
	o.set_bigEndian(false);
	iron_system_ArmPack.write(o,d);
	return o.getBytes();
};
iron_system_ArmPack.write = function(o,d) {
	var _g = Type.typeof(d);
	switch(_g._hx_index) {
	case 0:
		o.writeByte(192);
		break;
	case 1:
		o.writeByte(210);
		o.writeInt32(d);
		break;
	case 2:
		o.writeByte(202);
		o.writeFloat(d);
		break;
	case 3:
		o.writeByte(d ? 195 : 194);
		break;
	case 4:
		var f = Reflect.fields(d);
		o.writeByte(223);
		o.writeInt32(f.length);
		var _g1 = 0;
		while(_g1 < f.length) {
			var k = f[_g1];
			++_g1;
			o.writeByte(219);
			o.writeInt32(k.length);
			o.writeString(k);
			iron_system_ArmPack.write(o,Reflect.field(d,k));
		}
		break;
	case 6:
		var c = _g.c;
		var _g2 = Type.getClassName(c);
		if(_g2 == null) {
			o.writeByte(221);
			o.writeInt32(d.length);
			var isInt16 = ((d) instanceof Int16Array);
			var isInt = Std.is(d[0],Int) && !((d) instanceof Float32Array);
			var isFloat = typeof(d[0]) == "number";
			if(isInt16) {
				o.writeByte(209);
				var _g3 = 0;
				var _g11 = d.length;
				while(_g3 < _g11) {
					var i = _g3++;
					o.writeInt16(d[i]);
				}
			} else if(isFloat && !isInt) {
				o.writeByte(202);
				var _g4 = 0;
				var _g12 = d.length;
				while(_g4 < _g12) {
					var i1 = _g4++;
					o.writeFloat(d[i1]);
				}
			} else if(isInt) {
				o.writeByte(210);
				var _g5 = 0;
				var _g13 = d.length;
				while(_g5 < _g13) {
					var i2 = _g5++;
					o.writeInt32(d[i2]);
				}
			} else {
				var _g6 = 0;
				var _g14 = d.length;
				while(_g6 < _g14) {
					var i3 = _g6++;
					iron_system_ArmPack.write(o,d[i3]);
				}
			}
		} else {
			switch(_g2) {
			case "Array":
				o.writeByte(221);
				o.writeInt32(d.length);
				var isInt161 = ((d) instanceof Int16Array);
				var isInt1 = Std.is(d[0],Int) && !((d) instanceof Float32Array);
				var isFloat1 = typeof(d[0]) == "number";
				if(isInt161) {
					o.writeByte(209);
					var _g7 = 0;
					var _g15 = d.length;
					while(_g7 < _g15) {
						var i4 = _g7++;
						o.writeInt16(d[i4]);
					}
				} else if(isFloat1 && !isInt1) {
					o.writeByte(202);
					var _g8 = 0;
					var _g16 = d.length;
					while(_g8 < _g16) {
						var i5 = _g8++;
						o.writeFloat(d[i5]);
					}
				} else if(isInt1) {
					o.writeByte(210);
					var _g9 = 0;
					var _g17 = d.length;
					while(_g9 < _g17) {
						var i6 = _g9++;
						o.writeInt32(d[i6]);
					}
				} else {
					var _g10 = 0;
					var _g18 = d.length;
					while(_g10 < _g18) {
						var i7 = _g10++;
						iron_system_ArmPack.write(o,d[i7]);
					}
				}
				break;
			case "String":
				o.writeByte(219);
				o.writeInt32(d.length);
				o.writeString(d);
				break;
			case "haxe.io.Bytes":
				o.writeByte(198);
				o.writeInt32(d.length);
				o.write(d);
				break;
			default:
			}
		}
		break;
	default:
	}
};
var iron_system_Audio = function() {
};
$hxClasses["iron.system.Audio"] = iron_system_Audio;
iron_system_Audio.__name__ = "iron.system.Audio";
iron_system_Audio.play = function(sound,loop,stream) {
	if(stream == null) {
		stream = false;
	}
	if(loop == null) {
		loop = false;
	}
	if(stream && sound.compressedData != null) {
		return kha_audio2_Audio1.stream(sound,loop);
	} else if(sound.uncompressedData != null) {
		return kha_audio2_Audio1.play(sound,loop);
	} else {
		return null;
	}
};
iron_system_Audio.prototype = {
	__class__: iron_system_Audio
};
var iron_system_Input = function() { };
$hxClasses["iron.system.Input"] = iron_system_Input;
iron_system_Input.__name__ = "iron.system.Input";
iron_system_Input.reset = function() {
	iron_system_Input.occupied = false;
	if(iron_system_Input.mouse != null) {
		iron_system_Input.mouse.reset();
	}
	if(iron_system_Input.pen != null) {
		iron_system_Input.pen.reset();
	}
	if(iron_system_Input.keyboard != null) {
		iron_system_Input.keyboard.reset();
	}
	var _g = 0;
	var _g1 = iron_system_Input.gamepads;
	while(_g < _g1.length) {
		var gamepad = _g1[_g];
		++_g;
		gamepad.reset();
	}
};
iron_system_Input.endFrame = function() {
	if(iron_system_Input.mouse != null) {
		iron_system_Input.mouse.endFrame();
	}
	if(iron_system_Input.pen != null) {
		iron_system_Input.pen.endFrame();
	}
	if(iron_system_Input.keyboard != null) {
		iron_system_Input.keyboard.endFrame();
	}
	var _g = 0;
	var _g1 = iron_system_Input.gamepads;
	while(_g < _g1.length) {
		var gamepad = _g1[_g];
		++_g;
		gamepad.endFrame();
	}
	if(iron_system_Input.virtualButtons != null) {
		var vb = iron_system_Input.virtualButtons.iterator();
		while(vb.hasNext()) {
			var vb1 = vb.next();
			vb1.started = vb1.released = false;
		}
	}
};
iron_system_Input.getMouse = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.register();
	}
	if(iron_system_Input.mouse == null) {
		iron_system_Input.mouse = new iron_system_Mouse();
	}
	return iron_system_Input.mouse;
};
iron_system_Input.getPen = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.register();
	}
	if(iron_system_Input.pen == null) {
		iron_system_Input.pen = new iron_system_Pen();
	}
	return iron_system_Input.pen;
};
iron_system_Input.getSurface = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.register();
	}
	return iron_system_Input.getMouse();
};
iron_system_Input.getKeyboard = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.register();
	}
	if(iron_system_Input.keyboard == null) {
		iron_system_Input.keyboard = new iron_system_Keyboard();
	}
	return iron_system_Input.keyboard;
};
iron_system_Input.getGamepad = function(i) {
	if(i == null) {
		i = 0;
	}
	if(i >= 4) {
		return null;
	}
	if(!iron_system_Input.registered) {
		iron_system_Input.register();
	}
	while(iron_system_Input.gamepads.length <= i) iron_system_Input.gamepads.push(new iron_system_Gamepad(iron_system_Input.gamepads.length));
	if(iron_system_Input.gamepads[i].connected) {
		return iron_system_Input.gamepads[i];
	} else {
		return null;
	}
};
iron_system_Input.getSensor = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.register();
	}
	if(iron_system_Input.sensor == null) {
		iron_system_Input.sensor = new iron_system_Sensor();
	}
	return iron_system_Input.sensor;
};
iron_system_Input.getVirtualButton = function(virtual) {
	if(!iron_system_Input.registered) {
		iron_system_Input.register();
	}
	if(iron_system_Input.virtualButtons == null) {
		return null;
	}
	return iron_system_Input.virtualButtons.get(virtual);
};
iron_system_Input.register = function() {
	iron_system_Input.registered = true;
	iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
	iron_App.notifyOnReset(iron_system_Input.reset);
};
var iron_system_VirtualButton = function() {
	this.down = false;
	this.released = false;
	this.started = false;
};
$hxClasses["iron.system.VirtualButton"] = iron_system_VirtualButton;
iron_system_VirtualButton.__name__ = "iron.system.VirtualButton";
iron_system_VirtualButton.prototype = {
	started: null
	,released: null
	,down: null
	,__class__: iron_system_VirtualButton
};
var iron_system_VirtualInput = function() {
	this.virtualButtons = null;
};
$hxClasses["iron.system.VirtualInput"] = iron_system_VirtualInput;
iron_system_VirtualInput.__name__ = "iron.system.VirtualInput";
iron_system_VirtualInput.prototype = {
	virtualButtons: null
	,setVirtual: function(virtual,button) {
		if(iron_system_Input.virtualButtons == null) {
			iron_system_Input.virtualButtons = new haxe_ds_StringMap();
		}
		var vb = iron_system_Input.virtualButtons.get(virtual);
		if(vb == null) {
			vb = new iron_system_VirtualButton();
			iron_system_Input.virtualButtons.set(virtual,vb);
		}
		if(this.virtualButtons == null) {
			this.virtualButtons = new haxe_ds_StringMap();
		}
		this.virtualButtons.set(button,vb);
	}
	,downVirtual: function(button) {
		if(this.virtualButtons != null) {
			var vb = this.virtualButtons.get(button);
			if(vb != null) {
				vb.down = true;
				vb.started = true;
			}
		}
	}
	,upVirtual: function(button) {
		if(this.virtualButtons != null) {
			var vb = this.virtualButtons.get(button);
			if(vb != null) {
				vb.down = false;
				vb.released = true;
			}
		}
	}
	,__class__: iron_system_VirtualInput
};
var iron_system_Mouse = function() {
	this.lastY = -1.0;
	this.lastX = -1.0;
	this.hidden = false;
	this.locked = false;
	this.wheelDelta = 0;
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.viewY = 0.0;
	this.viewX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.buttonsReleased = [false,false,false];
	this.buttonsStarted = [false,false,false];
	this.buttonsDown = [false,false,false];
	iron_system_VirtualInput.call(this);
	kha_input_Mouse.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.moveListener),$bind(this,this.wheelListener));
};
$hxClasses["iron.system.Mouse"] = iron_system_Mouse;
iron_system_Mouse.__name__ = "iron.system.Mouse";
iron_system_Mouse.__super__ = iron_system_VirtualInput;
iron_system_Mouse.prototype = $extend(iron_system_VirtualInput.prototype,{
	buttonsDown: null
	,buttonsStarted: null
	,buttonsReleased: null
	,x: null
	,y: null
	,viewX: null
	,viewY: null
	,moved: null
	,movementX: null
	,movementY: null
	,wheelDelta: null
	,locked: null
	,hidden: null
	,lastX: null
	,lastY: null
	,endFrame: function() {
		var tmp = this.buttonsStarted[1] = this.buttonsStarted[2] = false;
		this.buttonsStarted[0] = tmp;
		var tmp1 = this.buttonsReleased[1] = this.buttonsReleased[2] = false;
		this.buttonsReleased[0] = tmp1;
		this.moved = false;
		this.movementX = 0;
		this.movementY = 0;
		this.wheelDelta = 0;
	}
	,reset: function() {
		var tmp = this.buttonsDown[1] = this.buttonsDown[2] = false;
		this.buttonsDown[0] = tmp;
		this.endFrame();
	}
	,buttonIndex: function(button) {
		if(button == "left") {
			return 0;
		} else if(button == "right") {
			return 1;
		} else {
			return 2;
		}
	}
	,down: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,lock: function() {
		if(kha_input_Mouse.get().canLock()) {
			kha_input_Mouse.get().lock();
			this.locked = true;
			this.hidden = true;
		}
	}
	,unlock: function() {
		if(kha_input_Mouse.get().canLock()) {
			kha_input_Mouse.get().unlock();
			this.locked = false;
			this.hidden = false;
		}
	}
	,hide: function() {
		kha_input_Mouse.get().hideSystemCursor();
		this.hidden = true;
	}
	,show: function() {
		kha_input_Mouse.get().showSystemCursor();
		this.hidden = false;
	}
	,downListener: function(index,x,y) {
		this.buttonsDown[index] = true;
		this.buttonsStarted[index] = true;
		this.x = x;
		this.y = y;
		if(index == 0) {
			this.lastX = x;
			this.lastY = y;
		}
		this.downVirtual(iron_system_Mouse.buttons[index]);
	}
	,upListener: function(index,x,y) {
		this.buttonsDown[index] = false;
		this.buttonsReleased[index] = true;
		this.x = x;
		this.y = y;
		this.upVirtual(iron_system_Mouse.buttons[index]);
	}
	,moveListener: function(x,y,movementX,movementY) {
		if(this.lastX == -1.0 && this.lastY == -1.0) {
			this.lastX = x;
			this.lastY = y;
		}
		if(this.locked) {
			this.movementX += movementX;
			this.movementY += movementY;
		} else {
			this.movementX += x - this.lastX;
			this.movementY += y - this.lastY;
		}
		this.lastX = x;
		this.lastY = y;
		this.x = x;
		this.y = y;
		this.moved = true;
	}
	,wheelListener: function(delta) {
		this.wheelDelta = delta;
	}
	,get_viewX: function() {
		return this.x - iron_App.x();
	}
	,get_viewY: function() {
		return this.y - iron_App.y();
	}
	,__class__: iron_system_Mouse
	,__properties__: {get_viewY:"get_viewY",get_viewX:"get_viewX"}
});
var iron_system_Pen = function() {
	this.lastY = -1.0;
	this.lastX = -1.0;
	this.connected = false;
	this.pressure = 0.0;
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.viewY = 0.0;
	this.viewX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.buttonsReleased = [false];
	this.buttonsStarted = [false];
	this.buttonsDown = [false];
	iron_system_VirtualInput.call(this);
	kha_input_Pen.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.moveListener));
};
$hxClasses["iron.system.Pen"] = iron_system_Pen;
iron_system_Pen.__name__ = "iron.system.Pen";
iron_system_Pen.__super__ = iron_system_VirtualInput;
iron_system_Pen.prototype = $extend(iron_system_VirtualInput.prototype,{
	buttonsDown: null
	,buttonsStarted: null
	,buttonsReleased: null
	,x: null
	,y: null
	,viewX: null
	,viewY: null
	,moved: null
	,movementX: null
	,movementY: null
	,pressure: null
	,connected: null
	,lastX: null
	,lastY: null
	,endFrame: function() {
		this.buttonsStarted[0] = false;
		this.buttonsReleased[0] = false;
		this.moved = false;
		this.movementX = 0;
		this.movementY = 0;
	}
	,reset: function() {
		this.buttonsDown[0] = false;
		this.endFrame();
	}
	,buttonIndex: function(button) {
		return 0;
	}
	,down: function(button) {
		if(button == null) {
			button = "tip";
		}
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		if(button == null) {
			button = "tip";
		}
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		if(button == null) {
			button = "tip";
		}
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,downListener: function(x,y,pressure) {
		this.buttonsDown[0] = true;
		this.buttonsStarted[0] = true;
		this.x = x;
		this.y = y;
		this.pressure = pressure;
	}
	,upListener: function(x,y,pressure) {
		this.buttonsDown[0] = false;
		this.buttonsReleased[0] = true;
		this.x = x;
		this.y = y;
		this.pressure = pressure;
	}
	,moveListener: function(x,y,pressure) {
		if(this.lastX == -1.0 && this.lastY == -1.0) {
			this.lastX = x;
			this.lastY = y;
		}
		this.movementX = x - this.lastX;
		this.movementY = y - this.lastY;
		this.lastX = x;
		this.lastY = y;
		this.x = x;
		this.y = y;
		this.moved = true;
		this.pressure = pressure;
		this.connected = true;
	}
	,get_viewX: function() {
		return this.x - iron_App.x();
	}
	,get_viewY: function() {
		return this.y - iron_App.y();
	}
	,__class__: iron_system_Pen
	,__properties__: {get_viewY:"get_viewY",get_viewX:"get_viewX"}
});
var iron_system_Keyboard = function() {
	this.repeatTime = 0.0;
	this.repeatKey = false;
	this.keysFrame = [];
	this.keysReleased = new haxe_ds_StringMap();
	this.keysStarted = new haxe_ds_StringMap();
	this.keysDown = new haxe_ds_StringMap();
	iron_system_VirtualInput.call(this);
	this.reset();
	kha_input_Keyboard.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.pressListener));
};
$hxClasses["iron.system.Keyboard"] = iron_system_Keyboard;
iron_system_Keyboard.__name__ = "iron.system.Keyboard";
iron_system_Keyboard.keyCode = function(key) {
	if(key == 32) {
		return "space";
	} else if(key == 8) {
		return "backspace";
	} else if(key == 9) {
		return "tab";
	} else if(key == 13) {
		return "enter";
	} else if(key == 16) {
		return "shift";
	} else if(key == 17) {
		return "control";
	} else if(key == 18) {
		return "alt";
	} else if(key == 27) {
		return "escape";
	} else if(key == 46) {
		return "delete";
	} else if(key == 38) {
		return "up";
	} else if(key == 40) {
		return "down";
	} else if(key == 37) {
		return "left";
	} else if(key == 39) {
		return "right";
	} else if(key == 1) {
		return "back";
	} else if(key == 188) {
		return ",";
	} else if(key == 190) {
		return ".";
	} else if(key == 58) {
		return ":";
	} else if(key == 59) {
		return ";";
	} else if(key == 60) {
		return "<";
	} else if(key == 61) {
		return "=";
	} else if(key == 62) {
		return ">";
	} else if(key == 63) {
		return "?";
	} else if(key == 161) {
		return "!";
	} else if(key == 162) {
		return "\"";
	} else if(key == 163) {
		return "#";
	} else if(key == 164) {
		return "$";
	} else if(key == 165) {
		return "%";
	} else if(key == 166) {
		return "&";
	} else if(key == 167) {
		return "_";
	} else if(key == 168) {
		return "(";
	} else if(key == 169) {
		return ")";
	} else if(key == 170) {
		return "*";
	} else if(key == 172) {
		return "|";
	} else if(key == 174) {
		return "{";
	} else if(key == 175) {
		return "}";
	} else if(key == 219) {
		return "[";
	} else if(key == 221) {
		return "]";
	} else if(key == 176) {
		return "~";
	} else if(key == 192) {
		return "`";
	} else if(key == 191) {
		return "/";
	} else if(key == 220) {
		return "\\";
	} else if(key == 64) {
		return "@";
	} else if(key == 107) {
		return "+";
	} else if(key == 171) {
		return "+";
	} else if(key == 109) {
		return "-";
	} else if(key == 173) {
		return "-";
	} else if(key == 106) {
		return "*";
	} else if(key == 111) {
		return "/";
	} else if(key == 110) {
		return ".";
	} else if(key == 48) {
		return "0";
	} else if(key == 96) {
		return "0";
	} else if(key == 49) {
		return "1";
	} else if(key == 97) {
		return "1";
	} else if(key == 50) {
		return "2";
	} else if(key == 98) {
		return "2";
	} else if(key == 51) {
		return "3";
	} else if(key == 99) {
		return "3";
	} else if(key == 52) {
		return "4";
	} else if(key == 100) {
		return "4";
	} else if(key == 53) {
		return "5";
	} else if(key == 101) {
		return "5";
	} else if(key == 54) {
		return "6";
	} else if(key == 102) {
		return "6";
	} else if(key == 55) {
		return "7";
	} else if(key == 103) {
		return "7";
	} else if(key == 56) {
		return "8";
	} else if(key == 104) {
		return "8";
	} else if(key == 57) {
		return "9";
	} else if(key == 105) {
		return "9";
	} else if(key == 112) {
		return "f1";
	} else if(key == 113) {
		return "f2";
	} else if(key == 114) {
		return "f3";
	} else if(key == 115) {
		return "f4";
	} else if(key == 116) {
		return "f5";
	} else if(key == 117) {
		return "f6";
	} else if(key == 118) {
		return "f7";
	} else if(key == 119) {
		return "f8";
	} else if(key == 120) {
		return "f9";
	} else if(key == 121) {
		return "f10";
	} else if(key == 122) {
		return "f11";
	} else if(key == 123) {
		return "f12";
	} else {
		return String.fromCodePoint(key).toLowerCase();
	}
};
iron_system_Keyboard.__super__ = iron_system_VirtualInput;
iron_system_Keyboard.prototype = $extend(iron_system_VirtualInput.prototype,{
	keysDown: null
	,keysStarted: null
	,keysReleased: null
	,keysFrame: null
	,repeatKey: null
	,repeatTime: null
	,endFrame: function() {
		if(this.keysFrame.length > 0) {
			var _g = 0;
			var _g1 = this.keysFrame;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				this.keysStarted.set(s,false);
				this.keysReleased.set(s,false);
			}
			this.keysFrame.splice(0,this.keysFrame.length);
		}
		if(kha_Scheduler.time() - this.repeatTime > 0.05) {
			this.repeatTime = kha_Scheduler.time();
			this.repeatKey = true;
		} else {
			this.repeatKey = false;
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = iron_system_Keyboard.keys;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			this.keysDown.set(s,false);
			this.keysStarted.set(s,false);
			this.keysReleased.set(s,false);
		}
		this.endFrame();
	}
	,down: function(key) {
		return this.keysDown.get(key);
	}
	,started: function(key) {
		return this.keysStarted.get(key);
	}
	,released: function(key) {
		return this.keysReleased.get(key);
	}
	,repeat: function(key) {
		if(!this.keysStarted.get(key)) {
			if(this.repeatKey) {
				return this.keysDown.get(key);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,downListener: function(code) {
		var s = iron_system_Keyboard.keyCode(code);
		this.keysFrame.push(s);
		this.keysStarted.set(s,true);
		this.keysDown.set(s,true);
		this.repeatTime = kha_Scheduler.time() + 0.4;
		this.downVirtual(s);
	}
	,upListener: function(code) {
		var s = iron_system_Keyboard.keyCode(code);
		this.keysFrame.push(s);
		this.keysReleased.set(s,true);
		this.keysDown.set(s,false);
		this.upVirtual(s);
	}
	,pressListener: function(char) {
	}
	,__class__: iron_system_Keyboard
});
var iron_system_GamepadStick = function() {
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.lastY = 0.0;
	this.lastX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["iron.system.GamepadStick"] = iron_system_GamepadStick;
iron_system_GamepadStick.__name__ = "iron.system.GamepadStick";
iron_system_GamepadStick.prototype = {
	x: null
	,y: null
	,lastX: null
	,lastY: null
	,moved: null
	,movementX: null
	,movementY: null
	,__class__: iron_system_GamepadStick
};
var iron_system_Gamepad = function(i,virtual) {
	if(virtual == null) {
		virtual = false;
	}
	this.connects = 0;
	this.num = 0;
	this.connected = false;
	this.rightStick = new iron_system_GamepadStick();
	this.leftStick = new iron_system_GamepadStick();
	this.buttonsFrame = [];
	this.buttonsReleased = [];
	this.buttonsStarted = [];
	this.buttonsDown = [];
	iron_system_VirtualInput.call(this);
	var _g = 0;
	var _g1 = iron_system_Gamepad.buttons;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		this.buttonsDown.push(0.0);
		this.buttonsStarted.push(false);
		this.buttonsReleased.push(false);
	}
	this.num = i;
	this.reset();
	if(virtual) {
		this.connected = true;
	} else {
		this.connect();
	}
};
$hxClasses["iron.system.Gamepad"] = iron_system_Gamepad;
iron_system_Gamepad.__name__ = "iron.system.Gamepad";
iron_system_Gamepad.keyCode = function(button) {
	return iron_system_Gamepad.buttons[button];
};
iron_system_Gamepad.__super__ = iron_system_VirtualInput;
iron_system_Gamepad.prototype = $extend(iron_system_VirtualInput.prototype,{
	buttonsDown: null
	,buttonsStarted: null
	,buttonsReleased: null
	,buttonsFrame: null
	,leftStick: null
	,rightStick: null
	,connected: null
	,num: null
	,connects: null
	,connect: function() {
		var gamepad = kha_input_Gamepad.get(this.num);
		if(gamepad == null) {
			return;
		}
		this.connected = true;
		gamepad.notify($bind(this,this.axisListener),$bind(this,this.buttonListener));
	}
	,endFrame: function() {
		if(this.buttonsFrame.length > 0) {
			var _g = 0;
			var _g1 = this.buttonsFrame;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				this.buttonsStarted[i] = false;
				this.buttonsReleased[i] = false;
			}
			this.buttonsFrame.splice(0,this.buttonsFrame.length);
		}
		this.leftStick.moved = false;
		this.leftStick.movementX = 0;
		this.leftStick.movementY = 0;
		this.rightStick.moved = false;
		this.rightStick.movementX = 0;
		this.rightStick.movementY = 0;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.buttonsDown.length;
		while(_g < _g1) {
			var i = _g++;
			this.buttonsDown[i] = 0.0;
			this.buttonsStarted[i] = false;
			this.buttonsReleased[i] = false;
		}
		this.endFrame();
	}
	,buttonIndex: function(button) {
		var _g = 0;
		var _g1 = iron_system_Gamepad.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			if(iron_system_Gamepad.buttons[i] == button) {
				return i;
			}
		}
		return 0;
	}
	,down: function(button) {
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,axisListener: function(axis,value) {
		var stick = axis <= 1 ? this.leftStick : this.rightStick;
		if(axis == 0 || axis == 2) {
			stick.lastX = stick.x;
			stick.x = value;
			stick.movementX = stick.x - stick.lastX;
		} else if(axis == 1 || axis == 3) {
			stick.lastY = stick.y;
			stick.y = value;
			stick.movementY = stick.y - stick.lastY;
		}
		stick.moved = true;
	}
	,buttonListener: function(button,value) {
		this.buttonsFrame.push(button);
		this.buttonsDown[button] = value;
		if(value > 0) {
			this.buttonsStarted[button] = true;
		} else {
			this.buttonsReleased[button] = true;
		}
		if(value == 0.0) {
			this.upVirtual(iron_system_Gamepad.buttons[button]);
		} else if(value == 1.0) {
			this.downVirtual(iron_system_Gamepad.buttons[button]);
		}
	}
	,__class__: iron_system_Gamepad
});
var iron_system_Sensor = function() {
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	kha_input_Sensor.get(0).notify($bind(this,this.listener));
};
$hxClasses["iron.system.Sensor"] = iron_system_Sensor;
iron_system_Sensor.__name__ = "iron.system.Sensor";
iron_system_Sensor.prototype = {
	x: null
	,y: null
	,z: null
	,listener: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,__class__: iron_system_Sensor
};
var iron_system_Time = function() { };
$hxClasses["iron.system.Time"] = iron_system_Time;
iron_system_Time.__name__ = "iron.system.Time";
iron_system_Time.__properties__ = {get_delta:"get_delta",get_step:"get_step"};
iron_system_Time.get_step = function() {
	return 0.016666666666666666;
};
iron_system_Time.get_delta = function() {
	return 0.016666666666666666 * iron_system_Time.scale;
};
iron_system_Time.time = function() {
	return kha_Scheduler.time();
};
iron_system_Time.realTime = function() {
	return kha_Scheduler.realTime();
};
iron_system_Time.update = function() {
	iron_system_Time.realDelta = iron_system_Time.realTime() - iron_system_Time.last;
	iron_system_Time.last = iron_system_Time.realTime();
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isInterface = function(o) {
	return o.__isInterface__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (js_Boot.isClass(o) || js_Boot.isEnum(o))) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(js_Boot.isInterface(cl)) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = "js.Lib";
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.get_undefined = function() {
	return undefined;
};
js_Lib.getNextHaxeUID = function() {
	return $global.$haxeUID++;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var kha__$Assets_ImageList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.ImageList"] = kha__$Assets_ImageList;
kha__$Assets_ImageList.__name__ = "kha._Assets.ImageList";
kha__$Assets_ImageList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_ImageList
};
var kha__$Assets_SoundList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.SoundList"] = kha__$Assets_SoundList;
kha__$Assets_SoundList.__name__ = "kha._Assets.SoundList";
kha__$Assets_SoundList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_SoundList
};
var kha__$Assets_BlobList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.BlobList"] = kha__$Assets_BlobList;
kha__$Assets_BlobList.__name__ = "kha._Assets.BlobList";
kha__$Assets_BlobList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_BlobList
};
var kha__$Assets_FontList = function() {
	this.names = ["font_default"];
	this.font_defaultDescription = { name : "font_default", files : ["font_default.ttf"], type : "font"};
	this.font_defaultName = "font_default";
	this.font_default = null;
};
$hxClasses["kha._Assets.FontList"] = kha__$Assets_FontList;
kha__$Assets_FontList.__name__ = "kha._Assets.FontList";
kha__$Assets_FontList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,font_default: null
	,font_defaultName: null
	,font_defaultDescription: null
	,font_defaultLoad: function(done,failure) {
		kha_Assets.loadFont("font_default",function(font) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 138, className : "kha._Assets.FontList", methodName : "font_defaultLoad"});
	}
	,font_defaultUnload: function() {
		this.font_default.unload();
		this.font_default = null;
	}
	,names: null
	,__class__: kha__$Assets_FontList
};
var kha__$Assets_VideoList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.VideoList"] = kha__$Assets_VideoList;
kha__$Assets_VideoList.__name__ = "kha._Assets.VideoList";
kha__$Assets_VideoList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_VideoList
};
var kha_Assets = function() { };
$hxClasses["kha.Assets"] = kha_Assets;
kha_Assets.__name__ = "kha.Assets";
kha_Assets.__properties__ = {get_videoFormats:"get_videoFormats",get_fontFormats:"get_fontFormats",get_soundFormats:"get_soundFormats",get_imageFormats:"get_imageFormats"};
kha_Assets.loadEverything = function(callback,filter,uncompressSoundsFilter,failed) {
	var lists = [kha__$Assets_ImageList,kha__$Assets_SoundList,kha__$Assets_BlobList,kha__$Assets_FontList,kha__$Assets_VideoList];
	var listInstances = [kha_Assets.images,kha_Assets.sounds,kha_Assets.blobs,kha_Assets.fonts,kha_Assets.videos];
	var fileCount = 0;
	var _g = 0;
	while(_g < lists.length) {
		var list = lists[_g];
		++_g;
		var _g1 = 0;
		var _g11 = Type.getInstanceFields(list);
		while(_g1 < _g11.length) {
			var file = _g11[_g1];
			++_g1;
			if(StringTools.endsWith(file,"Description")) {
				fileCount += 1;
			}
		}
	}
	if(fileCount == 0) {
		callback();
		return;
	}
	var filesLeft = fileCount;
	var loadFunc = function(desc,done,failure) {
		var name = desc.name;
		switch(desc.type) {
		case "blob":
			kha_Assets.loadBlob(name,function(blob) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 122, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "font":
			kha_Assets.loadFont(name,function(font) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 124, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "image":
			kha_Assets.loadImage(name,function(image) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 113, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "sound":
			kha_Assets.loadSound(name,function(sound) {
				if(uncompressSoundsFilter == null || uncompressSoundsFilter(desc)) {
					sound.uncompress(done);
				} else {
					done();
				}
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 115, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "video":
			kha_Assets.loadVideo(name,function(video) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 126, className : "kha.Assets", methodName : "loadEverything"});
			break;
		}
	};
	var onLoaded = function() {
		filesLeft -= 1;
		kha_Assets.progress = 1 - filesLeft / fileCount;
		if(filesLeft == 0) {
			callback();
		}
	};
	var onError = function(err) {
		(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 137, className : "kha.Assets", methodName : "loadEverything"}))(err);
		onLoaded();
	};
	var _g12 = 0;
	var _g2 = lists.length;
	while(_g12 < _g2) {
		var i = _g12++;
		var list1 = lists[i];
		var listInstance = listInstances[i];
		var _g13 = 0;
		var _g21 = Type.getInstanceFields(list1);
		while(_g13 < _g21.length) {
			var field = _g21[_g13];
			++_g13;
			if(!StringTools.endsWith(field,"Description")) {
				continue;
			}
			var desc1 = Reflect.field(listInstance,field);
			if(filter == null || filter(desc1)) {
				loadFunc(desc1,onLoaded,onError);
			} else {
				onLoaded();
			}
		}
	}
};
kha_Assets.loadImage = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.images,name + "Description");
	kha_LoaderImpl.loadImageFromDescription(description,function(image) {
		Reflect.setField(kha_Assets.images,name,image);
		done(image);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadImageFromPath = function(path,readable,done,failed,pos) {
	var description = { files : [path], readable : readable};
	kha_LoaderImpl.loadImageFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.get_imageFormats = function() {
	return kha_LoaderImpl.getImageFormats();
};
kha_Assets.loadBlob = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.blobs,name + "Description");
	kha_LoaderImpl.loadBlobFromDescription(description,function(blob) {
		Reflect.setField(kha_Assets.blobs,name,blob);
		done(blob);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadBlobFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadBlobFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.loadSound = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.sounds,name + "Description");
	kha_LoaderImpl.loadSoundFromDescription(description,function(sound) {
		Reflect.setField(kha_Assets.sounds,name,sound);
		done(sound);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadSoundFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadSoundFromDescription(description,done,kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.get_soundFormats = function() {
	return kha_LoaderImpl.getSoundFormats();
};
kha_Assets.loadFont = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.fonts,name + "Description");
	kha_LoaderImpl.loadFontFromDescription(description,function(font) {
		Reflect.setField(kha_Assets.fonts,name,font);
		done(font);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadFontFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadFontFromDescription(description,done,kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.get_fontFormats = function() {
	return ["ttf"];
};
kha_Assets.loadVideo = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.videos,name + "Description");
	kha_LoaderImpl.loadVideoFromDescription(description,function(video) {
		Reflect.setField(kha_Assets.videos,name,video);
		done(video);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadVideoFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadVideoFromDescription(description,done,kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.get_videoFormats = function() {
	return kha_LoaderImpl.getVideoFormats();
};
kha_Assets.reporter = function(custom,pos) {
	if(custom != null) {
		return custom;
	} else {
		var f = haxe_Log.trace;
		var infos = pos;
		return function(v) {
			f(v,infos);
		};
	}
};
var kha_Canvas = function() { };
$hxClasses["kha.Canvas"] = kha_Canvas;
kha_Canvas.__name__ = "kha.Canvas";
kha_Canvas.__isInterface__ = true;
kha_Canvas.prototype = {
	get_width: null
	,get_height: null
	,get_g1: null
	,get_g2: null
	,get_g4: null
	,width: null
	,height: null
	,g1: null
	,g2: null
	,g4: null
	,__class__: kha_Canvas
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_Resource = function() { };
$hxClasses["kha.Resource"] = kha_Resource;
kha_Resource.__name__ = "kha.Resource";
kha_Resource.__isInterface__ = true;
kha_Resource.prototype = {
	unload: null
	,__class__: kha_Resource
};
var kha_Image = function() { };
$hxClasses["kha.Image"] = kha_Image;
kha_Image.__name__ = "kha.Image";
kha_Image.__interfaces__ = [kha_Resource,kha_Canvas];
kha_Image.__properties__ = {get_nonPow2Supported:"get_nonPow2Supported",get_maxSize:"get_maxSize"};
kha_Image.create = function(width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,false);
	} else {
		return new kha_WebGLImage(width,height,format,false,0,1);
	}
};
kha_Image.create3D = function(width,height,depth,format,usage) {
	return null;
};
kha_Image.createRenderTarget = function(width,height,format,depthStencil,antiAliasingSamples,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(antiAliasingSamples == null) {
		antiAliasingSamples = 1;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,true);
	} else {
		return new kha_WebGLImage(width,height,format,true,depthStencil,antiAliasingSamples);
	}
};
kha_Image.fromCanvas = function(canvas) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(canvas.width,canvas.height,0,false);
		img.image = canvas;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(canvas.width,canvas.height,0,false,0,1);
		img1.image = canvas;
		img1.createTexture();
		return img1;
	}
};
kha_Image.fromImage = function(image,readable) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(image.width,image.height,0,false);
		img.image = image;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(image.width,image.height,0,false,0,1);
		img1.image = image;
		img1.createTexture();
		return img1;
	}
};
kha_Image.fromBytes = function(bytes,width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl != null) {
		var img = new kha_WebGLImage(width,height,format,false,0,1);
		img.image = img.bytesToArray(bytes);
		img.createTexture();
		return img;
	}
	var img1 = new kha_CanvasImage(width,height,format,false);
	var g2 = img1.get_g2();
	var canvas = g2.canvas;
	var imageData = new ImageData(new Uint8ClampedArray(bytes.getData()),width,height);
	canvas.putImageData(imageData,0,0);
	return img1;
};
kha_Image.fromBytes3D = function(bytes,width,height,depth,format,usage) {
	return null;
};
kha_Image.fromEncodedBytes = function(bytes,fileExtention,doneCallback,errorCallback,readable) {
	if(readable == null) {
		readable = false;
	}
	var dataUrl = "data:image;base64," + haxe_crypto_Base64.encode(bytes);
	var imageElement = js_Boot.__cast(window.document.createElement("img") , HTMLImageElement);
	imageElement.onload = function() {
		var tmp = kha_Image.fromImage(imageElement,readable);
		doneCallback(tmp);
	};
	imageElement.onerror = function() {
		errorCallback("Image was not created");
	};
	imageElement.src = dataUrl;
};
kha_Image.fromVideo = function(video) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(video.element.videoWidth,video.element.videoHeight,0,false);
		img.video = video.element;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(video.element.videoWidth,video.element.videoHeight,0,false,0,1);
		img1.video = video.element;
		img1.createTexture();
		return img1;
	}
};
kha_Image.get_maxSize = function() {
	if(kha_SystemImpl.gl == null) {
		return 8192;
	} else {
		return kha_SystemImpl.gl.getParameter(3379);
	}
};
kha_Image.get_nonPow2Supported = function() {
	return kha_SystemImpl.gl != null;
};
kha_Image.renderTargetsInvertedY = function() {
	return true;
};
kha_Image.prototype = {
	isOpaque: function(x,y) {
		return false;
	}
	,at: function(x,y) {
		return -16777216;
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,getPixels: function() {
		return null;
	}
	,generateMipmaps: function(levels) {
	}
	,setMipmaps: function(mipmaps) {
	}
	,setDepthStencilFrom: function(image) {
	}
	,clear: function(x,y,z,width,height,depth,color) {
	}
	,width: null
	,get_width: function() {
		return 0;
	}
	,height: null
	,get_height: function() {
		return 0;
	}
	,depth: null
	,get_depth: function() {
		return 1;
	}
	,realWidth: null
	,get_realWidth: function() {
		return 0;
	}
	,realHeight: null
	,get_realHeight: function() {
		return 0;
	}
	,g1: null
	,get_g1: function() {
		return null;
	}
	,g2: null
	,get_g2: function() {
		return null;
	}
	,g4: null
	,get_g4: function() {
		return null;
	}
	,__class__: kha_Image
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_realHeight:"get_realHeight",get_realWidth:"get_realWidth",get_depth:"get_depth",get_height:"get_height",get_width:"get_width"}
};
var kha_CanvasImage = function(width,height,format,renderTarget) {
	this.g2canvas = null;
	this.myWidth = width;
	this.myHeight = height;
	this.format = format;
	this.renderTarget = renderTarget;
	this.image = null;
	this.video = null;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.CanvasImage"] = kha_CanvasImage;
kha_CanvasImage.__name__ = "kha.CanvasImage";
kha_CanvasImage.init = function() {
	var canvas = window.document.createElement("canvas");
	if(canvas != null) {
		kha_CanvasImage.context = canvas.getContext("2d");
		canvas.width = 2048;
		canvas.height = 2048;
		kha_CanvasImage.context.globalCompositeOperation = "copy";
	}
};
kha_CanvasImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_CanvasImage.__super__ = kha_Image;
kha_CanvasImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,frameBuffer: null
	,graphics1: null
	,g2canvas: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.g2canvas == null) {
			var canvas = window.document.createElement("canvas");
			this.image = canvas;
			var context = canvas.getContext("2d");
			canvas.width = this.get_width();
			canvas.height = this.get_height();
			this.g2canvas = new kha_js_CanvasGraphics(context);
		}
		return this.g2canvas;
	}
	,get_g4: function() {
		return null;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * Std.int(this.image.width) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		var r = this.data.data[y * Std.int(this.image.width) * 4 + x * 4];
		var g = this.data.data[y * Std.int(this.image.width) * 4 + x * 4 + 1];
		var b = this.data.data[y * Std.int(this.image.width) * 4 + x * 4 + 2];
		var a = this.data.data[y * Std.int(this.image.width) * 4 + x * 4 + 3];
		return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
	}
	,createImageData: function() {
		kha_CanvasImage.context.strokeStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillRect(0,0,this.image.width,this.image.height);
		kha_CanvasImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
		this.data = kha_CanvasImage.context.getImageData(0,0,this.image.width,this.image.height);
	}
	,texture: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = haxe_io_Bytes.alloc(this.format == 0 ? 4 * this.get_width() * this.get_height() : this.get_width() * this.get_height());
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,new Uint8Array(this.bytes.getData()));
			if(kha_SystemImpl.gl.getError() == 1282) {
				var rgbaBytes = haxe_io_Bytes.alloc(this.get_width() * this.get_height() * 4);
				var _g = 0;
				var _g1 = this.get_height();
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g11 = this.get_width();
					while(_g2 < _g11) {
						var x = _g2++;
						var value = this.bytes.get(y * this.get_width() + x);
						rgbaBytes.set(y * this.get_width() * 4 + x * 4,value);
						rgbaBytes.set(y * this.get_width() * 4 + x * 4 + 1,value);
						rgbaBytes.set(y * this.get_width() * 4 + x * 4 + 2,value);
						rgbaBytes.set(y * this.get_width() * 4 + x * 4 + 3,255);
					}
				}
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,new Uint8Array(rgbaBytes.getData()));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,getPixels: function() {
		var context = this.g2canvas.canvas;
		var imageData = context.getImageData(0,0,this.get_width(),this.get_height());
		var bytes = haxe_io_Bytes.alloc(imageData.data.length);
		var _g = 0;
		var _g1 = imageData.data.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.set(i,imageData.data[i]);
		}
		return bytes;
	}
	,unload: function() {
		this.image = null;
		this.video = null;
		this.data = null;
	}
	,__class__: kha_CanvasImage
});
var kha__$Color_Color_$Impl_$ = {};
$hxClasses["kha._Color.Color_Impl_"] = kha__$Color_Color_$Impl_$;
kha__$Color_Color_$Impl_$.__name__ = "kha._Color.Color_Impl_";
kha__$Color_Color_$Impl_$.__properties__ = {set_value:"set_value",get_value:"get_value",set_A:"set_A",get_A:"get_A",set_B:"set_B",get_B:"get_B",set_G:"set_G",get_G:"get_G",set_R:"set_R",get_R:"get_R",set_Ab:"set_Ab",get_Ab:"get_Ab",set_Bb:"set_Bb",get_Bb:"get_Bb",set_Gb:"set_Gb",get_Gb:"get_Gb",set_Rb:"set_Rb",get_Rb:"get_Rb"};
kha__$Color_Color_$Impl_$.fromValue = function(value) {
	return kha__$Color_Color_$Impl_$._new(value);
};
kha__$Color_Color_$Impl_$.fromBytes = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
};
kha__$Color_Color_$Impl_$.fromFloats = function(r,g,b,a) {
	if(a == null) {
		a = 1;
	}
	return kha__$Color_Color_$Impl_$._new(Std.int(a * 255) << 24 | Std.int(r * 255) << 16 | Std.int(g * 255) << 8 | Std.int(b * 255));
};
kha__$Color_Color_$Impl_$.fromString = function(value) {
	if((value.length == 7 || value.length == 9) && StringTools.fastCodeAt(value,0) == 35) {
		var colorValue = Std.parseInt("0x" + HxOverrides.substr(value,1,null));
		if(value.length == 7) {
			colorValue += -16777216;
		}
		return kha__$Color_Color_$Impl_$._new(colorValue);
	} else {
		throw new js__$Boot_HaxeError("Invalid Color string: '" + value + "'");
	}
};
kha__$Color_Color_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_value = function(this1) {
	return this1;
};
kha__$Color_Color_$Impl_$.set_value = function(this1,value) {
	this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_Rb = function(this1) {
	return (this1 & 16711680) >>> 16;
};
kha__$Color_Color_$Impl_$.get_Gb = function(this1) {
	return (this1 & 65280) >>> 8;
};
kha__$Color_Color_$Impl_$.get_Bb = function(this1) {
	return this1 & 255;
};
kha__$Color_Color_$Impl_$.get_Ab = function(this1) {
	return this1 >>> 24;
};
kha__$Color_Color_$Impl_$.set_Rb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | i << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Gb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | i << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Bb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | i;
	return i;
};
kha__$Color_Color_$Impl_$.set_Ab = function(this1,i) {
	this1 = i << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.get_R = function(this1) {
	return ((this1 & 16711680) >>> 16) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_G = function(this1) {
	return ((this1 & 65280) >>> 8) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_B = function(this1) {
	return (this1 & 255) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_A = function(this1) {
	return (this1 >>> 24) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.set_R = function(this1,f) {
	this1 = Std.int((this1 >>> 24) * 0.00392156862745098 * 255) << 24 | Std.int(f * 255) << 16 | Std.int(((this1 & 65280) >>> 8) * 0.00392156862745098 * 255) << 8 | Std.int((this1 & 255) * 0.00392156862745098 * 255);
	return f;
};
kha__$Color_Color_$Impl_$.set_G = function(this1,f) {
	this1 = Std.int((this1 >>> 24) * 0.00392156862745098 * 255) << 24 | Std.int(((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255) << 16 | Std.int(f * 255) << 8 | Std.int((this1 & 255) * 0.00392156862745098 * 255);
	return f;
};
kha__$Color_Color_$Impl_$.set_B = function(this1,f) {
	this1 = Std.int((this1 >>> 24) * 0.00392156862745098 * 255) << 24 | Std.int(((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255) << 16 | Std.int(((this1 & 65280) >>> 8) * 0.00392156862745098 * 255) << 8 | Std.int(f * 255);
	return f;
};
kha__$Color_Color_$Impl_$.set_A = function(this1,f) {
	this1 = Std.int(f * 255) << 24 | Std.int(((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255) << 16 | Std.int(((this1 & 65280) >>> 8) * 0.00392156862745098 * 255) << 8 | Std.int((this1 & 255) * 0.00392156862745098 * 255);
	return f;
};
var kha_Display = function() {
};
$hxClasses["kha.Display"] = kha_Display;
kha_Display.__name__ = "kha.Display";
kha_Display.__properties__ = {get_all:"get_all",get_primary:"get_primary"};
kha_Display.get_primary = function() {
	return kha_Display.instance;
};
kha_Display.get_all = function() {
	return [kha_Display.get_primary()];
};
kha_Display.prototype = {
	get_available: function() {
		return true;
	}
	,get_name: function() {
		return "Display";
	}
	,get_x: function() {
		return window.screen.left;
	}
	,get_y: function() {
		return window.screen.top;
	}
	,get_width: function() {
		return window.screen.width;
	}
	,get_height: function() {
		return window.screen.height;
	}
	,get_frequency: function() {
		return 60;
	}
	,get_pixelsPerInch: function() {
		var dpiElement = window.document.createElement("div");
		dpiElement.style.position = "absolute";
		dpiElement.style.width = "1in";
		dpiElement.style.height = "1in";
		dpiElement.style.left = "-100%";
		dpiElement.style.top = "-100%";
		window.document.body.appendChild(dpiElement);
		var dpi = dpiElement.offsetHeight;
		dpiElement.remove();
		return dpi;
	}
	,get_modes: function() {
		return [];
	}
	,__class__: kha_Display
	,__properties__: {get_modes:"get_modes",get_pixelsPerInch:"get_pixelsPerInch",get_frequency:"get_frequency",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x",get_name:"get_name",get_available:"get_available"}
};
var kha_DisplayMode = function(width,height,frequency,bitsPerPixel) {
	this.width = width;
	this.height = height;
	this.frequency = frequency;
	this.bitsPerPixel = bitsPerPixel;
};
$hxClasses["kha.DisplayMode"] = kha_DisplayMode;
kha_DisplayMode.__name__ = "kha.DisplayMode";
kha_DisplayMode.prototype = {
	width: null
	,height: null
	,frequency: null
	,bitsPerPixel: null
	,__class__: kha_DisplayMode
};
var kha_Framebuffer = function($window,g1,g2,g4) {
	this.window = $window;
	this.graphics1 = g1;
	this.graphics2 = g2;
	this.graphics4 = g4;
};
$hxClasses["kha.Framebuffer"] = kha_Framebuffer;
kha_Framebuffer.__name__ = "kha.Framebuffer";
kha_Framebuffer.__interfaces__ = [kha_Canvas];
kha_Framebuffer.prototype = {
	window: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,init: function(g1,g2,g4) {
		this.graphics1 = g1;
		this.graphics2 = g2;
		this.graphics4 = g4;
	}
	,get_g1: function() {
		return this.graphics1;
	}
	,get_g2: function() {
		return this.graphics2;
	}
	,get_g4: function() {
		return this.graphics4;
	}
	,width: null
	,get_width: function() {
		return kha_System.windowWidth(this.window);
	}
	,height: null
	,get_height: function() {
		return kha_System.windowHeight(this.window);
	}
	,__class__: kha_Framebuffer
	,__properties__: {get_height:"get_height",get_width:"get_width",get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1"}
};
var kha_FramebufferOptions = function(frequency,verticalSync,colorBufferBits,depthBufferBits,stencilBufferBits,samplesPerPixel) {
	if(samplesPerPixel == null) {
		samplesPerPixel = 1;
	}
	if(stencilBufferBits == null) {
		stencilBufferBits = 8;
	}
	if(depthBufferBits == null) {
		depthBufferBits = 16;
	}
	if(colorBufferBits == null) {
		colorBufferBits = 32;
	}
	if(verticalSync == null) {
		verticalSync = true;
	}
	if(frequency == null) {
		frequency = 60;
	}
	this.samplesPerPixel = 1;
	this.stencilBufferBits = 8;
	this.depthBufferBits = 16;
	this.colorBufferBits = 32;
	this.verticalSync = true;
	this.frequency = 60;
	this.frequency = frequency;
	this.verticalSync = verticalSync;
	this.colorBufferBits = colorBufferBits;
	this.depthBufferBits = depthBufferBits;
	this.stencilBufferBits = stencilBufferBits;
	this.samplesPerPixel = samplesPerPixel;
};
$hxClasses["kha.FramebufferOptions"] = kha_FramebufferOptions;
kha_FramebufferOptions.__name__ = "kha.FramebufferOptions";
kha_FramebufferOptions.prototype = {
	frequency: null
	,verticalSync: null
	,colorBufferBits: null
	,depthBufferBits: null
	,stencilBufferBits: null
	,samplesPerPixel: null
	,__class__: kha_FramebufferOptions
};
var kha_AlignedQuad = function() {
};
$hxClasses["kha.AlignedQuad"] = kha_AlignedQuad;
kha_AlignedQuad.__name__ = "kha.AlignedQuad";
kha_AlignedQuad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,xadvance: null
	,__class__: kha_AlignedQuad
};
var kha_KravurImage = function(size,ascent,descent,lineGap,width,height,chars,pixels) {
	this.mySize = size;
	this.width = width;
	this.height = height;
	this.chars = chars;
	this.baseline = ascent;
	var _g = 0;
	while(_g < chars.length) {
		var char = chars[_g];
		++_g;
		char.yoff += this.baseline;
	}
	this.texture = kha_Image.fromBytes(pixels.toBytes(),width,height,1);
};
$hxClasses["kha.KravurImage"] = kha_KravurImage;
kha_KravurImage.__name__ = "kha.KravurImage";
kha_KravurImage.prototype = {
	mySize: null
	,chars: null
	,texture: null
	,width: null
	,height: null
	,baseline: null
	,getTexture: function() {
		return this.texture;
	}
	,getBakedQuad: function(q,char_index,xpos,ypos) {
		if(char_index >= this.chars.length) {
			return null;
		}
		var ipw = 1.0 / this.width;
		var iph = 1.0 / this.height;
		var b = this.chars[char_index];
		if(b == null) {
			return null;
		}
		var round_x = Math.round(xpos + b.xoff);
		var round_y = Math.round(ypos + b.yoff);
		q.x0 = round_x;
		q.y0 = round_y;
		q.x1 = round_x + b.x1 - b.x0;
		q.y1 = round_y + b.y1 - b.y0;
		q.s0 = b.x0 * ipw;
		q.t0 = b.y0 * iph;
		q.s1 = b.x1 * ipw;
		q.t1 = b.y1 * iph;
		q.xadvance = b.xadvance;
		return q;
	}
	,getCharWidth: function(charIndex) {
		if(this.chars.length == 0) {
			return 0;
		}
		var offset = kha_KravurImage.charBlocks[0];
		if(charIndex < offset) {
			return this.chars[0].xadvance;
		}
		var _g = 1;
		var _g1 = Std.int(kha_KravurImage.charBlocks.length / 2);
		while(_g < _g1) {
			var i = _g++;
			var prevEnd = kha_KravurImage.charBlocks[i * 2 - 1];
			var start = kha_KravurImage.charBlocks[i * 2];
			if(charIndex > start - 1) {
				offset += start - 1 - prevEnd;
			}
		}
		if(charIndex - offset >= this.chars.length) {
			return this.chars[0].xadvance;
		}
		return this.chars[charIndex - offset].xadvance;
	}
	,getHeight: function() {
		return this.mySize;
	}
	,stringWidth: function(str) {
		var width = 0;
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var c = _g++;
			width += this.getCharWidth(HxOverrides.cca(str,c));
		}
		return width;
	}
	,charactersWidth: function(characters,start,length) {
		var width = 0;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) {
			var i = _g++;
			width += this.getCharWidth(characters[i]);
		}
		return width;
	}
	,getBaselinePosition: function() {
		return this.baseline;
	}
	,__class__: kha_KravurImage
};
var kha_Kravur = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.blob = blob;
};
$hxClasses["kha.Kravur"] = kha_Kravur;
kha_Kravur.__name__ = "kha.Kravur";
kha_Kravur.__interfaces__ = [kha_Resource];
kha_Kravur.fromBytes = function(bytes) {
	return new kha_Kravur(kha_internal_BytesBlob.fromBytes(bytes));
};
kha_Kravur.prototype = {
	oldGlyphs: null
	,blob: null
	,images: null
	,_get: function(fontSize) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		if(glyphs != this.oldGlyphs) {
			this.oldGlyphs = glyphs;
			kha_KravurImage.charBlocks = [glyphs[0]];
			var nextChar = kha_KravurImage.charBlocks[0] + 1;
			var _g = 1;
			var _g1 = glyphs.length;
			while(_g < _g1) {
				var i = _g++;
				if(glyphs[i] != nextChar) {
					kha_KravurImage.charBlocks.push(glyphs[i - 1]);
					kha_KravurImage.charBlocks.push(glyphs[i]);
					nextChar = glyphs[i] + 1;
				} else {
					++nextChar;
				}
			}
			kha_KravurImage.charBlocks.push(glyphs[glyphs.length - 1]);
		}
		var imageIndex = fontSize * 10000 + glyphs.length;
		if(!this.images.exists(imageIndex)) {
			var width = 64;
			var height = 32;
			var this1 = new Array(glyphs.length);
			var baked = this1;
			var _g2 = 0;
			var _g11 = baked.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				baked[i1] = new kha_graphics2_truetype_Stbtt_$bakedchar();
			}
			var pixels = null;
			var status = -1;
			while(status <= 0) {
				if(height < width) {
					height *= 2;
				} else {
					width *= 2;
				}
				pixels = kha_internal_BytesBlob.alloc(width * height);
				status = kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap(this.blob,0,fontSize,pixels,width,height,glyphs,baked);
			}
			var info = new kha_graphics2_truetype_Stbtt_$fontinfo();
			kha_graphics2_truetype_StbTruetype.stbtt_InitFont(info,this.blob,0);
			var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics(info);
			var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(info,fontSize);
			var ascent = Math.round(metrics.ascent * scale);
			var descent = Math.round(metrics.descent * scale);
			var lineGap = Math.round(metrics.lineGap * scale);
			var image = new kha_KravurImage(Std.int(fontSize),ascent,descent,lineGap,width,height,baked,pixels);
			this.images.set(imageIndex,image);
			return image;
		}
		return this.images.get(imageIndex);
	}
	,height: function(fontSize) {
		return this._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this._get(fontSize).getBaselinePosition();
	}
	,unload: function() {
		this.blob = null;
		this.images = null;
	}
	,__class__: kha_Kravur
};
var kha_LoaderImpl = function() { };
$hxClasses["kha.LoaderImpl"] = kha_LoaderImpl;
kha_LoaderImpl.__name__ = "kha.LoaderImpl";
kha_LoaderImpl.getImageFormats = function() {
	return ["png","jpg","hdr"];
};
kha_LoaderImpl.loadImageFromDescription = function(desc,done,failed) {
	var readable = Reflect.hasField(desc,"readable") && desc.readable;
	if(StringTools.endsWith(desc.files[0],".hdr")) {
		kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
			var hdrImage = kha_internal_HdrFormat.parse(blob.toBytes());
			var tmp = kha_Image.fromBytes(haxe_io_Bytes.ofData(hdrImage.data.buffer),hdrImage.width,hdrImage.height,2,readable ? 1 : 0);
			done(tmp);
		},failed);
	} else {
		var img = window.document.createElement("img");
		img.onerror = function(event) {
			failed({ url : desc.files[0], error : event});
		};
		img.onload = function(event1) {
			var tmp1 = kha_Image.fromImage(img,readable);
			done(tmp1);
		};
		img.src = desc.files[0];
		img.crossOrigin = "";
	}
};
kha_LoaderImpl.getSoundFormats = function() {
	var element = window.document.createElement("audio");
	var formats = [];
	if(element.canPlayType("audio/mp4") != "") {
		formats.push("mp4");
	}
	if(element.canPlayType("audio/mp3") != "") {
		formats.push("mp3");
	}
	if(element.canPlayType("audio/wav") != "") {
		formats.push("wav");
	}
	if(kha_SystemImpl._hasWebAudio || element.canPlayType("audio/ogg") != "") {
		formats.push("ogg");
	}
	return formats;
};
kha_LoaderImpl.loadSoundFromDescription = function(desc,done,failed) {
	if(kha_SystemImpl._hasWebAudio) {
		var element = window.document.createElement("audio");
		if(element.canPlayType("audio/mp4") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".mp4")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/mp3") != "") {
			var _g2 = 0;
			var _g11 = desc.files.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var file1 = desc.files[i1];
				if(StringTools.endsWith(file1,".mp3")) {
					new kha_js_WebAudioSound(file1,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/wav") != "") {
			var _g3 = 0;
			var _g12 = desc.files.length;
			while(_g3 < _g12) {
				var i2 = _g3++;
				var file2 = desc.files[i2];
				if(StringTools.endsWith(file2,".wav")) {
					new kha_js_WebAudioSound(file2,done,failed);
					return;
				}
			}
		}
		var _g4 = 0;
		var _g13 = desc.files.length;
		while(_g4 < _g13) {
			var i3 = _g4++;
			var file3 = desc.files[i3];
			if(StringTools.endsWith(file3,".ogg")) {
				new kha_js_WebAudioSound(file3,done,failed);
				return;
			}
		}
	} else if(kha_SystemImpl.mobile) {
		var element1 = window.document.createElement("audio");
		if(element1.canPlayType("audio/mp4") != "") {
			var _g5 = 0;
			var _g14 = desc.files.length;
			while(_g5 < _g14) {
				var i4 = _g5++;
				var file4 = desc.files[i4];
				if(StringTools.endsWith(file4,".mp4")) {
					new kha_js_MobileWebAudioSound(file4,done,failed);
					return;
				}
			}
		}
		if(element1.canPlayType("audio/mp3") != "") {
			var _g6 = 0;
			var _g15 = desc.files.length;
			while(_g6 < _g15) {
				var i5 = _g6++;
				var file5 = desc.files[i5];
				if(StringTools.endsWith(file5,".mp3")) {
					new kha_js_MobileWebAudioSound(file5,done,failed);
					return;
				}
			}
		}
		if(element1.canPlayType("audio/wav") != "") {
			var _g7 = 0;
			var _g16 = desc.files.length;
			while(_g7 < _g16) {
				var i6 = _g7++;
				var file6 = desc.files[i6];
				if(StringTools.endsWith(file6,".wav")) {
					new kha_js_MobileWebAudioSound(file6,done,failed);
					return;
				}
			}
		}
		var _g8 = 0;
		var _g17 = desc.files.length;
		while(_g8 < _g17) {
			var i7 = _g8++;
			var file7 = desc.files[i7];
			if(StringTools.endsWith(file7,".ogg")) {
				new kha_js_MobileWebAudioSound(file7,done,failed);
				return;
			}
		}
	} else {
		new kha_js_Sound(desc.files,done,failed);
	}
};
kha_LoaderImpl.getVideoFormats = function() {
	return ["mp4","webm"];
};
kha_LoaderImpl.loadVideoFromDescription = function(desc,done,failed) {
	kha_js_Video.fromFile(desc.files,done);
};
kha_LoaderImpl.loadRemote = function(desc,done,failed) {
	var request = new XMLHttpRequest();
	request.open("GET",desc.files[0],true);
	request.responseType = "arraybuffer";
	request.onreadystatechange = function() {
		if(request.readyState != 4) {
			return;
		}
		if(request.status >= 200 && request.status < 400 || request.status == 0 && request.statusText == "") {
			var bytes = null;
			var arrayBuffer = request.response;
			if(arrayBuffer != null) {
				var byteArray = new Uint8Array(arrayBuffer);
				bytes = haxe_io_Bytes.ofData(byteArray);
			} else if(request.responseBody != null) {
				var data = VBArray(request.responseBody).toArray();
				bytes = haxe_io_Bytes.alloc(data.length);
				var _g = 0;
				var _g1 = data.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.set(i,data[i]);
				}
			} else {
				failed({ url : desc.files[0]});
				return;
			}
			done(new kha_internal_BytesBlob(bytes));
		} else {
			failed({ url : desc.files[0]});
		}
	};
	request.send(null);
};
kha_LoaderImpl.loadBlobFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadRemote(desc,done,failed);
};
kha_LoaderImpl.loadFontFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
		done(new kha_Kravur(blob));
	},failed);
};
var kha_Macros = function() { };
$hxClasses["kha.Macros"] = kha_Macros;
kha_Macros.__name__ = "kha.Macros";
var kha_TimeTask = function() {
};
$hxClasses["kha.TimeTask"] = kha_TimeTask;
kha_TimeTask.__name__ = "kha.TimeTask";
kha_TimeTask.prototype = {
	task: null
	,start: null
	,period: null
	,duration: null
	,next: null
	,id: null
	,groupId: null
	,active: null
	,paused: null
	,__class__: kha_TimeTask
};
var kha_FrameTask = function(task,priority,id) {
	this.task = task;
	this.priority = priority;
	this.id = id;
	this.active = true;
	this.paused = false;
};
$hxClasses["kha.FrameTask"] = kha_FrameTask;
kha_FrameTask.__name__ = "kha.FrameTask";
kha_FrameTask.prototype = {
	task: null
	,priority: null
	,id: null
	,active: null
	,paused: null
	,__class__: kha_FrameTask
};
var kha_Scheduler = function() { };
$hxClasses["kha.Scheduler"] = kha_Scheduler;
kha_Scheduler.__name__ = "kha.Scheduler";
kha_Scheduler.init = function() {
	kha_Scheduler.deltas = [];
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.stopped = true;
	kha_Scheduler.frame_tasks_sorted = true;
	kha_Scheduler.current = kha_Scheduler.lastTime = kha_Scheduler.realTime();
	kha_Scheduler.currentFrameTaskId = 0;
	kha_Scheduler.currentTimeTaskId = 0;
	kha_Scheduler.currentGroupId = 0;
	kha_Scheduler.timeTasks = [];
	kha_Scheduler.pausedTimeTasks = [];
	kha_Scheduler.outdatedTimeTasks = [];
	kha_Scheduler.timeTasksScratchpad = [];
	kha_Scheduler.frameTasks = [];
	kha_Scheduler.toDeleteFrame = [];
};
kha_Scheduler.start = function(restartTimers) {
	if(restartTimers == null) {
		restartTimers = false;
	}
	kha_Scheduler.vsync = kha_Window.get(0).get_vSynced();
	var hz = kha_Display.get_primary().get_frequency();
	if(hz >= 57 && hz <= 63) {
		hz = 60;
	}
	kha_Scheduler.onedifhz = 1.0 / hz;
	kha_Scheduler.stopped = false;
	kha_Scheduler.resetTime();
	kha_Scheduler.lastTime = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	if(restartTimers) {
		var _g2 = 0;
		var _g3 = kha_Scheduler.timeTasks;
		while(_g2 < _g3.length) {
			var timeTask = _g3[_g2];
			++_g2;
			timeTask.paused = false;
		}
		var _g4 = 0;
		var _g5 = kha_Scheduler.frameTasks;
		while(_g4 < _g5.length) {
			var frameTask = _g5[_g4];
			++_g4;
			frameTask.paused = false;
		}
	}
};
kha_Scheduler.stop = function() {
	kha_Scheduler.stopped = true;
};
kha_Scheduler.isStopped = function() {
	return kha_Scheduler.stopped;
};
kha_Scheduler.warpTimeTasksBack = function(time,tasks) {
	var _g = 0;
	while(_g < tasks.length) {
		var timeTask = tasks[_g];
		++_g;
		if(timeTask.start >= time) {
			timeTask.next = timeTask.start;
		} else if(timeTask.period > 0) {
			var sinceStart = time - timeTask.start;
			var times = Math.ceil(sinceStart / timeTask.period);
			timeTask.next = timeTask.start + times * timeTask.period;
		}
	}
};
kha_Scheduler.warp = function(time) {
	if(time < kha_Scheduler.lastTime) {
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.outdatedTimeTasks);
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.timeTasks);
		var _g = 0;
		var _g1 = kha_Scheduler.outdatedTimeTasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.next >= time) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g2 = 0;
		var _g3 = kha_Scheduler.timeTasksScratchpad;
		while(_g2 < _g3.length) {
			var task1 = _g3[_g2];
			++_g2;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task1);
		}
		var _g4 = 0;
		var _g5 = kha_Scheduler.timeTasksScratchpad;
		while(_g4 < _g5.length) {
			var task2 = _g5[_g4];
			++_g4;
			kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,task2);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	} else if(time > kha_Scheduler.lastTime) {
		kha_Scheduler.startTime -= time - kha_Scheduler.lastTime;
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.executeTimeTasks(time);
	}
};
kha_Scheduler.executeFrame = function() {
	var now = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var delta = now - kha_Scheduler.lastTime;
	var frameEnd = kha_Scheduler.current;
	if(delta >= 0) {
		if(kha_netsync_Session.the() == null) {
			if(delta > kha_Scheduler.maxframetime) {
				kha_Scheduler.startTime += delta - kha_Scheduler.maxframetime;
				delta = kha_Scheduler.maxframetime;
				frameEnd += delta;
			} else if(kha_Scheduler.vsync) {
				var realdif = kha_Scheduler.onedifhz;
				while(realdif < delta - kha_Scheduler.onedifhz) realdif += kha_Scheduler.onedifhz;
				delta = realdif;
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT - 2;
				while(_g < _g1) {
					var i = _g++;
					delta += kha_Scheduler.deltas[i];
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				delta += kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2];
				delta /= kha_Scheduler.DIF_COUNT;
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2] = realdif;
				frameEnd += delta;
			} else {
				var _g2 = 0;
				var _g11 = kha_Scheduler.DIF_COUNT - 1;
				while(_g2 < _g11) {
					var i1 = _g2++;
					kha_Scheduler.deltas[i1] = kha_Scheduler.deltas[i1 + 1];
				}
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 1] = delta;
				var next = 0;
				var _g21 = 0;
				var _g3 = kha_Scheduler.DIF_COUNT;
				while(_g21 < _g3) {
					var i2 = _g21++;
					next += kha_Scheduler.deltas[i2];
				}
				next /= kha_Scheduler.DIF_COUNT;
				frameEnd += next;
			}
		} else {
			frameEnd += delta;
		}
		kha_Scheduler.lastTime = frameEnd;
		if(!kha_Scheduler.stopped) {
			kha_Scheduler.current = frameEnd;
		}
		var _g4 = 0;
		var _g12 = kha_Scheduler.pausedTimeTasks;
		while(_g4 < _g12.length) {
			var pausedTask = _g12[_g4];
			++_g4;
			pausedTask.next += delta;
		}
		if(kha_Scheduler.stopped) {
			var _g22 = 0;
			var _g31 = kha_Scheduler.timeTasks;
			while(_g22 < _g31.length) {
				var timeTask = _g31[_g22];
				++_g22;
				timeTask.next += delta;
			}
		}
		kha_Scheduler.executeTimeTasks(frameEnd);
		var _g23 = 0;
		var _g32 = kha_Scheduler.outdatedTimeTasks;
		while(_g23 < _g32.length) {
			var task = _g32[_g23];
			++_g23;
			if(task.next < frameEnd - 10.0) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g41 = 0;
		var _g5 = kha_Scheduler.timeTasksScratchpad;
		while(_g41 < _g5.length) {
			var task1 = _g5[_g41];
			++_g41;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task1);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	}
	kha_Scheduler.sortFrameTasks();
	var _g6 = 0;
	var _g13 = kha_Scheduler.frameTasks;
	while(_g6 < _g13.length) {
		var frameTask = _g13[_g6];
		++_g6;
		if(!kha_Scheduler.stopped && !frameTask.paused && frameTask.active) {
			if(!frameTask.task()) {
				frameTask.active = false;
			}
		}
	}
	var _g24 = 0;
	var _g33 = kha_Scheduler.frameTasks;
	while(_g24 < _g33.length) {
		var frameTask1 = _g33[_g24];
		++_g24;
		if(!frameTask1.active) {
			kha_Scheduler.toDeleteFrame.push(frameTask1);
		}
	}
	while(kha_Scheduler.toDeleteFrame.length > 0) HxOverrides.remove(kha_Scheduler.frameTasks,kha_Scheduler.toDeleteFrame.pop());
};
kha_Scheduler.executeTimeTasks = function(until) {
	while(kha_Scheduler.timeTasks.length > 0) {
		kha_Scheduler.activeTimeTask = kha_Scheduler.timeTasks[0];
		if(kha_Scheduler.activeTimeTask.next <= until) {
			kha_Scheduler.activeTimeTask.next += kha_Scheduler.activeTimeTask.period;
			HxOverrides.remove(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
			if(kha_Scheduler.activeTimeTask.active && kha_Scheduler.activeTimeTask.task()) {
				if(kha_Scheduler.activeTimeTask.period > 0 && (kha_Scheduler.activeTimeTask.duration == 0 || kha_Scheduler.activeTimeTask.duration >= kha_Scheduler.activeTimeTask.start + kha_Scheduler.activeTimeTask.next)) {
					kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
				} else {
					kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
				}
			} else {
				kha_Scheduler.activeTimeTask.active = false;
				kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
			}
		} else {
			break;
		}
	}
	kha_Scheduler.activeTimeTask = null;
};
kha_Scheduler.archiveTimeTask = function(timeTask,frameEnd) {
};
kha_Scheduler.time = function() {
	return kha_Scheduler.current;
};
kha_Scheduler.realTime = function() {
	return kha_System.get_time();
};
kha_Scheduler.resetTime = function() {
	var now = kha_System.get_time();
	var dif = now - kha_Scheduler.startTime;
	kha_Scheduler.startTime = now;
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		timeTask.start -= dif;
		timeTask.next -= dif;
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.DIF_COUNT;
	while(_g2 < _g3) {
		var i = _g2++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.current = 0;
	kha_Scheduler.lastTime = 0;
};
kha_Scheduler.addBreakableFrameTask = function(task,priority) {
	kha_Scheduler.frameTasks.push(new kha_FrameTask(task,priority,++kha_Scheduler.currentFrameTaskId));
	kha_Scheduler.frame_tasks_sorted = false;
	return kha_Scheduler.currentFrameTaskId;
};
kha_Scheduler.addFrameTask = function(task,priority) {
	return kha_Scheduler.addBreakableFrameTask(function() {
		task();
		return true;
	},priority);
};
kha_Scheduler.pauseFrameTask = function(id,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.paused = paused;
			break;
		}
	}
};
kha_Scheduler.removeFrameTask = function(id) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.active = false;
			break;
		}
	}
};
kha_Scheduler.generateGroupId = function() {
	return ++kha_Scheduler.currentGroupId;
};
kha_Scheduler.addBreakableTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	var t = new kha_TimeTask();
	t.active = true;
	t.task = task;
	t.id = ++kha_Scheduler.currentTimeTaskId;
	t.groupId = groupId;
	t.start = kha_Scheduler.current + start;
	t.period = 0;
	if(period != 0) {
		t.period = period;
	}
	t.duration = 0;
	if(duration != 0) {
		t.duration = t.start + duration;
	}
	t.next = t.start;
	kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,t);
	return t.id;
};
kha_Scheduler.addTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(groupId,function() {
		task();
		return true;
	},start,period,duration);
};
kha_Scheduler.addBreakableTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.addTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.getTimeTask = function(id) {
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		return kha_Scheduler.activeTimeTask;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.pausedTimeTasks;
	while(_g2 < _g3.length) {
		var timeTask1 = _g3[_g2];
		++_g2;
		if(timeTask1.id == id) {
			return timeTask1;
		}
	}
	return null;
};
kha_Scheduler.pauseTimeTask = function(id,paused) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.pauseRunningTimeTask = function(timeTask,paused) {
	timeTask.paused = paused;
	if(paused) {
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
		kha_Scheduler.pausedTimeTasks.push(timeTask);
	} else {
		kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,timeTask);
		HxOverrides.remove(kha_Scheduler.pausedTimeTasks,timeTask);
	}
};
kha_Scheduler.pauseTimeTasks = function(groupId,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
		}
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.removeTimeTask = function(id) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		timeTask.active = false;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
};
kha_Scheduler.removeTimeTasks = function(groupId) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			timeTask.active = false;
			kha_Scheduler.timeTasksScratchpad.push(timeTask);
		}
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.timeTasksScratchpad;
	while(_g2 < _g3.length) {
		var timeTask1 = _g3[_g2];
		++_g2;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask1);
	}
	while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.active = false;
	}
};
kha_Scheduler.numTasksInSchedule = function() {
	return kha_Scheduler.timeTasks.length + kha_Scheduler.frameTasks.length;
};
kha_Scheduler.insertSorted = function(list,task) {
	var _g = 0;
	var _g1 = list.length;
	while(_g < _g1) {
		var i = _g++;
		if(list[i].next > task.next) {
			list.splice(i,0,task);
			return;
		}
	}
	list.push(task);
};
kha_Scheduler.sortFrameTasks = function() {
	if(kha_Scheduler.frame_tasks_sorted) {
		return;
	}
	kha_Scheduler.frameTasks.sort(function(a,b) {
		if(a.priority > b.priority) {
			return 1;
		} else if(a.priority < b.priority) {
			return -1;
		} else {
			return 0;
		}
	});
	kha_Scheduler.frame_tasks_sorted = true;
};
var kha_Shaders = function() { };
$hxClasses["kha.Shaders"] = kha_Shaders;
kha_Shaders.__name__ = "kha.Shaders";
kha_Shaders.init = function() {
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"Blue_mesh_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.Blue_mesh_frag = new kha_graphics4_FragmentShader(blobs,["Blue_mesh-webgl2.frag.essl"]);
	var blobs1 = [];
	var data1 = Reflect.field(kha_Shaders,"Blue_mesh_vertData" + 0);
	var bytes1 = haxe_Unserializer.run(data1);
	blobs1.push(kha_internal_BytesBlob.fromBytes(bytes1));
	kha_Shaders.Blue_mesh_vert = new kha_graphics4_VertexShader(blobs1,["Blue_mesh-webgl2.vert.essl"]);
	var blobs2 = [];
	var data2 = Reflect.field(kha_Shaders,"BotBody_armskin_mesh_fragData" + 0);
	var bytes2 = haxe_Unserializer.run(data2);
	blobs2.push(kha_internal_BytesBlob.fromBytes(bytes2));
	kha_Shaders.BotBody_armskin_mesh_frag = new kha_graphics4_FragmentShader(blobs2,["BotBody_armskin_mesh-webgl2.frag.essl"]);
	var blobs3 = [];
	var data3 = Reflect.field(kha_Shaders,"BotBody_armskin_mesh_vertData" + 0);
	var bytes3 = haxe_Unserializer.run(data3);
	blobs3.push(kha_internal_BytesBlob.fromBytes(bytes3));
	kha_Shaders.BotBody_armskin_mesh_vert = new kha_graphics4_VertexShader(blobs3,["BotBody_armskin_mesh-webgl2.vert.essl"]);
	var blobs4 = [];
	var data4 = Reflect.field(kha_Shaders,"BotBody_armskin_shadowmap_vertData" + 0);
	var bytes4 = haxe_Unserializer.run(data4);
	blobs4.push(kha_internal_BytesBlob.fromBytes(bytes4));
	kha_Shaders.BotBody_armskin_shadowmap_vert = new kha_graphics4_VertexShader(blobs4,["BotBody_armskin_shadowmap-webgl2.vert.essl"]);
	var blobs5 = [];
	var data5 = Reflect.field(kha_Shaders,"BotColor_armskin_mesh_fragData" + 0);
	var bytes5 = haxe_Unserializer.run(data5);
	blobs5.push(kha_internal_BytesBlob.fromBytes(bytes5));
	kha_Shaders.BotColor_armskin_mesh_frag = new kha_graphics4_FragmentShader(blobs5,["BotColor_armskin_mesh-webgl2.frag.essl"]);
	var blobs6 = [];
	var data6 = Reflect.field(kha_Shaders,"BotJoints_armskin_mesh_fragData" + 0);
	var bytes6 = haxe_Unserializer.run(data6);
	blobs6.push(kha_internal_BytesBlob.fromBytes(bytes6));
	kha_Shaders.BotJoints_armskin_mesh_frag = new kha_graphics4_FragmentShader(blobs6,["BotJoints_armskin_mesh-webgl2.frag.essl"]);
	var blobs7 = [];
	var data7 = Reflect.field(kha_Shaders,"Box_mesh_fragData" + 0);
	var bytes7 = haxe_Unserializer.run(data7);
	blobs7.push(kha_internal_BytesBlob.fromBytes(bytes7));
	kha_Shaders.Box_mesh_frag = new kha_graphics4_FragmentShader(blobs7,["Box_mesh-webgl2.frag.essl"]);
	var blobs8 = [];
	var data8 = Reflect.field(kha_Shaders,"Ground_mesh_fragData" + 0);
	var bytes8 = haxe_Unserializer.run(data8);
	blobs8.push(kha_internal_BytesBlob.fromBytes(bytes8));
	kha_Shaders.Ground_mesh_frag = new kha_graphics4_FragmentShader(blobs8,["Ground_mesh-webgl2.frag.essl"]);
	var blobs9 = [];
	var data9 = Reflect.field(kha_Shaders,"Gun2_mesh_fragData" + 0);
	var bytes9 = haxe_Unserializer.run(data9);
	blobs9.push(kha_internal_BytesBlob.fromBytes(bytes9));
	kha_Shaders.Gun2_mesh_frag = new kha_graphics4_FragmentShader(blobs9,["Gun2_mesh-webgl2.frag.essl"]);
	var blobs10 = [];
	var data10 = Reflect.field(kha_Shaders,"Gun_mesh_fragData" + 0);
	var bytes10 = haxe_Unserializer.run(data10);
	blobs10.push(kha_internal_BytesBlob.fromBytes(bytes10));
	kha_Shaders.Gun_mesh_frag = new kha_graphics4_FragmentShader(blobs10,["Gun_mesh-webgl2.frag.essl"]);
	var blobs11 = [];
	var data11 = Reflect.field(kha_Shaders,"Material_001_mesh_fragData" + 0);
	var bytes11 = haxe_Unserializer.run(data11);
	blobs11.push(kha_internal_BytesBlob.fromBytes(bytes11));
	kha_Shaders.Material_001_mesh_frag = new kha_graphics4_FragmentShader(blobs11,["Material_001_mesh-webgl2.frag.essl"]);
	var blobs12 = [];
	var data12 = Reflect.field(kha_Shaders,"Material_mesh_fragData" + 0);
	var bytes12 = haxe_Unserializer.run(data12);
	blobs12.push(kha_internal_BytesBlob.fromBytes(bytes12));
	kha_Shaders.Material_mesh_frag = new kha_graphics4_FragmentShader(blobs12,["Material_mesh-webgl2.frag.essl"]);
	var blobs13 = [];
	var data13 = Reflect.field(kha_Shaders,"Projectile_mesh_fragData" + 0);
	var bytes13 = haxe_Unserializer.run(data13);
	blobs13.push(kha_internal_BytesBlob.fromBytes(bytes13));
	kha_Shaders.Projectile_mesh_frag = new kha_graphics4_FragmentShader(blobs13,["Projectile_mesh-webgl2.frag.essl"]);
	var blobs14 = [];
	var data14 = Reflect.field(kha_Shaders,"Red_mesh_fragData" + 0);
	var bytes14 = haxe_Unserializer.run(data14);
	blobs14.push(kha_internal_BytesBlob.fromBytes(bytes14));
	kha_Shaders.Red_mesh_frag = new kha_graphics4_FragmentShader(blobs14,["Red_mesh-webgl2.frag.essl"]);
	var blobs15 = [];
	var data15 = Reflect.field(kha_Shaders,"Wall_mesh_fragData" + 0);
	var bytes15 = haxe_Unserializer.run(data15);
	blobs15.push(kha_internal_BytesBlob.fromBytes(bytes15));
	kha_Shaders.Wall_mesh_frag = new kha_graphics4_FragmentShader(blobs15,["Wall_mesh-webgl2.frag.essl"]);
	var blobs16 = [];
	var data16 = Reflect.field(kha_Shaders,"armdefault_mesh_fragData" + 0);
	var bytes16 = haxe_Unserializer.run(data16);
	blobs16.push(kha_internal_BytesBlob.fromBytes(bytes16));
	kha_Shaders.armdefault_mesh_frag = new kha_graphics4_FragmentShader(blobs16,["armdefault_mesh-webgl2.frag.essl"]);
	var blobs17 = [];
	var data17 = Reflect.field(kha_Shaders,"armdefault_mesh_vertData" + 0);
	var bytes17 = haxe_Unserializer.run(data17);
	blobs17.push(kha_internal_BytesBlob.fromBytes(bytes17));
	kha_Shaders.armdefault_mesh_vert = new kha_graphics4_VertexShader(blobs17,["armdefault_mesh-webgl2.vert.essl"]);
	var blobs18 = [];
	var data18 = Reflect.field(kha_Shaders,"armdefault_shadowmap_fragData" + 0);
	var bytes18 = haxe_Unserializer.run(data18);
	blobs18.push(kha_internal_BytesBlob.fromBytes(bytes18));
	kha_Shaders.armdefault_shadowmap_frag = new kha_graphics4_FragmentShader(blobs18,["armdefault_shadowmap-webgl2.frag.essl"]);
	var blobs19 = [];
	var data19 = Reflect.field(kha_Shaders,"armdefault_shadowmap_vertData" + 0);
	var bytes19 = haxe_Unserializer.run(data19);
	blobs19.push(kha_internal_BytesBlob.fromBytes(bytes19));
	kha_Shaders.armdefault_shadowmap_vert = new kha_graphics4_VertexShader(blobs19,["armdefault_shadowmap-webgl2.vert.essl"]);
	var blobs20 = [];
	var data20 = Reflect.field(kha_Shaders,"bloom_pass_fragData" + 0);
	var bytes20 = haxe_Unserializer.run(data20);
	blobs20.push(kha_internal_BytesBlob.fromBytes(bytes20));
	kha_Shaders.bloom_pass_frag = new kha_graphics4_FragmentShader(blobs20,["bloom_pass-webgl2.frag.essl"]);
	var blobs21 = [];
	var data21 = Reflect.field(kha_Shaders,"blur_adaptive_pass_fragData" + 0);
	var bytes21 = haxe_Unserializer.run(data21);
	blobs21.push(kha_internal_BytesBlob.fromBytes(bytes21));
	kha_Shaders.blur_adaptive_pass_frag = new kha_graphics4_FragmentShader(blobs21,["blur_adaptive_pass-webgl2.frag.essl"]);
	var blobs22 = [];
	var data22 = Reflect.field(kha_Shaders,"blur_edge_pass_fragData" + 0);
	var bytes22 = haxe_Unserializer.run(data22);
	blobs22.push(kha_internal_BytesBlob.fromBytes(bytes22));
	kha_Shaders.blur_edge_pass_frag = new kha_graphics4_FragmentShader(blobs22,["blur_edge_pass-webgl2.frag.essl"]);
	var blobs23 = [];
	var data23 = Reflect.field(kha_Shaders,"blur_gaus_pass_fragData" + 0);
	var bytes23 = haxe_Unserializer.run(data23);
	blobs23.push(kha_internal_BytesBlob.fromBytes(bytes23));
	kha_Shaders.blur_gaus_pass_frag = new kha_graphics4_FragmentShader(blobs23,["blur_gaus_pass-webgl2.frag.essl"]);
	var blobs24 = [];
	var data24 = Reflect.field(kha_Shaders,"compositor_pass_fragData" + 0);
	var bytes24 = haxe_Unserializer.run(data24);
	blobs24.push(kha_internal_BytesBlob.fromBytes(bytes24));
	kha_Shaders.compositor_pass_frag = new kha_graphics4_FragmentShader(blobs24,["compositor_pass-webgl2.frag.essl"]);
	var blobs25 = [];
	var data25 = Reflect.field(kha_Shaders,"compositor_pass_vertData" + 0);
	var bytes25 = haxe_Unserializer.run(data25);
	blobs25.push(kha_internal_BytesBlob.fromBytes(bytes25));
	kha_Shaders.compositor_pass_vert = new kha_graphics4_VertexShader(blobs25,["compositor_pass-webgl2.vert.essl"]);
	var blobs26 = [];
	var data26 = Reflect.field(kha_Shaders,"deferred_light_fragData" + 0);
	var bytes26 = haxe_Unserializer.run(data26);
	blobs26.push(kha_internal_BytesBlob.fromBytes(bytes26));
	kha_Shaders.deferred_light_frag = new kha_graphics4_FragmentShader(blobs26,["deferred_light-webgl2.frag.essl"]);
	var blobs27 = [];
	var data27 = Reflect.field(kha_Shaders,"downsample_depth_fragData" + 0);
	var bytes27 = haxe_Unserializer.run(data27);
	blobs27.push(kha_internal_BytesBlob.fromBytes(bytes27));
	kha_Shaders.downsample_depth_frag = new kha_graphics4_FragmentShader(blobs27,["downsample_depth-webgl2.frag.essl"]);
	var blobs28 = [];
	var data28 = Reflect.field(kha_Shaders,"painter_colored_fragData" + 0);
	var bytes28 = haxe_Unserializer.run(data28);
	blobs28.push(kha_internal_BytesBlob.fromBytes(bytes28));
	kha_Shaders.painter_colored_frag = new kha_graphics4_FragmentShader(blobs28,["painter-colored-webgl2.frag.essl"]);
	var blobs29 = [];
	var data29 = Reflect.field(kha_Shaders,"painter_colored_vertData" + 0);
	var bytes29 = haxe_Unserializer.run(data29);
	blobs29.push(kha_internal_BytesBlob.fromBytes(bytes29));
	kha_Shaders.painter_colored_vert = new kha_graphics4_VertexShader(blobs29,["painter-colored-webgl2.vert.essl"]);
	var blobs30 = [];
	var data30 = Reflect.field(kha_Shaders,"painter_image_fragData" + 0);
	var bytes30 = haxe_Unserializer.run(data30);
	blobs30.push(kha_internal_BytesBlob.fromBytes(bytes30));
	kha_Shaders.painter_image_frag = new kha_graphics4_FragmentShader(blobs30,["painter-image-webgl2.frag.essl"]);
	var blobs31 = [];
	var data31 = Reflect.field(kha_Shaders,"painter_image_vertData" + 0);
	var bytes31 = haxe_Unserializer.run(data31);
	blobs31.push(kha_internal_BytesBlob.fromBytes(bytes31));
	kha_Shaders.painter_image_vert = new kha_graphics4_VertexShader(blobs31,["painter-image-webgl2.vert.essl"]);
	var blobs32 = [];
	var data32 = Reflect.field(kha_Shaders,"painter_text_fragData" + 0);
	var bytes32 = haxe_Unserializer.run(data32);
	blobs32.push(kha_internal_BytesBlob.fromBytes(bytes32));
	kha_Shaders.painter_text_frag = new kha_graphics4_FragmentShader(blobs32,["painter-text-webgl2.frag.essl"]);
	var blobs33 = [];
	var data33 = Reflect.field(kha_Shaders,"painter_text_vertData" + 0);
	var bytes33 = haxe_Unserializer.run(data33);
	blobs33.push(kha_internal_BytesBlob.fromBytes(bytes33));
	kha_Shaders.painter_text_vert = new kha_graphics4_VertexShader(blobs33,["painter-text-webgl2.vert.essl"]);
	var blobs34 = [];
	var data34 = Reflect.field(kha_Shaders,"painter_video_fragData" + 0);
	var bytes34 = haxe_Unserializer.run(data34);
	blobs34.push(kha_internal_BytesBlob.fromBytes(bytes34));
	kha_Shaders.painter_video_frag = new kha_graphics4_FragmentShader(blobs34,["painter-video-webgl2.frag.essl"]);
	var blobs35 = [];
	var data35 = Reflect.field(kha_Shaders,"painter_video_vertData" + 0);
	var bytes35 = haxe_Unserializer.run(data35);
	blobs35.push(kha_internal_BytesBlob.fromBytes(bytes35));
	kha_Shaders.painter_video_vert = new kha_graphics4_VertexShader(blobs35,["painter-video-webgl2.vert.essl"]);
	var blobs36 = [];
	var data36 = Reflect.field(kha_Shaders,"pass_vertData" + 0);
	var bytes36 = haxe_Unserializer.run(data36);
	blobs36.push(kha_internal_BytesBlob.fromBytes(bytes36));
	kha_Shaders.pass_vert = new kha_graphics4_VertexShader(blobs36,["pass-webgl2.vert.essl"]);
	var blobs37 = [];
	var data37 = Reflect.field(kha_Shaders,"pass_viewray2_vertData" + 0);
	var bytes37 = haxe_Unserializer.run(data37);
	blobs37.push(kha_internal_BytesBlob.fromBytes(bytes37));
	kha_Shaders.pass_viewray2_vert = new kha_graphics4_VertexShader(blobs37,["pass_viewray2-webgl2.vert.essl"]);
	var blobs38 = [];
	var data38 = Reflect.field(kha_Shaders,"pass_viewray_vertData" + 0);
	var bytes38 = haxe_Unserializer.run(data38);
	blobs38.push(kha_internal_BytesBlob.fromBytes(bytes38));
	kha_Shaders.pass_viewray_vert = new kha_graphics4_VertexShader(blobs38,["pass_viewray-webgl2.vert.essl"]);
	var blobs39 = [];
	var data39 = Reflect.field(kha_Shaders,"smaa_blend_weight_fragData" + 0);
	var bytes39 = haxe_Unserializer.run(data39);
	blobs39.push(kha_internal_BytesBlob.fromBytes(bytes39));
	kha_Shaders.smaa_blend_weight_frag = new kha_graphics4_FragmentShader(blobs39,["smaa_blend_weight-webgl2.frag.essl"]);
	var blobs40 = [];
	var data40 = Reflect.field(kha_Shaders,"smaa_blend_weight_vertData" + 0);
	var bytes40 = haxe_Unserializer.run(data40);
	blobs40.push(kha_internal_BytesBlob.fromBytes(bytes40));
	kha_Shaders.smaa_blend_weight_vert = new kha_graphics4_VertexShader(blobs40,["smaa_blend_weight-webgl2.vert.essl"]);
	var blobs41 = [];
	var data41 = Reflect.field(kha_Shaders,"smaa_edge_detect_fragData" + 0);
	var bytes41 = haxe_Unserializer.run(data41);
	blobs41.push(kha_internal_BytesBlob.fromBytes(bytes41));
	kha_Shaders.smaa_edge_detect_frag = new kha_graphics4_FragmentShader(blobs41,["smaa_edge_detect-webgl2.frag.essl"]);
	var blobs42 = [];
	var data42 = Reflect.field(kha_Shaders,"smaa_edge_detect_vertData" + 0);
	var bytes42 = haxe_Unserializer.run(data42);
	blobs42.push(kha_internal_BytesBlob.fromBytes(bytes42));
	kha_Shaders.smaa_edge_detect_vert = new kha_graphics4_VertexShader(blobs42,["smaa_edge_detect-webgl2.vert.essl"]);
	var blobs43 = [];
	var data43 = Reflect.field(kha_Shaders,"smaa_neighborhood_blend_fragData" + 0);
	var bytes43 = haxe_Unserializer.run(data43);
	blobs43.push(kha_internal_BytesBlob.fromBytes(bytes43));
	kha_Shaders.smaa_neighborhood_blend_frag = new kha_graphics4_FragmentShader(blobs43,["smaa_neighborhood_blend-webgl2.frag.essl"]);
	var blobs44 = [];
	var data44 = Reflect.field(kha_Shaders,"smaa_neighborhood_blend_vertData" + 0);
	var bytes44 = haxe_Unserializer.run(data44);
	blobs44.push(kha_internal_BytesBlob.fromBytes(bytes44));
	kha_Shaders.smaa_neighborhood_blend_vert = new kha_graphics4_VertexShader(blobs44,["smaa_neighborhood_blend-webgl2.vert.essl"]);
	var blobs45 = [];
	var data45 = Reflect.field(kha_Shaders,"ssao_pass_fragData" + 0);
	var bytes45 = haxe_Unserializer.run(data45);
	blobs45.push(kha_internal_BytesBlob.fromBytes(bytes45));
	kha_Shaders.ssao_pass_frag = new kha_graphics4_FragmentShader(blobs45,["ssao_pass-webgl2.frag.essl"]);
	var blobs46 = [];
	var data46 = Reflect.field(kha_Shaders,"ssr_pass_fragData" + 0);
	var bytes46 = haxe_Unserializer.run(data46);
	blobs46.push(kha_internal_BytesBlob.fromBytes(bytes46));
	kha_Shaders.ssr_pass_frag = new kha_graphics4_FragmentShader(blobs46,["ssr_pass-webgl2.frag.essl"]);
	var blobs47 = [];
	var data47 = Reflect.field(kha_Shaders,"world_pass_fragData" + 0);
	var bytes47 = haxe_Unserializer.run(data47);
	blobs47.push(kha_internal_BytesBlob.fromBytes(bytes47));
	kha_Shaders.world_pass_frag = new kha_graphics4_FragmentShader(blobs47,["world_pass-webgl2.frag.essl"]);
	var blobs48 = [];
	var data48 = Reflect.field(kha_Shaders,"world_pass_vertData" + 0);
	var bytes48 = haxe_Unserializer.run(data48);
	blobs48.push(kha_internal_BytesBlob.fromBytes(bytes48));
	kha_Shaders.world_pass_vert = new kha_graphics4_VertexShader(blobs48,["world_pass-webgl2.vert.essl"]);
};
var kha_Sound = function() {
	this.sampleRate = 0;
	this.channels = 0;
	this.length = 0;
};
$hxClasses["kha.Sound"] = kha_Sound;
kha_Sound.__name__ = "kha.Sound";
kha_Sound.__interfaces__ = [kha_Resource];
kha_Sound.prototype = {
	compressedData: null
	,uncompressedData: null
	,length: null
	,channels: null
	,sampleRate: null
	,uncompress: function(done) {
		if(this.uncompressedData != null) {
			done();
			return;
		}
		var output = new haxe_io_BytesOutput();
		var header = kha_audio2_ogg_vorbis_Reader.readAll(this.compressedData,output,true);
		var soundBytes = output.getBytes();
		var count = Std.int(soundBytes.length / 4);
		if(header.channel == 1) {
			this.length = count / kha_audio2_Audio.samplesPerSecond;
			var this1 = new Float32Array(count * 2);
			this.uncompressedData = this1;
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				this.uncompressedData[i * 2] = soundBytes.getFloat(i * 4);
				this.uncompressedData[i * 2 + 1] = soundBytes.getFloat(i * 4);
			}
		} else {
			this.length = count / 2 / kha_audio2_Audio.samplesPerSecond;
			var this2 = new Float32Array(count);
			this.uncompressedData = this2;
			var _g2 = 0;
			var _g11 = count;
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.uncompressedData[i1] = soundBytes.getFloat(i1 * 4);
			}
		}
		this.channels = header.channel;
		this.sampleRate = header.sampleRate;
		this.compressedData = null;
		done();
	}
	,unload: function() {
		this.compressedData = null;
		this.uncompressedData = null;
	}
	,__class__: kha_Sound
};
var kha_SystemOptions = function(title,width,height,$window,framebuffer) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(title == null) {
		title = "Kha";
	}
	this.framebuffer = null;
	this.window = null;
	this.height = -1;
	this.width = -1;
	this.title = "Kha";
	this.title = title;
	this.window = $window == null ? new kha_WindowOptions(null,null,null,null,null,null,null,null,null) : $window;
	if(width > 0) {
		this.window.width = width;
		this.width = width;
	} else {
		this.width = this.window.width;
	}
	if(height > 0) {
		this.window.height = height;
		this.height = height;
	} else {
		this.height = this.window.height;
	}
	if(this.window.title == null) {
		this.window.title = title;
	}
	this.framebuffer = framebuffer == null ? new kha_FramebufferOptions(null,null,null,null,null,null) : framebuffer;
};
$hxClasses["kha.SystemOptions"] = kha_SystemOptions;
kha_SystemOptions.__name__ = "kha.SystemOptions";
kha_SystemOptions.prototype = {
	title: null
	,width: null
	,height: null
	,window: null
	,framebuffer: null
	,__class__: kha_SystemOptions
};
var kha_System = function() { };
$hxClasses["kha.System"] = kha_System;
kha_System.__name__ = "kha.System";
kha_System.__properties__ = {get_refreshRate:"get_refreshRate",get_vsync:"get_vsync",get_language:"get_language",get_systemId:"get_systemId",get_screenRotation:"get_screenRotation",get_time:"get_time",get_title:"get_title"};
kha_System.init = function(options,callback) {
	var features = 0;
	if(options.resizable) {
		features = features | 1;
	}
	if(options.maximizable) {
		features = features | 4;
	}
	if(options.minimizable) {
		features = features | 2;
	}
	var newOptions = new kha_SystemOptions(options.title,options.width,options.height,new kha_WindowOptions(null,null,null,null,null,null,null,features,options.windowMode),new kha_FramebufferOptions(null,options.vSync,null,null,null,options.samplesPerPixel));
	kha_System.start(newOptions,function(_) {
		callback();
	});
};
kha_System.start = function(options,callback) {
	kha_System.theTitle = options.title;
	kha_SystemImpl.init(options,callback);
};
kha_System.get_title = function() {
	return kha_System.theTitle;
};
kha_System.notifyOnRender = function(listener,id) {
	if(id == null) {
		id = 0;
	}
	kha_System.renderListeners.push(function(framebuffers) {
		if(id < framebuffers.length) {
			listener(framebuffers[id]);
		}
	});
};
kha_System.notifyOnFrames = function(listener) {
	kha_System.renderListeners.push(listener);
};
kha_System.removeFramesListener = function(listener) {
	HxOverrides.remove(kha_System.renderListeners,listener);
};
kha_System.notifyOnApplicationState = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		kha_System.foregroundListeners.push(foregroundListener);
	}
	if(resumeListener != null) {
		kha_System.resumeListeners.push(resumeListener);
	}
	if(pauseListener != null) {
		kha_System.pauseListeners.push(pauseListener);
	}
	if(backgroundListener != null) {
		kha_System.backgroundListeners.push(backgroundListener);
	}
	if(shutdownListener != null) {
		kha_System.shutdownListeners.push(shutdownListener);
	}
};
kha_System.notifyOnDropFiles = function(dropFilesListener) {
	kha_System.dropFilesListeners.push(dropFilesListener);
};
kha_System.removeDropListerer = function(listener) {
	HxOverrides.remove(kha_System.dropFilesListeners,listener);
};
kha_System.notifyOnCutCopyPaste = function(cutListener,copyListener,pasteListener) {
	kha_System.cutListener = cutListener;
	kha_System.copyListener = copyListener;
	kha_System.pasteListener = pasteListener;
};
kha_System.notifyOnLoginLogout = function(loginListener,logoutListener) {
	kha_System.loginListener = loginListener;
	kha_System.logoutListener = logoutListener;
};
kha_System.login = function() {
	kha_SystemImpl.login();
};
kha_System.render = function(framebuffers) {
	var _g = 0;
	var _g1 = kha_System.renderListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(framebuffers);
	}
};
kha_System.foreground = function() {
	var _g = 0;
	var _g1 = kha_System.foregroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.resume = function() {
	var _g = 0;
	var _g1 = kha_System.resumeListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.pause = function() {
	var _g = 0;
	var _g1 = kha_System.pauseListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.background = function() {
	var _g = 0;
	var _g1 = kha_System.backgroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.shutdown = function() {
	var _g = 0;
	var _g1 = kha_System.shutdownListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.dropFiles = function(filePath) {
	var _g = 0;
	var _g1 = kha_System.dropFilesListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(filePath);
	}
};
kha_System.get_time = function() {
	return kha_SystemImpl.getTime();
};
kha_System.windowWidth = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get($window).get_width();
};
kha_System.windowHeight = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get_all()[$window].get_height();
};
kha_System.get_screenRotation = function() {
	return 0;
};
kha_System.get_systemId = function() {
	return kha_SystemImpl.getSystemId();
};
kha_System.vibrate = function(ms) {
	kha_SystemImpl.vibrate(ms);
	return;
};
kha_System.get_language = function() {
	return kha_SystemImpl.getLanguage();
};
kha_System.stop = function() {
	return kha_SystemImpl.requestShutdown();
};
kha_System.loadUrl = function(url) {
	kha_SystemImpl.loadUrl(url);
};
kha_System.canSwitchFullscreen = function() {
	return true;
};
kha_System.isFullscreen = function() {
	if(kha_Window.get(0).get_mode() != 1) {
		return kha_Window.get(0).get_mode() == 2;
	} else {
		return true;
	}
};
kha_System.requestFullscreen = function() {
	kha_Window.get(0).set_mode(1);
};
kha_System.exitFullscreen = function() {
	kha_Window.get(0).set_mode(0);
};
kha_System.notifyOnFullscreenChange = function(func,error) {
};
kha_System.removeFullscreenListener = function(func,error) {
};
kha_System.changeResolution = function(width,height) {
};
kha_System.requestShutdown = function() {
	kha_System.stop();
};
kha_System.get_vsync = function() {
	return kha_Window.get(0).get_vSynced();
};
kha_System.get_refreshRate = function() {
	return kha_Display.get_primary().get_frequency();
};
kha_System.screenDpi = function() {
	return kha_Display.get_primary().get_pixelsPerInch();
};
kha_System.safeZone = function() {
	return kha_SystemImpl.safeZone();
};
kha_System.automaticSafeZone = function() {
	return kha_SystemImpl.automaticSafeZone();
};
kha_System.setSafeZone = function(value) {
	kha_SystemImpl.setSafeZone(value);
};
kha_System.unlockAchievement = function(id) {
	kha_SystemImpl.unlockAchievement(id);
};
var kha_GamepadStates = function() {
	this.axes = [];
	this.buttons = [];
};
$hxClasses["kha.GamepadStates"] = kha_GamepadStates;
kha_GamepadStates.__name__ = "kha.GamepadStates";
kha_GamepadStates.prototype = {
	axes: null
	,buttons: null
	,__class__: kha_GamepadStates
};
var kha_SystemImpl = function() { };
$hxClasses["kha.SystemImpl"] = kha_SystemImpl;
kha_SystemImpl.__name__ = "kha.SystemImpl";
kha_SystemImpl.errorHandler = function(message,source,lineno,colno,error) {
	window.console.error(error.stack);
	return true;
};
kha_SystemImpl.init = function(options,callback) {
	kha_SystemImpl.options = options;
	kha_SystemImpl.mobile = kha_SystemImpl.isMobile();
	kha_SystemImpl.ios = kha_SystemImpl.isIOS();
	kha_SystemImpl.chrome = kha_SystemImpl.isChrome();
	kha_SystemImpl.firefox = kha_SystemImpl.isFirefox();
	kha_SystemImpl.ie = kha_SystemImpl.isIE();
	if(kha_SystemImpl.mobile || kha_SystemImpl.chrome) {
		kha_SystemImpl.mobileAudioPlaying = false;
	} else {
		kha_SystemImpl.mobileAudioPlaying = true;
	}
	kha_SystemImpl.initSecondStep(callback);
};
kha_SystemImpl.initSecondStep = function(callback) {
	kha_SystemImpl.init2(kha_SystemImpl.options.window.width,kha_SystemImpl.options.window.height);
	callback(kha_SystemImpl.window);
};
kha_SystemImpl.initSensor = function() {
	if(kha_SystemImpl.ios) {
		window.ondevicemotion = function(event) {
			kha_input_Sensor._changed(0,-event.accelerationIncludingGravity.x,-event.accelerationIncludingGravity.y,-event.accelerationIncludingGravity.z);
		};
	} else {
		window.ondevicemotion = function(event1) {
			kha_input_Sensor._changed(0,event1.accelerationIncludingGravity.x,event1.accelerationIncludingGravity.y,event1.accelerationIncludingGravity.z);
		};
	}
	window.ondeviceorientation = function(event2) {
		kha_input_Sensor._changed(1,event2.beta,event2.gamma,event2.alpha);
	};
};
kha_SystemImpl.isMobile = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("Android") >= 0 || agent.indexOf("webOS") >= 0 || agent.indexOf("BlackBerry") >= 0 || agent.indexOf("Windows Phone") >= 0) {
		return true;
	}
	if(kha_SystemImpl.isIOS()) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIOS = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("iPhone") >= 0 || agent.indexOf("iPad") >= 0 || agent.indexOf("iPod") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isChrome = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("Chrome") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isFirefox = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("Firefox") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIE = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("MSIE ") >= 0 || agent.indexOf("Trident/") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.setCanvas = function(canvas) {
	kha_SystemImpl.khanvas = canvas;
};
kha_SystemImpl.getScreenRotation = function() {
	return 0;
};
kha_SystemImpl.getTime = function() {
	var performance = window.performance ? window.performance : window.Date;
	return performance.now() / 1000;
};
kha_SystemImpl.getSystemId = function() {
	return "HTML5";
};
kha_SystemImpl.vibrate = function(ms) {
	window.navigator.vibrate(ms);
};
kha_SystemImpl.getLanguage = function() {
	var lang = window.navigator.language;
	return HxOverrides.substr(lang,0,2).toLowerCase();
};
kha_SystemImpl.requestShutdown = function() {
	window.close();
	return true;
};
kha_SystemImpl.init2 = function(defaultWidth,defaultHeight,backbufferFormat) {
	kha_SystemImpl.keyboard = new kha_input_Keyboard();
	kha_SystemImpl.mouse = new kha_input_MouseImpl();
	kha_SystemImpl.surface = new kha_input_Surface();
	kha_SystemImpl.gamepads = [];
	kha_SystemImpl.gamepadStates = [];
	kha_SystemImpl.gamepads[0] = new kha_input_Gamepad(0);
	kha_SystemImpl.gamepadStates[0] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[1] = new kha_input_Gamepad(1);
	kha_SystemImpl.gamepadStates[1] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[2] = new kha_input_Gamepad(2);
	kha_SystemImpl.gamepadStates[2] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[3] = new kha_input_Gamepad(3);
	kha_SystemImpl.gamepadStates[3] = new kha_GamepadStates();
	window.addEventListener("gamepadconnected",function(e) {
		kha_input_Gamepad.sendConnectEvent(e.gamepad.index);
	});
	window.addEventListener("gamepaddisconnected",function(e1) {
		kha_input_Gamepad.sendDisconnectEvent(e1.gamepad.index);
	});
	if(kha_SystemImpl.ie) {
		kha_SystemImpl.pressedKeys = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			kha_SystemImpl.pressedKeys.push(false);
		}
		var _g1 = 0;
		while(_g1 < 256) {
			var i1 = _g1++;
			kha_SystemImpl.pressedKeys.push(null);
		}
	}
	var onCopy = function(e2) {
		if(kha_System.copyListener != null) {
			var data = kha_System.copyListener();
			if(data != null) {
				e2.clipboardData.setData("text/plain",data);
			}
			e2.preventDefault();
		}
	};
	var onCut = function(e3) {
		if(kha_System.cutListener != null) {
			var data1 = kha_System.cutListener();
			if(data1 != null) {
				e3.clipboardData.setData("text/plain",data1);
			}
			e3.preventDefault();
		}
	};
	var onPaste = function(e4) {
		if(kha_System.pasteListener != null) {
			var onPaste1 = e4.clipboardData.getData("text/plain");
			kha_System.pasteListener(onPaste1);
			e4.preventDefault();
		}
	};
	var document = window.document;
	document.addEventListener("copy",onCopy);
	document.addEventListener("cut",onCut);
	document.addEventListener("paste",onPaste);
	kha_CanvasImage.init();
	kha_Scheduler.init();
	kha_SystemImpl.loadFinished(defaultWidth,defaultHeight);
};
kha_SystemImpl.getMouse = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.mouse;
};
kha_SystemImpl.getKeyboard = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.keyboard;
};
kha_SystemImpl.checkGamepad = function(pad) {
	var _g = 0;
	var _g1 = pad.axes.length;
	while(_g < _g1) {
		var i = _g++;
		if(pad.axes[i] != null) {
			var axis = pad.axes[i];
			if(kha_SystemImpl.gamepadStates[pad.index].axes[i] != axis) {
				kha_SystemImpl.gamepadStates[pad.index].axes[i] = axis;
				kha_SystemImpl.gamepads[pad.index].sendAxisEvent(i,axis);
			}
		}
	}
	var _g2 = 0;
	var _g3 = pad.buttons.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		if(pad.buttons[i1] != null) {
			if(kha_SystemImpl.gamepadStates[pad.index].buttons[i1] != pad.buttons[i1].value) {
				kha_SystemImpl.gamepadStates[pad.index].buttons[i1] = pad.buttons[i1].value;
				kha_SystemImpl.gamepads[pad.index].sendButtonEvent(i1,pad.buttons[i1].value);
			}
		}
	}
	if(pad.axes.length <= 4 && pad.buttons.length > 7) {
		kha_SystemImpl.gamepadStates[pad.index].axes[4] = pad.buttons[6].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(4,pad.buttons[6].value);
		kha_SystemImpl.gamepadStates[pad.index].axes[5] = pad.buttons[7].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(5,pad.buttons[7].value);
	}
};
kha_SystemImpl.getCanvasElement = function() {
	if(kha_SystemImpl.khanvas != null) {
		return kha_SystemImpl.khanvas;
	}
	return window.document.getElementById("khanvas");
};
kha_SystemImpl.loadFinished = function(defaultWidth,defaultHeight) {
	var canvas = kha_SystemImpl.getCanvasElement();
	canvas.style.cursor = "default";
	var gl = false;
	try {
		kha_SystemImpl.gl = canvas.getContext("webgl2",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
		kha_SystemImpl.gl.pixelStorei(37441,1);
		kha_SystemImpl.halfFloat = { HALF_FLOAT_OES : 5131};
		kha_SystemImpl.depthTexture = { UNSIGNED_INT_24_8_WEBGL : 34042};
		kha_SystemImpl.drawBuffers = { COLOR_ATTACHMENT0_WEBGL : 36064};
		kha_SystemImpl.elementIndexUint = true;
		kha_SystemImpl.gl.getExtension("EXT_color_buffer_float");
		kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
		kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
		kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
		if(kha_SystemImpl.anisotropicFilter == null) {
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		gl = true;
		kha_SystemImpl.gl2 = true;
		kha_Shaders.init();
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		haxe_Log.trace("Could not initialize WebGL 2, falling back to WebGL.",{ fileName : "kha/SystemImpl.hx", lineNumber : 345, className : "kha.SystemImpl", methodName : "loadFinished"});
	}
	if(!kha_SystemImpl.gl2) {
		try {
			kha_SystemImpl.gl = canvas.getContext("experimental-webgl",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
			kha_SystemImpl.gl.pixelStorei(37441,1);
			kha_SystemImpl.gl.getExtension("OES_texture_float");
			kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
			kha_SystemImpl.halfFloat = kha_SystemImpl.gl.getExtension("OES_texture_half_float");
			kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
			kha_SystemImpl.depthTexture = kha_SystemImpl.gl.getExtension("WEBGL_depth_texture");
			kha_SystemImpl.gl.getExtension("EXT_shader_texture_lod");
			kha_SystemImpl.gl.getExtension("OES_standard_derivatives");
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
			if(kha_SystemImpl.anisotropicFilter == null) {
				kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			}
			kha_SystemImpl.drawBuffers = kha_SystemImpl.gl.getExtension("WEBGL_draw_buffers");
			kha_SystemImpl.elementIndexUint = kha_SystemImpl.gl.getExtension("OES_element_index_uint");
			gl = true;
			kha_Shaders.init();
		} catch( e2 ) {
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			haxe_Log.trace("Could not initialize WebGL, falling back to <canvas>.",{ fileName : "kha/SystemImpl.hx", lineNumber : 367, className : "kha.SystemImpl", methodName : "loadFinished"});
		}
	}
	kha_SystemImpl.setCanvas(canvas);
	kha_SystemImpl.window = new kha_Window(defaultWidth,defaultHeight,canvas);
	if(gl) {
		var g4 = new kha_js_graphics4_Graphics();
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,null,g4);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),new kha_js_graphics4_Graphics2(kha_SystemImpl.frame),g4);
	} else {
		kha_js_Font.Kravur = kha_Kravur; kha_Kravur = kha_js_Font;
		var g2 = new kha_js_CanvasGraphics(canvas.getContext("2d"));
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,g2,null);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),g2,null);
	}
	if(!kha_SystemImpl.mobile && kha_audio2_Audio._init()) {
		kha_SystemImpl._hasWebAudio = true;
		kha_audio2_Audio1._init();
	} else if(kha_SystemImpl.mobile) {
		kha_SystemImpl._hasWebAudio = false;
		kha_js_MobileWebAudio._init();
		kha_audio2_Audio1 = kha_js_MobileWebAudio;
	} else {
		kha_SystemImpl._hasWebAudio = false;
		kha_audio2_Audio1 = kha_js_AudioElementAudio;
	}
	kha_vr_VrInterface.instance = new kha_js_vr_VrInterface();
	kha_Scheduler.start();
	var $window = window;
	var requestAnimationFrame = $window.requestAnimationFrame;
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.mozRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.webkitRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.msRequestAnimationFrame;
	}
	var animate = null;
	animate = function(timestamp) {
		var window1 = window;
		if(requestAnimationFrame == null) {
			window1.setTimeout(animate,16.666666666666668);
		} else {
			requestAnimationFrame(animate);
		}
		var sysGamepads = kha_SystemImpl.getGamepads();
		if(sysGamepads != null) {
			var _g = 0;
			var _g1 = sysGamepads.length;
			while(_g < _g1) {
				var i = _g++;
				var pad = sysGamepads[i];
				if(pad != null) {
					kha_SystemImpl.checkGamepad(pad);
				}
			}
		}
		kha_Scheduler.executeFrame();
		if(canvas.getContext != null) {
			var displayWidth = canvas.clientWidth;
			var displayHeight = canvas.clientHeight;
			if(canvas.width != displayWidth || canvas.height != displayHeight) {
				canvas.width = displayWidth;
				canvas.height = displayHeight;
			}
			kha_System.render([kha_SystemImpl.frame]);
			if(kha_SystemImpl.gl != null) {
				kha_SystemImpl.gl.clearColor(1,1,1,1);
				kha_SystemImpl.gl.colorMask(false,false,false,true);
				kha_SystemImpl.gl.clear(16384);
				kha_SystemImpl.gl.colorMask(true,true,true,true);
			}
		}
	};
	if(requestAnimationFrame == null) {
		$window.setTimeout(animate,16.666666666666668);
	} else {
		requestAnimationFrame(animate);
	}
	canvas.focus();
	canvas.onmousedown = kha_SystemImpl.mouseDown;
	canvas.onmousemove = kha_SystemImpl.mouseMove;
	if(kha_SystemImpl.keyboard != null) {
		canvas.onkeydown = kha_SystemImpl.keyDown;
		canvas.onkeyup = kha_SystemImpl.keyUp;
		canvas.onkeypress = kha_SystemImpl.keyPress;
	}
	canvas.onblur = kha_SystemImpl.onBlur;
	canvas.onfocus = kha_SystemImpl.onFocus;
	canvas.onmousewheel = canvas.onwheel = kha_SystemImpl.mouseWheel;
	canvas.onmouseleave = kha_SystemImpl.mouseLeave;
	canvas.addEventListener("wheel mousewheel",kha_SystemImpl.mouseWheel,false);
	canvas.addEventListener("touchstart",kha_SystemImpl.touchDown,false);
	canvas.addEventListener("touchend",kha_SystemImpl.touchUp,false);
	canvas.addEventListener("touchmove",kha_SystemImpl.touchMove,false);
	canvas.addEventListener("touchcancel",kha_SystemImpl.touchCancel,false);
	window.addEventListener("unload",function() {
		kha_System.shutdown();
	});
};
kha_SystemImpl.lockMouse = function() {
	if(($_=kha_SystemImpl.khanvas,$bind($_,$_.requestPointerLock))) {
		kha_SystemImpl.khanvas.requestPointerLock();
	} else if(kha_SystemImpl.khanvas.mozRequestPointerLock) {
		kha_SystemImpl.khanvas.mozRequestPointerLock();
	} else if(kha_SystemImpl.khanvas.webkitRequestPointerLock) {
		kha_SystemImpl.khanvas.webkitRequestPointerLock();
	}
};
kha_SystemImpl.unlockMouse = function() {
	if(document.exitPointerLock) {
		document.exitPointerLock();
	} else if(document.mozExitPointerLock) {
		document.mozExitPointerLock();
	} else if(document.webkitExitPointerLock) {
		document.webkitExitPointerLock();
	}
};
kha_SystemImpl.canLockMouse = function() {
	return 'pointerLockElement' in document ||
		'mozPointerLockElement' in document ||
		'webkitPointerLockElement' in document;
};
kha_SystemImpl.isMouseLocked = function() {
	return document.pointerLockElement === kha_SystemImpl.khanvas ||
			document.mozPointerLockElement === kha_SystemImpl.khanvas ||
			document.webkitPointerLockElement === kha_SystemImpl.khanvas;
};
kha_SystemImpl.notifyOfMouseLockChange = function(func,error) {
	window.document.addEventListener("pointerlockchange",func,false);
	window.document.addEventListener("mozpointerlockchange",func,false);
	window.document.addEventListener("webkitpointerlockchange",func,false);
	window.document.addEventListener("pointerlockerror",error,false);
	window.document.addEventListener("mozpointerlockerror",error,false);
	window.document.addEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.removeFromMouseLockChange = function(func,error) {
	window.document.removeEventListener("pointerlockchange",func,false);
	window.document.removeEventListener("mozpointerlockchange",func,false);
	window.document.removeEventListener("webkitpointerlockchange",func,false);
	window.document.removeEventListener("pointerlockerror",error,false);
	window.document.removeEventListener("mozpointerlockerror",error,false);
	window.document.removeEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.setMouseXY = function(event) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.mouseX = Std.int((event.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth));
	kha_SystemImpl.mouseY = Std.int((event.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight));
};
kha_SystemImpl.unlockiOSSound = function() {
	if(!kha_SystemImpl.ios || kha_SystemImpl.iosSoundEnabled) {
		return;
	}
	var buffer = kha_js_MobileWebAudio._context.createBuffer(1,1,22050);
	var source = kha_js_MobileWebAudio._context.createBufferSource();
	source.buffer = buffer;
	source.connect(kha_js_MobileWebAudio._context.destination);
	source.start();
	source.stop();
	kha_SystemImpl.iosSoundEnabled = true;
};
kha_SystemImpl.unlockSound = function() {
	if(!kha_SystemImpl.soundEnabled) {
		var context = kha_audio2_Audio._context;
		if(context == null) {
			context = kha_audio2_Audio1._context;
		}
		if(context != null) {
			context.resume().then(function(c) {
				kha_SystemImpl.soundEnabled = true;
			}).catch(function(err) {
				haxe_Log.trace(err,{ fileName : "kha/SystemImpl.hx", lineNumber : 607, className : "kha.SystemImpl", methodName : "unlockSound"});
			});
		}
		kha_audio2_Audio.wakeChannels();
	}
	kha_SystemImpl.unlockiOSSound();
};
kha_SystemImpl.mouseLeave = function() {
	kha_SystemImpl.mouse.sendLeaveEvent(0);
};
kha_SystemImpl.mouseWheel = function(event) {
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.insideInputEvent = true;
	event.preventDefault();
	if(event.deltaMode == 0) {
		if(event.deltaY < 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,-1);
		} else if(event.deltaY > 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,1);
		}
		kha_SystemImpl.insideInputEvent = false;
		return false;
	}
	if(event.deltaMode == 1) {
		kha_SystemImpl.minimumScroll = Std.int(Math.min(kha_SystemImpl.minimumScroll,Math.abs(event.deltaY)));
		kha_SystemImpl.mouse.sendWheelEvent(0,Std.int(event.deltaY / kha_SystemImpl.minimumScroll));
		kha_SystemImpl.insideInputEvent = false;
		return false;
	}
	kha_SystemImpl.insideInputEvent = false;
	return false;
};
kha_SystemImpl.mouseDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.setMouseXY(event);
	if(event.which == 1) {
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		if(kha_SystemImpl.khanvas.setCapture != null) {
			kha_SystemImpl.khanvas.setCapture();
		} else {
			kha_SystemImpl.khanvas.ownerDocument.addEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
		}
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	} else if(event.which == 2) {
		kha_SystemImpl.mouse.sendDownEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	} else if(event.which == 3) {
		kha_SystemImpl.mouse.sendDownEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseLeftUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 1) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	if(kha_SystemImpl.khanvas.releaseCapture != null) {
		kha_SystemImpl.khanvas.ownerDocument.releaseCapture();
	} else {
		kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
	}
	kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseMiddleUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 2) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	kha_SystemImpl.mouse.sendUpEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseRightUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 3) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	kha_SystemImpl.mouse.sendUpEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.documentMouseMove = function(event) {
	event.stopPropagation();
	kha_SystemImpl.mouseMove(event);
};
kha_SystemImpl.mouseMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	var lastMouseX = kha_SystemImpl.mouseX;
	var lastMouseY = kha_SystemImpl.mouseY;
	kha_SystemImpl.setMouseXY(event);
	var movementX = event.movementX;
	var movementY = event.movementY;
	if(event.movementX == null) {
		movementX = event.mozMovementX != null ? event.mozMovementX : event.webkitMovementX != null ? event.webkitMovementX : kha_SystemImpl.mouseX - lastMouseX;
		movementY = event.mozMovementY != null ? event.mozMovementY : event.webkitMovementY != null ? event.webkitMovementY : kha_SystemImpl.mouseY - lastMouseY;
	}
	if(kha_SystemImpl.firefox) {
		movementX = Std.int(movementX * window.devicePixelRatio);
		movementY = Std.int(movementY * window.devicePixelRatio);
	}
	kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY,movementX,movementY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.setTouchXY = function(touch) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.touchX = Std.int((touch.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth));
	kha_SystemImpl.touchY = Std.int((touch.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight));
};
kha_SystemImpl.touchDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.stopPropagation();
	event.preventDefault();
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(-1);
			if(id == -1) {
				id = kha_SystemImpl.iosTouchs.length;
			}
			kha_SystemImpl.iosTouchs[id] = touch.identifier;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchStartEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		if(index == 0) {
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
		}
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
			kha_SystemImpl.iosTouchs[id] = -1;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		kha_SystemImpl.setTouchXY(touch);
		if(index == 0) {
			var movementX = kha_SystemImpl.touchX - kha_SystemImpl.lastFirstTouchX;
			var movementY = kha_SystemImpl.touchY - kha_SystemImpl.lastFirstTouchY;
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
			kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.touchX,kha_SystemImpl.touchY,movementX,movementY);
		}
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.surface.sendMoveEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchCancel = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.iosTouchs = [];
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.onBlur = function() {
	kha_System.background();
};
kha_SystemImpl.onFocus = function() {
	kha_System.foreground();
};
kha_SystemImpl.keycodeToChar = function(key,keycode,shift) {
	if(key != null) {
		if(key.length == 1) {
			return key;
		}
		switch(key) {
		case "Add":
			return "+";
		case "Divide":
			return "/";
		case "Multiply":
			return "*";
		case "Subtract":
			return "-";
		}
	}
	switch(keycode) {
	case 48:
		if(shift) {
			return "=";
		} else {
			return "0";
		}
		break;
	case 49:
		if(shift) {
			return "!";
		} else {
			return "1";
		}
		break;
	case 50:
		if(shift) {
			return "\"";
		} else {
			return "2";
		}
		break;
	case 51:
		if(shift) {
			return "§";
		} else {
			return "3";
		}
		break;
	case 52:
		if(shift) {
			return "$";
		} else {
			return "4";
		}
		break;
	case 53:
		if(shift) {
			return "%";
		} else {
			return "5";
		}
		break;
	case 54:
		if(shift) {
			return "&";
		} else {
			return "6";
		}
		break;
	case 55:
		if(shift) {
			return "/";
		} else {
			return "7";
		}
		break;
	case 56:
		if(shift) {
			return "(";
		} else {
			return "8";
		}
		break;
	case 57:
		if(shift) {
			return ")";
		} else {
			return "9";
		}
		break;
	case 106:
		return "*";
	case 107:
		return "+";
	case 109:
		return "-";
	case 111:
		return "/";
	case 187:
		if(shift) {
			return "*";
		} else {
			return "+";
		}
		break;
	case 188:
		if(shift) {
			return ";";
		} else {
			return ",";
		}
		break;
	case 189:
		if(shift) {
			return "_";
		} else {
			return "-";
		}
		break;
	case 190:
		if(shift) {
			return ":";
		} else {
			return ".";
		}
		break;
	case 191:
		if(shift) {
			return "'";
		} else {
			return "#";
		}
		break;
	case 212:
		if(shift) {
			return "`";
		} else {
			return "´";
		}
		break;
	case 219:
		if(shift) {
			return "?";
		} else {
			return "ß";
		}
		break;
	case 226:
		if(shift) {
			return ">";
		} else {
			return "<";
		}
		break;
	}
	if(keycode >= 96 && keycode <= 105) {
		return String.fromCodePoint(-48 + keycode);
	}
	if(keycode >= 65 && keycode <= 90) {
		if(shift) {
			return String.fromCodePoint(keycode);
		} else {
			return String.fromCodePoint(keycode - 65 + 97);
		}
	}
	return String.fromCodePoint(keycode);
};
kha_SystemImpl.keyDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = kha_input_Keyboard.keyBehavior;
	switch(_g._hx_index) {
	case 0:
		kha_SystemImpl.defaultKeyBlock(event);
		break;
	case 1:
		event.preventDefault();
		break;
	case 2:
		break;
	case 3:
		var func = _g.func;
		if(func(event.keyCode)) {
			event.preventDefault();
		}
		break;
	}
	event.stopPropagation();
	if(kha_SystemImpl.ie) {
		if(kha_SystemImpl.pressedKeys[event.keyCode]) {
			event.preventDefault();
			return;
		}
		kha_SystemImpl.pressedKeys[event.keyCode] = true;
	} else if(event.repeat) {
		event.preventDefault();
		return;
	}
	var keyCode = kha_SystemImpl.fixedKeyCode(event);
	kha_SystemImpl.keyboard.sendDownEvent(keyCode);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.fixedKeyCode = function(event) {
	switch(event.keyCode) {
	case 91:case 93:
		return 224;
	case 186:
		return 59;
	case 187:
		return 61;
	case 189:
		return 173;
	default:
		return event.keyCode;
	}
};
kha_SystemImpl.defaultKeyBlock = function(e) {
	if(e.ctrlKey || e.metaKey) {
		if(e.keyCode == 67 || e.keyCode == 88 || e.keyCode == 86) {
			return;
		}
		e.preventDefault();
		return;
	}
	if(e.keyCode >= 112 && e.keyCode <= 123) {
		return;
	}
	if(e.key == null || e.key.length == 1) {
		return;
	}
	e.preventDefault();
};
kha_SystemImpl.keyUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.preventDefault();
	event.stopPropagation();
	if(kha_SystemImpl.ie) {
		kha_SystemImpl.pressedKeys[event.keyCode] = false;
	}
	var keyCode = kha_SystemImpl.fixedKeyCode(event);
	kha_SystemImpl.keyboard.sendUpEvent(keyCode);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.keyPress = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	if(event.which == 0) {
		return;
	}
	event.preventDefault();
	event.stopPropagation();
	var code = event.which;
	kha_SystemImpl.keyboard.sendPressEvent(String.fromCodePoint(code));
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.canSwitchFullscreen = function() {
	return 'fullscreenElement ' in document ||
		'mozFullScreenElement' in document ||
		'webkitFullscreenElement' in document ||
		'msFullscreenElement' in document
		;
};
kha_SystemImpl.notifyOfFullscreenChange = function(func,error) {
	window.document.addEventListener("fullscreenchange",func,false);
	window.document.addEventListener("mozfullscreenchange",func,false);
	window.document.addEventListener("webkitfullscreenchange",func,false);
	window.document.addEventListener("MSFullscreenChange",func,false);
	window.document.addEventListener("fullscreenerror",error,false);
	window.document.addEventListener("mozfullscreenerror",error,false);
	window.document.addEventListener("webkitfullscreenerror",error,false);
	window.document.addEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.removeFromFullscreenChange = function(func,error) {
	window.document.removeEventListener("fullscreenchange",func,false);
	window.document.removeEventListener("mozfullscreenchange",func,false);
	window.document.removeEventListener("webkitfullscreenchange",func,false);
	window.document.removeEventListener("MSFullscreenChange",func,false);
	window.document.removeEventListener("fullscreenerror",error,false);
	window.document.removeEventListener("mozfullscreenerror",error,false);
	window.document.removeEventListener("webkitfullscreenerror",error,false);
	window.document.removeEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.setKeepScreenOn = function(on) {
};
kha_SystemImpl.loadUrl = function(url) {
	window.open(url,"_blank");
};
kha_SystemImpl.getGamepadId = function(index) {
	var sysGamepads = kha_SystemImpl.getGamepads();
	if(sysGamepads != null && sysGamepads[index]) {
		return sysGamepads[index].id;
	}
	return "unkown";
};
kha_SystemImpl.getGamepads = function() {
	if(kha_SystemImpl.chrome && kha_vr_VrInterface.instance.IsVrEnabled()) {
		return null;
	}
	if(navigator.getGamepads) {
		return window.navigator.getGamepads();
	} else {
		return null;
	}
};
kha_SystemImpl.getPen = function(num) {
	return null;
};
kha_SystemImpl.safeZone = function() {
	return 1.0;
};
kha_SystemImpl.login = function() {
};
kha_SystemImpl.automaticSafeZone = function() {
	return true;
};
kha_SystemImpl.setSafeZone = function(value) {
};
kha_SystemImpl.unlockAchievement = function(id) {
};
var kha_Video = function() {
};
$hxClasses["kha.Video"] = kha_Video;
kha_Video.__name__ = "kha.Video";
kha_Video.__interfaces__ = [kha_Resource];
kha_Video.prototype = {
	width: function() {
		return 100;
	}
	,height: function() {
		return 100;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,getLength: function() {
		return 0;
	}
	,getCurrentPos: function() {
		return 0;
	}
	,get_position: function() {
		return 0;
	}
	,set_position: function(value) {
		return 0;
	}
	,getVolume: function() {
		return 1;
	}
	,setVolume: function(volume) {
	}
	,isFinished: function() {
		return this.getCurrentPos() >= this.getLength();
	}
	,unload: function() {
	}
	,__class__: kha_Video
	,__properties__: {set_position:"set_position",get_position:"get_position"}
};
var kha_WebGLImage = function(width,height,format,renderTarget,depthStencilFormat,samples) {
	this.pixels = null;
	this.MSAAFrameBuffer = null;
	this.depthTexture = null;
	this.texture = null;
	this.renderBuffer = null;
	this.frameBuffer = null;
	this.myWidth = width;
	this.myHeight = height;
	this.format = format;
	this.renderTarget = renderTarget;
	this.samples = samples;
	this.image = null;
	this.video = null;
	this.depthStencilFormat = depthStencilFormat;
	kha_WebGLImage.init();
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.WebGLImage"] = kha_WebGLImage;
kha_WebGLImage.__name__ = "kha.WebGLImage";
kha_WebGLImage.init = function() {
	if(kha_WebGLImage.context == null) {
		kha_WebGLImage.canvas = window.document.createElement("canvas");
		if(kha_WebGLImage.canvas != null) {
			kha_WebGLImage.context = kha_WebGLImage.canvas.getContext("2d");
			kha_WebGLImage.canvas.width = 4096;
			kha_WebGLImage.canvas.height = 4096;
			kha_WebGLImage.context.globalCompositeOperation = "copy";
		}
	}
};
kha_WebGLImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_WebGLImage.formatByteSize = function(format) {
	switch(format) {
	case 0:
		return 4;
	case 1:
		return 1;
	case 2:
		return 16;
	case 3:
		return 2;
	case 4:
		return 8;
	case 5:
		return 4;
	case 6:
		return 2;
	default:
		return 4;
	}
};
kha_WebGLImage.__super__ = kha_Image;
kha_WebGLImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,samples: null
	,frameBuffer: null
	,renderBuffer: null
	,texture: null
	,depthTexture: null
	,MSAAFrameBuffer: null
	,MSAAColorBuffer: null
	,MSAADepthBuffer: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,depthStencilFormat: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.graphics2 == null) {
			this.graphics2 = new kha_js_graphics4_Graphics2(this);
		}
		return this.graphics2;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * Std.int(this.image.width) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		var r = this.data.data[y * this.get_width() * 4 + x * 4];
		var g = this.data.data[y * this.get_width() * 4 + x * 4 + 1];
		var b = this.data.data[y * this.get_width() * 4 + x * 4 + 2];
		var a = this.data.data[y * this.get_width() * 4 + x * 4 + 3];
		return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
	}
	,createImageData: function() {
		if(((this.image) instanceof Uint8Array)) {
			this.data = new ImageData(new Uint8ClampedArray(this.image.buffer),this.get_width(),this.get_height());
		} else {
			if(this.get_width() > kha_WebGLImage.canvas.width || this.get_height() > kha_WebGLImage.canvas.height) {
				var cw = kha_WebGLImage.canvas.width;
				var ch = kha_WebGLImage.canvas.height;
				while(this.get_width() > cw || this.get_height() > ch) {
					cw *= 2;
					ch *= 2;
				}
				kha_WebGLImage.canvas.width = cw;
				kha_WebGLImage.canvas.height = ch;
			}
			kha_WebGLImage.context.strokeStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillRect(0,0,this.image.width,this.image.height);
			kha_WebGLImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
			this.data = kha_WebGLImage.context.getImageData(0,0,this.image.width,this.image.height);
		}
	}
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			}
			if(this.format == 3) {
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.texture,0);
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(3553,colortex);
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,colortex,0);
					kha_SystemImpl.gl.bindTexture(3553,this.texture);
				}
			} else {
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAAFrameBuffer = kha_SystemImpl.gl.createFramebuffer();
					this.MSAAColorBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAAColorBuffer);
					var MSAAFormat;
					switch(this.format) {
					case 0:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
						break;
					case 2:
						MSAAFormat = kha_SystemImpl.gl.RGBA32F;
						break;
					case 4:
						MSAAFormat = kha_SystemImpl.gl.RGBA16F;
						break;
					case 5:
						MSAAFormat = 33326;
						break;
					case 6:
						MSAAFormat = 33325;
						break;
					default:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
					}
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,MSAAFormat,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36064,36161,this.MSAAColorBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			var e = kha_SystemImpl.gl.checkFramebufferStatus(36160);
			if(e != 36053) {
				haxe_Log.trace("checkframebufferStatus error " + e,{ fileName : "kha/WebGLImage.hx", lineNumber : 250, className : "kha.WebGLImage", methodName : "createTexture"});
			}
			kha_SystemImpl.gl.bindRenderbuffer(36161,null);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			switch(this.format) {
			case 0:
				if(((this.image) instanceof Uint8Array)) {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.myWidth,this.myHeight,0,6408,5121,this.image);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
				}
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.myWidth,this.myHeight,0,6409,5121,this.image);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,this.image);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.image);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
			}
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,33189,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				if(depthStencilFormat == 1) {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5125,null);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				}
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					if(depthStencilFormat == 1) {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33190,this.get_realWidth(),this.get_realHeight());
					} else {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33189,this.get_realWidth(),this.get_realHeight());
					}
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			break;
		case 2:case 3:case 4:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,34041,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.get_realWidth(),this.get_realHeight(),0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,35056,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,33306,3553,this.depthTexture,0);
			}
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
	}
	,setDepthStencilFrom: function(image) {
		this.depthTexture = (js_Boot.__cast(image , kha_WebGLImage)).depthTexture;
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
	}
	,bytesToArray: function(bytes) {
		switch(this.format) {
		case 0:case 1:
			return new Uint8Array(bytes.getData());
		case 2:case 4:case 5:case 6:
			return new Float32Array(bytes.getData());
		default:
			return new Uint8Array(bytes.getData());
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = haxe_io_Bytes.alloc(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height());
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,this.bytesToArray(this.bytes));
				if(kha_SystemImpl.gl.getError() == 1282) {
					var rgbaBytes = haxe_io_Bytes.alloc(this.get_width() * this.get_height() * 4);
					var _g = 0;
					var _g1 = this.get_height();
					while(_g < _g1) {
						var y = _g++;
						var _g2 = 0;
						var _g11 = this.get_width();
						while(_g2 < _g11) {
							var x = _g2++;
							var value = this.bytes.get(y * this.get_width() + x);
							rgbaBytes.set(y * this.get_width() * 4 + x * 4,value);
							rgbaBytes.set(y * this.get_width() * 4 + x * 4 + 1,value);
							rgbaBytes.set(y * this.get_width() * 4 + x * 4 + 2,value);
							rgbaBytes.set(y * this.get_width() * 4 + x * 4 + 3,255);
						}
					}
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(rgbaBytes));
				}
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_width(),this.get_height(),0,6408,5126,this.bytesToArray(this.bytes));
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_width(),this.get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.bytesToArray(this.bytes));
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,pixels: null
	,getPixels: function() {
		if(this.frameBuffer == null) {
			return null;
		}
		if(this.pixels == null) {
			switch(this.format) {
			case 0:case 1:
				this.pixels = new Uint8Array(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height());
				break;
			case 2:case 5:
				this.pixels = new Float32Array(Std.int(kha_WebGLImage.formatByteSize(this.format) / 4) * this.get_width() * this.get_height());
				break;
			case 4:case 6:
				this.pixels = new Uint16Array(Std.int(kha_WebGLImage.formatByteSize(this.format) / 2) * this.get_width() * this.get_height());
				break;
			default:
				this.pixels = new Uint8Array(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height());
			}
		}
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		switch(this.format) {
		case 0:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5121,this.pixels);
			break;
		case 1:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,5121,this.pixels);
			break;
		case 2:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5126,this.pixels);
			break;
		case 4:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.pixels);
			break;
		case 5:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.pixels);
			break;
		case 6:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.pixels);
			break;
		default:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5121,this.pixels);
		}
		return haxe_io_Bytes.ofData(this.pixels.buffer);
	}
	,unload: function() {
		if(this.texture != null) {
			kha_SystemImpl.gl.deleteTexture(this.texture);
		}
		if(this.depthTexture != null) {
			kha_SystemImpl.gl.deleteTexture(this.depthTexture);
		}
		if(this.frameBuffer != null) {
			kha_SystemImpl.gl.deleteFramebuffer(this.frameBuffer);
		}
		if(this.renderBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.renderBuffer);
		}
		if(this.MSAAFrameBuffer != null) {
			kha_SystemImpl.gl.deleteFramebuffer(this.MSAAFrameBuffer);
		}
		if(this.MSAAColorBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.MSAAColorBuffer);
		}
		if(this.MSAADepthBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.MSAADepthBuffer);
		}
	}
	,generateMipmaps: function(levels) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.generateMipmap(3553);
	}
	,setMipmaps: function(mipmaps) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.format == 2) {
			var _g = 0;
			var _g1 = mipmaps.length;
			while(_g < _g1) {
				var i = _g++;
				kha_SystemImpl.gl.texImage2D(3553,i + 1,kha_SystemImpl.gl2 ? 34836 : 6408,mipmaps[i].get_width(),mipmaps[i].get_height(),0,6408,5126,(js_Boot.__cast(mipmaps[i] , kha_WebGLImage)).image);
			}
		} else if(this.format == 4) {
			var _g2 = 0;
			var _g11 = mipmaps.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				kha_SystemImpl.gl.texImage2D(3553,i1 + 1,kha_SystemImpl.gl2 ? 34842 : 6408,mipmaps[i1].get_width(),mipmaps[i1].get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,(js_Boot.__cast(mipmaps[i1] , kha_WebGLImage)).image);
			}
		} else {
			var _g3 = 0;
			var _g12 = mipmaps.length;
			while(_g3 < _g12) {
				var i2 = _g3++;
				kha_SystemImpl.gl.texImage2D(3553,i2 + 1,6408,6408,5121,(js_Boot.__cast(mipmaps[i2] , kha_WebGLImage)).image);
			}
		}
	}
	,__class__: kha_WebGLImage
});
var kha_Window = function(defaultWidth,defaultHeight,canvas) {
	this.canvas = canvas;
	this.defaultWidth = defaultWidth;
	this.defaultHeight = defaultHeight;
	kha_Window.windows.push(this);
};
$hxClasses["kha.Window"] = kha_Window;
kha_Window.__name__ = "kha.Window";
kha_Window.__properties__ = {get_all:"get_all"};
kha_Window.create = function(win,frame) {
	return null;
};
kha_Window.destroy = function($window) {
};
kha_Window.get = function(index) {
	return kha_Window.windows[index];
};
kha_Window.get_all = function() {
	return kha_Window.windows;
};
kha_Window.prototype = {
	canvas: null
	,defaultWidth: null
	,defaultHeight: null
	,resize: function(width,height) {
	}
	,move: function(x,y) {
	}
	,changeWindowFeatures: function(features) {
	}
	,changeFramebuffer: function(frame) {
	}
	,get_x: function() {
		return 0;
	}
	,set_x: function(value) {
		return 0;
	}
	,get_y: function() {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,get_width: function() {
		if(this.canvas.clientWidth == 0) {
			return this.defaultWidth;
		} else {
			return this.canvas.clientWidth;
		}
	}
	,set_width: function(value) {
		return 800;
	}
	,get_height: function() {
		if(this.canvas.clientHeight == 0) {
			return this.defaultHeight;
		} else {
			return this.canvas.clientHeight;
		}
	}
	,set_height: function(value) {
		return 600;
	}
	,get_mode: function() {
		return 0;
	}
	,set_mode: function(mode) {
		if(mode == 1 || mode == 2) {
			if(!this.isFullscreen()) {
				this.requestFullscreen();
			}
		} else if(this.isFullscreen()) {
			this.exitFullscreen();
		}
		return mode;
	}
	,isFullscreen: function() {
		return document.fullscreenElement === this.canvas ||
			document.mozFullScreenElement === this.canvas ||
			document.webkitFullscreenElement === this.canvas ||
			document.msFullscreenElement === this.canvas ;
	}
	,requestFullscreen: function() {
		if(($_=this.canvas,$bind($_,$_.requestFullscreen))) {
			var c = this.canvas;
			c.requestFullscreen({ navigationUI : "hide"});
		} else if(this.canvas.msRequestFullscreen) {
			this.canvas.msRequestFullscreen();
		} else if(this.canvas.mozRequestFullScreen) {
			this.canvas.mozRequestFullScreen();
		} else if(this.canvas.webkitRequestFullscreen) {
			this.canvas.webkitRequestFullscreen();
		}
	}
	,exitFullscreen: function() {
		if(document.exitFullscreen) {
			document.exitFullscreen();
		} else if(document.msExitFullscreen) {
			document.msExitFullscreen();
		} else if(document.mozCancelFullScreen) {
			document.mozCancelFullScreen();
		} else if(document.webkitExitFullscreen) {
			document.webkitExitFullscreen();
		}
	}
	,get_visible: function() {
		return true;
	}
	,set_visible: function(value) {
		return true;
	}
	,get_title: function() {
		return "Kha";
	}
	,set_title: function(value) {
		return "Kha";
	}
	,notifyOnResize: function(callback) {
	}
	,get_vSynced: function() {
		return true;
	}
	,__class__: kha_Window
	,__properties__: {get_vSynced:"get_vSynced",set_title:"set_title",get_title:"get_title",set_visible:"set_visible",get_visible:"get_visible",set_mode:"set_mode",get_mode:"get_mode",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var kha__$WindowOptions_WindowFeatures_$Impl_$ = {};
$hxClasses["kha._WindowOptions.WindowFeatures_Impl_"] = kha__$WindowOptions_WindowFeatures_$Impl_$;
kha__$WindowOptions_WindowFeatures_$Impl_$.__name__ = "kha._WindowOptions.WindowFeatures_Impl_";
kha__$WindowOptions_WindowFeatures_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
var kha_WindowOptions = function(title,x,y,width,height,display,visible,windowFeatures,mode) {
	if(mode == null) {
		mode = 0;
	}
	if(visible == null) {
		visible = true;
	}
	if(display == null) {
		display = -1;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	if(y == null) {
		y = -1;
	}
	if(x == null) {
		x = -1;
	}
	this.mode = 0;
	this.windowFeatures = 1 | 4 | 2;
	this.visible = true;
	this.display = -1;
	this.height = 600;
	this.width = 800;
	this.y = -1;
	this.x = -1;
	this.title = null;
	this.title = title;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.display = display;
	this.visible = visible;
	this.windowFeatures = windowFeatures == null ? 1 | 4 | 2 : windowFeatures;
	this.mode = mode;
};
$hxClasses["kha.WindowOptions"] = kha_WindowOptions;
kha_WindowOptions.__name__ = "kha.WindowOptions";
kha_WindowOptions.prototype = {
	title: null
	,x: null
	,y: null
	,width: null
	,height: null
	,display: null
	,visible: null
	,windowFeatures: null
	,mode: null
	,__class__: kha_WindowOptions
};
var kha_arrays__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Float32Array.Float32Array_Impl_"] = kha_arrays__$Float32Array_Float32Array_$Impl_$;
kha_arrays__$Float32Array_Float32Array_$Impl_$.__name__ = "kha.arrays._Float32Array.Float32Array_Impl_";
kha_arrays__$Float32Array_Float32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Float32Array_Float32Array_$Impl_$._new = function(elements) {
	var this1 = new Float32Array(elements);
	return this1;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["kha.arrays._Int16Array.Int16Array_Impl_"] = kha_arrays__$Int16Array_Int16Array_$Impl_$;
kha_arrays__$Int16Array_Int16Array_$Impl_$.__name__ = "kha.arrays._Int16Array.Int16Array_Impl_";
kha_arrays__$Int16Array_Int16Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Int16Array_Int16Array_$Impl_$._new = function(elements) {
	var this1 = new Int16Array(elements);
	return this1;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Int32Array.Int32Array_Impl_"] = kha_arrays__$Int32Array_Int32Array_$Impl_$;
kha_arrays__$Int32Array_Int32Array_$Impl_$.__name__ = "kha.arrays._Int32Array.Int32Array_Impl_";
kha_arrays__$Int32Array_Int32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Int32Array_Int32Array_$Impl_$._new = function(elements) {
	var this1 = new Int32Array(elements);
	return this1;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Uint32Array_Uint32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Uint32Array.Uint32Array_Impl_"] = kha_arrays__$Uint32Array_Uint32Array_$Impl_$;
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.__name__ = "kha.arrays._Uint32Array.Uint32Array_Impl_";
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$._new = function(elements) {
	var this1 = new Uint32Array(elements);
	return this1;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_audio1_AudioChannel = function() { };
$hxClasses["kha.audio1.AudioChannel"] = kha_audio1_AudioChannel;
kha_audio1_AudioChannel.__name__ = "kha.audio1.AudioChannel";
kha_audio1_AudioChannel.__isInterface__ = true;
kha_audio1_AudioChannel.prototype = {
	play: null
	,pause: null
	,stop: null
	,length: null
	,get_length: null
	,get_position: null
	,set_position: null
	,get_volume: null
	,set_volume: null
	,finished: null
	,get_finished: null
	,__class__: kha_audio1_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_internal_IntBox = function(value) {
	this.value = value;
};
$hxClasses["kha.internal.IntBox"] = kha_internal_IntBox;
kha_internal_IntBox.__name__ = "kha.internal.IntBox";
kha_internal_IntBox.prototype = {
	value: null
	,__class__: kha_internal_IntBox
};
var kha_audio2_Audio = function() { };
$hxClasses["kha.audio2.Audio"] = kha_audio2_Audio;
kha_audio2_Audio.__name__ = "kha.audio2.Audio";
kha_audio2_Audio.initContext = function() {
	try {
		kha_audio2_Audio._context = new AudioContext();
		return;
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( e2 ) {
		var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
	}
};
kha_audio2_Audio._init = function() {
	kha_audio2_Audio.initContext();
	if(kha_audio2_Audio._context == null) {
		return false;
	}
	kha_audio2_Audio.samplesPerSecond = Math.round(kha_audio2_Audio._context.sampleRate);
	var bufferSize = 2048;
	kha_audio2_Audio.buffer = new kha_audio2_Buffer(bufferSize * 4,2,Std.int(kha_audio2_Audio._context.sampleRate));
	kha_audio2_Audio.processingNode = kha_audio2_Audio._context.createScriptProcessor(bufferSize,0,2);
	kha_audio2_Audio.processingNode.onaudioprocess = function(e) {
		var output1 = e.outputBuffer.getChannelData(0);
		var output2 = e.outputBuffer.getChannelData(1);
		if(kha_audio2_Audio.audioCallback != null) {
			kha_audio2_Audio.intBox.value = e.outputBuffer.length * 2;
			kha_audio2_Audio.audioCallback(kha_audio2_Audio.intBox,kha_audio2_Audio.buffer);
			var _g = 0;
			var _g1 = e.outputBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				output1[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				output2[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				if(kha_audio2_Audio.buffer.readLocation >= kha_audio2_Audio.buffer.size) {
					kha_audio2_Audio.buffer.readLocation = 0;
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = e.outputBuffer.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				output1[i1] = 0;
				output2[i1] = 0;
			}
		}
	};
	kha_audio2_Audio.processingNode.connect(kha_audio2_Audio._context.destination);
	return true;
};
kha_audio2_Audio.wakeChannels = function() {
	kha_SystemImpl.mobileAudioPlaying = true;
	var _g = 0;
	var _g1 = kha_audio2_Audio.virtualChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.wake();
	}
};
kha_audio2_Audio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var element = window.document.createElement("audio");
	var blob = new Blob([sound.compressedData.getData()],{ type : "audio/mp4"});
	element.src = URL.createObjectURL(blob);
	element.loop = loop;
	var channel = new kha_js_AEAudioChannel(element,loop);
	if(kha_SystemImpl.mobileAudioPlaying) {
		channel.play();
		return channel;
	} else {
		var virtualChannel = new kha_audio2_VirtualStreamChannel(channel,loop);
		kha_audio2_Audio.virtualChannels.push(virtualChannel);
		return virtualChannel;
	}
};
var kha_audio2_Audio1 = function() { };
$hxClasses["kha.audio2.Audio1"] = kha_audio2_Audio1;
kha_audio2_Audio1.__name__ = "kha.audio2.Audio1";
kha_audio2_Audio1._init = function() {
	var this1 = new Array(32);
	kha_audio2_Audio1.soundChannels = this1;
	var this2 = new Array(32);
	kha_audio2_Audio1.streamChannels = this2;
	var this3 = new Array(32);
	kha_audio2_Audio1.internalSoundChannels = this3;
	var this4 = new Array(32);
	kha_audio2_Audio1.internalStreamChannels = this4;
	var this5 = new Float32Array(512);
	kha_audio2_Audio1.sampleCache1 = this5;
	var this6 = new Float32Array(512);
	kha_audio2_Audio1.sampleCache2 = this6;
	kha_audio2_Audio1.lastAllocationCount = 0;
	kha_audio2_Audio.audioCallback = kha_audio2_Audio1.mix;
};
kha_audio2_Audio1.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.mix = function(samplesBox,buffer) {
	var samples = samplesBox.value;
	if(kha_audio2_Audio1.sampleCache1.length < samples) {
		if(kha_audio2_Audio.disableGcInteractions) {
			haxe_Log.trace("Unexpected allocation request in audio thread.",{ fileName : "kha/audio2/Audio1.hx", lineNumber : 45, className : "kha.audio2.Audio1", methodName : "mix"});
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				buffer.data[buffer.writeLocation] = 0;
				buffer.writeLocation += 1;
				if(buffer.writeLocation >= buffer.size) {
					buffer.writeLocation = 0;
				}
			}
			kha_audio2_Audio1.lastAllocationCount = 0;
			kha_audio2_Audio.disableGcInteractions = false;
			return;
		}
		var this1 = new Float32Array(samples * 2);
		kha_audio2_Audio1.sampleCache1 = this1;
		var this2 = new Float32Array(samples * 2);
		kha_audio2_Audio1.sampleCache2 = this2;
		kha_audio2_Audio1.lastAllocationCount = 0;
	} else if(kha_audio2_Audio1.lastAllocationCount > 100) {
		kha_audio2_Audio.disableGcInteractions = true;
	} else {
		kha_audio2_Audio1.lastAllocationCount += 1;
	}
	var _g2 = 0;
	var _g11 = samples;
	while(_g2 < _g11) {
		var i1 = _g2++;
		kha_audio2_Audio1.sampleCache2[i1] = 0;
	}
	var _g21 = 0;
	while(_g21 < 32) {
		var i2 = _g21++;
		kha_audio2_Audio1.internalSoundChannels[i2] = kha_audio2_Audio1.soundChannels[i2];
	}
	var _g3 = 0;
	while(_g3 < 32) {
		var i3 = _g3++;
		kha_audio2_Audio1.internalStreamChannels[i3] = kha_audio2_Audio1.streamChannels[i3];
	}
	var _g4 = 0;
	var _g5 = kha_audio2_Audio1.internalSoundChannels;
	while(_g4 < _g5.length) {
		var channel = _g5[_g4];
		++_g4;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g51 = 0;
		var _g6 = samples;
		while(_g51 < _g6) {
			var i4 = _g51++;
			kha_audio2_Audio1.sampleCache2[i4] += kha_audio2_Audio1.sampleCache1[i4] * channel.get_volume();
		}
	}
	var _g61 = 0;
	var _g7 = kha_audio2_Audio1.internalStreamChannels;
	while(_g61 < _g7.length) {
		var channel1 = _g7[_g61];
		++_g61;
		if(channel1 == null || channel1.get_finished()) {
			continue;
		}
		channel1.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g71 = 0;
		var _g8 = samples;
		while(_g71 < _g8) {
			var i5 = _g71++;
			kha_audio2_Audio1.sampleCache2[i5] += kha_audio2_Audio1.sampleCache1[i5] * channel1.get_volume();
		}
	}
	var _g81 = 0;
	var _g9 = samples;
	while(_g81 < _g9) {
		var i6 = _g81++;
		buffer.data[buffer.writeLocation] = kha_audio2_Audio1.max(kha_audio2_Audio1.min(kha_audio2_Audio1.sampleCache2[i6],1.0),-1.0);
		buffer.writeLocation += 1;
		if(buffer.writeLocation >= buffer.size) {
			buffer.writeLocation = 0;
		}
	}
};
kha_audio2_Audio1.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = null;
	if(kha_audio2_Audio.samplesPerSecond != sound.sampleRate) {
		channel = new kha_audio2_ResamplingAudioChannel(loop,sound.sampleRate);
	} else {
		channel = new kha_audio2_AudioChannel(loop);
	}
	channel.data = sound.uncompressedData;
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished()) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
kha_audio2_Audio1._playAgain = function(channel) {
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = null;
		}
	}
	var _g1 = 0;
	while(_g1 < 32) {
		var i1 = _g1++;
		if(kha_audio2_Audio1.soundChannels[i1] == null || kha_audio2_Audio1.soundChannels[i1].get_finished() || kha_audio2_Audio1.soundChannels[i1] == channel) {
			kha_audio2_Audio1.soundChannels[i1] = channel;
			break;
		}
	}
};
kha_audio2_Audio1.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var hardwareChannel = kha_audio2_Audio.stream(sound,loop);
	if(hardwareChannel != null) {
		return hardwareChannel;
	}
	var channel = new kha_audio2_StreamChannel(sound.compressedData,loop);
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.streamChannels[i] == null || kha_audio2_Audio1.streamChannels[i].get_finished()) {
			kha_audio2_Audio1.streamChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
var kha_audio2_AudioChannel = function(looping) {
	this.looping = false;
	this.stopped = false;
	this.paused = false;
	this.myPosition = 0;
	this.myVolume = 1;
	this.data = null;
	this.looping = looping;
};
$hxClasses["kha.audio2.AudioChannel"] = kha_audio2_AudioChannel;
kha_audio2_AudioChannel.__name__ = "kha.audio2.AudioChannel";
kha_audio2_AudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_AudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.prototype = {
	data: null
	,myVolume: null
	,myPosition: null
	,paused: null
	,stopped: null
	,looping: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			var _g1 = requestedLength;
			while(_g < _g1) {
				var i = _g++;
				requestedSamples[i] = 0;
			}
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g2 = 0;
			var _g11 = kha_audio2_AudioChannel.min(this.data.length - this.myPosition,requestedLength - requestedSamplesIndex);
			while(_g2 < _g11) {
				var i1 = _g2++;
				requestedSamples[requestedSamplesIndex++] = this.data[this.myPosition++];
			}
			if(this.myPosition >= this.data.length) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,length: null
	,get_length: function() {
		return this.data.length / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		this.myPosition = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2);
		this.myPosition = kha_audio2_AudioChannel.max(kha_audio2_AudioChannel.min(this.myPosition,this.data.length),0);
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_Buffer = function(size,channels,samplesPerSecond) {
	this.size = size;
	var this1 = new Float32Array(size);
	this.data = this1;
	this.channels = channels;
	this.samplesPerSecond = samplesPerSecond;
	this.readLocation = 0;
	this.writeLocation = 0;
};
$hxClasses["kha.audio2.Buffer"] = kha_audio2_Buffer;
kha_audio2_Buffer.__name__ = "kha.audio2.Buffer";
kha_audio2_Buffer.prototype = {
	channels: null
	,samplesPerSecond: null
	,data: null
	,size: null
	,readLocation: null
	,writeLocation: null
	,__class__: kha_audio2_Buffer
};
var kha_audio2_ResamplingAudioChannel = function(looping,sampleRate) {
	kha_audio2_AudioChannel.call(this,looping);
	this.sampleRate = sampleRate;
};
$hxClasses["kha.audio2.ResamplingAudioChannel"] = kha_audio2_ResamplingAudioChannel;
kha_audio2_ResamplingAudioChannel.__name__ = "kha.audio2.ResamplingAudioChannel";
kha_audio2_ResamplingAudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.__super__ = kha_audio2_AudioChannel;
kha_audio2_ResamplingAudioChannel.prototype = $extend(kha_audio2_AudioChannel.prototype,{
	sampleRate: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			var _g1 = requestedLength;
			while(_g < _g1) {
				var i = _g++;
				requestedSamples[i] = 0;
			}
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g2 = 0;
			var _g11 = kha_audio2_ResamplingAudioChannel.min(this.sampleLength(sampleRate) - this.myPosition,requestedLength - requestedSamplesIndex);
			while(_g2 < _g11) {
				var i1 = _g2++;
				requestedSamples[requestedSamplesIndex++] = this.sample(this.myPosition++,sampleRate);
			}
			if(this.myPosition >= this.sampleLength(sampleRate)) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,sample: function(position,sampleRate) {
		var even = position % 2 == 0;
		var factor = this.sampleRate / sampleRate;
		if(even) {
			position = Std.int(position / 2);
			var pos = factor * position;
			var pos1 = Math.floor(pos);
			var pos2 = Math.floor(pos + 1);
			pos1 *= 2;
			pos2 *= 2;
			var minimum = 0;
			var maximum = this.data.length - 1;
			if(maximum % 2 == 0) {
				maximum = maximum;
			} else {
				--maximum;
			}
			var a = pos1 < minimum || pos1 > maximum ? 0 : this.data[pos1];
			var b = pos2 < minimum || pos2 > maximum ? 0 : this.data[pos2];
			return this.lerp(a,b,pos - Math.floor(pos));
		} else {
			position = Std.int(position / 2);
			var pos3 = factor * position;
			var pos11 = Math.floor(pos3);
			var pos21 = Math.floor(pos3 + 1);
			pos11 = pos11 * 2 + 1;
			pos21 = pos21 * 2 + 1;
			var minimum1 = 1;
			var maximum1 = this.data.length - 1;
			if(maximum1 % 2 != 0) {
				maximum1 = maximum1;
			} else {
				--maximum1;
			}
			var a1 = pos11 < minimum1 || pos11 > maximum1 ? 0 : this.data[pos11];
			var b1 = pos21 < minimum1 || pos21 > maximum1 ? 0 : this.data[pos21];
			return this.lerp(a1,b1,pos3 - Math.floor(pos3));
		}
	}
	,lerp: function(v0,v1,t) {
		return (1 - t) * v0 + t * v1;
	}
	,sampleLength: function(sampleRate) {
		var value = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
		if(value % 2 == 0) {
			return value;
		} else {
			return value + 1;
		}
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,get_length: function() {
		return this.data.length / this.sampleRate / 2;
	}
	,get_position: function() {
		return this.myPosition / this.sampleRate / 2;
	}
	,set_position: function(value) {
		this.myPosition = Math.round(value * this.sampleRate * 2);
		this.myPosition = kha_audio2_ResamplingAudioChannel.max(kha_audio2_ResamplingAudioChannel.min(this.myPosition,this.sampleLength(kha_audio2_Audio.samplesPerSecond)),0);
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_ResamplingAudioChannel
});
var kha_audio2_StreamChannel = function(data,loop) {
	this.paused = false;
	this.atend = false;
	this.myVolume = 1;
	this.loop = loop;
	this.reader = kha_audio2_ogg_vorbis_Reader.openFromBytes(data);
};
$hxClasses["kha.audio2.StreamChannel"] = kha_audio2_StreamChannel;
kha_audio2_StreamChannel.__name__ = "kha.audio2.StreamChannel";
kha_audio2_StreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_StreamChannel.prototype = {
	reader: null
	,atend: null
	,loop: null
	,myVolume: null
	,paused: null
	,nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				samples[i] = 0;
			}
			return;
		}
		var count = this.reader.read(samples,Std.int(length / 2),2,sampleRate,true) * 2;
		if(count < length) {
			if(this.loop) {
				this.reader.set_currentMillisecond(0);
			} else {
				this.atend = true;
			}
			var _g2 = count;
			var _g11 = length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				samples[i1] = 0;
			}
		}
	}
	,play: function() {
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.atend = true;
	}
	,length: null
	,get_length: function() {
		return this.reader.get_totalMillisecond() / 1000.0;
	}
	,get_position: function() {
		return this.reader.get_currentMillisecond() / 1000.0;
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.atend;
	}
	,__class__: kha_audio2_StreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_VirtualStreamChannel = function(aeChannel,looping) {
	this.mode = 2;
	this.aeChannel = aeChannel;
	this.looping = looping;
	this.lastTickTime = kha_Scheduler.realTime();
	this.lastPosition = 0;
};
$hxClasses["kha.audio2.VirtualStreamChannel"] = kha_audio2_VirtualStreamChannel;
kha_audio2_VirtualStreamChannel.__name__ = "kha.audio2.VirtualStreamChannel";
kha_audio2_VirtualStreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_VirtualStreamChannel.prototype = {
	aeChannel: null
	,mode: null
	,lastTickTime: null
	,lastPosition: null
	,looping: null
	,wake: function() {
		this.updatePosition();
		this.aeChannel.set_position(this.lastPosition);
		this.aeChannel.play();
	}
	,updatePosition: function() {
		var now = kha_Scheduler.realTime();
		switch(this.mode) {
		case 0:
			this.lastPosition = 0;
			break;
		case 1:
			break;
		case 2:
			this.lastPosition += now - this.lastTickTime;
			while(this.lastPosition > this.get_length()) this.lastPosition -= this.get_length();
			break;
		}
		this.lastTickTime = now;
	}
	,play: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.play();
		} else {
			this.updatePosition();
			this.mode = 2;
		}
	}
	,pause: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.pause();
		} else {
			this.updatePosition();
			this.mode = 1;
		}
	}
	,stop: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.stop();
		} else {
			this.updatePosition();
			this.mode = 0;
		}
	}
	,length: null
	,get_length: function() {
		return this.aeChannel.get_length();
	}
	,get_position: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_position();
		} else {
			this.updatePosition();
			return this.lastPosition;
		}
	}
	,set_position: function(value) {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.set_position(value);
		} else {
			this.updatePosition();
			return this.lastPosition = value;
		}
	}
	,get_volume: function() {
		return this.aeChannel.get_volume();
	}
	,set_volume: function(value) {
		return this.aeChannel.set_volume(value);
	}
	,finished: null
	,get_finished: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_finished();
		} else if(this.mode != 0) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_audio2_VirtualStreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_ogg_tools_Crc32 = function() { };
$hxClasses["kha.audio2.ogg.tools.Crc32"] = kha_audio2_ogg_tools_Crc32;
kha_audio2_ogg_tools_Crc32.__name__ = "kha.audio2.ogg.tools.Crc32";
kha_audio2_ogg_tools_Crc32.init = function() {
	if(kha_audio2_ogg_tools_Crc32.table != null) {
		return;
	}
	var this1 = new Array(256);
	kha_audio2_ogg_tools_Crc32.table = this1;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		var s = i << 24;
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		kha_audio2_ogg_tools_Crc32.table[i] = s;
	}
};
kha_audio2_ogg_tools_Crc32.update = function(crc,byte) {
	return crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
};
var kha_audio2_ogg_tools_MathTools = function() { };
$hxClasses["kha.audio2.ogg.tools.MathTools"] = kha_audio2_ogg_tools_MathTools;
kha_audio2_ogg_tools_MathTools.__name__ = "kha.audio2.ogg.tools.MathTools";
kha_audio2_ogg_tools_MathTools.ilog = function(n) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	if(n < 16384) {
		if(n < 16) {
			return log2_4[n];
		} else if(n < 512) {
			return 5 + log2_4[n >> 5];
		} else {
			return 10 + log2_4[n >> 10];
		}
	} else if(n < 16777216) {
		if(n < 524288) {
			return 15 + log2_4[n >> 15];
		} else {
			return 20 + log2_4[n >> 20];
		}
	} else if(n < 536870912) {
		return 25 + log2_4[n >> 25];
	} else if(n < -2147483648) {
		return 30 + log2_4[n >> 30];
	} else {
		return 0;
	}
};
var kha_audio2_ogg_tools_Mdct = function() { };
$hxClasses["kha.audio2.ogg.tools.Mdct"] = kha_audio2_ogg_tools_Mdct;
kha_audio2_ogg_tools_Mdct.__name__ = "kha.audio2.ogg.tools.Mdct";
kha_audio2_ogg_tools_Mdct.inverseTransform = function(buffer,n,a,b,c,bitReverse) {
	var n2 = n >> 1;
	var n4 = n >> 2;
	var n8 = n >> 3;
	var this1 = new Array(n2);
	var buf2 = this1;
	var dOffset = n2 - 2;
	var aaOffset = 0;
	var eOffset = 0;
	var eStopOffset = n2;
	while(eOffset != eStopOffset) {
		buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
		buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset += 4;
	}
	eOffset = n2 - 3;
	while(dOffset >= 0) {
		buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
		buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset -= 4;
	}
	var u = buffer;
	var v = buf2;
	var aaOffset1 = n2 - 8;
	var eOffset0 = n4;
	var eOffset1 = 0;
	var dOffset0 = n4;
	var dOffset1 = 0;
	while(aaOffset1 >= 0) {
		var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
		var v40_20 = v[eOffset0] - v[eOffset1];
		u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
		u[dOffset0] = v[eOffset0] + v[eOffset1];
		u[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
		u[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
		v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
		v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
		u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
		u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
		u[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
		u[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
		aaOffset1 -= 8;
		dOffset0 += 4;
		dOffset1 += 4;
		eOffset0 += 4;
		eOffset1 += 4;
	}
	var ld = kha_audio2_ogg_tools_MathTools.ilog(n) - 1;
	kha_audio2_ogg_tools_Mdct.step3Iter0Loop(n >> 4,u,n2 - 1 - n4 * 0,-(n >> 3),a);
	kha_audio2_ogg_tools_Mdct.step3Iter0Loop(n >> 4,u,n2 - 1 - n4,-(n >> 3),a);
	kha_audio2_ogg_tools_Mdct.step3InnerRLoop(n >> 5,u,n2 - 1 - n8 * 0,-(n >> 4),a,16);
	kha_audio2_ogg_tools_Mdct.step3InnerRLoop(n >> 5,u,n2 - 1 - n8,-(n >> 4),a,16);
	kha_audio2_ogg_tools_Mdct.step3InnerRLoop(n >> 5,u,n2 - 1 - n8 * 2,-(n >> 4),a,16);
	kha_audio2_ogg_tools_Mdct.step3InnerRLoop(n >> 5,u,n2 - 1 - n8 * 3,-(n >> 4),a,16);
	var _g = 2;
	var _g1 = ld - 3 >> 1;
	while(_g < _g1) {
		var l = _g++;
		var k0 = n >> l + 2;
		var k0_2 = k0 >> 1;
		var lim = 1 << l + 1;
		var _g2 = 0;
		var _g11 = lim;
		while(_g2 < _g11) {
			var i = _g2++;
			kha_audio2_ogg_tools_Mdct.step3InnerRLoop(n >> l + 4,u,n2 - 1 - k0 * i,-k0_2,a,1 << l + 3);
		}
	}
	var _g21 = ld - 3 >> 1;
	var _g3 = ld - 6;
	while(_g21 < _g3) {
		var l1 = _g21++;
		var k01 = n >> l1 + 2;
		var k1 = 1 << l1 + 3;
		var k0_21 = k01 >> 1;
		var rlim = n >> l1 + 6;
		var lim1 = 1 << l1 + 1;
		var aOffset = 0;
		var i_off = n2 - 1;
		var r = rlim + 1;
		while(--r > 0) {
			kha_audio2_ogg_tools_Mdct.step3InnerSLoop(lim1,u,i_off,-k0_21,a,aOffset,k1,k01);
			aOffset += k1 * 4;
			i_off -= 8;
		}
	}
	kha_audio2_ogg_tools_Mdct.step3InnerSLoopLd654(n >> 5,u,n2 - 1,a,n);
	var brOffset = 0;
	var dOffset01 = n4 - 4;
	var dOffset11 = n2 - 4;
	while(dOffset01 >= 0) {
		var k4 = bitReverse[brOffset];
		v[dOffset11 + 3] = u[k4];
		v[dOffset11 + 2] = u[k4 + 1];
		v[dOffset01 + 3] = u[k4 + 2];
		v[dOffset01 + 2] = u[k4 + 3];
		k4 = bitReverse[brOffset + 1];
		v[dOffset11 + 1] = u[k4];
		v[dOffset11] = u[k4 + 1];
		v[dOffset01 + 1] = u[k4 + 2];
		v[dOffset01] = u[k4 + 3];
		dOffset01 -= 4;
		dOffset11 -= 4;
		brOffset += 2;
	}
	var cOffset = 0;
	var dOffset2 = 0;
	var eOffset2 = n2 - 4;
	while(dOffset2 < eOffset2) {
		var a02 = v[dOffset2] - v[eOffset2 + 2];
		var a11 = v[dOffset2 + 1] + v[eOffset2 + 3];
		var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
		var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
		var b2 = v[dOffset2] + v[eOffset2 + 2];
		var b3 = v[dOffset2 + 1] - v[eOffset2 + 3];
		v[dOffset2] = b2 + b0;
		v[dOffset2 + 1] = b3 + b1;
		v[eOffset2 + 2] = b2 - b0;
		v[eOffset2 + 3] = b1 - b3;
		a02 = v[dOffset2 + 2] - v[eOffset2];
		a11 = v[dOffset2 + 3] + v[eOffset2 + 1];
		b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
		b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
		b2 = v[dOffset2 + 2] + v[eOffset2];
		b3 = v[dOffset2 + 3] - v[eOffset2 + 1];
		v[dOffset2 + 2] = b2 + b0;
		v[dOffset2 + 3] = b3 + b1;
		v[eOffset2] = b2 - b0;
		v[eOffset2 + 1] = b1 - b3;
		cOffset += 4;
		dOffset2 += 4;
		eOffset2 -= 4;
	}
	var bOffset = n2 - 8;
	var eOffset3 = n2 - 8;
	var dOffset02 = 0;
	var dOffset12 = n2 - 4;
	var dOffset21 = n2;
	var dOffset3 = n - 4;
	while(eOffset3 >= 0) {
		var p3 = buf2[eOffset3 + 6] * b[bOffset + 7] - buf2[eOffset3 + 7] * b[bOffset + 6];
		var p2 = -buf2[eOffset3 + 6] * b[bOffset + 6] - buf2[eOffset3 + 7] * b[bOffset + 7];
		buffer[dOffset02] = p3;
		buffer[dOffset12 + 3] = -p3;
		buffer[dOffset21] = p2;
		buffer[dOffset3 + 3] = p2;
		var p1 = buf2[eOffset3 + 4] * b[bOffset + 5] - buf2[eOffset3 + 5] * b[bOffset + 4];
		var p0 = -buf2[eOffset3 + 4] * b[bOffset + 4] - buf2[eOffset3 + 5] * b[bOffset + 5];
		buffer[dOffset02 + 1] = p1;
		buffer[dOffset12 + 2] = -p1;
		buffer[dOffset21 + 1] = p0;
		buffer[dOffset3 + 2] = p0;
		p3 = buf2[eOffset3 + 2] * b[bOffset + 3] - buf2[eOffset3 + 3] * b[bOffset + 2];
		p2 = -buf2[eOffset3 + 2] * b[bOffset + 2] - buf2[eOffset3 + 3] * b[bOffset + 3];
		buffer[dOffset02 + 2] = p3;
		buffer[dOffset12 + 1] = -p3;
		buffer[dOffset21 + 2] = p2;
		buffer[dOffset3 + 1] = p2;
		p1 = buf2[eOffset3] * b[bOffset + 1] - buf2[eOffset3 + 1] * b[bOffset];
		p0 = -buf2[eOffset3] * b[bOffset] - buf2[eOffset3 + 1] * b[bOffset + 1];
		buffer[dOffset02 + 3] = p1;
		buffer[dOffset12] = -p1;
		buffer[dOffset21 + 3] = p0;
		buffer[dOffset3] = p0;
		bOffset -= 8;
		eOffset3 -= 8;
		dOffset02 += 4;
		dOffset21 += 4;
		dOffset12 -= 4;
		dOffset3 -= 4;
	}
};
kha_audio2_ogg_tools_Mdct.step3Iter0Loop = function(n,e,i_off,k_off,a) {
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var aOffset = 0;
	var i = (n >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eeOffset0] - e[eeOffset2];
		var k01_21 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		var _g = eeOffset0;
		var _g1 = e;
		_g1[_g] = _g1[_g] + e[eeOffset2];
		var _g2 = eeOffset0 + (-1);
		var _g11 = e;
		_g11[_g2] = _g11[_g2] + e[eeOffset2 + (-1)];
		e[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k01_21 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		var _g3 = eeOffset0 + (-2);
		var _g12 = e;
		_g12[_g3] = _g12[_g3] + e[eeOffset2 + (-2)];
		var _g4 = eeOffset0 + (-3);
		var _g13 = e;
		_g13[_g4] = _g13[_g4] + e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k01_21 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		var _g5 = eeOffset0 + (-4);
		var _g14 = e;
		_g14[_g5] = _g14[_g5] + e[eeOffset2 + (-4)];
		var _g6 = eeOffset0 + (-5);
		var _g15 = e;
		_g15[_g6] = _g15[_g6] + e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k01_21 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		var _g7 = eeOffset0 + (-6);
		var _g16 = e;
		_g16[_g7] = _g16[_g7] + e[eeOffset2 + (-6)];
		var _g8 = eeOffset0 + (-7);
		var _g17 = e;
		_g17[_g8] = _g17[_g8] + e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerRLoop = function(lim,e,d0,k_off,a,k1) {
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + k_off;
	var i = (lim >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eOffset0] - e[eOffset2];
		var k01_21 = e[eOffset0 + (-1)] - e[eOffset2 + (-1)];
		var _g = eOffset0;
		var _g1 = e;
		_g1[_g] = _g1[_g] + e[eOffset2];
		var _g2 = eOffset0 + (-1);
		var _g11 = e;
		_g11[_g2] = _g11[_g2] + e[eOffset2 + (-1)];
		e[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-2)] - e[eOffset2 + (-2)];
		k01_21 = e[eOffset0 + (-3)] - e[eOffset2 + (-3)];
		var _g3 = eOffset0 + (-2);
		var _g12 = e;
		_g12[_g3] = _g12[_g3] + e[eOffset2 + (-2)];
		var _g4 = eOffset0 + (-3);
		var _g13 = e;
		_g13[_g4] = _g13[_g4] + e[eOffset2 + (-3)];
		e[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-4)] - e[eOffset2 + (-4)];
		k01_21 = e[eOffset0 + (-5)] - e[eOffset2 + (-5)];
		var _g5 = eOffset0 + (-4);
		var _g14 = e;
		_g14[_g5] = _g14[_g5] + e[eOffset2 + (-4)];
		var _g6 = eOffset0 + (-5);
		var _g15 = e;
		_g15[_g6] = _g15[_g6] + e[eOffset2 + (-5)];
		e[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-6)] - e[eOffset2 + (-6)];
		k01_21 = e[eOffset0 + (-7)] - e[eOffset2 + (-7)];
		var _g7 = eOffset0 + (-6);
		var _g16 = e;
		_g16[_g7] = _g16[_g7] + e[eOffset2 + (-6)];
		var _g8 = eOffset0 + (-7);
		var _g17 = e;
		_g17[_g8] = _g17[_g8] + e[eOffset2 + (-7)];
		e[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += k1;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoop = function(n,e,i_off,k_off,a,aOffset0,aOffset1,k0) {
	var A0 = a[aOffset0];
	var A1 = a[aOffset0 + 1];
	var A2 = a[aOffset0 + aOffset1];
	var A3 = a[aOffset0 + aOffset1 + 1];
	var A4 = a[aOffset0 + aOffset1 * 2];
	var A5 = a[aOffset0 + aOffset1 * 2 + 1];
	var A6 = a[aOffset0 + aOffset1 * 3];
	var A7 = a[aOffset0 + aOffset1 * 3 + 1];
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var i = n + 1;
	while(--i > 0) {
		var k00 = e[eeOffset0] - e[eeOffset2];
		var k11 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		e[eeOffset0] = e[eeOffset0] + e[eeOffset2];
		e[eeOffset0 + (-1)] = e[eeOffset0 + (-1)] + e[eeOffset2 + (-1)];
		e[eeOffset2] = k00 * A0 - k11 * A1;
		e[eeOffset2 + (-1)] = k11 * A0 + k00 * A1;
		k00 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k11 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		e[eeOffset0 + (-2)] = e[eeOffset0 + (-2)] + e[eeOffset2 + (-2)];
		e[eeOffset0 + (-3)] = e[eeOffset0 + (-3)] + e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00 * A2 - k11 * A3;
		e[eeOffset2 + (-3)] = k11 * A2 + k00 * A3;
		k00 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k11 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		e[eeOffset0 + (-4)] = e[eeOffset0 + (-4)] + e[eeOffset2 + (-4)];
		e[eeOffset0 + (-5)] = e[eeOffset0 + (-5)] + e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00 * A4 - k11 * A5;
		e[eeOffset2 + (-5)] = k11 * A4 + k00 * A5;
		k00 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k11 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		e[eeOffset0 + (-6)] = e[eeOffset0 + (-6)] + e[eeOffset2 + (-6)];
		e[eeOffset0 + (-7)] = e[eeOffset0 + (-7)] + e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00 * A6 - k11 * A7;
		e[eeOffset2 + (-7)] = k11 * A6 + k00 * A7;
		eeOffset0 -= k0;
		eeOffset2 -= k0;
	}
};
kha_audio2_ogg_tools_Mdct.iter54 = function(e,zOffset) {
	var t0 = e[zOffset];
	var t1 = e[zOffset + (-4)];
	var k00 = t0 - t1;
	var y0 = t0 + t1;
	t0 = e[zOffset + (-2)];
	t1 = e[zOffset + (-6)];
	var y2 = t0 + t1;
	var k22 = t0 - t1;
	e[zOffset] = y0 + y2;
	e[zOffset + (-2)] = y0 - y2;
	var k33 = e[zOffset + (-3)] - e[zOffset + (-7)];
	e[zOffset + (-4)] = k00 + k33;
	e[zOffset + (-6)] = k00 - k33;
	t0 = e[zOffset + (-1)];
	t1 = e[zOffset + (-5)];
	var k11 = t0 - t1;
	var y1 = t0 + t1;
	var y3 = e[zOffset + (-3)] + e[zOffset + (-7)];
	e[zOffset + (-1)] = y1 + y3;
	e[zOffset + (-3)] = y1 - y3;
	e[zOffset + (-5)] = k11 - k22;
	e[zOffset + (-7)] = k11 + k22;
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoopLd654 = function(n,e,i_off,a,baseN) {
	var A2 = a[baseN >> 3];
	var zOffset = i_off;
	var baseOffset = i_off - 16 * n;
	while(zOffset > baseOffset) {
		var t0 = e[zOffset];
		var t1 = e[zOffset + (-8)];
		e[zOffset + (-8)] = t0 - t1;
		e[zOffset] = t0 + t1;
		t0 = e[zOffset + (-1)];
		t1 = e[zOffset + (-9)];
		e[zOffset + (-9)] = t0 - t1;
		e[zOffset + (-1)] = t0 + t1;
		t0 = e[zOffset + (-2)];
		t1 = e[zOffset + (-10)];
		var k00 = t0 - t1;
		e[zOffset + (-2)] = t0 + t1;
		t0 = e[zOffset + (-3)];
		t1 = e[zOffset + (-11)];
		var k11 = t0 - t1;
		e[zOffset + (-3)] = t0 + t1;
		e[zOffset + (-10)] = (k00 + k11) * A2;
		e[zOffset + (-11)] = (k11 - k00) * A2;
		t0 = e[zOffset + (-4)];
		t1 = e[zOffset + (-12)];
		k00 = t1 - t0;
		e[zOffset + (-4)] = t0 + t1;
		t0 = e[zOffset + (-5)];
		t1 = e[zOffset + (-13)];
		k11 = t0 - t1;
		e[zOffset + (-5)] = t0 + t1;
		e[zOffset + (-12)] = k11;
		e[zOffset + (-13)] = k00;
		t0 = e[zOffset + (-6)];
		t1 = e[zOffset + (-14)];
		k00 = t1 - t0;
		e[zOffset + (-6)] = t0 + t1;
		t0 = e[zOffset + (-7)];
		t1 = e[zOffset + (-15)];
		k11 = t0 - t1;
		e[zOffset + (-7)] = t0 + t1;
		e[zOffset + (-14)] = (k00 + k11) * A2;
		e[zOffset + (-15)] = (k00 - k11) * A2;
		kha_audio2_ogg_tools_Mdct.iter54(e,zOffset);
		kha_audio2_ogg_tools_Mdct.iter54(e,zOffset - 8);
		zOffset -= 16;
	}
};
var kha_audio2_ogg_vorbis_Reader = function(input,seekFunc,inputLength) {
	this.seekFunc = seekFunc;
	this.inputLength = inputLength;
	this.decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	this.decoder.setupSampleNumber(seekFunc,inputLength);
	this.loopStart = this.get_header().comment.get_loopStart();
	this.loopLength = this.get_header().comment.get_loopLength();
};
$hxClasses["kha.audio2.ogg.vorbis.Reader"] = kha_audio2_ogg_vorbis_Reader;
kha_audio2_ogg_vorbis_Reader.__name__ = "kha.audio2.ogg.vorbis.Reader";
kha_audio2_ogg_vorbis_Reader.openFromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	var bytes1 = input;
	return new kha_audio2_ogg_vorbis_Reader(input,function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
};
kha_audio2_ogg_vorbis_Reader.seekBytes = function(bytes,pos) {
	bytes.set_position(pos);
};
kha_audio2_ogg_vorbis_Reader.readAll = function(bytes,output,useFloat) {
	if(useFloat == null) {
		useFloat = false;
	}
	var input = new haxe_io_BytesInput(bytes);
	var decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	var bytes1 = input;
	decoder.setupSampleNumber(function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
	var header = decoder.header;
	var count = 0;
	var bufferSize = 4096;
	var this1 = new Float32Array(bufferSize * header.channel);
	var buffer = this1;
	while(true) {
		var n = decoder.read(buffer,bufferSize,header.channel,header.sampleRate,useFloat);
		var _g = 0;
		var _g1 = n * header.channel;
		while(_g < _g1) {
			var i = _g++;
			output.writeFloat(buffer[i]);
		}
		if(n == 0) {
			break;
		}
		count += n;
	}
	return decoder.header;
};
kha_audio2_ogg_vorbis_Reader.prototype = {
	decoder: null
	,get_header: function() {
		return this.decoder.header;
	}
	,get_totalSample: function() {
		return this.decoder.totalSample;
	}
	,get_totalMillisecond: function() {
		return this.sampleToMillisecond(this.decoder.totalSample);
	}
	,get_currentSample: function() {
		return this.decoder.currentSample;
	}
	,set_currentSample: function(value) {
		this.decoder.seek(this.seekFunc,this.inputLength,value);
		return this.decoder.currentSample;
	}
	,get_currentMillisecond: function() {
		return this.sampleToMillisecond(this.get_currentSample());
	}
	,set_currentMillisecond: function(value) {
		this.set_currentSample(this.millisecondToSample(value));
		return this.get_currentMillisecond();
	}
	,loopStart: null
	,loopLength: null
	,seekFunc: null
	,inputLength: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if(useFloat == null) {
			useFloat = false;
		}
		this.decoder.ensurePosition(this.seekFunc);
		if(samples == null) {
			samples = this.decoder.totalSample;
		}
		if(channels == null) {
			channels = this.get_header().channel;
		}
		if(sampleRate == null) {
			sampleRate = this.get_header().sampleRate;
		}
		return this.decoder.read(output,samples,channels,sampleRate,useFloat);
	}
	,clone: function() {
		var reader = Type.createEmptyInstance(kha_audio2_ogg_vorbis_Reader);
		reader.seekFunc = this.seekFunc;
		reader.inputLength = this.inputLength;
		reader.decoder = this.decoder.clone(this.seekFunc);
		reader.loopStart = this.loopStart;
		reader.loopLength = this.loopLength;
		return reader;
	}
	,sampleToMillisecond: function(samples) {
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,millisecondToSample: function(millseconds) {
		return Math.floor(_$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * (millseconds / 1000));
	}
	,__class__: kha_audio2_ogg_vorbis_Reader
	,__properties__: {set_currentMillisecond:"set_currentMillisecond",get_currentMillisecond:"get_currentMillisecond",set_currentSample:"set_currentSample",get_currentSample:"get_currentSample",get_totalMillisecond:"get_totalMillisecond",get_totalSample:"get_totalSample",get_header:"get_header"}
};
var kha_audio2_ogg_vorbis_VorbisDecodeState = function(input) {
	this.nextSeg = 0;
	this.firstDecode = false;
	this.bytesInSeg = 0;
	this.validBits = 0;
	this.input = input;
	this.inputPosition = 0;
	this.page = new kha_audio2_ogg_vorbis_data_Page();
	kha_audio2_ogg_tools_Crc32.init();
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecodeState"] = kha_audio2_ogg_vorbis_VorbisDecodeState;
kha_audio2_ogg_vorbis_VorbisDecodeState.__name__ = "kha.audio2.ogg.vorbis.VorbisDecodeState";
kha_audio2_ogg_vorbis_VorbisDecodeState.prototype = {
	page: null
	,eof: null
	,pFirst: null
	,pLast: null
	,validBits: null
	,inputPosition: null
	,input: null
	,discardSamplesDeferred: null
	,segments: null
	,bytesInSeg: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,currentSample: null
	,previousWindow: null
	,previousLength: null
	,finalY: null
	,firstDecode: null
	,nextSeg: null
	,acc: null
	,lastSeg: null
	,lastSegWhich: null
	,endSegWithKnownLoc: null
	,knownLocForPacket: null
	,error: null
	,currentLoc: null
	,currentLocValid: null
	,firstAudioPageOffset: null
	,setup: function(loc0,loc1) {
		var segmentCount = this.readByte();
		this.segments = this.read(segmentCount);
		this.endSegWithKnownLoc = -2;
		if(loc0 != -1 || loc1 != -1) {
			var i = segmentCount - 1;
			while(i >= 0) {
				if(this.segments[i] < 255) {
					break;
				}
				if(i >= 0) {
					this.endSegWithKnownLoc = i;
					this.knownLocForPacket = loc0;
				}
				--i;
			}
		}
		if(this.firstDecode) {
			var i1 = 0;
			var len = 0;
			var p = new kha_audio2_ogg_vorbis_data_ProbedPage();
			var _g = 0;
			var _g1 = segmentCount;
			while(_g < _g1) {
				var i2 = _g++;
				len += this.segments[i2];
			}
			len += 27 + segmentCount;
			p.pageStart = this.firstAudioPageOffset;
			p.pageEnd = p.pageStart + len;
			p.firstDecodedSample = 0;
			p.lastDecodedSample = loc0;
			this.pFirst = p;
		}
		this.nextSeg = 0;
	}
	,clone: function(seekFunc) {
		var state = Type.createEmptyInstance(kha_audio2_ogg_vorbis_VorbisDecodeState);
		seekFunc(this.inputPosition);
		state.input = this.input;
		state.eof = this.eof;
		state.validBits = this.validBits;
		state.discardSamplesDeferred = this.discardSamplesDeferred;
		state.firstDecode = this.firstDecode;
		state.nextSeg = this.nextSeg;
		state.bytesInSeg = this.bytesInSeg;
		state.acc = state.acc;
		state.lastSeg = this.lastSeg;
		state.lastSegWhich = this.lastSegWhich;
		state.currentLoc = this.currentLoc;
		state.currentLocValid = this.currentLocValid;
		state.inputPosition = this.inputPosition;
		state.firstAudioPageOffset = this.firstAudioPageOffset;
		state.error = this.error;
		state.segments = this.segments;
		state.pFirst = this.pFirst;
		state.pLast = this.pLast;
		state.page = this.page.clone();
		return state;
	}
	,next: function() {
		if(this.lastSeg) {
			return 0;
		}
		if(this.nextSeg == -1) {
			this.lastSegWhich = this.segments.length - 1;
			try {
				this.page.start(this);
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(((e1) instanceof kha_audio2_ogg_vorbis_data_ReaderError)) {
					this.lastSeg = true;
					this.error = e1;
					return 0;
				} else {
					throw e;
				}
			}
			if((this.page.flag & 1) == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 171, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
			}
		}
		var len = this.segments[this.nextSeg++];
		if(len < 255) {
			this.lastSeg = true;
			this.lastSegWhich = this.nextSeg - 1;
		}
		if(this.nextSeg >= this.segments.length) {
			this.nextSeg = -1;
		}
		kha_audio2_ogg_vorbis_VorbisTools.assert(this.bytesInSeg == 0,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 184, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"});
		this.bytesInSeg = len;
		return len;
	}
	,startPacket: function() {
		while(this.nextSeg == -1) {
			this.page.start(this);
			if((this.page.flag & 1) != 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 193, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "startPacket"}));
			}
		}
		this.lastSeg = false;
		this.validBits = 0;
		this.bytesInSeg = 0;
	}
	,maybeStartPacket: function() {
		if(this.nextSeg == -1) {
			var eof = false;
			var x;
			try {
				x = this.readByte();
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(((e1) instanceof haxe_io_Eof)) {
					var e2 = e1;
					eof = true;
					x = 0;
				} else {
					throw e;
				}
			}
			if(eof) {
				return false;
			}
			if(x != 79 || this.readByte() != 103 || this.readByte() != 103 || this.readByte() != 83) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 218, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "maybeStartPacket"}));
			}
			this.page.startWithoutCapturePattern(this);
		}
		this.startPacket();
		return true;
	}
	,readBits: function(n) {
		if(this.validBits < 0) {
			return 0;
		} else if(this.validBits < n) {
			if(n > 24) {
				return this.readBits(24) + (this.readBits(n - 24) << 24);
			} else {
				if(this.validBits == 0) {
					this.acc = 0;
				}
				while(true) {
					if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
						this.validBits = -1;
						break;
					} else {
						this.bytesInSeg--;
						this.acc = this.acc + (this.readByte() << this.validBits);
						this.validBits += 8;
					}
					if(!(this.validBits < n)) {
						break;
					}
				}
				if(this.validBits < 0) {
					return 0;
				} else {
					var z = this.acc & (1 << n) - 1;
					this.acc = this.acc >>> n;
					this.validBits -= n;
					return z;
				}
			}
		} else {
			var z1 = this.acc & (1 << n) - 1;
			this.acc = this.acc >>> n;
			this.validBits -= n;
			return z1;
		}
	}
	,readPacketRaw: function() {
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			return -1;
		} else {
			this.bytesInSeg--;
			return this.readByte();
		}
	}
	,readPacket: function() {
		var x = this.readPacketRaw();
		this.validBits = 0;
		return x;
	}
	,flushPacket: function() {
		while(this.bytesInSeg != 0 || !this.lastSeg && this.next() != 0) {
			this.bytesInSeg--;
			this.readByte();
		}
	}
	,vorbisValidate: function() {
		var header = haxe_io_Bytes.alloc(6);
		header.set(0,this.readPacket());
		header.set(1,this.readPacket());
		header.set(2,this.readPacket());
		header.set(3,this.readPacket());
		header.set(4,this.readPacket());
		header.set(5,this.readPacket());
		if(header.toString() != "vorbis") {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
		}
	}
	,firstPageValidate: function() {
		if(this.segments.length != 1) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"segmentCount",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 308, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
		if(this.segments[0] != 30) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 311, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
	}
	,startFirstDecode: function() {
		this.firstAudioPageOffset = this.inputPosition;
		this.firstDecode = true;
	}
	,capturePattern: function() {
		if(this.readByte() != 79 || this.readByte() != 103 || this.readByte() != 103 || this.readByte() != 83) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
	}
	,skip: function(len) {
		this.read(len);
	}
	,prepHuffman: function() {
		if(this.validBits <= 24) {
			if(this.validBits == 0) {
				this.acc = 0;
			}
			while(true) {
				if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
					return;
				} else {
					this.bytesInSeg--;
					this.acc = this.acc + (this.readByte() << this.validBits);
					this.validBits += 8;
				}
				if(!(this.validBits <= 24)) {
					break;
				}
			}
		}
	}
	,decode: function(c) {
		var val = this.decodeRaw(c);
		if(c.sparse) {
			val = c.sortedValues[val];
		}
		return val;
	}
	,decodeRaw: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				return -1;
			} else {
				return i;
			}
		} else {
			return this.decodeScalarRaw(c);
		}
	}
	,isLastByte: function() {
		if(this.bytesInSeg == 0) {
			return this.lastSeg;
		} else {
			return false;
		}
	}
	,finishDecodePacket: function(previousLength,n,r) {
		var left = r.left.start;
		var currentLocValid = false;
		var n2 = n >> 1;
		if(this.firstDecode) {
			this.currentLoc = -n2;
			this.discardSamplesDeferred = n - r.right.end;
			currentLocValid = true;
			this.firstDecode = false;
		} else if(this.discardSamplesDeferred != 0) {
			r.left.start += this.discardSamplesDeferred;
			left = r.left.start;
			this.discardSamplesDeferred = 0;
		} else {
			var tmp = previousLength == 0 && currentLocValid;
		}
		if(this.lastSegWhich == this.endSegWithKnownLoc) {
			if(currentLocValid && (this.page.flag & 4) != 0) {
				var currentEnd = this.knownLocForPacket - (n - r.right.end);
				if(currentEnd < this.currentLoc + r.right.end) {
					var len = currentEnd < this.currentLoc ? 0 : currentEnd - this.currentLoc;
					len += r.left.start;
					this.currentLoc += len;
					return { len : len, left : left, right : r.right.start};
				}
			}
			this.currentLoc = this.knownLocForPacket - (n2 - r.left.start);
			currentLocValid = true;
		}
		if(currentLocValid) {
			this.currentLoc += r.right.start - r.left.start;
		}
		return { len : r.right.end, left : left, right : r.right.start};
	}
	,readInt32: function() {
		this.inputPosition += 4;
		return this.input.readInt32();
	}
	,readByte: function() {
		this.inputPosition += 1;
		return this.input.readByte();
	}
	,read: function(n) {
		this.inputPosition += n;
		var this1 = new Array(n);
		var vec = this1;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		return vec;
	}
	,readBytes: function(n) {
		this.inputPosition += n;
		return this.input.read(n);
	}
	,readString: function(n) {
		this.inputPosition += n;
		return this.input.readString(n);
	}
	,getSampleNumber: function(seekFunc,inputLength) {
		var restoreOffset = this.inputPosition;
		var previousSafe = _$UInt_UInt_$Impl_$.gte(inputLength,65536) && _$UInt_UInt_$Impl_$.gte(inputLength - 65536,this.firstAudioPageOffset) ? inputLength - 65536 : this.firstAudioPageOffset;
		this.setInputOffset(seekFunc,previousSafe);
		var end = 0;
		var last = false;
		var _g = this.findPage(seekFunc,inputLength);
		switch(_g._hx_index) {
		case 0:
			var l = _g.last;
			var e = _g.end;
			end = e;
			last = l;
			break;
		case 1:
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		var lastPageLoc = this.inputPosition;
		_hx_loop1: while(!last) {
			this.setInputOffset(seekFunc,end);
			var _g3 = this.findPage(seekFunc,inputLength);
			switch(_g3._hx_index) {
			case 0:
				var l1 = _g3.last;
				var e1 = _g3.end;
				end = e1;
				last = l1;
				break;
			case 1:
				break _hx_loop1;
			}
			previousSafe = lastPageLoc + 1;
			lastPageLoc = this.inputPosition;
		}
		this.setInputOffset(seekFunc,lastPageLoc);
		var vorbisHeader = this.read(6);
		var lo = this.readInt32();
		var hi = this.readInt32();
		if(lo == -1 && hi == -1 || hi > 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 553, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		this.pLast = new kha_audio2_ogg_vorbis_data_ProbedPage();
		this.pLast.pageStart = lastPageLoc;
		this.pLast.pageEnd = end;
		this.pLast.lastDecodedSample = lo;
		this.pLast.firstDecodedSample = null;
		this.pLast.afterPreviousPageStart = previousSafe;
		this.setInputOffset(seekFunc,restoreOffset);
		return lo;
	}
	,forcePageResync: function() {
		this.nextSeg = -1;
	}
	,setInputOffset: function(seekFunc,n) {
		seekFunc(this.inputPosition = n);
	}
	,findPage: function(seekFunc,inputLength) {
		try {
			while(true) {
				var n = this.readByte();
				if(n == 79) {
					var retryLoc = this.inputPosition;
					if(retryLoc - 25 > inputLength) {
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
					}
					if(this.readByte() != 103 || this.readByte() != 103 || this.readByte() != 83) {
						continue;
					}
					var this1 = new Array(27);
					var header = this1;
					header[0] = 79;
					header[1] = 103;
					header[2] = 103;
					header[3] = 83;
					header[4] = this.readByte();
					header[5] = this.readByte();
					header[6] = this.readByte();
					header[7] = this.readByte();
					header[8] = this.readByte();
					header[9] = this.readByte();
					header[10] = this.readByte();
					header[11] = this.readByte();
					header[12] = this.readByte();
					header[13] = this.readByte();
					header[14] = this.readByte();
					header[15] = this.readByte();
					header[16] = this.readByte();
					header[17] = this.readByte();
					header[18] = this.readByte();
					header[19] = this.readByte();
					header[20] = this.readByte();
					header[21] = this.readByte();
					header[22] = this.readByte();
					header[23] = this.readByte();
					header[24] = this.readByte();
					header[25] = this.readByte();
					header[26] = this.readByte();
					if(header[4] != 0) {
						this.setInputOffset(seekFunc,retryLoc);
						continue;
					}
					var goal = header[22] + (header[23] << 8) + (header[24] << 16) + (header[25] << 24);
					header[22] = 0;
					header[23] = 0;
					header[24] = 0;
					header[25] = 0;
					var crc = 0;
					var _g = 0;
					while(_g < 27) {
						var i = _g++;
						crc = kha_audio2_ogg_tools_Crc32.update(crc,header[i]);
					}
					var len = 0;
					try {
						var _g1 = 0;
						var _g2 = header[26];
						while(_g1 < _g2) {
							var i1 = _g1++;
							var s = this.readByte();
							crc = kha_audio2_ogg_tools_Crc32.update(crc,s);
							len += s;
						}
						var _g3 = 0;
						var _g4 = len;
						while(_g3 < _g4) {
							var i2 = _g3++;
							crc = kha_audio2_ogg_tools_Crc32.update(crc,this.readByte());
						}
					} catch( e ) {
						var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
						if(((e1) instanceof haxe_io_Eof)) {
							var e2 = e1;
							return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
						} else {
							throw e;
						}
					}
					if(crc == goal) {
						var end = this.inputPosition;
						this.setInputOffset(seekFunc,retryLoc - 1);
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found(end,(header[5] & 4) != 0);
					}
				}
			}
		} catch( e3 ) {
			var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if(((e4) instanceof haxe_io_Eof)) {
				var e5 = e4;
				return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
			} else {
				throw e3;
			}
		}
	}
	,analyzePage: function(seekFunc,h) {
		var z = new kha_audio2_ogg_vorbis_data_ProbedPage();
		var this1 = new Array(255);
		var packetType = this1;
		z.pageStart = this.inputPosition;
		var pageHeader = this.read(27);
		kha_audio2_ogg_vorbis_VorbisTools.assert(pageHeader[0] == 79 && pageHeader[1] == 103 && pageHeader[2] == 103 && pageHeader[3] == 83,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 661, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "analyzePage"});
		var lacing = this.read(pageHeader[26]);
		var len = 0;
		var _g = 0;
		var _g1 = pageHeader[26];
		while(_g < _g1) {
			var i = _g++;
			len += lacing[i];
		}
		z.pageEnd = z.pageStart + 27 + pageHeader[26] + len;
		z.lastDecodedSample = pageHeader[6] + (pageHeader[7] << 8) + (pageHeader[8] << 16) + (pageHeader[9] << 16);
		if((pageHeader[5] & 4) != 0) {
			z.firstDecodedSample = null;
			this.setInputOffset(seekFunc,z.pageStart);
			return z;
		}
		var numPacket = 0;
		var packetStart = (pageHeader[5] & 1) == 0;
		var modeCount = h.modes.length;
		var _g2 = 0;
		var _g3 = pageHeader[26];
		while(_g2 < _g3) {
			var i1 = _g2++;
			if(packetStart) {
				if(lacing[i1] == 0) {
					this.setInputOffset(seekFunc,z.pageStart);
					return null;
				}
				var n = this.readByte();
				if((n & 1) != 0) {
					this.setInputOffset(seekFunc,z.pageStart);
					return null;
				}
				n >>= 1;
				var b = kha_audio2_ogg_tools_MathTools.ilog(modeCount - 1);
				n &= (1 << b) - 1;
				if(n >= modeCount) {
					this.setInputOffset(seekFunc,z.pageStart);
					return null;
				}
				packetType[numPacket++] = h.modes[n].blockflag;
				this.skip(lacing[i1] - 1);
			} else {
				this.skip(lacing[i1]);
			}
			packetStart = lacing[i1] < 255;
		}
		var samples = 0;
		if(numPacket > 1) {
			samples += packetType[numPacket - 1] ? h.blocksize1 : h.blocksize0;
		}
		var i2 = numPacket - 2;
		while(i2 >= 1) {
			--i2;
			if(packetType[i2]) {
				if(packetType[i2 + 1]) {
					samples += h.blocksize1 >> 1;
				} else {
					samples += (h.blocksize1 - h.blocksize0 >> 2) + (h.blocksize0 >> 1);
				}
			} else {
				samples += h.blocksize0 >> 1;
			}
			--i2;
		}
		z.firstDecodedSample = z.lastDecodedSample - samples;
		this.setInputOffset(seekFunc,z.pageStart);
		return z;
	}
	,decodeScalarRaw: function(c) {
		this.prepHuffman();
		kha_audio2_ogg_vorbis_VorbisTools.assert(c.sortedCodewords != null || c.codewords != null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 788, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		var codewordLengths = c.codewordLengths;
		var codewords = c.codewords;
		var sortedCodewords = c.sortedCodewords;
		if(c.entries > 8 ? sortedCodewords != null : codewords != null) {
			var code = kha_audio2_ogg_vorbis_VorbisTools.bitReverse(this.acc);
			var x = 0;
			var n = c.sortedEntries;
			while(n > 1) {
				var m = x + (n >> 1);
				if(_$UInt_UInt_$Impl_$.gte(code,sortedCodewords[m])) {
					x = m;
					n -= n >> 1;
				} else {
					n >>= 1;
				}
			}
			if(!c.sparse) {
				x = c.sortedValues[x];
			}
			var len = codewordLengths[x];
			if(this.validBits >= len) {
				this.acc = this.acc >>> len;
				this.validBits -= len;
				return x;
			}
			this.validBits = 0;
			return -1;
		}
		kha_audio2_ogg_vorbis_VorbisTools.assert(!c.sparse,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 830, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var i = _g++;
			var cl = codewordLengths[i];
			if(cl == 255) {
				continue;
			}
			if(codewords[i] == (this.acc & (1 << cl) - 1)) {
				if(this.validBits >= cl) {
					this.acc = this.acc >>> cl;
					this.validBits -= cl;
					return i;
				}
				this.validBits = 0;
				return -1;
			}
		}
		this.error = new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 847, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		this.validBits = 0;
		return -1;
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecodeState
};
var kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult = $hxEnums["kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult"] = { __ename__ : true, __constructs__ : ["Found","NotFound"]
	,Found: ($_=function(end,last) { return {_hx_index:0,end:end,last:last,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}; },$_.__params__ = ["end","last"],$_)
	,NotFound: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}
};
var kha_audio2_ogg_vorbis_VorbisDecoder = function(header,decodeState) {
	this.header = header;
	this.decodeState = decodeState;
	this.totalSample = null;
	this.currentSample = 0;
	this.previousLength = 0;
	var this1 = new Array(header.channel);
	this.channelBuffers = this1;
	var this2 = new Array(header.channel);
	this.previousWindow = this2;
	var this3 = new Array(header.channel);
	this.finalY = this3;
	var _g = 0;
	var _g1 = header.channel;
	while(_g < _g1) {
		var i = _g++;
		this.channelBuffers[i] = kha_audio2_ogg_vorbis_VorbisTools.emptyFloatVector(header.blocksize1);
		this.previousWindow[i] = kha_audio2_ogg_vorbis_VorbisTools.emptyFloatVector(Std.int(header.blocksize1 / 2));
		this.finalY[i] = [];
	}
	var this4 = new Array(2);
	this.a = this4;
	var this5 = new Array(2);
	this.b = this5;
	var this6 = new Array(2);
	this.c = this6;
	var this7 = new Array(2);
	this.window = this7;
	var this8 = new Array(2);
	this.bitReverseData = this8;
	this.initBlocksize(0,header.blocksize0);
	this.initBlocksize(1,header.blocksize1);
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecoder"] = kha_audio2_ogg_vorbis_VorbisDecoder;
kha_audio2_ogg_vorbis_VorbisDecoder.__name__ = "kha.audio2.ogg.vorbis.VorbisDecoder";
kha_audio2_ogg_vorbis_VorbisDecoder.start = function(input) {
	var decodeState = new kha_audio2_ogg_vorbis_VorbisDecodeState(input);
	var header = kha_audio2_ogg_vorbis_data_Header.read(decodeState);
	var decoder = new kha_audio2_ogg_vorbis_VorbisDecoder(header,decodeState);
	decodeState.startFirstDecode();
	decoder.pumpFirstFrame();
	return decoder;
};
kha_audio2_ogg_vorbis_VorbisDecoder.prototype = {
	previousWindow: null
	,previousLength: null
	,finalY: null
	,a: null
	,b: null
	,c: null
	,window: null
	,bitReverseData: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,header: null
	,currentSample: null
	,totalSample: null
	,decodeState: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		var b = this.header.sampleRate;
		if(Std.int(_$UInt_UInt_$Impl_$.toFloat(sampleRate) % _$UInt_UInt_$Impl_$.toFloat(b)) != 0) {
			var this1 = this.header.sampleRate;
			throw new js__$Boot_HaxeError("Unsupported sampleRate : can't convert " + Std.string(this1 == null ? null : _$UInt_UInt_$Impl_$.toFloat(this1)) + " to " + sampleRate);
		}
		if(channels % this.header.channel != 0) {
			throw new js__$Boot_HaxeError("Unsupported channels : can't convert " + this.header.channel + " to " + channels);
		}
		var b1 = this.header.sampleRate;
		var sampleRepeat = Std.int(_$UInt_UInt_$Impl_$.toFloat(sampleRate) / _$UInt_UInt_$Impl_$.toFloat(b1));
		var channelRepeat = Std.int(channels / this.header.channel);
		var n = 0;
		var len = Math.floor(samples / sampleRepeat);
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		var index = 0;
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			var _g = this.channelBufferStart;
			var _g1 = this.channelBufferStart + k;
			while(_g < _g1) {
				var j = _g++;
				var _g2 = 0;
				var _g11 = sampleRepeat;
				while(_g2 < _g11) {
					var sr = _g2++;
					var _g3 = 0;
					var _g12 = this.header.channel;
					while(_g3 < _g12) {
						var i = _g3++;
						var _g4 = 0;
						var _g13 = channelRepeat;
						while(_g4 < _g13) {
							var cr = _g4++;
							var value = this.channelBuffers[i][j];
							if(value > 1) {
								value = 1;
							} else if(value < -1) {
								value = -1;
							}
							if(useFloat) {
								output[index] = value;
								++index;
							}
						}
					}
				}
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		var _g5 = n;
		var _g14 = len;
		while(_g5 < _g14) {
			var j1 = _g5++;
			var _g6 = 0;
			var _g15 = sampleRepeat;
			while(_g6 < _g15) {
				var sr1 = _g6++;
				var _g7 = 0;
				var _g16 = this.header.channel;
				while(_g7 < _g16) {
					var i1 = _g7++;
					var _g8 = 0;
					var _g17 = channelRepeat;
					while(_g8 < _g17) {
						var cr1 = _g8++;
						if(useFloat) {
							output[index] = 0;
							++index;
						}
					}
				}
			}
		}
		this.currentSample += len;
		return len * sampleRepeat;
	}
	,skipSamples: function(len) {
		var n = 0;
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		this.currentSample += len;
		return len;
	}
	,setupSampleNumber: function(seekFunc,inputLength) {
		if(this.totalSample == null) {
			this.totalSample = this.decodeState.getSampleNumber(seekFunc,inputLength);
		}
	}
	,seek: function(seekFunc,inputLength,sampleNumber) {
		if(this.currentSample == sampleNumber) {
			return;
		}
		if(this.totalSample == null) {
			this.setupSampleNumber(seekFunc,inputLength);
			if(this.totalSample == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 187, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
		if(sampleNumber < 0) {
			sampleNumber = 0;
		}
		var p0 = this.decodeState.pFirst;
		var p1 = this.decodeState.pLast;
		if(sampleNumber >= p1.lastDecodedSample) {
			sampleNumber = p1.lastDecodedSample - 1;
		}
		if(sampleNumber < p0.lastDecodedSample) {
			this.seekFrameFromPage(seekFunc,p0.pageStart,0,sampleNumber);
		} else {
			var attempts = 0;
			while(p0.pageEnd < p1.pageStart) {
				var startOffset = p0.pageEnd;
				var endOffset = p1.afterPreviousPageStart;
				var startSample = p0.lastDecodedSample;
				var endSample = p1.lastDecodedSample;
				if(startSample == null || endSample == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 219, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				if(_$UInt_UInt_$Impl_$.gt(endOffset,startOffset + 4000)) {
					endOffset = endOffset - 4000;
				}
				var probe = startOffset + Math.floor(_$UInt_UInt_$Impl_$.toFloat(endOffset - startOffset) / _$UInt_UInt_$Impl_$.toFloat(endSample - startSample) * (sampleNumber - startSample));
				if(attempts >= 4) {
					var probe2 = startOffset + (endOffset - startOffset >>> 1);
					probe = attempts >= 8 ? probe2 : _$UInt_UInt_$Impl_$.gt(probe2,probe) ? probe + (probe2 - probe >>> 1) : probe2 + (probe - probe2 >>> 1);
				}
				++attempts;
				this.decodeState.setInputOffset(seekFunc,probe);
				var _g = this.decodeState.findPage(seekFunc,inputLength);
				switch(_g._hx_index) {
				case 0:
					var _g2 = _g.last;
					var _g1 = _g.end;
					break;
				case 1:
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 249, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				var q = this.decodeState.analyzePage(seekFunc,this.header);
				if(q == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 255, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				q.afterPreviousPageStart = probe;
				if(q.pageStart == p1.pageStart) {
					p1 = q;
					continue;
				}
				if(sampleNumber < q.lastDecodedSample) {
					p1 = q;
				} else {
					p0 = q;
				}
			}
			if(p0.lastDecodedSample <= sampleNumber && sampleNumber < p1.lastDecodedSample) {
				this.seekFrameFromPage(seekFunc,p1.pageStart,p0.lastDecodedSample,sampleNumber);
			} else {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 275, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
	}
	,seekFrameFromPage: function(seekFunc,pageStart,firstSample,targetSample) {
		var frame = 0;
		var frameStart = firstSample;
		this.decodeState.setInputOffset(seekFunc,pageStart);
		this.decodeState.forcePageResync();
		var leftEnd = 0;
		var leftStart = 0;
		var prevState = null;
		var lastState = null;
		while(true) {
			prevState = lastState;
			lastState = this.decodeState.clone(seekFunc);
			var initialResult = this.decodeInitial();
			if(initialResult == null) {
				lastState = prevState;
				break;
			}
			leftStart = initialResult.left.start;
			leftEnd = initialResult.left.end;
			var start = frame == 0 ? leftEnd : leftStart;
			if(targetSample < frameStart + initialResult.right.start - start) {
				break;
			}
			this.decodeState.flushPacket();
			frameStart += initialResult.right.start - start;
			++frame;
		}
		this.decodeState = lastState;
		seekFunc(this.decodeState.inputPosition);
		this.previousLength = 0;
		this.pumpFirstFrame();
		this.currentSample = frameStart;
		this.skipSamples(targetSample - frameStart);
	}
	,clone: function(seekFunc) {
		var decoder = Type.createEmptyInstance(kha_audio2_ogg_vorbis_VorbisDecoder);
		decoder.currentSample = this.currentSample;
		decoder.totalSample = this.totalSample;
		decoder.previousLength = this.previousLength;
		decoder.channelBufferStart = this.channelBufferStart;
		decoder.channelBufferEnd = this.channelBufferEnd;
		decoder.a = this.a;
		decoder.b = this.b;
		decoder.c = this.c;
		decoder.window = this.window;
		decoder.bitReverseData = this.bitReverseData;
		decoder.header = this.header;
		decoder.decodeState = this.decodeState.clone(seekFunc);
		var this1 = new Array(this.header.channel);
		decoder.channelBuffers = this1;
		var this2 = new Array(this.header.channel);
		decoder.previousWindow = this2;
		var this3 = new Array(this.header.channel);
		decoder.finalY = this3;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			decoder.channelBuffers[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.channelBuffers[i]);
			decoder.previousWindow[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.previousWindow[i]);
			decoder.finalY[i] = Lambda.array(this.finalY[i]);
		}
		return decoder;
	}
	,ensurePosition: function(seekFunc) {
		seekFunc(this.decodeState.inputPosition);
	}
	,getFrameFloat: function() {
		var result = this.decodePacket();
		if(result == null) {
			this.channelBufferStart = this.channelBufferEnd = 0;
			return 0;
		}
		var len = this.finishFrame(result);
		this.channelBufferStart = result.left;
		this.channelBufferEnd = result.left + len;
		return len;
	}
	,pumpFirstFrame: function() {
		this.finishFrame(this.decodePacket());
	}
	,finishFrame: function(r) {
		var len = r.len;
		var right = r.right;
		var left = r.left;
		if(this.previousLength != 0) {
			var n = this.previousLength;
			var w = this.getWindow(n);
			var _g = 0;
			var _g1 = this.header.channel;
			while(_g < _g1) {
				var i = _g++;
				var cb = this.channelBuffers[i];
				var pw = this.previousWindow[i];
				var _g2 = 0;
				var _g11 = n;
				while(_g2 < _g11) {
					var j = _g2++;
					cb[left + j] = cb[left + j] * w[j] + pw[j] * w[n - 1 - j];
				}
			}
		}
		var prev = this.previousLength;
		this.previousLength = len - right;
		var _g3 = 0;
		var _g12 = this.header.channel;
		while(_g3 < _g12) {
			var i1 = _g3++;
			var pw1 = this.previousWindow[i1];
			var cb1 = this.channelBuffers[i1];
			var _g4 = 0;
			var _g13 = len - right;
			while(_g4 < _g13) {
				var j1 = _g4++;
				pw1[j1] = cb1[right + j1];
			}
		}
		if(prev == 0) {
			return 0;
		}
		if(len < right) {
			right = len;
		}
		return right - left;
	}
	,getWindow: function(len) {
		len <<= 1;
		if(len == this.header.blocksize0) {
			return this.window[0];
		} else if(len == this.header.blocksize1) {
			return this.window[1];
		} else {
			kha_audio2_ogg_vorbis_VorbisTools.assert(false,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 466, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "getWindow"});
			return null;
		}
	}
	,initBlocksize: function(bs,n) {
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = this.a;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this3 = this.b;
		var this4 = new Array(n2);
		this3[bs] = this4;
		var this5 = this.c;
		var this6 = new Array(n4);
		this5[bs] = this6;
		var this7 = this.window;
		var this8 = new Array(n2);
		this7[bs] = this8;
		var this9 = this.bitReverseData;
		var this10 = new Array(n8);
		this9[bs] = this10;
		kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors(n,this.a[bs],this.b[bs],this.c[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeWindow(n,this.window[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse(n,this.bitReverseData[bs]);
	}
	,inverseMdct: function(buffer,n,blocktype) {
		var bt = blocktype ? 1 : 0;
		kha_audio2_ogg_tools_Mdct.inverseTransform(buffer,n,this.a[bt],this.b[bt],this.c[bt],this.bitReverseData[bt]);
	}
	,decodePacket: function() {
		var result = this.decodeInitial();
		if(result == null) {
			return null;
		}
		var rest = this.decodePacketRest(result);
		return rest;
	}
	,decodeInitial: function() {
		this.channelBufferStart = this.channelBufferEnd = 0;
		while(true) {
			if(!this.decodeState.maybeStartPacket()) {
				return null;
			}
			if(this.decodeState.readBits(1) != 0) {
				while(-1 != this.decodeState.readPacket()) {
				}
				continue;
			}
			break;
		}
		var i = this.decodeState.readBits(kha_audio2_ogg_tools_MathTools.ilog(this.header.modes.length - 1));
		if(i == -1 || i >= this.header.modes.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodeInitial"}));
		}
		var m = this.header.modes[i];
		var n;
		var prev;
		var next;
		if(m.blockflag) {
			n = this.header.blocksize1;
			prev = this.decodeState.readBits(1);
			next = this.decodeState.readBits(1);
		} else {
			next = 0;
			prev = next;
			n = this.header.blocksize0;
		}
		var windowCenter = n >> 1;
		return { mode : i, left : m.blockflag && prev == 0 ? { start : n - this.header.blocksize0 >> 2, end : n + this.header.blocksize0 >> 2} : { start : 0, end : windowCenter}, right : m.blockflag && next == 0 ? { start : n * 3 - this.header.blocksize0 >> 2, end : n * 3 + this.header.blocksize0 >> 2} : { start : windowCenter, end : n}};
	}
	,decodePacketRest: function(r) {
		var len = 0;
		var m = this.header.modes[r.mode];
		var this1 = new Array(256);
		var zeroChannel = this1;
		var this2 = new Array(256);
		var reallyZeroChannel = this2;
		var n = m.blockflag ? this.header.blocksize1 : this.header.blocksize0;
		var map = this.header.mapping[m.mapping];
		var n2 = n >> 1;
		var rangeList = [256,128,86,64];
		var codebooks = this.header.codebooks;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			var s = map.chan[i].mux;
			zeroChannel[i] = false;
			var floor = this.header.floorConfig[map.submapFloor[s]];
			if(floor.type == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 581, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodePacketRest"}));
			} else {
				var g = floor.floor1;
				if(this.decodeState.readBits(1) != 0) {
					var fy = [];
					var this3 = new Array(256);
					var step2Flag = this3;
					var range = rangeList[g.floor1Multiplier - 1];
					var offset = 2;
					fy = this.finalY[i];
					fy[0] = this.decodeState.readBits(kha_audio2_ogg_tools_MathTools.ilog(range) - 1);
					fy[1] = this.decodeState.readBits(kha_audio2_ogg_tools_MathTools.ilog(range) - 1);
					var _g2 = 0;
					var _g11 = g.partitions;
					while(_g2 < _g11) {
						var j = _g2++;
						var pclass = g.partitionClassList[j];
						var cdim = g.classDimensions[pclass];
						var cbits = g.classSubclasses[pclass];
						var csub = (1 << cbits) - 1;
						var cval = 0;
						if(cbits != 0) {
							var c = codebooks[g.classMasterbooks[pclass]];
							cval = this.decodeState.decode(c);
						}
						var books = g.subclassBooks[pclass];
						var _g3 = 0;
						var _g12 = cdim;
						while(_g3 < _g12) {
							var k = _g3++;
							var book = books[cval & csub];
							cval >>= cbits;
							fy[offset++] = book >= 0 ? this.decodeState.decode(codebooks[book]) : 0;
						}
					}
					if(this.decodeState.validBits == -1) {
						zeroChannel[i] = true;
						continue;
					}
					step2Flag[0] = step2Flag[1] = true;
					var naighbors = g.neighbors;
					var xlist = g.xlist;
					var _g21 = 2;
					var _g31 = g.values;
					while(_g21 < _g31) {
						var j1 = _g21++;
						var low = naighbors[j1][0];
						var high = naighbors[j1][1];
						var lowroom = kha_audio2_ogg_vorbis_VorbisTools.predictPoint(xlist[j1],xlist[low],xlist[high],fy[low],fy[high]);
						var val = fy[j1];
						var highroom = range - lowroom;
						var room = highroom < lowroom ? highroom * 2 : lowroom * 2;
						if(val != 0) {
							step2Flag[low] = step2Flag[high] = true;
							step2Flag[j1] = true;
							if(val >= room) {
								if(highroom > lowroom) {
									fy[j1] = val - lowroom + lowroom;
								} else {
									fy[j1] = lowroom - val + highroom - 1;
								}
							} else if((val & 1) != 0) {
								fy[j1] = lowroom - (val + 1 >> 1);
							} else {
								fy[j1] = lowroom + (val >> 1);
							}
						} else {
							step2Flag[j1] = false;
							fy[j1] = lowroom;
						}
					}
					var _g4 = 0;
					var _g5 = g.values;
					while(_g4 < _g5) {
						var j2 = _g4++;
						if(!step2Flag[j2]) {
							fy[j2] = -1;
						}
					}
				} else {
					zeroChannel[i] = true;
				}
			}
		}
		var _g22 = 0;
		var _g32 = this.header.channel;
		while(_g22 < _g32) {
			var i1 = _g22++;
			reallyZeroChannel[i1] = zeroChannel[i1];
		}
		var _g41 = 0;
		var _g51 = map.couplingSteps;
		while(_g41 < _g51) {
			var i2 = _g41++;
			if(!zeroChannel[map.chan[i2].magnitude] || !zeroChannel[map.chan[i2].angle]) {
				zeroChannel[map.chan[i2].magnitude] = zeroChannel[map.chan[i2].angle] = false;
			}
		}
		var _g6 = 0;
		var _g7 = map.submaps;
		while(_g6 < _g7) {
			var i3 = _g6++;
			var this4 = new Array(this.header.channel);
			var residueBuffers = this4;
			var this5 = new Array(256);
			var doNotDecode = this5;
			var ch = 0;
			var _g61 = 0;
			var _g71 = this.header.channel;
			while(_g61 < _g71) {
				var j3 = _g61++;
				if(map.chan[j3].mux == i3) {
					if(zeroChannel[j3]) {
						doNotDecode[ch] = true;
						residueBuffers[ch] = null;
					} else {
						doNotDecode[ch] = false;
						residueBuffers[ch] = this.channelBuffers[j3];
					}
					++ch;
				}
			}
			var r1 = map.submapResidue[i3];
			var residue = this.header.residueConfig[r1];
			residue.decode(this.decodeState,this.header,residueBuffers,ch,n2,doNotDecode,this.channelBuffers);
		}
		var i4 = map.couplingSteps;
		var n21 = n >> 1;
		while(--i4 >= 0) {
			var m1 = this.channelBuffers[map.chan[i4].magnitude];
			var a = this.channelBuffers[map.chan[i4].angle];
			var _g8 = 0;
			var _g9 = n21;
			while(_g8 < _g9) {
				var j4 = _g8++;
				var a2;
				var m2;
				if(m1[j4] > 0) {
					if(a[j4] > 0) {
						m2 = m1[j4];
						a2 = m1[j4] - a[j4];
					} else {
						a2 = m1[j4];
						m2 = m1[j4] + a[j4];
					}
				} else if(a[j4] > 0) {
					m2 = m1[j4];
					a2 = m1[j4] + a[j4];
				} else {
					a2 = m1[j4];
					m2 = m1[j4] - a[j4];
				}
				m1[j4] = m2;
				a[j4] = a2;
			}
		}
		var _g81 = 0;
		var _g91 = this.header.channel;
		while(_g81 < _g91) {
			var i5 = _g81++;
			if(reallyZeroChannel[i5]) {
				var _g82 = 0;
				var _g92 = n21;
				while(_g82 < _g92) {
					var j5 = _g82++;
					this.channelBuffers[i5][j5] = 0;
				}
			} else {
				map.doFloor(this.header.floorConfig,i5,n,this.channelBuffers[i5],this.finalY[i5],null);
			}
		}
		var _g10 = 0;
		var _g111 = this.header.channel;
		while(_g10 < _g111) {
			var i6 = _g10++;
			this.inverseMdct(this.channelBuffers[i6],n,m.blockflag);
		}
		this.decodeState.flushPacket();
		return this.decodeState.finishDecodePacket(this.previousLength,n,r);
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecoder
};
var kha_audio2_ogg_vorbis_VorbisTools = function() { };
$hxClasses["kha.audio2.ogg.vorbis.VorbisTools"] = kha_audio2_ogg_vorbis_VorbisTools;
kha_audio2_ogg_vorbis_VorbisTools.__name__ = "kha.audio2.ogg.vorbis.VorbisTools";
kha_audio2_ogg_vorbis_VorbisTools.assert = function(b,p) {
};
kha_audio2_ogg_vorbis_VorbisTools.neighbors = function(x,n) {
	var low = -1;
	var high = 65536;
	var plow = 0;
	var phigh = 0;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		if(x[i] > low && x[i] < x[n]) {
			plow = i;
			low = x[i];
		}
		if(x[i] < high && x[i] > x[n]) {
			phigh = i;
			high = x[i];
		}
	}
	return { low : plow, high : phigh};
};
kha_audio2_ogg_vorbis_VorbisTools.floatUnpack = function(x) {
	var mantissa = _$UInt_UInt_$Impl_$.toFloat(x & 2097151);
	var sign = x & -2147483648;
	var exp = (x & 2145386496) >>> 21;
	var res = sign != 0 ? -mantissa : mantissa;
	return res * Math.pow(2,exp - 788);
};
kha_audio2_ogg_vorbis_VorbisTools.bitReverse = function(n) {
	n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
	n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
	n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
	n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
	return n >>> 16 | n << 16;
};
kha_audio2_ogg_vorbis_VorbisTools.pointCompare = function(a,b) {
	if(a.x < b.x) {
		return -1;
	} else if(a.x > b.x) {
		return 1;
	} else {
		return 0;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.uintAsc = function(a,b) {
	if(_$UInt_UInt_$Impl_$.gt(b,a)) {
		return -1;
	} else if(a == b) {
		return 0;
	} else {
		return 1;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.lookup1Values = function(entries,dim) {
	var r = Std.int(Math.exp(Math.log(entries) / dim));
	if(Std.int(Math.pow(r + 1,dim)) <= entries) {
		++r;
	}
	kha_audio2_ogg_vorbis_VorbisTools.assert(Math.pow(r + 1,dim) > entries,{ fileName : "kha/audio2/ogg/vorbis/VorbisTools.hx", lineNumber : 155, className : "kha.audio2.ogg.vorbis.VorbisTools", methodName : "lookup1Values"});
	kha_audio2_ogg_vorbis_VorbisTools.assert(Std.int(Math.pow(r,dim)) <= entries,{ fileName : "kha/audio2/ogg/vorbis/VorbisTools.hx", lineNumber : 156, className : "kha.audio2.ogg.vorbis.VorbisTools", methodName : "lookup1Values"});
	return r;
};
kha_audio2_ogg_vorbis_VorbisTools.computeWindow = function(n,$window) {
	var n2 = n >> 1;
	var _g = 0;
	var _g1 = n2;
	while(_g < _g1) {
		var i = _g++;
		$window[i] = Math.sin(1.5707963267948966 * kha_audio2_ogg_vorbis_VorbisTools.square(Math.sin((i + 0.5) / n2 * 0.5 * 3.14159265358979323846264)));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.square = function(f) {
	return f * f;
};
kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse = function(n,rev) {
	var ld = kha_audio2_ogg_tools_MathTools.ilog(n) - 1;
	var n8 = n >> 3;
	var _g = 0;
	var _g1 = n8;
	while(_g < _g1) {
		var i = _g++;
		rev[i] = kha_audio2_ogg_vorbis_VorbisTools.bitReverse(i) >>> 32 - ld + 3 << 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors = function(n,af,bf,cf) {
	var n4 = n >> 2;
	var n8 = n >> 3;
	var k2 = 0;
	var _g = 0;
	var _g1 = n4;
	while(_g < _g1) {
		var k = _g++;
		af[k2] = Math.cos(4 * k * 3.14159265358979323846264 / n);
		af[k2 + 1] = -Math.sin(4 * k * 3.14159265358979323846264 / n);
		bf[k2] = Math.cos((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		bf[k2 + 1] = Math.sin((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		k2 += 2;
	}
	var k21 = 0;
	var _g2 = 0;
	var _g3 = n8;
	while(_g2 < _g3) {
		var k1 = _g2++;
		cf[k21] = Math.cos(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		cf[k21 + 1] = -Math.sin(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		k21 += 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.drawLine = function(output,x0,y0,x1,y1,n) {
	if(kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable == null) {
		var this1 = new Array(32);
		kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable = this1;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var this2 = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable;
			var this3 = new Array(64);
			this2[i] = this3;
			var _g1 = 1;
			while(_g1 < 64) {
				var j = _g1++;
				kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[i][j] = Std.int(i / j);
			}
		}
	}
	var dy = y1 - y0;
	var adx = x1 - x0;
	var ady = dy < 0 ? -dy : dy;
	var base;
	var x = x0;
	var y = y0;
	var err = 0;
	var sy;
	if(adx < 64 && ady < 32) {
		if(dy < 0) {
			base = -kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base - 1;
		} else {
			base = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base + 1;
		}
	} else {
		base = Std.int(dy / adx);
		sy = dy < 0 ? base - 1 : base + 1;
	}
	ady -= (base < 0 ? -base : base) * adx;
	if(x1 > n) {
		x1 = n;
	}
	var _g2 = x;
	var _g11 = output;
	_g11[_g2] = _g11[_g2] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	var _g3 = x + 1;
	var _g12 = x1;
	while(_g3 < _g12) {
		var i1 = _g3++;
		err += ady;
		if(err >= adx) {
			err -= adx;
			y += sy;
		} else {
			y += base;
		}
		var _g4 = i1;
		var _g13 = output;
		_g13[_g4] = _g13[_g4] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	}
};
kha_audio2_ogg_vorbis_VorbisTools.predictPoint = function(x,x0,x1,y0,y1) {
	var dy = y1 - y0;
	var adx = x1 - x0;
	var err = Math.abs(dy) * (x - x0);
	var off = Std.int(err / adx);
	if(dy < 0) {
		return y0 - off;
	} else {
		return y0 + off;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.emptyFloatVector = function(len) {
	var this1 = new Array(len);
	var vec = this1;
	return vec;
};
kha_audio2_ogg_vorbis_VorbisTools.copyVector = function(source) {
	var this1 = new Array(source.length);
	var dest = this1;
	var _g = 0;
	var _g1 = source.length;
	while(_g < _g1) {
		var i = _g++;
		dest[i] = source[i];
	}
	return dest;
};
var kha_audio2_ogg_vorbis_data_Codebook = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Codebook"] = kha_audio2_ogg_vorbis_data_Codebook;
kha_audio2_ogg_vorbis_data_Codebook.__name__ = "kha.audio2.ogg.vorbis.data.Codebook";
kha_audio2_ogg_vorbis_data_Codebook.read = function(decodeState) {
	var c = new kha_audio2_ogg_vorbis_data_Codebook();
	if(decodeState.readBits(8) != 66 || decodeState.readBits(8) != 67 || decodeState.readBits(8) != 86) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 40, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	var x = decodeState.readBits(8);
	c.dimensions = (decodeState.readBits(8) << 8) + x;
	var x1 = decodeState.readBits(8);
	var y = decodeState.readBits(8);
	c.entries = (decodeState.readBits(8) << 16) + (y << 8) + x1;
	var ordered = decodeState.readBits(1);
	c.sparse = ordered != 0 ? false : decodeState.readBits(1) != 0;
	var this1 = new Array(c.entries);
	var lengths = this1;
	if(!c.sparse) {
		c.codewordLengths = lengths;
	}
	var total = 0;
	if(ordered != 0) {
		var currentEntry = 0;
		var currentLength = decodeState.readBits(5) + 1;
		while(currentEntry < c.entries) {
			var limit = c.entries - currentEntry;
			var n = decodeState.readBits(kha_audio2_ogg_tools_MathTools.ilog(limit));
			if(currentEntry + n > c.entries) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook entrys",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				lengths[currentEntry + i] = currentLength;
			}
			currentEntry += n;
			++currentLength;
		}
	} else {
		var _g2 = 0;
		var _g11 = c.entries;
		while(_g2 < _g11) {
			var j = _g2++;
			var present = c.sparse ? decodeState.readBits(1) : 1;
			if(present != 0) {
				lengths[j] = decodeState.readBits(5) + 1;
				++total;
			} else {
				lengths[j] = 255;
			}
		}
	}
	if(c.sparse && total >= c.entries >> 2) {
		c.codewordLengths = lengths;
		c.sparse = false;
	}
	var tmp;
	if(c.sparse) {
		tmp = total;
	} else {
		var sortedCount = 0;
		var _g3 = 0;
		var _g12 = c.entries;
		while(_g3 < _g12) {
			var j1 = _g3++;
			var l = lengths[j1];
			if(l > 10 && l != 255) {
				++sortedCount;
			}
		}
		tmp = sortedCount;
	}
	c.sortedEntries = tmp;
	var values = null;
	if(!c.sparse) {
		var this2 = new Array(c.entries);
		c.codewords = this2;
	} else {
		if(c.sortedEntries != 0) {
			var this3 = new Array(c.sortedEntries);
			c.codewordLengths = this3;
			var this4 = new Array(c.entries);
			c.codewords = this4;
			var this5 = new Array(c.entries);
			values = this5;
		}
		var size = c.entries + 64 * c.sortedEntries;
	}
	if(!c.computeCodewords(lengths,c.entries,values)) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"compute codewords",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 120, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.sortedEntries != 0) {
		c.sortedCodewords = [];
		var this6 = new Array(c.sortedEntries);
		c.sortedValues = this6;
		c.computeSortedHuffman(lengths,values);
	}
	if(c.sparse) {
		values = null;
		c.codewords = null;
		lengths = null;
	}
	c.computeAcceleratedHuffman();
	c.lookupType = decodeState.readBits(4);
	if(c.lookupType > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook lookup type",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 143, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.lookupType > 0) {
		c.minimumValue = kha_audio2_ogg_vorbis_VorbisTools.floatUnpack(decodeState.readBits(32));
		c.deltaValue = kha_audio2_ogg_vorbis_VorbisTools.floatUnpack(decodeState.readBits(32));
		c.valueBits = decodeState.readBits(4) + 1;
		c.sequenceP = decodeState.readBits(1) != 0;
		if(c.lookupType == 1) {
			c.lookupValues = kha_audio2_ogg_vorbis_VorbisTools.lookup1Values(c.entries,c.dimensions);
		} else {
			c.lookupValues = c.entries * c.dimensions;
		}
		var this7 = new Array(c.lookupValues);
		var mults = this7;
		var _g4 = 0;
		var _g13 = c.lookupValues;
		while(_g4 < _g13) {
			var j2 = _g4++;
			var q = decodeState.readBits(c.valueBits);
			if(q == -1) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"fail lookup",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 161, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			mults[j2] = q;
		}
		var this8 = new Array(c.lookupValues);
		c.multiplicands = this8;
		var _g21 = 0;
		var _g31 = c.lookupValues;
		while(_g21 < _g31) {
			var j3 = _g21++;
			c.multiplicands[j3] = mults[j3] * c.deltaValue + c.minimumValue;
		}
		if(c.lookupType == 2 && c.sequenceP) {
			var _g22 = 1;
			var _g32 = c.lookupValues;
			while(_g22 < _g32) {
				var j4 = _g22++;
				c.multiplicands[j4] = c.multiplicands[j4 - 1];
			}
			c.sequenceP = false;
		}
	}
	return c;
};
kha_audio2_ogg_vorbis_data_Codebook.prototype = {
	dimensions: null
	,entries: null
	,codewordLengths: null
	,minimumValue: null
	,deltaValue: null
	,valueBits: null
	,lookupType: null
	,sequenceP: null
	,sparse: null
	,lookupValues: null
	,multiplicands: null
	,codewords: null
	,fastHuffman: null
	,sortedCodewords: null
	,sortedValues: null
	,sortedEntries: null
	,addEntry: function(huffCode,symbol,count,len,values) {
		if(!this.sparse) {
			this.codewords[symbol] = huffCode;
		} else {
			this.codewords[count] = huffCode;
			this.codewordLengths[count] = len;
			values[count] = symbol;
		}
	}
	,includeInSort: function(len) {
		if(this.sparse) {
			kha_audio2_ogg_vorbis_VorbisTools.assert(len != 255,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 201, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "includeInSort"});
			return true;
		} else if(len == 255) {
			return false;
		} else if(len > 10) {
			return true;
		} else {
			return false;
		}
	}
	,computeCodewords: function(len,n,values) {
		var this1 = new Array(32);
		var available = this1;
		available[0] = 0;
		available[1] = 0;
		available[2] = 0;
		available[3] = 0;
		available[4] = 0;
		available[5] = 0;
		available[6] = 0;
		available[7] = 0;
		available[8] = 0;
		available[9] = 0;
		available[10] = 0;
		available[11] = 0;
		available[12] = 0;
		available[13] = 0;
		available[14] = 0;
		available[15] = 0;
		available[16] = 0;
		available[17] = 0;
		available[18] = 0;
		available[19] = 0;
		available[20] = 0;
		available[21] = 0;
		available[22] = 0;
		available[23] = 0;
		available[24] = 0;
		available[25] = 0;
		available[26] = 0;
		available[27] = 0;
		available[28] = 0;
		available[29] = 0;
		available[30] = 0;
		available[31] = 0;
		var k = 0;
		while(k < n) {
			if(len[k] < 255) {
				break;
			}
			++k;
		}
		if(k == n) {
			kha_audio2_ogg_vorbis_VorbisTools.assert(this.sortedEntries == 0,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 228, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeCodewords"});
			return true;
		}
		var m = 0;
		this.addEntry(0,k,m++,len[k],values);
		var i = 0;
		while(++i <= len[k]) available[i] = 1 << 32 - i;
		i = k;
		while(++i < n) {
			var z = len[i];
			if(z == 255) {
				continue;
			}
			while(z > 0 && available[z] == 0) --z;
			if(z == 0) {
				return false;
			}
			var res = available[z];
			available[z] = 0;
			this.addEntry(kha_audio2_ogg_vorbis_VorbisTools.bitReverse(res),i,m++,len[i],values);
			if(z != len[i]) {
				var y = len[i];
				while(y > z) {
					kha_audio2_ogg_vorbis_VorbisTools.assert(available[y] == 0,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 272, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeCodewords"});
					available[y] = res + (1 << 32 - y);
					--y;
				}
			}
		}
		return true;
	}
	,computeSortedHuffman: function(lengths,values) {
		if(!this.sparse) {
			var k = 0;
			var _g = 0;
			var _g1 = this.entries;
			while(_g < _g1) {
				var i = _g++;
				if(this.includeInSort(lengths[i])) {
					this.sortedCodewords[k++] = kha_audio2_ogg_vorbis_VorbisTools.bitReverse(this.codewords[i]);
				}
			}
			kha_audio2_ogg_vorbis_VorbisTools.assert(k == this.sortedEntries,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 296, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeSortedHuffman"});
		} else {
			var _g2 = 0;
			var _g11 = this.sortedEntries;
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.sortedCodewords[i1] = kha_audio2_ogg_vorbis_VorbisTools.bitReverse(this.codewords[i1]);
			}
		}
		this.sortedCodewords[this.sortedEntries] = -1;
		this.sortedCodewords.sort(kha_audio2_ogg_vorbis_VorbisTools.uintAsc);
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g3 = 0;
		var _g12 = len;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var huffLen = this.sparse ? lengths[values[i2]] : lengths[i2];
			if(this.includeInSort(huffLen)) {
				var code = kha_audio2_ogg_vorbis_VorbisTools.bitReverse(this.codewords[i2]);
				var x = 0;
				var n = this.sortedEntries;
				while(n > 1) {
					var m = x + (n >> 1);
					if(_$UInt_UInt_$Impl_$.gte(code,this.sortedCodewords[m])) {
						x = m;
						n -= n >> 1;
					} else {
						n >>= 1;
					}
				}
				if(this.sparse) {
					this.sortedValues[x] = values[i2];
					this.codewordLengths[x] = huffLen;
				} else {
					this.sortedValues[x] = i2;
				}
			}
		}
	}
	,computeAcceleratedHuffman: function() {
		var this1 = new Array(1024);
		this.fastHuffman = this1;
		this.fastHuffman[0] = -1;
		var _g = 0;
		var _g1 = 1024;
		while(_g < _g1) {
			var i = _g++;
			this.fastHuffman[i] = -1;
		}
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g2 = 0;
		var _g3 = len;
		while(_g2 < _g3) {
			var i1 = _g2++;
			if(this.codewordLengths[i1] <= 10) {
				var z = this.sparse ? kha_audio2_ogg_vorbis_VorbisTools.bitReverse(this.sortedCodewords[i1]) : this.codewords[i1];
				while(z < 1024) {
					this.fastHuffman[z] = i1;
					z += 1 << this.codewordLengths[i1];
				}
			}
		}
	}
	,codebookDecode: function(decodeState,output,offset,len) {
		var z = this.decodeStart(decodeState);
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		var minimumValue = this.minimumValue;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		if(this.lookupType == 1) {
			var div = 1;
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var off = Std.int(_$UInt_UInt_$Impl_$.toFloat(Std.int(z / div)) % _$UInt_UInt_$Impl_$.toFloat(lookupValues));
				var val = multiplicands[off] + last;
				var _g2 = offset + i;
				var _g11 = output;
				_g11[_g2] = _g11[_g2] + val;
				if(sequenceP) {
					last = val + minimumValue;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		if(sequenceP) {
			var last1 = 0.0;
			var _g3 = 0;
			var _g12 = len;
			while(_g3 < _g12) {
				var i1 = _g3++;
				var val1 = multiplicands[z + i1] + last1;
				var _g4 = offset + i1;
				var _g13 = output;
				_g13[_g4] = _g13[_g4] + val1;
				last1 = val1 + minimumValue;
			}
		} else {
			var last2 = 0.0;
			var _g5 = 0;
			var _g14 = len;
			while(_g5 < _g14) {
				var i2 = _g5++;
				var _g6 = offset + i2;
				var _g15 = output;
				_g15[_g6] = _g15[_g6] + (multiplicands[z + i2] + last2);
			}
		}
		return true;
	}
	,codebookDecodeStep: function(decodeState,output,offset,len,step) {
		var z = this.decodeStart(decodeState);
		var last = 0.0;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		if(this.lookupType == 1) {
			var div = 1;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var off = Std.int(_$UInt_UInt_$Impl_$.toFloat(Std.int(z / div)) % _$UInt_UInt_$Impl_$.toFloat(lookupValues));
				var val = multiplicands[off] + last;
				var _g2 = offset + i * step;
				var _g11 = output;
				_g11[_g2] = _g11[_g2] + val;
				if(sequenceP) {
					last = val;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		var _g3 = 0;
		var _g12 = len;
		while(_g3 < _g12) {
			var i1 = _g3++;
			var val1 = multiplicands[z + i1] + last;
			var _g4 = offset + i1 * step;
			var _g13 = output;
			_g13[_g4] = _g13[_g4] + val1;
			if(sequenceP) {
				last = val1;
			}
		}
		return true;
	}
	,decodeStart: function(decodeState) {
		return decodeState.decode(this);
	}
	,decodeDeinterleaveRepeat: function(decodeState,residueBuffers,ch,cInter,pInter,len,totalDecode) {
		var effective = this.dimensions;
		if(this.lookupType == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 488, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
		}
		var multiplicands = this.multiplicands;
		var sequenceP = this.sequenceP;
		var lookupValues = this.lookupValues;
		while(totalDecode > 0) {
			var last = 0.0;
			var z = decodeState.decode(this);
			if(z < 0) {
				if(decodeState.isLastByte()) {
					return null;
				}
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 503, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
			}
			if(cInter + pInter * ch + effective > len * ch) {
				effective = len * ch - (pInter * ch - cInter);
			}
			if(this.lookupType == 1) {
				var div = 1;
				if(sequenceP) {
					var _g = 0;
					var _g1 = effective;
					while(_g < _g1) {
						var i = _g++;
						var off = Std.int(_$UInt_UInt_$Impl_$.toFloat(Std.int(z / div)) % _$UInt_UInt_$Impl_$.toFloat(lookupValues));
						var val = multiplicands[off] + last;
						var _g2 = pInter;
						var _g11 = residueBuffers[cInter];
						_g11[_g2] = _g11[_g2] + val;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val;
						div = div * lookupValues;
					}
				} else {
					var _g3 = 0;
					var _g12 = effective;
					while(_g3 < _g12) {
						var i1 = _g3++;
						var off1 = Std.int(_$UInt_UInt_$Impl_$.toFloat(Std.int(z / div)) % _$UInt_UInt_$Impl_$.toFloat(lookupValues));
						var val1 = multiplicands[off1] + last;
						var _g4 = pInter;
						var _g13 = residueBuffers[cInter];
						_g13[_g4] = _g13[_g4] + val1;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						div = div * lookupValues;
					}
				}
			} else {
				z *= this.dimensions;
				if(sequenceP) {
					var _g5 = 0;
					var _g14 = effective;
					while(_g5 < _g14) {
						var i2 = _g5++;
						var val2 = multiplicands[z + i2] + last;
						var _g6 = pInter;
						var _g15 = residueBuffers[cInter];
						_g15[_g6] = _g15[_g6] + val2;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val2;
					}
				} else {
					var _g7 = 0;
					var _g16 = effective;
					while(_g7 < _g16) {
						var i3 = _g7++;
						var val3 = multiplicands[z + i3] + last;
						var _g8 = pInter;
						var _g17 = residueBuffers[cInter];
						_g17[_g8] = _g17[_g8] + val3;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
					}
				}
			}
			totalDecode -= effective;
		}
		return { cInter : cInter, pInter : pInter};
	}
	,residueDecode: function(decodeState,target,offset,n,rtype) {
		if(rtype == 0) {
			var step = Std.int(n / this.dimensions);
			var _g = 0;
			var _g1 = step;
			while(_g < _g1) {
				var k = _g++;
				if(!this.codebookDecodeStep(decodeState,target,offset + k,n - offset - k,step)) {
					return false;
				}
			}
		} else {
			var k1 = 0;
			while(k1 < n) {
				if(!this.codebookDecode(decodeState,target,offset,n - k1)) {
					return false;
				}
				k1 += this.dimensions;
				offset += this.dimensions;
			}
		}
		return true;
	}
	,__class__: kha_audio2_ogg_vorbis_data_Codebook
};
var kha_audio2_ogg_vorbis_data_Comment = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["kha.audio2.ogg.vorbis.data.Comment"] = kha_audio2_ogg_vorbis_data_Comment;
kha_audio2_ogg_vorbis_data_Comment.__name__ = "kha.audio2.ogg.vorbis.data.Comment";
kha_audio2_ogg_vorbis_data_Comment.prototype = {
	data: null
	,get_title: function() {
		return this.getString("title");
	}
	,get_loopStart: function() {
		return Std.parseInt(this.getString("loopstart"));
	}
	,get_loopLength: function() {
		return Std.parseInt(this.getString("looplength"));
	}
	,get_version: function() {
		return this.getString("version");
	}
	,get_album: function() {
		return this.getString("album");
	}
	,get_organization: function() {
		return this.getString("organization");
	}
	,get_tracknumber: function() {
		return this.getString("tracknumber");
	}
	,get_performer: function() {
		return this.getString("performer");
	}
	,get_copyright: function() {
		return this.getString("copyright");
	}
	,get_license: function() {
		return this.getString("license");
	}
	,get_artist: function() {
		return this.getString("artist");
	}
	,get_description: function() {
		return this.getString("description");
	}
	,get_genre: function() {
		return this.getString("genre");
	}
	,get_date: function() {
		return this.getString("date");
	}
	,get_location: function() {
		return this.getString("location");
	}
	,get_contact: function() {
		return this.getString("contact");
	}
	,get_isrc: function() {
		return this.getString("isrc");
	}
	,get_artists: function() {
		return this.getArray("artist");
	}
	,add: function(key,value) {
		key = key.toLowerCase();
		if(this.data.exists(key)) {
			this.data.get(key).push(value);
		} else {
			var v = [value];
			this.data.set(key,v);
		}
	}
	,getString: function(key) {
		key = key.toLowerCase();
		if(this.data.exists(key)) {
			return this.data.get(key)[0];
		} else {
			return null;
		}
	}
	,getArray: function(key) {
		key = key.toLowerCase();
		if(this.data.exists(key)) {
			return this.data.get(key);
		} else {
			return null;
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Comment
	,__properties__: {get_artists:"get_artists",get_isrc:"get_isrc",get_contact:"get_contact",get_location:"get_location",get_date:"get_date",get_genre:"get_genre",get_description:"get_description",get_artist:"get_artist",get_license:"get_license",get_copyright:"get_copyright",get_performer:"get_performer",get_tracknumber:"get_tracknumber",get_organization:"get_organization",get_album:"get_album",get_version:"get_version",get_loopLength:"get_loopLength",get_loopStart:"get_loopStart",get_title:"get_title"}
};
var kha_audio2_ogg_vorbis_data_Floor = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor"] = kha_audio2_ogg_vorbis_data_Floor;
kha_audio2_ogg_vorbis_data_Floor.__name__ = "kha.audio2.ogg.vorbis.data.Floor";
kha_audio2_ogg_vorbis_data_Floor.read = function(decodeState,codebooks) {
	var floor = new kha_audio2_ogg_vorbis_data_Floor();
	floor.type = decodeState.readBits(16);
	if(floor.type > 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 28, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	}
	if(floor.type == 0) {
		var g = floor.floor0 = new kha_audio2_ogg_vorbis_data_Floor0();
		g.order = decodeState.readBits(8);
		g.rate = decodeState.readBits(16);
		g.barkMapSize = decodeState.readBits(16);
		g.amplitudeBits = decodeState.readBits(6);
		g.amplitudeOffset = decodeState.readBits(8);
		g.numberOfBooks = decodeState.readBits(4) + 1;
		var _g = 0;
		var _g1 = g.numberOfBooks;
		while(_g < _g1) {
			var j = _g++;
			g.bookList[j] = decodeState.readBits(8);
		}
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 41, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	} else {
		var p = [];
		var g1 = floor.floor1 = new kha_audio2_ogg_vorbis_data_Floor1();
		var maxClass = -1;
		g1.partitions = decodeState.readBits(5);
		var this1 = new Array(g1.partitions);
		g1.partitionClassList = this1;
		var _g2 = 0;
		var _g11 = g1.partitions;
		while(_g2 < _g11) {
			var j1 = _g2++;
			g1.partitionClassList[j1] = decodeState.readBits(4);
			if(g1.partitionClassList[j1] > maxClass) {
				maxClass = g1.partitionClassList[j1];
			}
		}
		var this2 = new Array(maxClass + 1);
		g1.classDimensions = this2;
		var this3 = new Array(maxClass + 1);
		g1.classMasterbooks = this3;
		var this4 = new Array(maxClass + 1);
		g1.classSubclasses = this4;
		var this5 = new Array(maxClass + 1);
		g1.subclassBooks = this5;
		var _g21 = 0;
		var _g3 = maxClass + 1;
		while(_g21 < _g3) {
			var j2 = _g21++;
			g1.classDimensions[j2] = decodeState.readBits(3) + 1;
			g1.classSubclasses[j2] = decodeState.readBits(2);
			if(g1.classSubclasses[j2] != 0) {
				g1.classMasterbooks[j2] = decodeState.readBits(8);
				if(g1.classMasterbooks[j2] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 64, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
			var kl = 1 << g1.classSubclasses[j2];
			var this6 = g1.subclassBooks;
			var this7 = new Array(kl);
			this6[j2] = this7;
			var _g22 = 0;
			var _g31 = kl;
			while(_g22 < _g31) {
				var k = _g22++;
				g1.subclassBooks[j2][k] = decodeState.readBits(8) - 1;
				if(g1.subclassBooks[j2][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
		}
		g1.floor1Multiplier = decodeState.readBits(2) + 1;
		g1.rangebits = decodeState.readBits(4);
		var this8 = new Array(250);
		g1.xlist = this8;
		g1.xlist[0] = 0;
		g1.xlist[1] = 1 << g1.rangebits;
		g1.values = 2;
		var _g4 = 0;
		var _g5 = g1.partitions;
		while(_g4 < _g5) {
			var j3 = _g4++;
			var c = g1.partitionClassList[j3];
			var _g41 = 0;
			var _g51 = g1.classDimensions[c];
			while(_g41 < _g51) {
				var k1 = _g41++;
				g1.xlist[g1.values] = decodeState.readBits(g1.rangebits);
				g1.values++;
			}
		}
		var _g6 = 0;
		var _g7 = g1.values;
		while(_g6 < _g7) {
			var j4 = _g6++;
			p.push(new kha_audio2_ogg_vorbis_data_IntPoint());
			p[j4].x = g1.xlist[j4];
			p[j4].y = j4;
		}
		p.sort(kha_audio2_ogg_vorbis_VorbisTools.pointCompare);
		var this9 = new Array(g1.values);
		g1.sortedOrder = this9;
		var _g8 = 0;
		var _g9 = g1.values;
		while(_g8 < _g9) {
			var j5 = _g8++;
			g1.sortedOrder[j5] = p[j5].y;
		}
		var this10 = new Array(g1.values);
		g1.neighbors = this10;
		var _g10 = 2;
		var _g111 = g1.values;
		while(_g10 < _g111) {
			var j6 = _g10++;
			var ne = kha_audio2_ogg_vorbis_VorbisTools.neighbors(g1.xlist,j6);
			var this11 = g1.neighbors;
			var this12 = new Array(g1.values);
			this11[j6] = this12;
			g1.neighbors[j6][0] = ne.low;
			g1.neighbors[j6][1] = ne.high;
		}
	}
	return floor;
};
kha_audio2_ogg_vorbis_data_Floor.prototype = {
	floor0: null
	,floor1: null
	,type: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor
};
var kha_audio2_ogg_vorbis_data_Floor0 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor0"] = kha_audio2_ogg_vorbis_data_Floor0;
kha_audio2_ogg_vorbis_data_Floor0.__name__ = "kha.audio2.ogg.vorbis.data.Floor0";
kha_audio2_ogg_vorbis_data_Floor0.prototype = {
	order: null
	,rate: null
	,barkMapSize: null
	,amplitudeBits: null
	,amplitudeOffset: null
	,numberOfBooks: null
	,bookList: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor0
};
var kha_audio2_ogg_vorbis_data_Floor1 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor1"] = kha_audio2_ogg_vorbis_data_Floor1;
kha_audio2_ogg_vorbis_data_Floor1.__name__ = "kha.audio2.ogg.vorbis.data.Floor1";
kha_audio2_ogg_vorbis_data_Floor1.prototype = {
	partitions: null
	,partitionClassList: null
	,classDimensions: null
	,classSubclasses: null
	,classMasterbooks: null
	,subclassBooks: null
	,xlist: null
	,sortedOrder: null
	,neighbors: null
	,floor1Multiplier: null
	,rangebits: null
	,values: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor1
};
var kha_audio2_ogg_vorbis_data_Header = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Header"] = kha_audio2_ogg_vorbis_data_Header;
kha_audio2_ogg_vorbis_data_Header.__name__ = "kha.audio2.ogg.vorbis.data.Header";
kha_audio2_ogg_vorbis_data_Header.read = function(decodeState) {
	var page = decodeState.page;
	page.start(decodeState);
	if((page.flag & 2) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"not firstPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 4) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"lastPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 1) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"continuedPacket",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.firstPageValidate();
	if(decodeState.readByte() != 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 57, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.vorbisValidate();
	var version = decodeState.readInt32();
	if(version != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"vorbis version : " + version,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 66, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header = new kha_audio2_ogg_vorbis_data_Header();
	header.channel = decodeState.readByte();
	if(header.channel == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no channel",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	} else if(header.channel > 16) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,"too many channels",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 75, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	header.sampleRate = decodeState.readInt32();
	if(header.sampleRate == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no sampling rate",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 80, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	header.maximumBitRate = decodeState.readInt32();
	header.nominalBitRate = decodeState.readInt32();
	header.minimumBitRate = decodeState.readInt32();
	var x = decodeState.readByte();
	var log0 = x & 15;
	var log1 = x >> 4;
	header.blocksize0 = 1 << log0;
	header.blocksize1 = 1 << log1;
	if(log0 < 6 || log0 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 93, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log1 < 6 || log1 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 96, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log0 > log1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 99, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var x1 = decodeState.readByte();
	if((x1 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 105, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.page.start(decodeState);
	decodeState.startPacket();
	var len = 0;
	var output = new haxe_io_BytesOutput();
	while(true) {
		len = decodeState.next();
		if(!(len != 0)) {
			break;
		}
		output.write(decodeState.readBytes(len));
		decodeState.bytesInSeg = 0;
	}
	var packetInput = new haxe_io_BytesInput(output.getBytes());
	packetInput.readByte();
	packetInput.read(6);
	var vendorLength = packetInput.readInt32();
	header.vendor = packetInput.readString(vendorLength);
	header.comment = new kha_audio2_ogg_vorbis_data_Comment();
	var commentCount = packetInput.readInt32();
	var _g = 0;
	var _g1 = commentCount;
	while(_g < _g1) {
		var i = _g++;
		var n = packetInput.readInt32();
		var str = packetInput.readString(n);
		var splitter = str.indexOf("=");
		if(splitter != -1) {
			header.comment.add(str.substring(0,splitter),str.substring(splitter + 1));
		}
	}
	var x2 = packetInput.readByte();
	if((x2 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 141, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.startPacket();
	if(decodeState.readPacket() != 5) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"setup packet",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 149, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.vorbisValidate();
	var codebookCount = decodeState.readBits(8) + 1;
	var this1 = new Array(codebookCount);
	header.codebooks = this1;
	var _g2 = 0;
	var _g11 = codebookCount;
	while(_g2 < _g11) {
		var i1 = _g2++;
		header.codebooks[i1] = kha_audio2_ogg_vorbis_data_Codebook.read(decodeState);
	}
	x1 = decodeState.readBits(6) + 1;
	var _g21 = 0;
	var _g3 = x1;
	while(_g21 < _g3) {
		var i2 = _g21++;
		if(decodeState.readBits(16) != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 165, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	var floorCount = decodeState.readBits(6) + 1;
	var this2 = new Array(floorCount);
	header.floorConfig = this2;
	var _g4 = 0;
	var _g5 = floorCount;
	while(_g4 < _g5) {
		var i3 = _g4++;
		header.floorConfig[i3] = kha_audio2_ogg_vorbis_data_Floor.read(decodeState,header.codebooks);
	}
	var residueCount = decodeState.readBits(6) + 1;
	var this3 = new Array(residueCount);
	header.residueConfig = this3;
	var _g6 = 0;
	var _g7 = residueCount;
	while(_g6 < _g7) {
		var i4 = _g6++;
		header.residueConfig[i4] = kha_audio2_ogg_vorbis_data_Residue.read(decodeState,header.codebooks);
	}
	var mappingCount = decodeState.readBits(6) + 1;
	var this4 = new Array(mappingCount);
	header.mapping = this4;
	var _g8 = 0;
	var _g9 = mappingCount;
	while(_g8 < _g9) {
		var i5 = _g8++;
		var map = kha_audio2_ogg_vorbis_data_Mapping.read(decodeState,header.channel);
		header.mapping[i5] = map;
		var _g81 = 0;
		var _g91 = map.submaps;
		while(_g81 < _g91) {
			var j = _g81++;
			if(map.submapFloor[j] >= header.floorConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 191, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
			if(map.submapResidue[j] >= header.residueConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 194, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
		}
	}
	var modeCount = decodeState.readBits(6) + 1;
	var this5 = new Array(modeCount);
	header.modes = this5;
	var _g10 = 0;
	var _g111 = modeCount;
	while(_g10 < _g111) {
		var i6 = _g10++;
		var mode = kha_audio2_ogg_vorbis_data_Mode.read(decodeState);
		header.modes[i6] = mode;
		if(mode.mapping >= header.mapping.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 205, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	decodeState.flushPacket();
	return header;
};
kha_audio2_ogg_vorbis_data_Header.prototype = {
	maximumBitRate: null
	,nominalBitRate: null
	,minimumBitRate: null
	,sampleRate: null
	,channel: null
	,blocksize0: null
	,blocksize1: null
	,codebooks: null
	,floorConfig: null
	,residueConfig: null
	,mapping: null
	,modes: null
	,comment: null
	,vendor: null
	,__class__: kha_audio2_ogg_vorbis_data_Header
};
var kha_audio2_ogg_vorbis_data_IntPoint = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.IntPoint"] = kha_audio2_ogg_vorbis_data_IntPoint;
kha_audio2_ogg_vorbis_data_IntPoint.__name__ = "kha.audio2.ogg.vorbis.data.IntPoint";
kha_audio2_ogg_vorbis_data_IntPoint.prototype = {
	x: null
	,y: null
	,__class__: kha_audio2_ogg_vorbis_data_IntPoint
};
var kha_audio2_ogg_vorbis_data_Mapping = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mapping"] = kha_audio2_ogg_vorbis_data_Mapping;
kha_audio2_ogg_vorbis_data_Mapping.__name__ = "kha.audio2.ogg.vorbis.data.Mapping";
kha_audio2_ogg_vorbis_data_Mapping.read = function(decodeState,channels) {
	var m = new kha_audio2_ogg_vorbis_data_Mapping();
	var mappingType = decodeState.readBits(16);
	if(mappingType != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"mapping type " + mappingType,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	var this1 = new Array(channels);
	m.chan = this1;
	var _g = 0;
	var _g1 = channels;
	while(_g < _g1) {
		var j = _g++;
		m.chan[j] = new kha_audio2_ogg_vorbis_data_MappingChannel();
	}
	if(decodeState.readBits(1) != 0) {
		m.submaps = decodeState.readBits(4) + 1;
	} else {
		m.submaps = 1;
	}
	if(decodeState.readBits(1) != 0) {
		m.couplingSteps = decodeState.readBits(8) + 1;
		var _g2 = 0;
		var _g3 = m.couplingSteps;
		while(_g2 < _g3) {
			var k = _g2++;
			var tmp = kha_audio2_ogg_tools_MathTools.ilog(channels - 1);
			m.chan[k].magnitude = decodeState.readBits(tmp);
			var tmp1 = kha_audio2_ogg_tools_MathTools.ilog(channels - 1);
			m.chan[k].angle = decodeState.readBits(tmp1);
			if(m.chan[k].magnitude >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].angle >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].magnitude == m.chan[k].angle) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		m.couplingSteps = 0;
	}
	if(decodeState.readBits(2) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 61, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	if(m.submaps > 1) {
		var _g21 = 0;
		var _g31 = channels;
		while(_g21 < _g31) {
			var j1 = _g21++;
			m.chan[j1].mux = decodeState.readBits(4);
			if(m.chan[j1].mux >= m.submaps) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		var _g22 = 0;
		var _g32 = channels;
		while(_g22 < _g32) {
			var j2 = _g22++;
			m.chan[j2].mux = 0;
		}
	}
	var this2 = new Array(m.submaps);
	m.submapFloor = this2;
	var this3 = new Array(m.submaps);
	m.submapResidue = this3;
	var _g23 = 0;
	var _g33 = m.submaps;
	while(_g23 < _g33) {
		var j3 = _g23++;
		decodeState.readBits(8);
		m.submapFloor[j3] = decodeState.readBits(8);
		m.submapResidue[j3] = decodeState.readBits(8);
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mapping.prototype = {
	couplingSteps: null
	,chan: null
	,submaps: null
	,submapFloor: null
	,submapResidue: null
	,doFloor: function(floors,i,n,target,finalY,step2Flag) {
		var n2 = n >> 1;
		var s = this.chan[i].mux;
		var floor;
		var floor1 = floors[this.submapFloor[s]];
		if(floor1.type == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 94, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "doFloor"}));
		} else {
			var g = floor1.floor1;
			var lx = 0;
			var ly = finalY[0] * g.floor1Multiplier;
			var _g = 1;
			var _g1 = g.values;
			while(_g < _g1) {
				var q = _g++;
				var j = g.sortedOrder[q];
				if(finalY[j] >= 0) {
					var hy = finalY[j] * g.floor1Multiplier;
					var hx = g.xlist[j];
					kha_audio2_ogg_vorbis_VorbisTools.drawLine(target,lx,ly,hx,hy,n2);
					lx = hx;
					ly = hy;
				}
			}
			if(lx < n2) {
				var _g2 = lx;
				var _g3 = n2;
				while(_g2 < _g3) {
					var j1 = _g2++;
					var _g21 = j1;
					var _g31 = target;
					_g31[_g21] = _g31[_g21] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[ly];
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Mapping
};
var kha_audio2_ogg_vorbis_data_MappingChannel = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.MappingChannel"] = kha_audio2_ogg_vorbis_data_MappingChannel;
kha_audio2_ogg_vorbis_data_MappingChannel.__name__ = "kha.audio2.ogg.vorbis.data.MappingChannel";
kha_audio2_ogg_vorbis_data_MappingChannel.prototype = {
	magnitude: null
	,angle: null
	,mux: null
	,__class__: kha_audio2_ogg_vorbis_data_MappingChannel
};
var kha_audio2_ogg_vorbis_data_Mode = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mode"] = kha_audio2_ogg_vorbis_data_Mode;
kha_audio2_ogg_vorbis_data_Mode.__name__ = "kha.audio2.ogg.vorbis.data.Mode";
kha_audio2_ogg_vorbis_data_Mode.read = function(decodeState) {
	var m = new kha_audio2_ogg_vorbis_data_Mode();
	m.blockflag = decodeState.readBits(1) != 0;
	m.windowtype = decodeState.readBits(16);
	m.transformtype = decodeState.readBits(16);
	m.mapping = decodeState.readBits(8);
	if(m.windowtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	if(m.transformtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 25, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mode.prototype = {
	blockflag: null
	,mapping: null
	,windowtype: null
	,transformtype: null
	,__class__: kha_audio2_ogg_vorbis_data_Mode
};
var kha_audio2_ogg_vorbis_data_Page = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Page"] = kha_audio2_ogg_vorbis_data_Page;
kha_audio2_ogg_vorbis_data_Page.__name__ = "kha.audio2.ogg.vorbis.data.Page";
kha_audio2_ogg_vorbis_data_Page.prototype = {
	flag: null
	,clone: function() {
		var page = new kha_audio2_ogg_vorbis_data_Page();
		page.flag = this.flag;
		return page;
	}
	,start: function(decodeState) {
		decodeState.capturePattern();
		this.startWithoutCapturePattern(decodeState);
	}
	,startWithoutCapturePattern: function(decodeState) {
		var version = decodeState.readByte();
		if(version != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,"" + version,{ fileName : "kha/audio2/ogg/vorbis/data/Page.hx", lineNumber : 34, className : "kha.audio2.ogg.vorbis.data.Page", methodName : "startWithoutCapturePattern"}));
		}
		this.flag = decodeState.readByte();
		var loc0 = decodeState.readInt32();
		var loc1 = decodeState.readInt32();
		decodeState.readInt32();
		decodeState.readInt32();
		decodeState.readInt32();
		decodeState.setup(loc0,loc1);
	}
	,__class__: kha_audio2_ogg_vorbis_data_Page
};
var kha_audio2_ogg_vorbis_data_PageFlag = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.PageFlag"] = kha_audio2_ogg_vorbis_data_PageFlag;
kha_audio2_ogg_vorbis_data_PageFlag.__name__ = "kha.audio2.ogg.vorbis.data.PageFlag";
var kha_audio2_ogg_vorbis_data_ProbedPage = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.ProbedPage"] = kha_audio2_ogg_vorbis_data_ProbedPage;
kha_audio2_ogg_vorbis_data_ProbedPage.__name__ = "kha.audio2.ogg.vorbis.data.ProbedPage";
kha_audio2_ogg_vorbis_data_ProbedPage.prototype = {
	pageStart: null
	,pageEnd: null
	,afterPreviousPageStart: null
	,firstDecodedSample: null
	,lastDecodedSample: null
	,__class__: kha_audio2_ogg_vorbis_data_ProbedPage
};
var kha_audio2_ogg_vorbis_data_ReaderError = function(type,message,posInfos) {
	if(message == null) {
		message = "";
	}
	this.type = type;
	this.message = message;
	this.posInfos = posInfos;
};
$hxClasses["kha.audio2.ogg.vorbis.data.ReaderError"] = kha_audio2_ogg_vorbis_data_ReaderError;
kha_audio2_ogg_vorbis_data_ReaderError.__name__ = "kha.audio2.ogg.vorbis.data.ReaderError";
kha_audio2_ogg_vorbis_data_ReaderError.prototype = {
	type: null
	,message: null
	,posInfos: null
	,__class__: kha_audio2_ogg_vorbis_data_ReaderError
};
var kha_audio2_ogg_vorbis_data_ReaderErrorType = $hxEnums["kha.audio2.ogg.vorbis.data.ReaderErrorType"] = { __ename__ : true, __constructs__ : ["NEED_MORE_DATA","INVALID_API_MIXING","OUTOFMEM","FEATURE_NOT_SUPPORTED","TOO_MANY_CHANNELS","FILE_OPEN_FAILURE","SEEK_WITHOUT_LENGTH","UNEXPECTED_EOF","SEEK_INVALID","INVALID_SETUP","INVALID_STREAM","MISSING_CAPTURE_PATTERN","INVALID_STREAM_STRUCTURE_VERSION","CONTINUED_PACKET_FLAG_INVALID","INCORRECT_STREAM_SERIAL_NUMBER","INVALID_FIRST_PAGE","BAD_PACKET_TYPE","CANT_FIND_LAST_PAGE","SEEK_FAILED","OTHER"]
	,NEED_MORE_DATA: {_hx_index:0,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_API_MIXING: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OUTOFMEM: {_hx_index:2,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FEATURE_NOT_SUPPORTED: {_hx_index:3,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,TOO_MANY_CHANNELS: {_hx_index:4,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FILE_OPEN_FAILURE: {_hx_index:5,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_WITHOUT_LENGTH: {_hx_index:6,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,UNEXPECTED_EOF: {_hx_index:7,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_INVALID: {_hx_index:8,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_SETUP: {_hx_index:9,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM: {_hx_index:10,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,MISSING_CAPTURE_PATTERN: {_hx_index:11,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM_STRUCTURE_VERSION: {_hx_index:12,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CONTINUED_PACKET_FLAG_INVALID: {_hx_index:13,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INCORRECT_STREAM_SERIAL_NUMBER: {_hx_index:14,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_FIRST_PAGE: {_hx_index:15,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,BAD_PACKET_TYPE: {_hx_index:16,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CANT_FIND_LAST_PAGE: {_hx_index:17,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_FAILED: {_hx_index:18,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OTHER: {_hx_index:19,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
};
var kha_audio2_ogg_vorbis_data_Residue = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Residue"] = kha_audio2_ogg_vorbis_data_Residue;
kha_audio2_ogg_vorbis_data_Residue.__name__ = "kha.audio2.ogg.vorbis.data.Residue";
kha_audio2_ogg_vorbis_data_Residue.read = function(decodeState,codebooks) {
	var r = new kha_audio2_ogg_vorbis_data_Residue();
	r.type = decodeState.readBits(16);
	if(r.type > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 29, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
	}
	var this1 = new Array(64);
	var residueCascade = this1;
	r.begin = decodeState.readBits(24);
	r.end = decodeState.readBits(24);
	r.partSize = decodeState.readBits(24) + 1;
	var classifications = r.classifications = decodeState.readBits(6) + 1;
	r.classbook = decodeState.readBits(8);
	var _g = 0;
	var _g1 = r.classifications;
	while(_g < _g1) {
		var j = _g++;
		var highBits = 0;
		var lowBits = decodeState.readBits(3);
		if(decodeState.readBits(1) != 0) {
			highBits = decodeState.readBits(5);
		}
		residueCascade[j] = highBits * 8 + lowBits;
	}
	var this2 = new Array(r.classifications);
	r.residueBooks = this2;
	var _g2 = 0;
	var _g3 = r.classifications;
	while(_g2 < _g3) {
		var j1 = _g2++;
		var this3 = r.residueBooks;
		var this4 = new Array(8);
		this3[j1] = this4;
		var _g21 = 0;
		while(_g21 < 8) {
			var k = _g21++;
			if((residueCascade[j1] & 1 << k) != 0) {
				r.residueBooks[j1][k] = decodeState.readBits(8);
				if(r.residueBooks[j1][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 55, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
				}
			} else {
				r.residueBooks[j1][k] = -1;
			}
		}
	}
	var el = codebooks[r.classbook].entries;
	var classwords = codebooks[r.classbook].dimensions;
	var this5 = new Array(el);
	r.classdata = this5;
	var _g4 = 0;
	var _g5 = el;
	while(_g4 < _g5) {
		var j2 = _g4++;
		var temp = j2;
		var k1 = classwords;
		var this6 = r.classdata;
		var this7 = new Array(classwords);
		var cd = this6[j2] = this7;
		while(--k1 >= 0) {
			cd[k1] = temp % classifications;
			temp = Std.int(temp / classifications);
		}
	}
	return r;
};
kha_audio2_ogg_vorbis_data_Residue.prototype = {
	begin: null
	,end: null
	,partSize: null
	,classifications: null
	,classbook: null
	,classdata: null
	,residueBooks: null
	,type: null
	,decode: function(decodeState,header,residueBuffers,ch,n,doNotDecode,channelBuffers) {
		var codebooks = header.codebooks;
		var classwords = codebooks[this.classbook].dimensions;
		var nRead = this.end - this.begin;
		var partSize = this.partSize;
		var partRead = Std.int(_$UInt_UInt_$Impl_$.toFloat(nRead) / _$UInt_UInt_$Impl_$.toFloat(partSize));
		var this1 = new Array(header.channel * partRead + 1);
		var classifications = this1;
		var _g = 0;
		var _g1 = ch;
		while(_g < _g1) {
			var i = _g++;
			if(!doNotDecode[i]) {
				var buffer = residueBuffers[i];
				var _g2 = 0;
				var _g11 = buffer.length;
				while(_g2 < _g11) {
					var j = _g2++;
					buffer[j] = 0;
				}
			}
		}
		if(this.type == 2 && ch != 1) {
			var _g21 = 0;
			var _g3 = ch;
			while(_g21 < _g3) {
				var j1 = _g21++;
				if(!doNotDecode[j1]) {
					break;
				} else if(j1 == ch - 1) {
					return;
				}
			}
			var _g4 = 0;
			while(_g4 < 8) {
				var pass = _g4++;
				var pcount = 0;
				var classSet = 0;
				if(ch == 2) {
					while(pcount < partRead) {
						var z = this.begin + pcount * partSize;
						var cInter = z & 1;
						var pInter = z >>> 1;
						if(pass == 0) {
							var c = codebooks[this.classbook];
							var q = decodeState.decode(c);
							if(q == -1) {
								return;
							}
							var i1 = classwords;
							while(--i1 >= 0) {
								classifications[i1 + pcount] = q % this.classifications;
								q = Std.int(q / this.classifications);
							}
						}
						var _g41 = 0;
						var _g5 = classwords;
						while(_g41 < _g5) {
							var i2 = _g41++;
							if(pcount >= partRead) {
								break;
							}
							var z1 = this.begin + pcount * partSize;
							var c1 = classifications[pcount];
							var b = this.residueBooks[c1][pass];
							if(b >= 0) {
								var book = codebooks[b];
								var result = book.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
								if(result == null) {
									return;
								} else {
									cInter = result.cInter;
									pInter = result.pInter;
								}
							} else {
								z1 = z1 + partSize;
								cInter = z1 & 1;
								pInter = z1 >>> 1;
							}
							++pcount;
						}
					}
				} else if(ch == 1) {
					while(pcount < partRead) {
						var z2 = this.begin + pcount * partSize;
						var cInter1 = 0;
						var pInter1 = z2;
						if(pass == 0) {
							var c2 = codebooks[this.classbook];
							var q1 = decodeState.decode(c2);
							if(q1 == -1) {
								return;
							}
							var i3 = classwords;
							while(--i3 >= 0) {
								classifications[i3 + pcount] = q1 % this.classifications;
								q1 = Std.int(q1 / this.classifications);
							}
						}
						var _g42 = 0;
						var _g51 = classwords;
						while(_g42 < _g51) {
							var i4 = _g42++;
							if(pcount >= partRead) {
								break;
							}
							var z3 = this.begin + pcount * partSize;
							var b1 = this.residueBooks[classifications[pcount]][pass];
							if(b1 >= 0) {
								var book1 = codebooks[b1];
								var result1 = book1.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
								if(result1 == null) {
									return;
								} else {
									cInter1 = result1.cInter;
									pInter1 = result1.pInter;
								}
							} else {
								z3 = z3 + partSize;
								cInter1 = 0;
								pInter1 = z3;
							}
							++pcount;
						}
					}
				} else {
					while(pcount < partRead) {
						var z4 = this.begin + pcount * partSize;
						var cInter2 = Std.int(_$UInt_UInt_$Impl_$.toFloat(z4) % _$UInt_UInt_$Impl_$.toFloat(ch));
						var pInter2 = Std.int(_$UInt_UInt_$Impl_$.toFloat(z4) / _$UInt_UInt_$Impl_$.toFloat(ch));
						if(pass == 0) {
							var c3 = codebooks[this.classbook];
							var q2 = decodeState.decode(c3);
							if(q2 == -1) {
								return;
							}
							var i5 = classwords;
							while(--i5 >= 0) {
								classifications[i5 + pcount] = q2 % this.classifications;
								q2 = Std.int(q2 / this.classifications);
							}
						}
						var _g43 = 0;
						var _g52 = classwords;
						while(_g43 < _g52) {
							var i6 = _g43++;
							if(pcount >= partRead) {
								break;
							}
							var z5 = this.begin + pcount * partSize;
							var b2 = this.residueBooks[classifications[pcount]][pass];
							if(b2 >= 0) {
								var book2 = codebooks[b2];
								var result2 = book2.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
								if(result2 == null) {
									return;
								} else {
									cInter2 = result2.cInter;
									pInter2 = result2.pInter;
								}
							} else {
								z5 = z5 + partSize;
								cInter2 = Std.int(_$UInt_UInt_$Impl_$.toFloat(z5) % _$UInt_UInt_$Impl_$.toFloat(ch));
								pInter2 = Std.int(_$UInt_UInt_$Impl_$.toFloat(z5) / _$UInt_UInt_$Impl_$.toFloat(ch));
							}
							++pcount;
						}
					}
				}
			}
			return;
		}
		var _g22 = 0;
		while(_g22 < 8) {
			var pass1 = _g22++;
			var pcount1 = 0;
			var classSet1 = 0;
			while(pcount1 < partRead) {
				if(pass1 == 0) {
					var _g23 = 0;
					var _g31 = ch;
					while(_g23 < _g31) {
						var j2 = _g23++;
						if(!doNotDecode[j2]) {
							var c4 = codebooks[this.classbook];
							var temp = decodeState.decode(c4);
							if(temp == -1) {
								return;
							}
							var i7 = classwords;
							while(--i7 >= 0) {
								classifications[j2 * partRead + i7 + pcount1] = temp % this.classifications;
								temp = Std.int(temp / this.classifications);
							}
						}
					}
				}
				var _g24 = 0;
				var _g32 = classwords;
				while(_g24 < _g32) {
					var i8 = _g24++;
					if(pcount1 >= partRead) {
						break;
					}
					var _g25 = 0;
					var _g33 = ch;
					while(_g25 < _g33) {
						var j3 = _g25++;
						if(!doNotDecode[j3]) {
							var c5 = classifications[j3 * partRead + pcount1];
							var b3 = this.residueBooks[c5][pass1];
							if(b3 >= 0) {
								var target = residueBuffers[j3];
								var offset = this.begin + pcount1 * partSize;
								var n1 = partSize;
								var book3 = codebooks[b3];
								if(!book3.residueDecode(decodeState,target,offset,n1,this.type)) {
									return;
								}
							}
						}
					}
					++pcount1;
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Residue
};
var kha_audio2_ogg_vorbis_data_Setting = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.Setting"] = kha_audio2_ogg_vorbis_data_Setting;
kha_audio2_ogg_vorbis_data_Setting.__name__ = "kha.audio2.ogg.vorbis.data.Setting";
var kha_graphics1_Graphics = function() { };
$hxClasses["kha.graphics1.Graphics"] = kha_graphics1_Graphics;
kha_graphics1_Graphics.__name__ = "kha.graphics1.Graphics";
kha_graphics1_Graphics.__isInterface__ = true;
kha_graphics1_Graphics.prototype = {
	begin: null
	,end: null
	,setPixel: null
	,__class__: kha_graphics1_Graphics
};
var kha_graphics2_Graphics = function() {
	this.transformations = [new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1)];
	this.transformationIndex = 0;
	this.opacities = [1];
	this.myFontSize = 12;
	this.pipe = null;
};
$hxClasses["kha.graphics2.Graphics"] = kha_graphics2_Graphics;
kha_graphics2_Graphics.__name__ = "kha.graphics2.Graphics";
kha_graphics2_Graphics.prototype = {
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
	}
	,end: function() {
	}
	,flush: function() {
	}
	,clear: function(color) {
	}
	,drawImage: function(img,x,y) {
		this.drawSubImage(img,x,y,0,0,img.get_width(),img.get_height());
	}
	,drawSubImage: function(img,x,y,sx,sy,sw,sh) {
		this.drawScaledSubImage(img,sx,sy,sw,sh,x,y,sw,sh);
	}
	,drawScaledImage: function(img,dx,dy,dw,dh) {
		this.drawScaledSubImage(img,0,0,img.get_width(),img.get_height(),dx,dy,dw,dh);
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillRect: function(x,y,width,height) {
	}
	,drawString: function(text,x,y) {
	}
	,drawCharacters: function(text,start,length,x,y) {
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
	}
	,get_imageScaleQuality: function() {
		return 0;
	}
	,set_imageScaleQuality: function(value) {
		return 1;
	}
	,get_mipmapScaleQuality: function() {
		return 0;
	}
	,set_mipmapScaleQuality: function(value) {
		return 1;
	}
	,get_color: function() {
		return -16777216;
	}
	,set_color: function(color) {
		return -16777216;
	}
	,get_font: function() {
		return null;
	}
	,set_font: function(font) {
		return null;
	}
	,get_fontSize: function() {
		return this.myFontSize;
	}
	,set_fontSize: function(value) {
		return this.myFontSize = value;
	}
	,get_transformation: function() {
		return this.transformations[this.transformationIndex];
	}
	,set_transformation: function(transformation) {
		this.setTransformation(transformation);
		var _this = this.transformations[this.transformationIndex];
		_this._00 = transformation._00;
		_this._10 = transformation._10;
		_this._20 = transformation._20;
		_this._01 = transformation._01;
		_this._11 = transformation._11;
		_this._21 = transformation._21;
		_this._02 = transformation._02;
		_this._12 = transformation._12;
		_this._22 = transformation._22;
		return transformation;
	}
	,pushTransformation: function(trans) {
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans._00;
		_this._10 = trans._10;
		_this._20 = trans._20;
		_this._01 = trans._01;
		_this._11 = trans._11;
		_this._21 = trans._21;
		_this._02 = trans._02;
		_this._12 = trans._12;
		_this._22 = trans._22;
		this.setTransformation(this.get_transformation());
	}
	,popTransformation: function() {
		this.transformationIndex--;
		this.setTransformation(this.get_transformation());
		return this.transformations[this.transformationIndex + 1];
	}
	,scale: function(x,y) {
		var _this = this.get_transformation();
		var _this1 = new kha_math_FastMatrix3(x,0,0,0,y,0,0,0,1);
		var m = this.get_transformation();
		var m1 = new kha_math_FastMatrix3(_this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02,_this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12,_this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22,_this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02,_this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12,_this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22,_this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02,_this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12,_this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22);
		_this._00 = m1._00;
		_this._10 = m1._10;
		_this._20 = m1._20;
		_this._01 = m1._01;
		_this._11 = m1._11;
		_this._21 = m1._21;
		_this._02 = m1._02;
		_this._12 = m1._12;
		_this._22 = m1._22;
	}
	,translation: function(tx,ty) {
		var _this = new kha_math_FastMatrix3(1,0,tx,0,1,ty,0,0,1);
		var m = this.get_transformation();
		return new kha_math_FastMatrix3(_this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02,_this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12,_this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22,_this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02,_this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12,_this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22,_this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02,_this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12,_this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22);
	}
	,translate: function(tx,ty) {
		var _this = this.get_transformation();
		var m = this.translation(tx,ty);
		_this._00 = m._00;
		_this._10 = m._10;
		_this._20 = m._20;
		_this._01 = m._01;
		_this._11 = m._11;
		_this._21 = m._21;
		_this._02 = m._02;
		_this._12 = m._12;
		_this._22 = m._22;
	}
	,pushTranslation: function(tx,ty) {
		this.pushTransformation(this.translation(tx,ty));
	}
	,rotation: function(angle,centerx,centery) {
		var _this = new kha_math_FastMatrix3(1,0,centerx,0,1,centery,0,0,1);
		var m = new kha_math_FastMatrix3(Math.cos(angle),-Math.sin(angle),0,Math.sin(angle),Math.cos(angle),0,0,0,1);
		var _this1 = new kha_math_FastMatrix3(_this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02,_this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12,_this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22,_this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02,_this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12,_this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22,_this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02,_this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12,_this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22);
		var m1 = new kha_math_FastMatrix3(1,0,-centerx,0,1,-centery,0,0,1);
		var _this2 = new kha_math_FastMatrix3(_this1._00 * m1._00 + _this1._10 * m1._01 + _this1._20 * m1._02,_this1._00 * m1._10 + _this1._10 * m1._11 + _this1._20 * m1._12,_this1._00 * m1._20 + _this1._10 * m1._21 + _this1._20 * m1._22,_this1._01 * m1._00 + _this1._11 * m1._01 + _this1._21 * m1._02,_this1._01 * m1._10 + _this1._11 * m1._11 + _this1._21 * m1._12,_this1._01 * m1._20 + _this1._11 * m1._21 + _this1._21 * m1._22,_this1._02 * m1._00 + _this1._12 * m1._01 + _this1._22 * m1._02,_this1._02 * m1._10 + _this1._12 * m1._11 + _this1._22 * m1._12,_this1._02 * m1._20 + _this1._12 * m1._21 + _this1._22 * m1._22);
		var m2 = this.get_transformation();
		return new kha_math_FastMatrix3(_this2._00 * m2._00 + _this2._10 * m2._01 + _this2._20 * m2._02,_this2._00 * m2._10 + _this2._10 * m2._11 + _this2._20 * m2._12,_this2._00 * m2._20 + _this2._10 * m2._21 + _this2._20 * m2._22,_this2._01 * m2._00 + _this2._11 * m2._01 + _this2._21 * m2._02,_this2._01 * m2._10 + _this2._11 * m2._11 + _this2._21 * m2._12,_this2._01 * m2._20 + _this2._11 * m2._21 + _this2._21 * m2._22,_this2._02 * m2._00 + _this2._12 * m2._01 + _this2._22 * m2._02,_this2._02 * m2._10 + _this2._12 * m2._11 + _this2._22 * m2._12,_this2._02 * m2._20 + _this2._12 * m2._21 + _this2._22 * m2._22);
	}
	,rotate: function(angle,centerx,centery) {
		var _this = this.get_transformation();
		var m = this.rotation(angle,centerx,centery);
		_this._00 = m._00;
		_this._10 = m._10;
		_this._20 = m._20;
		_this._01 = m._01;
		_this._11 = m._11;
		_this._21 = m._21;
		_this._02 = m._02;
		_this._12 = m._12;
		_this._22 = m._22;
	}
	,pushRotation: function(angle,centerx,centery) {
		this.pushTransformation(this.rotation(angle,centerx,centery));
	}
	,pushOpacity: function(opacity) {
		this.setOpacity(opacity);
		this.opacities.push(opacity);
	}
	,popOpacity: function() {
		var ret = this.opacities.pop();
		this.setOpacity(this.get_opacity());
		return ret;
	}
	,get_opacity: function() {
		return this.opacities[this.opacities.length - 1];
	}
	,set_opacity: function(opacity) {
		this.setOpacity(opacity);
		return this.opacities[this.opacities.length - 1] = opacity;
	}
	,scissor: function(x,y,width,height) {
	}
	,disableScissor: function() {
	}
	,pipe: null
	,get_pipeline: function() {
		return this.pipe;
	}
	,set_pipeline: function(pipeline) {
		this.setPipeline(pipeline);
		return this.pipe = pipeline;
	}
	,transformations: null
	,transformationIndex: null
	,opacities: null
	,myFontSize: null
	,setTransformation: function(transformation) {
	}
	,setOpacity: function(opacity) {
	}
	,setPipeline: function(pipeline) {
	}
	,__class__: kha_graphics2_Graphics
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline",set_opacity:"set_opacity",get_opacity:"get_opacity",set_transformation:"set_transformation",get_transformation:"get_transformation",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_font:"set_font",get_font:"get_font",set_color:"set_color",get_color:"get_color",set_mipmapScaleQuality:"set_mipmapScaleQuality",get_mipmapScaleQuality:"get_mipmapScaleQuality",set_imageScaleQuality:"set_imageScaleQuality",get_imageScaleQuality:"get_imageScaleQuality"}
};
var kha_graphics2_Graphics1 = function(canvas) {
	this.canvas = canvas;
};
$hxClasses["kha.graphics2.Graphics1"] = kha_graphics2_Graphics1;
kha_graphics2_Graphics1.__name__ = "kha.graphics2.Graphics1";
kha_graphics2_Graphics1.__interfaces__ = [kha_graphics1_Graphics];
kha_graphics2_Graphics1.prototype = {
	canvas: null
	,texture: null
	,pixels: null
	,begin: function() {
		if(this.texture == null || (this.texture.get_realWidth() != this.canvas.get_width() || this.texture.get_realHeight() != this.canvas.get_height())) {
			this.texture = kha_Image.create(this.canvas.get_width(),this.canvas.get_height(),0,2);
		}
		this.pixels = this.texture.lock();
	}
	,end: function() {
		this.texture.unlock();
		this.canvas.get_g2().begin();
		this.canvas.get_g2().drawImage(this.texture,0,0);
		this.canvas.get_g2().end();
	}
	,setPixel: function(x,y,color) {
		this.pixels.setInt32(y * this.texture.get_realWidth() * 4 + x * 4,kha__$Color_Color_$Impl_$.fromBytes(color & 255,(color & 65280) >>> 8,(color & 16711680) >>> 16,color >>> 24));
	}
	,__class__: kha_graphics2_Graphics1
};
var kha_graphics2_GraphicsExtension = function() { };
$hxClasses["kha.graphics2.GraphicsExtension"] = kha_graphics2_GraphicsExtension;
kha_graphics2_GraphicsExtension.__name__ = "kha.graphics2.GraphicsExtension";
kha_graphics2_GraphicsExtension.drawArc = function(g2,cx,cy,radius,sAngle,eAngle,strength,ccw,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(ccw == null) {
		ccw = false;
	}
	if(strength == null) {
		strength = 1;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		radius -= strength / 2;
		g.drawArc(cx,cy,radius,sAngle,eAngle,strength,ccw);
		return;
	}
	sAngle %= Math.PI * 2;
	eAngle %= Math.PI * 2;
	if(ccw) {
		if(eAngle > sAngle) {
			eAngle -= Math.PI * 2;
		}
	} else if(eAngle < sAngle) {
		eAngle += Math.PI * 2;
	}
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = (eAngle - sAngle) / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = Math.cos(sAngle) * radius;
	var y = Math.sin(sAngle) * radius;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		g2.drawLine(px,py,x + cx,y + cy,strength);
	}
};
kha_graphics2_GraphicsExtension.fillArc = function(g2,cx,cy,radius,sAngle,eAngle,ccw,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(ccw == null) {
		ccw = false;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		g.fillArc(cx,cy,radius,sAngle,eAngle,ccw);
		return;
	}
	sAngle %= Math.PI * 2;
	eAngle %= Math.PI * 2;
	if(ccw) {
		if(eAngle > sAngle) {
			eAngle -= Math.PI * 2;
		}
	} else if(eAngle < sAngle) {
		eAngle += Math.PI * 2;
	}
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = (eAngle - sAngle) / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = Math.cos(sAngle) * radius;
	var y = Math.sin(sAngle) * radius;
	var sx = x + cx;
	var sy = y + cy;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		g2.fillTriangle(px,py,x + cx,y + cy,sx,sy);
	}
};
kha_graphics2_GraphicsExtension.drawCircle = function(g2,cx,cy,radius,strength,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(strength == null) {
		strength = 1;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		radius -= strength / 2;
		g.drawCircle(cx,cy,radius,strength);
		return;
	}
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = 2 * Math.PI / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = radius;
	var y = 0.0;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		g2.drawLine(px,py,x + cx,y + cy,strength);
	}
};
kha_graphics2_GraphicsExtension.fillCircle = function(g2,cx,cy,radius,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		g.fillCircle(cx,cy,radius);
		return;
	}
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = 2 * Math.PI / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = radius;
	var y = 0.0;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		g2.fillTriangle(px,py,x + cx,y + cy,cx,cy);
	}
};
kha_graphics2_GraphicsExtension.drawPolygon = function(g2,x,y,vertices,strength) {
	if(strength == null) {
		strength = 1;
	}
	var iterator = HxOverrides.iter(vertices);
	var v0 = iterator.next();
	var v1 = v0;
	while(iterator.hasNext()) {
		var v2 = iterator.next();
		g2.drawLine(v1.x + x,v1.y + y,v2.x + x,v2.y + y,strength);
		v1 = v2;
	}
	g2.drawLine(v1.x + x,v1.y + y,v0.x + x,v0.y + y,strength);
};
kha_graphics2_GraphicsExtension.fillPolygon = function(g2,x,y,vertices) {
	var iterator = HxOverrides.iter(vertices);
	if(!iterator.hasNext()) {
		return;
	}
	var v0 = iterator.next();
	if(!iterator.hasNext()) {
		return;
	}
	var v1 = iterator.next();
	while(iterator.hasNext()) {
		var v2 = iterator.next();
		g2.fillTriangle(v0.x + x,v0.y + y,v1.x + x,v1.y + y,v2.x + x,v2.y + y);
		v1 = v2;
	}
};
kha_graphics2_GraphicsExtension.drawCubicBezier = function(g2,x,y,segments,strength) {
	if(strength == null) {
		strength = 1.0;
	}
	if(segments == null) {
		segments = 20;
	}
	var t;
	var q0 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(0,x,y);
	var q1;
	var _g = 1;
	var _g1 = segments + 1;
	while(_g < _g1) {
		var i = _g++;
		t = i / segments;
		q1 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(t,x,y);
		g2.drawLine(q0[0],q0[1],q1[0],q1[1],strength);
		q0 = q1;
	}
};
kha_graphics2_GraphicsExtension.drawCubicBezierPath = function(g2,x,y,segments,strength) {
	if(strength == null) {
		strength = 1.0;
	}
	if(segments == null) {
		segments = 20;
	}
	var i = 0;
	var t;
	var q0 = null;
	var q1 = null;
	while(i < x.length - 3) {
		if(i == 0) {
			q0 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(0,[x[i],x[i + 1],x[i + 2],x[i + 3]],[y[i],y[i + 1],y[i + 2],y[i + 3]]);
		}
		var _g = 1;
		var _g1 = segments + 1;
		while(_g < _g1) {
			var j = _g++;
			t = j / segments;
			q1 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(t,[x[i],x[i + 1],x[i + 2],x[i + 3]],[y[i],y[i + 1],y[i + 2],y[i + 3]]);
			g2.drawLine(q0[0],q0[1],q1[0],q1[1],strength);
			q0 = q1;
		}
		i += 3;
	}
};
kha_graphics2_GraphicsExtension.calculateCubicBezierPoint = function(t,x,y) {
	var u = 1 - t;
	var tt = t * t;
	var uu = u * u;
	var uuu = uu * u;
	var ttt = tt * t;
	var p = [uuu * x[0],uuu * y[0]];
	p[0] += 3 * uu * t * x[1];
	p[1] += 3 * uu * t * y[1];
	p[0] += 3 * u * tt * x[2];
	p[1] += 3 * u * tt * y[2];
	p[0] += ttt * x[3];
	p[1] += ttt * y[3];
	return p;
};
kha_graphics2_GraphicsExtension.drawAlignedString = function(g2,text,x,y,horAlign,verAlign) {
	var xoffset = 0.0;
	if(horAlign == 1 || horAlign == 2) {
		var width = g2.get_font().width(g2.get_fontSize(),text);
		if(horAlign == 1) {
			xoffset = -width * 0.5;
		} else {
			xoffset = -width;
		}
	}
	var yoffset = 0.0;
	if(verAlign == 1 || verAlign == 2) {
		var height = g2.get_font().height(g2.get_fontSize());
		if(verAlign == 1) {
			yoffset = -height * 0.5;
		} else {
			yoffset = -height;
		}
	}
	g2.drawString(text,x + xoffset,y + yoffset);
};
kha_graphics2_GraphicsExtension.drawAlignedCharacters = function(g2,text,start,length,x,y,horAlign,verAlign) {
	var xoffset = 0.0;
	if(horAlign == 1 || horAlign == 2) {
		var width = g2.get_font().widthOfCharacters(g2.get_fontSize(),text,start,length);
		if(horAlign == 1) {
			xoffset = -width * 0.5;
		} else {
			xoffset = -width;
		}
	}
	var yoffset = 0.0;
	if(verAlign == 1 || verAlign == 2) {
		var height = g2.get_font().height(g2.get_fontSize());
		if(verAlign == 1) {
			yoffset = -height * 0.5;
		} else {
			yoffset = -height;
		}
	}
	g2.drawCharacters(text,start,length,x + xoffset,y + yoffset);
};
var kha_graphics2_truetype_VectorOfIntPointer = function() {
};
$hxClasses["kha.graphics2.truetype.VectorOfIntPointer"] = kha_graphics2_truetype_VectorOfIntPointer;
kha_graphics2_truetype_VectorOfIntPointer.__name__ = "kha.graphics2.truetype.VectorOfIntPointer";
kha_graphics2_truetype_VectorOfIntPointer.prototype = {
	value: null
	,__class__: kha_graphics2_truetype_VectorOfIntPointer
};
var kha_graphics2_truetype_Stbtt_$temp_$rect = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_rect"] = kha_graphics2_truetype_Stbtt_$temp_$rect;
kha_graphics2_truetype_Stbtt_$temp_$rect.__name__ = "kha.graphics2.truetype.Stbtt_temp_rect";
kha_graphics2_truetype_Stbtt_$temp_$rect.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$rect
};
var kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics";
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.prototype = {
	advanceWidth: null
	,leftSideBearing: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_font_v_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_font_v_metrics";
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.prototype = {
	ascent: null
	,descent: null
	,lineGap: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$region = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_region"] = kha_graphics2_truetype_Stbtt_$temp_$region;
kha_graphics2_truetype_Stbtt_$temp_$region.__name__ = "kha.graphics2.truetype.Stbtt_temp_region";
kha_graphics2_truetype_Stbtt_$temp_$region.prototype = {
	width: null
	,height: null
	,xoff: null
	,yoff: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$region
};
var kha_graphics2_truetype_Stbtt_$bakedchar = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_bakedchar"] = kha_graphics2_truetype_Stbtt_$bakedchar;
kha_graphics2_truetype_Stbtt_$bakedchar.__name__ = "kha.graphics2.truetype.Stbtt_bakedchar";
kha_graphics2_truetype_Stbtt_$bakedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,__class__: kha_graphics2_truetype_Stbtt_$bakedchar
};
var kha_graphics2_truetype_Stbtt_$aligned_$quad = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_aligned_quad"] = kha_graphics2_truetype_Stbtt_$aligned_$quad;
kha_graphics2_truetype_Stbtt_$aligned_$quad.__name__ = "kha.graphics2.truetype.Stbtt_aligned_quad";
kha_graphics2_truetype_Stbtt_$aligned_$quad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,__class__: kha_graphics2_truetype_Stbtt_$aligned_$quad
};
var kha_graphics2_truetype_Stbtt_$packedchar = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_packedchar"] = kha_graphics2_truetype_Stbtt_$packedchar;
kha_graphics2_truetype_Stbtt_$packedchar.__name__ = "kha.graphics2.truetype.Stbtt_packedchar";
kha_graphics2_truetype_Stbtt_$packedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,xoff2: null
	,yoff2: null
	,__class__: kha_graphics2_truetype_Stbtt_$packedchar
};
var kha_graphics2_truetype_Stbtt_$pack_$range = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_range"] = kha_graphics2_truetype_Stbtt_$pack_$range;
kha_graphics2_truetype_Stbtt_$pack_$range.__name__ = "kha.graphics2.truetype.Stbtt_pack_range";
kha_graphics2_truetype_Stbtt_$pack_$range.prototype = {
	font_size: null
	,first_unicode_codepoint_in_range: null
	,array_of_unicode_codepoints: null
	,num_chars: null
	,chardata_for_range: null
	,h_oversample: null
	,v_oversample: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$range
};
var kha_graphics2_truetype_Stbtt_$pack_$context = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_context"] = kha_graphics2_truetype_Stbtt_$pack_$context;
kha_graphics2_truetype_Stbtt_$pack_$context.__name__ = "kha.graphics2.truetype.Stbtt_pack_context";
kha_graphics2_truetype_Stbtt_$pack_$context.prototype = {
	width: null
	,height: null
	,stride_in_bytes: null
	,padding: null
	,h_oversample: null
	,v_oversample: null
	,pixels: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$context
};
var kha_graphics2_truetype_Stbtt_$fontinfo = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_fontinfo"] = kha_graphics2_truetype_Stbtt_$fontinfo;
kha_graphics2_truetype_Stbtt_$fontinfo.__name__ = "kha.graphics2.truetype.Stbtt_fontinfo";
kha_graphics2_truetype_Stbtt_$fontinfo.prototype = {
	data: null
	,fontstart: null
	,numGlyphs: null
	,loca: null
	,head: null
	,glyf: null
	,hhea: null
	,hmtx: null
	,kern: null
	,index_map: null
	,indexToLocFormat: null
	,__class__: kha_graphics2_truetype_Stbtt_$fontinfo
};
var kha_graphics2_truetype_Stbtt_$vertex = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_vertex"] = kha_graphics2_truetype_Stbtt_$vertex;
kha_graphics2_truetype_Stbtt_$vertex.__name__ = "kha.graphics2.truetype.Stbtt_vertex";
kha_graphics2_truetype_Stbtt_$vertex.prototype = {
	x: null
	,y: null
	,cx: null
	,cy: null
	,type: null
	,padding: null
	,__class__: kha_graphics2_truetype_Stbtt_$vertex
};
var kha_graphics2_truetype_Stbtt_$_$bitmap = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__bitmap"] = kha_graphics2_truetype_Stbtt_$_$bitmap;
kha_graphics2_truetype_Stbtt_$_$bitmap.__name__ = "kha.graphics2.truetype.Stbtt__bitmap";
kha_graphics2_truetype_Stbtt_$_$bitmap.prototype = {
	w: null
	,h: null
	,stride: null
	,pixels: null
	,pixels_offset: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$bitmap
};
var kha_graphics2_truetype_Stbtt_$_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__edge"] = kha_graphics2_truetype_Stbtt_$_$edge;
kha_graphics2_truetype_Stbtt_$_$edge.__name__ = "kha.graphics2.truetype.Stbtt__edge";
kha_graphics2_truetype_Stbtt_$_$edge.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,invert: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$edge
};
var kha_graphics2_truetype_Stbtt_$_$active_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__active_edge"] = kha_graphics2_truetype_Stbtt_$_$active_$edge;
kha_graphics2_truetype_Stbtt_$_$active_$edge.__name__ = "kha.graphics2.truetype.Stbtt__active_edge";
kha_graphics2_truetype_Stbtt_$_$active_$edge.prototype = {
	next: null
	,fx: null
	,fdx: null
	,fdy: null
	,direction: null
	,sy: null
	,ey: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$active_$edge
};
var kha_graphics2_truetype_Stbtt_$_$point = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__point"] = kha_graphics2_truetype_Stbtt_$_$point;
kha_graphics2_truetype_Stbtt_$_$point.__name__ = "kha.graphics2.truetype.Stbtt__point";
kha_graphics2_truetype_Stbtt_$_$point.prototype = {
	x: null
	,y: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$point
};
var kha_graphics2_truetype_StbTruetype = function() { };
$hxClasses["kha.graphics2.truetype.StbTruetype"] = kha_graphics2_truetype_StbTruetype;
kha_graphics2_truetype_StbTruetype.__name__ = "kha.graphics2.truetype.StbTruetype";
kha_graphics2_truetype_StbTruetype.STBTT_assert = function(value) {
	if(!value) {
		throw new js__$Boot_HaxeError("Error");
	}
};
kha_graphics2_truetype_StbTruetype.STBTT_POINT_SIZE = function(x) {
	return -x;
};
kha_graphics2_truetype_StbTruetype.ttBYTE = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return p.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.ttCHAR = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos);
	if(n >= 128) {
		return n - 256;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttUSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	return ch2 | ch1 << 8;
};
kha_graphics2_truetype_StbTruetype.ttSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		return n - 65536;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttULONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return kha_graphics2_truetype_StbTruetype.ttLONG(p,pos);
};
kha_graphics2_truetype_StbTruetype.ttLONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.ttFixed = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return kha_graphics2_truetype_StbTruetype.ttLONG(p,pos);
};
kha_graphics2_truetype_StbTruetype.stbtt_tag4 = function(p,pos,c0,c1,c2,c3) {
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_tag = function(p,pos,str) {
	return kha_graphics2_truetype_StbTruetype.stbtt_tag4(p,pos,HxOverrides.cca(str,0),HxOverrides.cca(str,1),HxOverrides.cca(str,2),HxOverrides.cca(str,3));
};
kha_graphics2_truetype_StbTruetype.stbtt__isfont = function(font) {
	if(kha_graphics2_truetype_StbTruetype.stbtt_tag4(font,0,HxOverrides.cca("1",0),0,0,0)) {
		return true;
	}
	if(kha_graphics2_truetype_StbTruetype.stbtt_tag(font,0,"typ1")) {
		return true;
	}
	if(kha_graphics2_truetype_StbTruetype.stbtt_tag(font,0,"OTTO")) {
		return true;
	}
	if(kha_graphics2_truetype_StbTruetype.stbtt_tag4(font,0,0,1,0,0)) {
		return true;
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__find_table = function(data,fontstart,tag) {
	var num_tables = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,fontstart + 4);
	var tabledir = fontstart + 12;
	var _g = 0;
	var _g1 = num_tables;
	while(_g < _g1) {
		var i = _g++;
		var loc = tabledir + 16 * i;
		if(kha_graphics2_truetype_StbTruetype.stbtt_tag(data,loc,tag)) {
			return kha_graphics2_truetype_StbTruetype.ttULONG(data,loc + 8);
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex = function(font_collection,index) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		if(index == 0) {
			return 0;
		} else {
			return -1;
		}
	}
	if(kha_graphics2_truetype_StbTruetype.stbtt_tag(font_collection,0,"ttcf")) {
		if(kha_graphics2_truetype_StbTruetype.ttULONG(font_collection,4) == 65536 || kha_graphics2_truetype_StbTruetype.ttULONG(font_collection,4) == 131072) {
			var n = kha_graphics2_truetype_StbTruetype.ttLONG(font_collection,8);
			if(index >= n) {
				return -1;
			}
			return kha_graphics2_truetype_StbTruetype.ttULONG(font_collection,12 + index * 4);
		}
	}
	return -1;
};
kha_graphics2_truetype_StbTruetype.stbtt_InitFont = function(info,data,fontstart) {
	info.data = data;
	info.fontstart = fontstart;
	var cmap = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"cmap");
	info.loca = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"loca");
	info.head = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"head");
	info.glyf = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"glyf");
	info.hhea = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hhea");
	info.hmtx = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hmtx");
	info.kern = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"kern");
	if(cmap == 0 || info.loca == 0 || info.head == 0 || info.glyf == 0 || info.hhea == 0 || info.hmtx == 0) {
		return false;
	}
	var t = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"maxp");
	if(t != 0) {
		info.numGlyphs = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,t + 4);
	} else {
		info.numGlyphs = 65535;
	}
	var numTables = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,cmap + 2);
	info.index_map = 0;
	var _g = 0;
	var _g1 = numTables;
	while(_g < _g1) {
		var i = _g++;
		var encoding_record = cmap + 4 + 8 * i;
		switch(kha_graphics2_truetype_StbTruetype.ttUSHORT(data,encoding_record)) {
		case 0:
			info.index_map = cmap + kha_graphics2_truetype_StbTruetype.ttULONG(data,encoding_record + 4);
			break;
		case 3:
			switch(kha_graphics2_truetype_StbTruetype.ttUSHORT(data,encoding_record + 2)) {
			case 1:case 10:
				info.index_map = cmap + kha_graphics2_truetype_StbTruetype.ttULONG(data,encoding_record + 4);
				break;
			}
			break;
		}
	}
	if(info.index_map == 0) {
		return false;
	}
	info.indexToLocFormat = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,info.head + 50);
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex = function(info,unicode_codepoint) {
	var data = info.data;
	var index_map = info.index_map;
	var format = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,index_map);
	if(format == 0) {
		var bytes = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,index_map + 2);
		if(unicode_codepoint < bytes - 6) {
			return kha_graphics2_truetype_StbTruetype.ttBYTE(data,index_map + 6 + unicode_codepoint);
		}
		return 0;
	} else if(format == 6) {
		var first = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,index_map + 6);
		var count = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,index_map + 8);
		if(unicode_codepoint >= first && unicode_codepoint < first + count) {
			return kha_graphics2_truetype_StbTruetype.ttUSHORT(data,index_map + 10 + (unicode_codepoint - first) * 2);
		}
		return 0;
	} else if(format == 2) {
		kha_graphics2_truetype_StbTruetype.STBTT_assert(false);
		return 0;
	} else if(format == 4) {
		var segcount = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,index_map + 6) >> 1;
		var searchRange = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,index_map + 8) >> 1;
		var entrySelector = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,index_map + 10);
		var rangeShift = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,index_map + 12) >> 1;
		var endCount = index_map + 14;
		var search = endCount;
		if(unicode_codepoint > 65535) {
			return 0;
		}
		if(unicode_codepoint >= kha_graphics2_truetype_StbTruetype.ttUSHORT(data,search + rangeShift * 2)) {
			search += rangeShift * 2;
		}
		search -= 2;
		while(entrySelector != 0) {
			searchRange >>= 1;
			var end = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,search + searchRange * 2);
			if(unicode_codepoint > end) {
				search += searchRange * 2;
			}
			--entrySelector;
		}
		search += 2;
		var item = search - endCount >> 1;
		kha_graphics2_truetype_StbTruetype.STBTT_assert(unicode_codepoint <= kha_graphics2_truetype_StbTruetype.ttUSHORT(data,endCount + 2 * item));
		var start = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,index_map + 14 + segcount * 2 + 2 + 2 * item);
		if(unicode_codepoint < start) {
			return 0;
		}
		var offset = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,index_map + 14 + segcount * 6 + 2 + 2 * item);
		if(offset == 0) {
			return unicode_codepoint + kha_graphics2_truetype_StbTruetype.ttSHORT(data,index_map + 14 + segcount * 4 + 2 + 2 * item);
		}
		return kha_graphics2_truetype_StbTruetype.ttUSHORT(data,offset + (unicode_codepoint - start) * 2 + index_map + 14 + segcount * 6 + 2 + 2 * item);
	} else if(format == 12 || format == 13) {
		var ngroups = kha_graphics2_truetype_StbTruetype.ttULONG(data,index_map + 12);
		var low = 0;
		var high = ngroups;
		while(low < high) {
			var mid = low + (high - low >> 1);
			var start_char = kha_graphics2_truetype_StbTruetype.ttULONG(data,index_map + 16 + mid * 12);
			var end_char = kha_graphics2_truetype_StbTruetype.ttULONG(data,index_map + 16 + mid * 12 + 4);
			if(unicode_codepoint < start_char) {
				high = mid;
			} else if(unicode_codepoint > end_char) {
				low = mid + 1;
			} else {
				var start_glyph = kha_graphics2_truetype_StbTruetype.ttULONG(data,index_map + 16 + mid * 12 + 8);
				if(format == 12) {
					return start_glyph + unicode_codepoint - start_char;
				} else {
					return start_glyph;
				}
			}
		}
		return 0;
	}
	kha_graphics2_truetype_StbTruetype.STBTT_assert(false);
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointShape = function(info,unicode_codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,unicode_codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_setvertex = function(v,type,x,y,cx,cy) {
	v.type = type;
	v.x = x;
	v.y = y;
	v.cx = cx;
	v.cy = cy;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset = function(info,glyph_index) {
	var g1;
	var g2;
	if(glyph_index >= info.numGlyphs) {
		return -1;
	}
	if(info.indexToLocFormat >= 2) {
		return -1;
	}
	if(info.indexToLocFormat == 0) {
		g1 = info.glyf + kha_graphics2_truetype_StbTruetype.ttUSHORT(info.data,info.loca + glyph_index * 2) * 2;
		g2 = info.glyf + kha_graphics2_truetype_StbTruetype.ttUSHORT(info.data,info.loca + glyph_index * 2 + 2) * 2;
	} else {
		g1 = info.glyf + kha_graphics2_truetype_StbTruetype.ttULONG(info.data,info.loca + glyph_index * 4);
		g2 = info.glyf + kha_graphics2_truetype_StbTruetype.ttULONG(info.data,info.loca + glyph_index * 4 + 4);
	}
	if(g1 == g2) {
		return -1;
	} else {
		return g1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox = function(info,glyph_index,rect) {
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return false;
	}
	rect.x0 = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,g + 2);
	rect.y0 = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,g + 4);
	rect.x1 = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,g + 6);
	rect.y1 = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,g + 8);
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBox = function(info,codepoint,rect) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),rect);
};
kha_graphics2_truetype_StbTruetype.stbtt_IsGlyphEmpty = function(info,glyph_index) {
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return true;
	}
	var numberOfContours = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,g);
	return numberOfContours == 0;
};
kha_graphics2_truetype_StbTruetype.stbtt__close_shape = function(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy) {
	if(start_off) {
		if(was_off) {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + scx >> 1,cy + scy >> 1,cx,cy);
		}
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,scx,scy);
	} else if(was_off) {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,cx,cy);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,sx,sy,0,0);
	}
	return num_vertices;
};
kha_graphics2_truetype_StbTruetype.copyVertices = function(from,to,offset,count) {
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		to[offset + i] = from[i];
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape = function(info,glyph_index) {
	var data = info.data;
	var vertices = null;
	var num_vertices = 0;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return null;
	}
	var numberOfContours = kha_graphics2_truetype_StbTruetype.ttSHORT(data,g);
	if(numberOfContours > 0) {
		var flags = 0;
		var j = 0;
		var next_move = 0;
		var off = 0;
		var was_off = false;
		var start_off = false;
		var endPtsOfContoursOffset = g + 10;
		var ins = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,endPtsOfContoursOffset + numberOfContours * 2);
		var pointsIndex = endPtsOfContoursOffset + numberOfContours * 2 + 2 + ins;
		var n = 1 + kha_graphics2_truetype_StbTruetype.ttUSHORT(data,endPtsOfContoursOffset + numberOfContours * 2 - 2);
		var m = n + 2 * numberOfContours;
		var this1 = new Array(m);
		vertices = this1;
		if(vertices == null) {
			return null;
		} else {
			var _g = 0;
			var _g1 = vertices.length;
			while(_g < _g1) {
				var i = _g++;
				vertices[i] = new kha_graphics2_truetype_Stbtt_$vertex();
			}
		}
		next_move = 0;
		var flagcount = 0;
		off = m - n;
		var _g2 = 0;
		var _g11 = n;
		while(_g2 < _g11) {
			var i1 = _g2++;
			if(flagcount == 0) {
				flags = data.readU8(pointsIndex++);
				if((flags & 8) != 0) {
					flagcount = data.readU8(pointsIndex++);
				}
			} else {
				--flagcount;
			}
			vertices[off + i1].type = flags;
		}
		var x = 0;
		var _g21 = 0;
		var _g3 = n;
		while(_g21 < _g3) {
			var i2 = _g21++;
			flags = vertices[off + i2].type;
			if((flags & 2) != 0) {
				var dx = data.readU8(pointsIndex++);
				x += (flags & 16) != 0 ? dx : -dx;
			} else if((flags & 16) == 0) {
				var value;
				var ch1 = data.readU8(pointsIndex);
				var ch2 = data.readU8(pointsIndex + 1);
				var n1 = ch2 | ch1 << 8;
				if((n1 & 32768) != 0) {
					value = n1 - 65536;
				} else {
					value = n1;
				}
				x += value;
				pointsIndex += 2;
			}
			vertices[off + i2].x = x;
		}
		var y = 0;
		var _g4 = 0;
		var _g5 = n;
		while(_g4 < _g5) {
			var i3 = _g4++;
			flags = vertices[off + i3].type;
			if((flags & 4) != 0) {
				var dy = data.readU8(pointsIndex++);
				y += (flags & 32) != 0 ? dy : -dy;
			} else if((flags & 32) == 0) {
				var value1;
				var ch11 = data.readU8(pointsIndex);
				var ch21 = data.readU8(pointsIndex + 1);
				var n2 = ch21 | ch11 << 8;
				if((n2 & 32768) != 0) {
					value1 = n2 - 65536;
				} else {
					value1 = n2;
				}
				y += value1;
				pointsIndex += 2;
			}
			vertices[off + i3].y = y;
		}
		num_vertices = 0;
		var scy = 0;
		var scx = scy;
		var cy = scx;
		var cx = cy;
		var sy = cx;
		var sx = sy;
		var i4 = 0;
		while(i4 < n) {
			flags = vertices[off + i4].type;
			x = vertices[off + i4].x;
			y = vertices[off + i4].y;
			if(next_move == i4) {
				if(i4 != 0) {
					num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
				}
				start_off = (flags & 1) == 0;
				if(start_off) {
					scx = x;
					scy = y;
					if((vertices[off + i4 + 1].type & 1) == 0) {
						sx = x + vertices[off + i4 + 1].x >> 1;
						sy = y + vertices[off + i4 + 1].y >> 1;
					} else {
						sx = vertices[off + i4 + 1].x;
						sy = vertices[off + i4 + 1].y;
						++i4;
					}
				} else {
					sx = x;
					sy = y;
				}
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],1,sx,sy,0,0);
				was_off = false;
				next_move = 1 + kha_graphics2_truetype_StbTruetype.ttUSHORT(data,endPtsOfContoursOffset + j * 2);
				++j;
			} else if((flags & 1) == 0) {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + x >> 1,cy + y >> 1,cx,cy);
				}
				cx = x;
				cy = y;
				was_off = true;
			} else {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,x,y,cx,cy);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,x,y,0,0);
				}
				was_off = false;
			}
			++i4;
		}
		num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
	} else if(numberOfContours == -1) {
		var more = 1;
		var compIndex = g + 10;
		num_vertices = 0;
		vertices = null;
		while(more != 0) {
			var comp_num_verts = 0;
			var i5;
			var comp_verts = null;
			var tmp = null;
			var mtx0 = 1;
			var mtx1 = 0;
			var mtx2 = 0;
			var mtx3 = 1;
			var mtx4 = 0;
			var mtx5 = 0;
			var flags1 = kha_graphics2_truetype_StbTruetype.ttSHORT(data,compIndex);
			compIndex += 2;
			var gidx = kha_graphics2_truetype_StbTruetype.ttSHORT(data,compIndex);
			compIndex += 2;
			if((flags1 & 2) != 0) {
				if((flags1 & 1) != 0) {
					mtx4 = kha_graphics2_truetype_StbTruetype.ttSHORT(data,compIndex);
					compIndex += 2;
					mtx5 = kha_graphics2_truetype_StbTruetype.ttSHORT(data,compIndex);
					compIndex += 2;
				} else {
					mtx4 = kha_graphics2_truetype_StbTruetype.ttCHAR(data,compIndex);
					++compIndex;
					mtx5 = kha_graphics2_truetype_StbTruetype.ttCHAR(data,compIndex);
					++compIndex;
				}
			} else {
				kha_graphics2_truetype_StbTruetype.STBTT_assert(false);
			}
			if((flags1 & 8) != 0) {
				mtx3 = kha_graphics2_truetype_StbTruetype.ttSHORT(data,compIndex) / 16384.0;
				mtx0 = mtx3;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
			} else if((flags1 & 64) != 0) {
				mtx0 = kha_graphics2_truetype_StbTruetype.ttSHORT(data,compIndex) / 16384.0;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
				mtx3 = kha_graphics2_truetype_StbTruetype.ttSHORT(data,compIndex) / 16384.0;
				compIndex += 2;
			} else if((flags1 & 128) != 0) {
				mtx0 = kha_graphics2_truetype_StbTruetype.ttSHORT(data,compIndex) / 16384.0;
				compIndex += 2;
				mtx1 = kha_graphics2_truetype_StbTruetype.ttSHORT(data,compIndex) / 16384.0;
				compIndex += 2;
				mtx2 = kha_graphics2_truetype_StbTruetype.ttSHORT(data,compIndex) / 16384.0;
				compIndex += 2;
				mtx3 = kha_graphics2_truetype_StbTruetype.ttSHORT(data,compIndex) / 16384.0;
				compIndex += 2;
			}
			var m1 = Math.sqrt(mtx0 * mtx0 + mtx1 * mtx1);
			var n3 = Math.sqrt(mtx2 * mtx2 + mtx3 * mtx3);
			comp_verts = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,gidx);
			comp_num_verts = comp_verts == null ? 0 : comp_verts.length;
			if(comp_num_verts > 0) {
				var _g6 = 0;
				var _g12 = comp_num_verts;
				while(_g6 < _g12) {
					var i6 = _g6++;
					var v = comp_verts[i6];
					var x1 = v.x;
					var y1 = v.y;
					v.x = Std.int(m1 * (mtx0 * x1 + mtx2 * y1 + mtx4));
					v.y = Std.int(n3 * (mtx1 * x1 + mtx3 * y1 + mtx5));
					x1 = v.cx;
					y1 = v.cy;
					v.cx = Std.int(m1 * (mtx0 * x1 + mtx2 * y1 + mtx4));
					v.cy = Std.int(n3 * (mtx1 * x1 + mtx3 * y1 + mtx5));
				}
				var this2 = new Array(num_vertices + comp_num_verts);
				tmp = this2;
				if(tmp == null) {
					return null;
				}
				if(num_vertices > 0) {
					kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
				}
				kha_graphics2_truetype_StbTruetype.copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
				vertices = tmp;
				num_vertices += comp_num_verts;
			}
			more = flags1 & 32;
		}
	} else if(numberOfContours < 0) {
		kha_graphics2_truetype_StbTruetype.STBTT_assert(false);
	}
	if(vertices == null) {
		return null;
	}
	kha_graphics2_truetype_StbTruetype.STBTT_assert(vertices.length >= num_vertices);
	if(num_vertices < vertices.length) {
		var this3 = new Array(num_vertices);
		var tmp1 = this3;
		kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp1,0,num_vertices);
		return tmp1;
	} else {
		return vertices;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics = function(info,glyph_index) {
	var numOfLongHorMetrics = kha_graphics2_truetype_StbTruetype.ttUSHORT(info.data,info.hhea + 34);
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics();
	if(glyph_index < numOfLongHorMetrics) {
		metrics.advanceWidth = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.hmtx + 4 * glyph_index);
		metrics.leftSideBearing = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.hmtx + 4 * glyph_index + 2);
	} else {
		metrics.advanceWidth = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.hmtx + 4 * (numOfLongHorMetrics - 1));
		metrics.leftSideBearing = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.hmtx + 4 * numOfLongHorMetrics + 2 * (glyph_index - numOfLongHorMetrics));
	}
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance = function(info,glyph1,glyph2) {
	var kern = info.kern;
	var data = info.data;
	var straw;
	var m;
	if(info.kern == 0) {
		return 0;
	}
	if(kha_graphics2_truetype_StbTruetype.ttUSHORT(data,kern + 2) < 1) {
		return 0;
	}
	if(kha_graphics2_truetype_StbTruetype.ttUSHORT(data,kern + 8) != 1) {
		return 0;
	}
	var l = 0;
	var r = kha_graphics2_truetype_StbTruetype.ttUSHORT(data,kern + 10) - 1;
	var needle = glyph1 << 16 | glyph2;
	while(l <= r) {
		m = l + r >> 1;
		straw = kha_graphics2_truetype_StbTruetype.ttULONG(data,kern + 18 + m * 6);
		if(needle < straw) {
			r = m - 1;
		} else if(needle > straw) {
			l = m + 1;
		} else {
			return kha_graphics2_truetype_StbTruetype.ttSHORT(data,kern + 22 + m * 6);
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointKernAdvance = function(info,ch1,ch2) {
	if(info.kern == 0) {
		return 0;
	}
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch1),kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch2));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointHMetrics = function(info,codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics = function(info) {
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics();
	metrics.ascent = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.hhea + 4);
	metrics.descent = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.hhea + 6);
	metrics.lineGap = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.hhea + 8);
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontBoundingBox = function(info) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	rect.x0 = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.head + 36);
	rect.y0 = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.head + 38);
	rect.x1 = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.head + 40);
	rect.y1 = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.head + 42);
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight = function(info,height) {
	var fheight = kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.hhea + 4) - kha_graphics2_truetype_StbTruetype.ttSHORT(info.data,info.hhea + 6);
	return height / fheight;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForMappingEmToPixels = function(info,pixels) {
	var unitsPerEm = kha_graphics2_truetype_StbTruetype.ttUSHORT(info.data,info.head + 18);
	return pixels / unitsPerEm;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel = function(font,glyph,scale_x,scale_y,shift_x,shift_y) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(font,glyph,rect)) {
		rect.x0 = 0;
		rect.y0 = 0;
		rect.x1 = 0;
		rect.y1 = 0;
	} else {
		var x0 = rect.x0;
		var x1 = rect.x1;
		var y0 = rect.y0;
		var y1 = rect.y1;
		rect.x0 = Math.floor(x0 * scale_x + shift_x);
		rect.y0 = Math.floor(-y1 * scale_y + shift_y);
		rect.x1 = Math.ceil(x1 * scale_x + shift_x);
		rect.y1 = Math.ceil(-y0 * scale_y + shift_y);
	}
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox = function(font,glyph,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel = function(font,codepoint,scale_x,scale_y,shift_x,shift_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(font,codepoint),scale_x,scale_y,shift_x,shift_y);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBox = function(font,codepoint,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel(font,codepoint,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt__new_active = function(e,eIndex,off_x,start_point) {
	var z = new kha_graphics2_truetype_Stbtt_$_$active_$edge();
	var dxdy = (e[eIndex].x1 - e[eIndex].x0) / (e[eIndex].y1 - e[eIndex].y0);
	if(z == null) {
		return z;
	}
	z.fdx = dxdy;
	z.fdy = dxdy != 0.0 ? 1.0 / dxdy : 0.0;
	z.fx = e[eIndex].x0 + dxdy * (start_point - e[eIndex].y0);
	z.fx -= off_x;
	z.direction = e[eIndex].invert ? 1.0 : -1.0;
	z.sy = e[eIndex].y0;
	z.ey = e[eIndex].y1;
	z.next = null;
	return z;
};
kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge = function(scanline,scanlineIndex,x,e,x0,y0,x1,y1) {
	if(y0 == y1) {
		return;
	}
	kha_graphics2_truetype_StbTruetype.STBTT_assert(y0 < y1);
	kha_graphics2_truetype_StbTruetype.STBTT_assert(e.sy <= e.ey);
	if(y0 > e.ey) {
		return;
	}
	if(y1 < e.sy) {
		return;
	}
	if(y0 < e.sy) {
		x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
		y0 = e.sy;
	}
	if(y1 > e.ey) {
		x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
		y1 = e.ey;
	}
	if(x0 == x) {
		kha_graphics2_truetype_StbTruetype.STBTT_assert(x1 <= x + 1);
	} else if(x0 == x + 1) {
		kha_graphics2_truetype_StbTruetype.STBTT_assert(x1 >= x);
	} else if(x0 <= x) {
		kha_graphics2_truetype_StbTruetype.STBTT_assert(x1 <= x);
	} else if(x0 >= x + 1) {
		kha_graphics2_truetype_StbTruetype.STBTT_assert(x1 >= x + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.STBTT_assert(x1 >= x && x1 <= x + 1);
	}
	if(x0 <= x && x1 <= x) {
		var _g = scanlineIndex + x;
		var _g1 = scanline;
		_g1[_g] = _g1[_g] + e.direction * (y1 - y0);
	} else if(!(x0 >= x + 1 && x1 >= x + 1)) {
		kha_graphics2_truetype_StbTruetype.STBTT_assert(x0 >= x && x0 <= x + 1 && x1 >= x && x1 <= x + 1);
		var _g2 = scanlineIndex + x;
		var _g11 = scanline;
		_g11[_g2] = _g11[_g2] + e.direction * (y1 - y0) * (1 - (x0 - x + (x1 - x)) / 2);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new = function(scanline,scanline_fill,scanline_fillIndex,len,e,y_top) {
	var y_bottom = y_top + 1;
	while(e != null) {
		kha_graphics2_truetype_StbTruetype.STBTT_assert(e.ey >= y_top);
		if(e.fdx == 0) {
			var x0 = e.fx;
			if(x0 < len) {
				if(x0 >= 0) {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,Std.int(x0),e,x0,y_top,x0,y_bottom);
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,Std.int(x0 + 1),e,x0,y_top,x0,y_bottom);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,0,e,x0,y_top,x0,y_bottom);
				}
			}
		} else {
			var x01 = e.fx;
			var dx = e.fdx;
			var xb = x01 + dx;
			var x_top;
			var x_bottom;
			var sy0;
			var sy1;
			var dy = e.fdy;
			kha_graphics2_truetype_StbTruetype.STBTT_assert(e.sy <= y_bottom && e.ey >= y_top);
			if(e.sy > y_top) {
				x_top = x01 + dx * (e.sy - y_top);
				sy0 = e.sy;
			} else {
				x_top = x01;
				sy0 = y_top;
			}
			if(e.ey < y_bottom) {
				x_bottom = x01 + dx * (e.ey - y_top);
				sy1 = e.ey;
			} else {
				x_bottom = xb;
				sy1 = y_bottom;
			}
			if(x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
				if(Std.int(x_top) == Std.int(x_bottom)) {
					var x = Std.int(x_top);
					var height = sy1 - sy0;
					kha_graphics2_truetype_StbTruetype.STBTT_assert(x >= 0 && x < len);
					var _g = x;
					var _g1 = scanline;
					_g1[_g] = _g1[_g] + e.direction * (1 - (x_top - x + (x_bottom - x)) / 2) * height;
					var _g2 = scanline_fillIndex + x;
					var _g11 = scanline_fill;
					_g11[_g2] = _g11[_g2] + e.direction * height;
				} else {
					var x1;
					if(x_top > x_bottom) {
						sy0 = y_bottom - (sy0 - y_top);
						sy1 = y_bottom - (sy1 - y_top);
						var t = sy0;
						sy0 = sy1;
						sy1 = t;
						t = x_bottom;
						x_bottom = x_top;
						x_top = t;
						dx = -dx;
						dy = -dy;
						t = x01;
						x01 = xb;
						xb = t;
					}
					var x11 = Std.int(x_top);
					var x2 = Std.int(x_bottom);
					var y_crossing = (x11 + 1 - x01) * dy + y_top;
					var sign = e.direction;
					var area = sign * (y_crossing - sy0);
					var _g3 = x11;
					var _g12 = scanline;
					_g12[_g3] = _g12[_g3] + area * (1 - (x_top - x11 + (x11 + 1 - x11)) / 2);
					var step = sign * dy;
					var _g4 = x11 + 1;
					var _g13 = x2;
					while(_g4 < _g13) {
						var x3 = _g4++;
						var _g5 = x3;
						var _g14 = scanline;
						_g14[_g5] = _g14[_g5] + (area + step / 2);
						area += step;
					}
					y_crossing += dy * (x2 - (x11 + 1));
					kha_graphics2_truetype_StbTruetype.STBTT_assert(Math.abs(area) <= 1.01);
					var _g21 = x2;
					var _g31 = scanline;
					_g31[_g21] = _g31[_g21] + (area + sign * (1 - (x2 - x2 + (x_bottom - x2)) / 2) * (sy1 - y_crossing));
					var _g22 = scanline_fillIndex + x2;
					var _g32 = scanline_fill;
					_g32[_g22] = _g32[_g22] + sign * (sy1 - sy0);
				}
			} else {
				var _g6 = 0;
				var _g15 = len;
				while(_g6 < _g15) {
					var x4 = _g6++;
					var y0 = y_top;
					var x12 = x4;
					var x21 = x4 + 1;
					var x31 = xb;
					var y3 = y_bottom;
					var y1 = (x4 - x01) / dx + y_top;
					var y2 = (x4 + 1 - x01) / dx + y_top;
					if(x01 < x12 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x12 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x12 && x31 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x31 < x12 && x01 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x21 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x21 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x31,y3);
					}
				}
			}
		}
		e = e.next;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges = function(result,e,n,vsubsample,off_x,off_y) {
	var active = null;
	var j = 0;
	var scanline;
	var scanline2Index = 0;
	var eIndex = 0;
	if(result.w > 64) {
		var this1 = new Array(result.w * 2 + 1);
		scanline = this1;
	} else {
		var this2 = new Array(129);
		scanline = this2;
	}
	var scanline2 = scanline;
	scanline2Index = result.w;
	var y = off_y;
	e[eIndex + n].y0 = off_y + result.h + 1;
	while(j < result.h) {
		var scan_y_top = y + 0.0;
		var scan_y_bottom = y + 1.0;
		var step_value = active;
		var step_parent = null;
		var _g = 0;
		var _g1 = result.w;
		while(_g < _g1) {
			var i = _g++;
			scanline[i] = 0;
		}
		var _g2 = 0;
		var _g3 = result.w + 1;
		while(_g2 < _g3) {
			var i1 = _g2++;
			scanline2[scanline2Index + i1] = 0;
		}
		while(step_value != null) {
			var z = step_value;
			if(z.ey <= scan_y_top) {
				if(step_parent == null) {
					active = z.next;
					step_value = z.next;
				} else {
					step_parent.next = z.next;
					step_value = z.next;
				}
				kha_graphics2_truetype_StbTruetype.STBTT_assert(z.direction != 0);
				z.direction = 0;
			} else {
				step_parent = step_value;
				step_value = step_value.next;
			}
		}
		while(e[eIndex].y0 <= scan_y_bottom) {
			if(e[eIndex].y0 != e[eIndex].y1) {
				var z1 = kha_graphics2_truetype_StbTruetype.stbtt__new_active(e,eIndex,off_x,scan_y_top);
				kha_graphics2_truetype_StbTruetype.STBTT_assert(z1.ey >= scan_y_top);
				z1.next = active;
				active = z1;
			}
			++eIndex;
		}
		if(active != null) {
			kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new(scanline,scanline2,scanline2Index + 1,result.w,active,scan_y_top);
		}
		var sum = 0;
		var _g4 = 0;
		var _g5 = result.w;
		while(_g4 < _g5) {
			var i2 = _g4++;
			sum += scanline2[scanline2Index + i2];
			var k = scanline[i2] + sum;
			k = Math.abs(k) * 255.0 + 0.5;
			var m = Std.int(k);
			if(m > 255) {
				m = 255;
			}
			result.pixels.writeU8(result.pixels_offset + j * result.stride + i2,m);
		}
		step_parent = null;
		step_value = active;
		while(step_value != null) {
			var z2 = step_value;
			z2.fx += z2.fdx;
			step_parent = step_value;
			step_value = step_value.next;
		}
		++y;
		++j;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__COMPARE = function(a,b) {
	return a.y0 < b.y0;
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort = function(p,n) {
	var i;
	var j;
	var _g = 1;
	var _g1 = n;
	while(_g < _g1) {
		var i1 = _g++;
		var t = p[i1];
		var a = t;
		j = i1;
		while(j > 0) {
			var b = p[j - 1];
			var c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(a,b);
			if(!c) {
				break;
			}
			p[j] = p[j - 1];
			--j;
		}
		if(i1 != j) {
			p[j] = t;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort = function(p,pIndex,n) {
	while(n > 12) {
		var t;
		var c;
		var m = n >> 1;
		var c01 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + m]);
		var c12 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + m],p[pIndex + n - 1]);
		if(c01 != c12) {
			c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + n - 1]);
			var z = c == c12 ? 0 : n - 1;
			t = p[pIndex + z];
			p[pIndex + z] = p[pIndex + m];
			p[pIndex + m] = t;
		}
		t = p[pIndex];
		p[pIndex] = p[pIndex + m];
		p[pIndex + m] = t;
		var i = 1;
		var j = n - 1;
		while(true) {
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + i],p[pIndex])) ++i;
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + j])) --j;
			if(i >= j) {
				break;
			}
			t = p[pIndex + i];
			p[pIndex + i] = p[pIndex + j];
			p[pIndex + j] = t;
			++i;
			--j;
		}
		if(j < n - i) {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex,j);
			pIndex += i;
			n -= i;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex + i,n - i);
			n = j;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges = function(p,n) {
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,0,n);
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort(p,n);
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize = function(result,pts,wcount,windings,scale_x,scale_y,shift_x,shift_y,off_x,off_y,invert) {
	var y_scale_inv = invert ? -scale_y : scale_y;
	var i;
	var j;
	var k;
	var vsubsample = 1;
	var ptsIndex = 0;
	var n = 0;
	var _g = 0;
	var _g1 = windings;
	while(_g < _g1) {
		var i1 = _g++;
		n += wcount[i1];
	}
	var this1 = new Array(n + 1);
	var e = this1;
	if(e == null) {
		return;
	} else {
		var _g2 = 0;
		var _g3 = e.length;
		while(_g2 < _g3) {
			var i2 = _g2++;
			e[i2] = new kha_graphics2_truetype_Stbtt_$_$edge();
		}
	}
	n = 0;
	var m = 0;
	var _g21 = 0;
	var _g31 = windings;
	while(_g21 < _g31) {
		var i3 = _g21++;
		var p = pts;
		var pIndex = ptsIndex + m;
		m += wcount[i3];
		j = wcount[i3] - 1;
		var _g22 = 0;
		var _g32 = wcount[i3];
		while(_g22 < _g32) {
			var k1 = _g22++;
			var a = k1;
			var b = j;
			if(p[pIndex + j].y == p[pIndex + k1].y) {
				j = k1;
				continue;
			}
			e[n].invert = false;
			if(invert ? p[pIndex + j].y > p[pIndex + k1].y : p[pIndex + j].y < p[pIndex + k1].y) {
				e[n].invert = true;
				a = j;
				b = k1;
			}
			e[n].x0 = p[pIndex + a].x * scale_x + shift_x;
			e[n].y0 = (p[pIndex + a].y * y_scale_inv + shift_y) * vsubsample;
			e[n].x1 = p[pIndex + b].x * scale_x + shift_x;
			e[n].y1 = (p[pIndex + b].y * y_scale_inv + shift_y) * vsubsample;
			++n;
			j = k1;
		}
	}
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges(e,n);
	kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges(result,e,n,vsubsample,off_x,off_y);
};
kha_graphics2_truetype_StbTruetype.stbtt__add_point = function(points,n,x,y) {
	if(points == null) {
		return;
	}
	points[n].x = x;
	points[n].y = y;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve = function(points,num_points,x0,y0,x1,y1,x2,y2,objspace_flatness_squared,n) {
	var mx = (x0 + 2 * x1 + x2) / 4;
	var my = (y0 + 2 * y1 + y2) / 4;
	var dx = (x0 + x2) / 2 - mx;
	var dy = (y0 + y2) / 2 - my;
	if(n > 16) {
		return 1;
	}
	if(dx * dx + dy * dy > objspace_flatness_squared) {
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,x0,y0,(x0 + x1) / 2.0,(y0 + y1) / 2.0,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,mx,my,(x1 + x2) / 2.0,(y1 + y2) / 2.0,x2,y2,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x2,y2);
		num_points.value += 1;
	}
	return 1;
};
kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves = function(vertices,num_verts,objspace_flatness,contour_lengths,num_contours) {
	var points = null;
	var num_points = 0;
	var objspace_flatness_squared = objspace_flatness * objspace_flatness;
	var i;
	var n = 0;
	var start = 0;
	var pass;
	var _g = 0;
	var _g1 = num_verts;
	while(_g < _g1) {
		var i1 = _g++;
		if(vertices[i1].type == 1) {
			++n;
		}
	}
	num_contours.value = n;
	if(n == 0) {
		return null;
	}
	var this1 = new Array(n);
	contour_lengths.value = this1;
	if(contour_lengths.value == null) {
		num_contours.value = 0;
		return null;
	}
	var _g2 = 0;
	while(_g2 < 2) {
		var pass1 = _g2++;
		var x = 0;
		var y = 0;
		if(pass1 == 1) {
			var this2 = new Array(num_points);
			points = this2;
			if(points == null) {
				contour_lengths.value = null;
				num_contours.value = 0;
				return null;
			} else {
				var _g21 = 0;
				var _g3 = points.length;
				while(_g21 < _g3) {
					var i2 = _g21++;
					points[i2] = new kha_graphics2_truetype_Stbtt_$_$point();
				}
			}
		}
		num_points = 0;
		n = -1;
		var _g22 = 0;
		var _g31 = num_verts;
		while(_g22 < _g31) {
			var i3 = _g22++;
			switch(vertices[i3].type) {
			case 1:
				if(n >= 0) {
					contour_lengths.value[n] = num_points - start;
				}
				++n;
				start = num_points;
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 2:
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 3:
				var num_points_reference = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points_reference,x,y,vertices[i3].cx,vertices[i3].cy,vertices[i3].x,vertices[i3].y,objspace_flatness_squared,0);
				num_points = num_points_reference.value;
				x = vertices[i3].x;
				y = vertices[i3].y;
				break;
			}
		}
		contour_lengths.value[n] = num_points - start;
	}
	return points;
};
kha_graphics2_truetype_StbTruetype.stbtt_Rasterize = function(result,flatness_in_pixels,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert) {
	var scale = scale_x > scale_y ? scale_y : scale_x;
	var winding_count = 0;
	var winding_lengths = null;
	var winding_count_reference = { value : winding_count};
	var winding_lengths_reference = new kha_graphics2_truetype_VectorOfIntPointer();
	var windings = kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves(vertices,num_verts,flatness_in_pixels / scale,winding_lengths_reference,winding_count_reference);
	winding_count = winding_count_reference.value;
	winding_lengths = winding_lengths_reference.value;
	if(windings != null) {
		kha_graphics2_truetype_StbTruetype.stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,glyph,region) {
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices.length;
	if(scale_x == 0) {
		scale_x = scale_y;
	}
	if(scale_y == 0) {
		if(scale_x == 0) {
			return null;
		}
		scale_y = scale_x;
	}
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	var ix0 = rect.x0;
	var iy0 = rect.y0;
	var ix1 = rect.x1;
	var iy1 = rect.y1;
	gbm.w = ix1 - ix0;
	gbm.h = iy1 - iy0;
	gbm.pixels = null;
	region.width = gbm.w;
	region.height = gbm.h;
	region.xoff = ix0;
	region.yoff = iy0;
	if(gbm.w != 0 && gbm.h != 0) {
		gbm.pixels = kha_internal_BytesBlob.alloc(gbm.w * gbm.h);
		if(gbm.pixels != null) {
			gbm.stride = gbm.w;
			kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
		}
	}
	return gbm.pixels;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmap = function(info,scale_x,scale_y,glyph,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,glyph,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,glyph) {
	var ix0 = 0;
	var iy0 = 0;
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices == null ? 0 : vertices.length;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	gbm.pixels = output;
	gbm.pixels_offset = output_offset;
	gbm.w = out_w;
	gbm.h = out_h;
	gbm.stride = out_stride;
	if(gbm.w != 0 && gbm.h != 0) {
		kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,glyph) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,glyph);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmap = function(info,scale_x,scale_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,codepoint,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,codepoint);
};
kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap = function(data,offset,pixel_height,pixels,pw,ph,chars,chardata) {
	var f = new kha_graphics2_truetype_Stbtt_$fontinfo();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_InitFont(f,data,offset)) {
		return -1;
	}
	var y = 1;
	var x = y;
	var bottom_y = 1;
	var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(f,pixel_height);
	var i = 0;
	var _g = 0;
	while(_g < chars.length) {
		var index = chars[_g];
		++_g;
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index);
		var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(f,g);
		var advance = metrics.advanceWidth;
		var lsb = metrics.leftSideBearing;
		var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox(f,g,scale,scale);
		var x0 = rect.x0;
		var y0 = rect.y0;
		var x1 = rect.x1;
		var y1 = rect.y1;
		var gw = x1 - x0;
		var gh = y1 - y0;
		if(x + gw + 1 >= pw) {
			y = bottom_y;
			x = 1;
		}
		if(y + gh + 1 >= ph) {
			return -i;
		}
		kha_graphics2_truetype_StbTruetype.STBTT_assert(x + gw < pw);
		kha_graphics2_truetype_StbTruetype.STBTT_assert(y + gh < ph);
		chardata[i].x0 = x;
		chardata[i].y0 = y;
		chardata[i].x1 = x + gw;
		chardata[i].y1 = y + gh;
		chardata[i].xadvance = scale * advance;
		chardata[i].xoff = x0;
		chardata[i].yoff = y0;
		x = x + gw + 1;
		if(y + gh + 1 > bottom_y) {
			bottom_y = y + gh + 1;
		}
		++i;
	}
	var _g1 = 0;
	var _g2 = pw * ph;
	while(_g1 < _g2) {
		var i1 = _g1++;
		pixels.writeU8(i1,0);
	}
	i = 0;
	var ch;
	var _g3 = 0;
	while(_g3 < chars.length) {
		var index1 = chars[_g3];
		++_g3;
		var g1 = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index1);
		ch = chardata[i];
		kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap(f,pixels,ch.x0 + ch.y0 * pw,ch.x1 - ch.x0,ch.y1 - ch.y0,pw,scale,scale,g1);
		++i;
	}
	return bottom_y;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetBakedQuad = function(chardata,pw,ph,char_index,xpos,ypos,q,opengl_fillrule) {
	var d3d_bias = opengl_fillrule ? 0 : -0.5;
	var ipw = 1.0 / pw;
	var iph = 1.0 / ph;
	var b = chardata[char_index];
	var round_x = Math.floor(xpos.value + b.xoff + 0.5);
	var round_y = Math.floor(ypos.value + b.yoff + 0.5);
	q.x0 = round_x + d3d_bias;
	q.y0 = round_y + d3d_bias;
	q.x1 = round_x + b.x1 - b.x0 + d3d_bias;
	q.y1 = round_y + b.y1 - b.y0 + d3d_bias;
	q.s0 = b.x0 * ipw;
	q.t0 = b.y0 * iph;
	q.s1 = b.x1 * ipw;
	q.t1 = b.y1 * iph;
	xpos.value += b.xadvance;
};
var kha_graphics4_ConstantLocation = function() { };
$hxClasses["kha.graphics4.ConstantLocation"] = kha_graphics4_ConstantLocation;
kha_graphics4_ConstantLocation.__name__ = "kha.graphics4.ConstantLocation";
kha_graphics4_ConstantLocation.__isInterface__ = true;
var kha_graphics4_CubeMap = function(size,format,renderTarget,depthStencilFormat) {
	this.isDepthAttachment = false;
	this.depthTexture = null;
	this.texture = null;
	this.frameBuffer = null;
	this.myWidth = size;
	this.myHeight = size;
	this.format = format;
	this.renderTarget = renderTarget;
	this.depthStencilFormat = depthStencilFormat;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.graphics4.CubeMap"] = kha_graphics4_CubeMap;
kha_graphics4_CubeMap.__name__ = "kha.graphics4.CubeMap";
kha_graphics4_CubeMap.__interfaces__ = [kha_Resource,kha_Canvas];
kha_graphics4_CubeMap.createRenderTarget = function(size,format,depthStencil,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	return new kha_graphics4_CubeMap(size,format,true,depthStencil);
};
kha_graphics4_CubeMap.prototype = {
	myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,depthStencilFormat: null
	,graphics4: null
	,frameBuffer: null
	,texture: null
	,depthTexture: null
	,isDepthAttachment: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
		kha_SystemImpl.gl.texParameteri(34067,10240,9729);
		kha_SystemImpl.gl.texParameteri(34067,10241,9729);
		kha_SystemImpl.gl.texParameteri(34067,10242,33071);
		kha_SystemImpl.gl.texParameteri(34067,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
			}
			if(this.format == 3) {
				kha_SystemImpl.gl.texParameteri(34067,10240,9728);
				kha_SystemImpl.gl.texParameteri(34067,10241,9728);
				this.isDepthAttachment = true;
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(34067,colortex);
					kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34069,colortex,0);
					kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34070,colortex,0);
					kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34071,colortex,0);
					kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34072,colortex,0);
					kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34073,colortex,0);
					kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34074,colortex,0);
					kha_SystemImpl.gl.bindTexture(34067,this.texture);
				}
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		}
		kha_SystemImpl.gl.bindTexture(34067,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			if(depthStencilFormat == 1) {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.myWidth,this.myHeight,0,6402,5125,null);
			} else {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
			}
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36096,34067,this.depthTexture,0);
			break;
		case 2:case 3:case 4:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.myWidth,this.myHeight,0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,33306,34067,this.depthTexture,0);
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,width: null
	,get_width: function() {
		return this.myWidth;
	}
	,height: null
	,get_height: function() {
		return this.myHeight;
	}
	,g1: null
	,get_g1: function() {
		return null;
	}
	,g2: null
	,get_g2: function() {
		return null;
	}
	,g4: null
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_graphics4_CubeMap
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_graphics4_FragmentShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) {
		var source = sources[_g];
		++_g;
		this.sources.push(source.toString());
	}
	this.type = 35632;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.FragmentShader"] = kha_graphics4_FragmentShader;
kha_graphics4_FragmentShader.__name__ = "kha.graphics4.FragmentShader";
kha_graphics4_FragmentShader.fromSource = function(source) {
	var shader = new kha_graphics4_FragmentShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_FragmentShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_FragmentShader
};
var kha_graphics4_GeometryShader = function(source) {
};
$hxClasses["kha.graphics4.GeometryShader"] = kha_graphics4_GeometryShader;
kha_graphics4_GeometryShader.__name__ = "kha.graphics4.GeometryShader";
kha_graphics4_GeometryShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_GeometryShader
};
var kha_graphics4_Graphics = function() { };
$hxClasses["kha.graphics4.Graphics"] = kha_graphics4_Graphics;
kha_graphics4_Graphics.__name__ = "kha.graphics4.Graphics";
kha_graphics4_Graphics.__isInterface__ = true;
kha_graphics4_Graphics.prototype = {
	begin: null
	,beginFace: null
	,beginEye: null
	,end: null
	,vsynced: null
	,refreshRate: null
	,clear: null
	,viewport: null
	,scissor: null
	,disableScissor: null
	,setVertexBuffer: null
	,setVertexBuffers: null
	,setIndexBuffer: null
	,setTexture: null
	,setTextureDepth: null
	,setTextureArray: null
	,setVideoTexture: null
	,setImageTexture: null
	,setTextureParameters: null
	,setTexture3DParameters: null
	,setTextureCompareMode: null
	,setCubeMapCompareMode: null
	,setCubeMap: null
	,setCubeMapDepth: null
	,setStencilReferenceValue: null
	,instancedRenderingAvailable: null
	,setPipeline: null
	,setBool: null
	,setInt: null
	,setInt2: null
	,setInt3: null
	,setInt4: null
	,setInts: null
	,setFloat: null
	,setFloat2: null
	,setFloat3: null
	,setFloat4: null
	,setFloats: null
	,setVector2: null
	,setVector3: null
	,setVector4: null
	,setMatrix: null
	,setMatrix3: null
	,drawIndexedVertices: null
	,drawIndexedVerticesInstanced: null
	,flush: null
	,__class__: kha_graphics4_Graphics
};
var kha_graphics4_PipelineCache = function(pipeline) {
	this.pipeline = pipeline;
	try {
		this.projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	} catch( x ) {
		haxe_Log.trace(((x) instanceof js__$Boot_HaxeError) ? x.val : x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 39, className : "kha.graphics4.PipelineCache", methodName : "new"});
	}
	try {
		this.textureLocation = pipeline.getTextureUnit("tex");
	} catch( x1 ) {
		haxe_Log.trace(((x1) instanceof js__$Boot_HaxeError) ? x1.val : x1,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 40, className : "kha.graphics4.PipelineCache", methodName : "new"});
	}
};
$hxClasses["kha.graphics4.PipelineCache"] = kha_graphics4_PipelineCache;
kha_graphics4_PipelineCache.__name__ = "kha.graphics4.PipelineCache";
kha_graphics4_PipelineCache.prototype = {
	pipeline: null
	,projectionLocation: null
	,textureLocation: null
	,__class__: kha_graphics4_PipelineCache
};
var kha_graphics4_ImageShaderPainter = function(g4) {
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	kha_graphics4_ImageShaderPainter.bufferIndex = 0;
	kha_graphics4_ImageShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ImageShaderPainter.standardImagePipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ImageShaderPainter"] = kha_graphics4_ImageShaderPainter;
kha_graphics4_ImageShaderPainter.__name__ = "kha.graphics4.ImageShaderPainter";
kha_graphics4_ImageShaderPainter.initShaders = function() {
	if(kha_graphics4_ImageShaderPainter.structure == null) {
		kha_graphics4_ImageShaderPainter.structure = kha_graphics4_Graphics2.createImageVertexStructure();
	}
	if(kha_graphics4_ImageShaderPainter.standardImagePipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_ImageShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_ImageShaderPainter.standardImagePipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_ImageShaderPainter.prototype = {
	projectionMatrix: null
	,bilinear: null
	,bilinearMipmaps: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ImageShaderPainter.standardImagePipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ImageShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ImageShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(6000,kha_graphics4_ImageShaderPainter.structure,1);
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ImageShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(9000,0);
			var indices = kha_graphics4_ImageShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1500) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ImageShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColor: function(r,g,b,a) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		kha_graphics4_ImageShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ImageShaderPainter.bufferIndex * 4);
		this.g.setVertexBuffer(kha_graphics4_ImageShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ImageShaderPainter.indexBuffer);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setTexture(this.myPipeline.textureLocation,kha_graphics4_ImageShaderPainter.lastTexture);
		this.g.setTextureParameters(this.myPipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,this.bilinearMipmaps ? 2 : 0);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ImageShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.myPipeline.textureLocation,null);
		kha_graphics4_ImageShaderPainter.bufferIndex = 0;
		kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setBilinearMipmapFilter: function(bilinear) {
		this.end();
		this.bilinearMipmaps = bilinear;
	}
	,drawImage: function(img,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		this.setRectColor(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,(color >>> 24) * 0.00392156862745098 * opacity);
		this.setRectTexCoords(0,0,tex.get_width() / tex.get_realWidth(),tex.get_height() / tex.get_realHeight());
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImage2: function(img,sx,sy,sw,sh,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		this.setRectTexCoords(sx / tex.get_realWidth(),sy / tex.get_realHeight(),(sx + sw) / tex.get_realWidth(),(sy + sh) / tex.get_realHeight());
		this.setRectColor(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,(color >>> 24) * 0.00392156862745098 * opacity);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImageScale: function(img,sx,sy,sw,sh,left,top,right,bottom,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		this.setRectTexCoords(sx / tex.get_realWidth(),sy / tex.get_realHeight(),(sx + sw) / tex.get_realWidth(),(sy + sh) / tex.get_realHeight());
		this.setRectColor(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,opacity);
		this.setRectVertices(left,bottom,left,top,right,top,right,bottom);
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,end: function() {
		if(kha_graphics4_ImageShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_ImageShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_ImageShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_ColoredShaderPainter = function(g4) {
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ColoredShaderPainter.standardColorPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ColoredShaderPainter"] = kha_graphics4_ColoredShaderPainter;
kha_graphics4_ColoredShaderPainter.__name__ = "kha.graphics4.ColoredShaderPainter";
kha_graphics4_ColoredShaderPainter.initShaders = function() {
	if(kha_graphics4_ColoredShaderPainter.structure == null) {
		kha_graphics4_ColoredShaderPainter.structure = kha_graphics4_Graphics2.createColoredVertexStructure();
	}
	if(kha_graphics4_ColoredShaderPainter.standardColorPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createColoredPipeline(kha_graphics4_ColoredShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_ColoredShaderPainter.standardColorPipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_ColoredShaderPainter.prototype = {
	projectionMatrix: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ColoredShaderPainter.standardColorPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ColoredShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ColoredShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_ColoredShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ColoredShaderPainter.indexBuffer.unlock();
			kha_graphics4_ColoredShaderPainter.triangleVertexBuffer = new kha_graphics4_VertexBuffer(3000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer = new kha_graphics4_IndexBuffer(3000,0);
			var triIndices = kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.lock();
			var _g1 = 0;
			while(_g1 < 1000) {
				var i1 = _g1++;
				triIndices[i1 * 3] = i1 * 3;
				triIndices[i1 * 3 + 1] = i1 * 3 + 1;
				triIndices[i1 * 3 + 2] = i1 * 3 + 2;
			}
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 7] = topleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 8] = toplefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 14] = toprightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 15] = toprighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 16] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 21] = bottomrightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 22] = bottomrighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 23] = -5.0;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 20] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 24] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 25] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 26] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 27] = a;
	}
	,setTriVertices: function(x1,y1,x2,y2,x3,y3) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex] = x1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 1] = y1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 7] = x2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 8] = y2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 14] = x3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 15] = y3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 16] = -5.0;
	}
	,setTriColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 20] = a;
	}
	,drawBuffer: function(trisDone) {
		if(!trisDone) {
			this.endTris(true);
		}
		kha_graphics4_ColoredShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.bufferIndex * 4);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.indexBuffer);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.bufferIndex * 2 * 3);
		kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
	}
	,drawTriBuffer: function(rectsDone) {
		if(!rectsDone) {
			this.endRects(true);
		}
		kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.triangleVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.triangleIndexBuffer);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
	}
	,fillRect: function(opacity,color,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex + 1 >= 1000) {
			this.drawBuffer(false);
		}
		this.setRectColors(opacity,color);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ColoredShaderPainter.bufferIndex;
	}
	,fillTriangle: function(opacity,color,x1,y1,x2,y2,x3,y3) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex + 1 >= 1000) {
			this.drawTriBuffer(false);
		}
		this.setTriColors(opacity,color);
		this.setTriVertices(x1,y1,x2,y2,x3,y3);
		++kha_graphics4_ColoredShaderPainter.triangleBufferIndex;
	}
	,endTris: function(rectsDone) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(rectsDone);
		}
	}
	,endRects: function(trisDone) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(trisDone);
		}
	}
	,end: function() {
		this.endTris(false);
		this.endRects(false);
	}
	,__class__: kha_graphics4_ColoredShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_TextShaderPainter = function(g4) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.bilinear = false;
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_TextShaderPainter.bufferIndex = 0;
	kha_graphics4_TextShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_TextShaderPainter.standardTextPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.TextShaderPainter"] = kha_graphics4_TextShaderPainter;
kha_graphics4_TextShaderPainter.__name__ = "kha.graphics4.TextShaderPainter";
kha_graphics4_TextShaderPainter.initShaders = function() {
	if(kha_graphics4_TextShaderPainter.structure == null) {
		kha_graphics4_TextShaderPainter.structure = kha_graphics4_Graphics2.createTextVertexStructure();
	}
	if(kha_graphics4_TextShaderPainter.standardTextPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createTextPipeline(kha_graphics4_TextShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_TextShaderPainter.standardTextPipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_TextShaderPainter.findIndex = function(charCode) {
	var glyphs = kha_graphics2_Graphics.fontGlyphs;
	var blocks = kha_KravurImage.charBlocks;
	var offset = 0;
	var _g = 0;
	var _g1 = Std.int(blocks.length / 2);
	while(_g < _g1) {
		var i = _g++;
		var start = blocks[i * 2];
		var end = blocks[i * 2 + 1];
		if(charCode >= start && charCode <= end) {
			return offset + charCode - start;
		}
		offset += end - start + 1;
	}
	return 0;
};
kha_graphics4_TextShaderPainter.prototype = {
	projectionMatrix: null
	,font: null
	,g: null
	,myPipeline: null
	,fontSize: null
	,bilinear: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_TextShaderPainter.standardTextPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_TextShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_TextShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_TextShaderPainter.structure,1);
			kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_TextShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_TextShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_TextShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 5] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 6] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 7] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 14] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 15] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 16] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 23] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 24] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 25] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 32] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 33] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 34] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		kha_graphics4_TextShaderPainter.rectVertexBuffer.unlock(kha_graphics4_TextShaderPainter.bufferIndex * 4);
		this.g.setVertexBuffer(kha_graphics4_TextShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_TextShaderPainter.indexBuffer);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setTexture(this.myPipeline.textureLocation,kha_graphics4_TextShaderPainter.lastTexture);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.setTextureParameters(this.myPipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,0);
		this.g.drawIndexedVertices(0,kha_graphics4_TextShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.myPipeline.textureLocation,null);
		kha_graphics4_TextShaderPainter.bufferIndex = 0;
		kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setFont: function(font) {
		this.font = js_Boot.__cast(font , kha_Kravur);
	}
	,bakedQuadCache: null
	,drawString: function(text,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var charCode = StringTools.fastCodeAt(text,i);
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(charCode),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var value = new kha_math_FastVector2(q.x0,q.y1);
				var w = transformation._02 * value.x + transformation._12 * value.y + transformation._22;
				var x1 = (transformation._00 * value.x + transformation._10 * value.y + transformation._20) / w;
				var y1 = (transformation._01 * value.x + transformation._11 * value.y + transformation._21) / w;
				var p0 = new kha_math_FastVector2(x1,y1);
				var value1 = new kha_math_FastVector2(q.x0,q.y0);
				var w1 = transformation._02 * value1.x + transformation._12 * value1.y + transformation._22;
				var x2 = (transformation._00 * value1.x + transformation._10 * value1.y + transformation._20) / w1;
				var y2 = (transformation._01 * value1.x + transformation._11 * value1.y + transformation._21) / w1;
				var p1 = new kha_math_FastVector2(x2,y2);
				var value2 = new kha_math_FastVector2(q.x1,q.y0);
				var w2 = transformation._02 * value2.x + transformation._12 * value2.y + transformation._22;
				var x3 = (transformation._00 * value2.x + transformation._10 * value2.y + transformation._20) / w2;
				var y3 = (transformation._01 * value2.x + transformation._11 * value2.y + transformation._21) / w2;
				var p2 = new kha_math_FastVector2(x3,y3);
				var value3 = new kha_math_FastVector2(q.x1,q.y1);
				var w3 = transformation._02 * value3.x + transformation._12 * value3.y + transformation._22;
				var x4 = (transformation._00 * value3.x + transformation._10 * value3.y + transformation._20) / w3;
				var y4 = (transformation._01 * value3.x + transformation._11 * value3.y + transformation._21) / w3;
				var p3 = new kha_math_FastVector2(x4,y4);
				this.setRectVertices(p0.x,p0.y,p1.x,p1.y,p2.x,p2.y,p3.x,p3.y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,drawCharacters: function(text,start,length,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) {
			var i = _g++;
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(text[i]),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var value = new kha_math_FastVector2(q.x0,q.y1);
				var w = transformation._02 * value.x + transformation._12 * value.y + transformation._22;
				var x1 = (transformation._00 * value.x + transformation._10 * value.y + transformation._20) / w;
				var y1 = (transformation._01 * value.x + transformation._11 * value.y + transformation._21) / w;
				var p0 = new kha_math_FastVector2(x1,y1);
				var value1 = new kha_math_FastVector2(q.x0,q.y0);
				var w1 = transformation._02 * value1.x + transformation._12 * value1.y + transformation._22;
				var x2 = (transformation._00 * value1.x + transformation._10 * value1.y + transformation._20) / w1;
				var y2 = (transformation._01 * value1.x + transformation._11 * value1.y + transformation._21) / w1;
				var p1 = new kha_math_FastVector2(x2,y2);
				var value2 = new kha_math_FastVector2(q.x1,q.y0);
				var w2 = transformation._02 * value2.x + transformation._12 * value2.y + transformation._22;
				var x3 = (transformation._00 * value2.x + transformation._10 * value2.y + transformation._20) / w2;
				var y3 = (transformation._01 * value2.x + transformation._11 * value2.y + transformation._21) / w2;
				var p2 = new kha_math_FastVector2(x3,y3);
				var value3 = new kha_math_FastVector2(q.x1,q.y1);
				var w3 = transformation._02 * value3.x + transformation._12 * value3.y + transformation._22;
				var x4 = (transformation._00 * value3.x + transformation._10 * value3.y + transformation._20) / w3;
				var y4 = (transformation._01 * value3.x + transformation._11 * value3.y + transformation._21) / w3;
				var p3 = new kha_math_FastVector2(x4,y4);
				this.setRectVertices(p0.x,p0.y,p1.x,p1.y,p2.x,p2.y,p3.x,p3.y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,end: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_TextShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_Graphics2 = function(canvas) {
	this.scissorH = -1;
	this.scissorW = -1;
	this.scissorY = -1;
	this.scissorX = -1;
	this.scissorEnabled = false;
	this.lastPipeline = null;
	this.pipelineCache = new haxe_ds_ObjectMap();
	this.myMipmapScaleQuality = 0;
	this.myImageScaleQuality = 0;
	kha_graphics2_Graphics.call(this);
	this.set_color(-1);
	this.canvas = canvas;
	this.g = canvas.get_g4();
	this.imagePainter = new kha_graphics4_ImageShaderPainter(this.g);
	this.coloredPainter = new kha_graphics4_ColoredShaderPainter(this.g);
	this.textPainter = new kha_graphics4_TextShaderPainter(this.g);
	this.textPainter.fontSize = this.get_fontSize();
	this.projectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.setProjection();
	if(kha_graphics4_Graphics2.videoPipeline == null) {
		kha_graphics4_Graphics2.videoPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_Graphics2.createImageVertexStructure());
		kha_graphics4_Graphics2.videoPipeline.fragmentShader = kha_Shaders.painter_video_frag;
		kha_graphics4_Graphics2.videoPipeline.vertexShader = kha_Shaders.painter_video_vert;
		kha_graphics4_Graphics2.videoPipeline.compile();
	}
};
$hxClasses["kha.graphics4.Graphics2"] = kha_graphics4_Graphics2;
kha_graphics4_Graphics2.__name__ = "kha.graphics4.Graphics2";
kha_graphics4_Graphics2.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_graphics4_Graphics2.createImageVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createImagePipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_image_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_image_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createColoredVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createColoredPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_colored_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_colored_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createTextVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createTextPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_text_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_text_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 3;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 3;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.__super__ = kha_graphics2_Graphics;
kha_graphics4_Graphics2.prototype = $extend(kha_graphics2_Graphics.prototype,{
	myColor: null
	,myFont: null
	,projectionMatrix: null
	,imagePainter: null
	,coloredPainter: null
	,textPainter: null
	,canvas: null
	,g: null
	,setProjection: function() {
		var width = this.canvas.get_width();
		var height = this.canvas.get_height();
		if(((this.canvas) instanceof kha_Framebuffer)) {
			var _this = this.projectionMatrix;
			var m = kha_math_FastMatrix4.orthogonalProjection(0,width,height,0,0.1,1000);
			_this._00 = m._00;
			_this._10 = m._10;
			_this._20 = m._20;
			_this._30 = m._30;
			_this._01 = m._01;
			_this._11 = m._11;
			_this._21 = m._21;
			_this._31 = m._31;
			_this._02 = m._02;
			_this._12 = m._12;
			_this._22 = m._22;
			_this._32 = m._32;
			_this._03 = m._03;
			_this._13 = m._13;
			_this._23 = m._23;
			_this._33 = m._33;
		} else {
			if(!kha_Image.get_nonPow2Supported()) {
				width = kha_graphics4_Graphics2.upperPowerOfTwo(width);
				height = kha_graphics4_Graphics2.upperPowerOfTwo(height);
			}
			if(kha_Image.renderTargetsInvertedY()) {
				var _this1 = this.projectionMatrix;
				var m1 = kha_math_FastMatrix4.orthogonalProjection(0,width,0,height,0.1,1000);
				_this1._00 = m1._00;
				_this1._10 = m1._10;
				_this1._20 = m1._20;
				_this1._30 = m1._30;
				_this1._01 = m1._01;
				_this1._11 = m1._11;
				_this1._21 = m1._21;
				_this1._31 = m1._31;
				_this1._02 = m1._02;
				_this1._12 = m1._12;
				_this1._22 = m1._22;
				_this1._32 = m1._32;
				_this1._03 = m1._03;
				_this1._13 = m1._13;
				_this1._23 = m1._23;
				_this1._33 = m1._33;
			} else {
				var _this2 = this.projectionMatrix;
				var m2 = kha_math_FastMatrix4.orthogonalProjection(0,width,height,0,0.1,1000);
				_this2._00 = m2._00;
				_this2._10 = m2._10;
				_this2._20 = m2._20;
				_this2._30 = m2._30;
				_this2._01 = m2._01;
				_this2._11 = m2._11;
				_this2._21 = m2._21;
				_this2._31 = m2._31;
				_this2._02 = m2._02;
				_this2._12 = m2._12;
				_this2._22 = m2._22;
				_this2._32 = m2._32;
				_this2._03 = m2._03;
				_this2._13 = m2._13;
				_this2._23 = m2._23;
				_this2._33 = m2._33;
			}
		}
		this.imagePainter.setProjection(this.projectionMatrix);
		this.coloredPainter.setProjection(this.projectionMatrix);
		this.textPainter.setProjection(this.projectionMatrix);
	}
	,drawImage: function(img,x,y) {
		this.coloredPainter.end();
		this.textPainter.end();
		var xw = x + img.get_width();
		var yh = y + img.get_height();
		var _this = this.get_transformation();
		var value = new kha_math_FastVector2(x,yh);
		var w = _this._02 * value.x + _this._12 * value.y + _this._22;
		var x1 = (_this._00 * value.x + _this._10 * value.y + _this._20) / w;
		var y1 = (_this._01 * value.x + _this._11 * value.y + _this._21) / w;
		var p1 = new kha_math_FastVector2(x1,y1);
		var _this1 = this.get_transformation();
		var value1 = new kha_math_FastVector2(x,y);
		var w1 = _this1._02 * value1.x + _this1._12 * value1.y + _this1._22;
		var x2 = (_this1._00 * value1.x + _this1._10 * value1.y + _this1._20) / w1;
		var y2 = (_this1._01 * value1.x + _this1._11 * value1.y + _this1._21) / w1;
		var p2 = new kha_math_FastVector2(x2,y2);
		var _this2 = this.get_transformation();
		var value2 = new kha_math_FastVector2(xw,y);
		var w2 = _this2._02 * value2.x + _this2._12 * value2.y + _this2._22;
		var x3 = (_this2._00 * value2.x + _this2._10 * value2.y + _this2._20) / w2;
		var y3 = (_this2._01 * value2.x + _this2._11 * value2.y + _this2._21) / w2;
		var p3 = new kha_math_FastVector2(x3,y3);
		var _this3 = this.get_transformation();
		var value3 = new kha_math_FastVector2(xw,yh);
		var w3 = _this3._02 * value3.x + _this3._12 * value3.y + _this3._22;
		var x4 = (_this3._00 * value3.x + _this3._10 * value3.y + _this3._20) / w3;
		var y4 = (_this3._01 * value3.x + _this3._11 * value3.y + _this3._21) / w3;
		var p4 = new kha_math_FastVector2(x4,y4);
		this.imagePainter.drawImage(img,p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y,this.get_opacity(),this.get_color());
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.coloredPainter.end();
		this.textPainter.end();
		var _this = this.get_transformation();
		var value = new kha_math_FastVector2(dx,dy + dh);
		var w = _this._02 * value.x + _this._12 * value.y + _this._22;
		var x = (_this._00 * value.x + _this._10 * value.y + _this._20) / w;
		var y = (_this._01 * value.x + _this._11 * value.y + _this._21) / w;
		var p1 = new kha_math_FastVector2(x,y);
		var _this1 = this.get_transformation();
		var value1 = new kha_math_FastVector2(dx,dy);
		var w1 = _this1._02 * value1.x + _this1._12 * value1.y + _this1._22;
		var x1 = (_this1._00 * value1.x + _this1._10 * value1.y + _this1._20) / w1;
		var y1 = (_this1._01 * value1.x + _this1._11 * value1.y + _this1._21) / w1;
		var p2 = new kha_math_FastVector2(x1,y1);
		var _this2 = this.get_transformation();
		var value2 = new kha_math_FastVector2(dx + dw,dy);
		var w2 = _this2._02 * value2.x + _this2._12 * value2.y + _this2._22;
		var x2 = (_this2._00 * value2.x + _this2._10 * value2.y + _this2._20) / w2;
		var y2 = (_this2._01 * value2.x + _this2._11 * value2.y + _this2._21) / w2;
		var p3 = new kha_math_FastVector2(x2,y2);
		var _this3 = this.get_transformation();
		var value3 = new kha_math_FastVector2(dx + dw,dy + dh);
		var w3 = _this3._02 * value3.x + _this3._12 * value3.y + _this3._22;
		var x3 = (_this3._00 * value3.x + _this3._10 * value3.y + _this3._20) / w3;
		var y3 = (_this3._01 * value3.x + _this3._11 * value3.y + _this3._21) / w3;
		var p4 = new kha_math_FastVector2(x3,y3);
		this.imagePainter.drawImage2(img,sx,sy,sw,sh,p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y,this.get_opacity(),this.get_color());
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_color: function(color) {
		return this.myColor = color;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.get_transformation();
		var value = new kha_math_FastVector2(x - strength / 2,y + strength / 2);
		var w = _this._02 * value.x + _this._12 * value.y + _this._22;
		var x1 = (_this._00 * value.x + _this._10 * value.y + _this._20) / w;
		var y1 = (_this._01 * value.x + _this._11 * value.y + _this._21) / w;
		var p1 = new kha_math_FastVector2(x1,y1);
		var _this1 = this.get_transformation();
		var value1 = new kha_math_FastVector2(x - strength / 2,y - strength / 2);
		var w1 = _this1._02 * value1.x + _this1._12 * value1.y + _this1._22;
		var x2 = (_this1._00 * value1.x + _this1._10 * value1.y + _this1._20) / w1;
		var y2 = (_this1._01 * value1.x + _this1._11 * value1.y + _this1._21) / w1;
		var p2 = new kha_math_FastVector2(x2,y2);
		var _this2 = this.get_transformation();
		var value2 = new kha_math_FastVector2(x + width + strength / 2,y - strength / 2);
		var w2 = _this2._02 * value2.x + _this2._12 * value2.y + _this2._22;
		var x3 = (_this2._00 * value2.x + _this2._10 * value2.y + _this2._20) / w2;
		var y3 = (_this2._01 * value2.x + _this2._11 * value2.y + _this2._21) / w2;
		var p3 = new kha_math_FastVector2(x3,y3);
		var _this3 = this.get_transformation();
		var value3 = new kha_math_FastVector2(x + width + strength / 2,y + strength / 2);
		var w3 = _this3._02 * value3.x + _this3._12 * value3.y + _this3._22;
		var x4 = (_this3._00 * value3.x + _this3._10 * value3.y + _this3._20) / w3;
		var y4 = (_this3._01 * value3.x + _this3._11 * value3.y + _this3._21) / w3;
		var p4 = new kha_math_FastVector2(x4,y4);
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
		var _this4 = this.get_transformation();
		var value4 = new kha_math_FastVector2(x - strength / 2,y + height - strength / 2);
		var w4 = _this4._02 * value4.x + _this4._12 * value4.y + _this4._22;
		var x5 = (_this4._00 * value4.x + _this4._10 * value4.y + _this4._20) / w4;
		var y5 = (_this4._01 * value4.x + _this4._11 * value4.y + _this4._21) / w4;
		var v = new kha_math_FastVector2(x5,y5);
		p1.x = v.x;
		p1.y = v.y;
		var _this5 = this.get_transformation();
		var value5 = new kha_math_FastVector2(x - strength / 2,y + strength / 2);
		var w5 = _this5._02 * value5.x + _this5._12 * value5.y + _this5._22;
		var x6 = (_this5._00 * value5.x + _this5._10 * value5.y + _this5._20) / w5;
		var y6 = (_this5._01 * value5.x + _this5._11 * value5.y + _this5._21) / w5;
		var v1 = new kha_math_FastVector2(x6,y6);
		p2.x = v1.x;
		p2.y = v1.y;
		var _this6 = this.get_transformation();
		var value6 = new kha_math_FastVector2(x + strength / 2,y + strength / 2);
		var w6 = _this6._02 * value6.x + _this6._12 * value6.y + _this6._22;
		var x7 = (_this6._00 * value6.x + _this6._10 * value6.y + _this6._20) / w6;
		var y7 = (_this6._01 * value6.x + _this6._11 * value6.y + _this6._21) / w6;
		var v2 = new kha_math_FastVector2(x7,y7);
		p3.x = v2.x;
		p3.y = v2.y;
		var _this7 = this.get_transformation();
		var value7 = new kha_math_FastVector2(x + strength / 2,y + height - strength / 2);
		var w7 = _this7._02 * value7.x + _this7._12 * value7.y + _this7._22;
		var x8 = (_this7._00 * value7.x + _this7._10 * value7.y + _this7._20) / w7;
		var y8 = (_this7._01 * value7.x + _this7._11 * value7.y + _this7._21) / w7;
		var v3 = new kha_math_FastVector2(x8,y8);
		p4.x = v3.x;
		p4.y = v3.y;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
		var _this8 = this.get_transformation();
		var value8 = new kha_math_FastVector2(x - strength / 2,y + height + strength / 2);
		var w8 = _this8._02 * value8.x + _this8._12 * value8.y + _this8._22;
		var x9 = (_this8._00 * value8.x + _this8._10 * value8.y + _this8._20) / w8;
		var y9 = (_this8._01 * value8.x + _this8._11 * value8.y + _this8._21) / w8;
		var v4 = new kha_math_FastVector2(x9,y9);
		p1.x = v4.x;
		p1.y = v4.y;
		var _this9 = this.get_transformation();
		var value9 = new kha_math_FastVector2(x - strength / 2,y + height - strength / 2);
		var w9 = _this9._02 * value9.x + _this9._12 * value9.y + _this9._22;
		var x10 = (_this9._00 * value9.x + _this9._10 * value9.y + _this9._20) / w9;
		var y10 = (_this9._01 * value9.x + _this9._11 * value9.y + _this9._21) / w9;
		var v5 = new kha_math_FastVector2(x10,y10);
		p2.x = v5.x;
		p2.y = v5.y;
		var _this10 = this.get_transformation();
		var value10 = new kha_math_FastVector2(x + width + strength / 2,y + height - strength / 2);
		var w10 = _this10._02 * value10.x + _this10._12 * value10.y + _this10._22;
		var x11 = (_this10._00 * value10.x + _this10._10 * value10.y + _this10._20) / w10;
		var y11 = (_this10._01 * value10.x + _this10._11 * value10.y + _this10._21) / w10;
		var v6 = new kha_math_FastVector2(x11,y11);
		p3.x = v6.x;
		p3.y = v6.y;
		var _this11 = this.get_transformation();
		var value11 = new kha_math_FastVector2(x + width + strength / 2,y + height + strength / 2);
		var w11 = _this11._02 * value11.x + _this11._12 * value11.y + _this11._22;
		var x12 = (_this11._00 * value11.x + _this11._10 * value11.y + _this11._20) / w11;
		var y12 = (_this11._01 * value11.x + _this11._11 * value11.y + _this11._21) / w11;
		var v7 = new kha_math_FastVector2(x12,y12);
		p4.x = v7.x;
		p4.y = v7.y;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
		var _this12 = this.get_transformation();
		var value12 = new kha_math_FastVector2(x + width - strength / 2,y + height - strength / 2);
		var w12 = _this12._02 * value12.x + _this12._12 * value12.y + _this12._22;
		var x13 = (_this12._00 * value12.x + _this12._10 * value12.y + _this12._20) / w12;
		var y13 = (_this12._01 * value12.x + _this12._11 * value12.y + _this12._21) / w12;
		var v8 = new kha_math_FastVector2(x13,y13);
		p1.x = v8.x;
		p1.y = v8.y;
		var _this13 = this.get_transformation();
		var value13 = new kha_math_FastVector2(x + width - strength / 2,y + strength / 2);
		var w13 = _this13._02 * value13.x + _this13._12 * value13.y + _this13._22;
		var x14 = (_this13._00 * value13.x + _this13._10 * value13.y + _this13._20) / w13;
		var y14 = (_this13._01 * value13.x + _this13._11 * value13.y + _this13._21) / w13;
		var v9 = new kha_math_FastVector2(x14,y14);
		p2.x = v9.x;
		p2.y = v9.y;
		var _this14 = this.get_transformation();
		var value14 = new kha_math_FastVector2(x + width + strength / 2,y + strength / 2);
		var w14 = _this14._02 * value14.x + _this14._12 * value14.y + _this14._22;
		var x15 = (_this14._00 * value14.x + _this14._10 * value14.y + _this14._20) / w14;
		var y15 = (_this14._01 * value14.x + _this14._11 * value14.y + _this14._21) / w14;
		var v10 = new kha_math_FastVector2(x15,y15);
		p3.x = v10.x;
		p3.y = v10.y;
		var _this15 = this.get_transformation();
		var value15 = new kha_math_FastVector2(x + width + strength / 2,y + height - strength / 2);
		var w15 = _this15._02 * value15.x + _this15._12 * value15.y + _this15._22;
		var x16 = (_this15._00 * value15.x + _this15._10 * value15.y + _this15._20) / w15;
		var y16 = (_this15._01 * value15.x + _this15._11 * value15.y + _this15._21) / w15;
		var v11 = new kha_math_FastVector2(x16,y16);
		p4.x = v11.x;
		p4.y = v11.y;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
	}
	,fillRect: function(x,y,width,height) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.get_transformation();
		var value = new kha_math_FastVector2(x,y + height);
		var w = _this._02 * value.x + _this._12 * value.y + _this._22;
		var x1 = (_this._00 * value.x + _this._10 * value.y + _this._20) / w;
		var y1 = (_this._01 * value.x + _this._11 * value.y + _this._21) / w;
		var p1 = new kha_math_FastVector2(x1,y1);
		var _this1 = this.get_transformation();
		var value1 = new kha_math_FastVector2(x,y);
		var w1 = _this1._02 * value1.x + _this1._12 * value1.y + _this1._22;
		var x2 = (_this1._00 * value1.x + _this1._10 * value1.y + _this1._20) / w1;
		var y2 = (_this1._01 * value1.x + _this1._11 * value1.y + _this1._21) / w1;
		var p2 = new kha_math_FastVector2(x2,y2);
		var _this2 = this.get_transformation();
		var value2 = new kha_math_FastVector2(x + width,y);
		var w2 = _this2._02 * value2.x + _this2._12 * value2.y + _this2._22;
		var x3 = (_this2._00 * value2.x + _this2._10 * value2.y + _this2._20) / w2;
		var y3 = (_this2._01 * value2.x + _this2._11 * value2.y + _this2._21) / w2;
		var p3 = new kha_math_FastVector2(x3,y3);
		var _this3 = this.get_transformation();
		var value3 = new kha_math_FastVector2(x + width,y + height);
		var w3 = _this3._02 * value3.x + _this3._12 * value3.y + _this3._22;
		var x4 = (_this3._00 * value3.x + _this3._10 * value3.y + _this3._20) / w3;
		var y4 = (_this3._01 * value3.x + _this3._11 * value3.y + _this3._21) / w3;
		var p4 = new kha_math_FastVector2(x4,y4);
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
	}
	,drawString: function(text,x,y) {
		this.imagePainter.end();
		this.coloredPainter.end();
		this.textPainter.drawString(text,this.get_opacity(),this.get_color(),x,y,this.get_transformation());
	}
	,drawCharacters: function(text,start,length,x,y) {
		this.imagePainter.end();
		this.coloredPainter.end();
		this.textPainter.drawCharacters(text,start,length,this.get_opacity(),this.get_color(),x,y,this.get_transformation());
	}
	,get_font: function() {
		return this.myFont;
	}
	,set_font: function(font) {
		this.textPainter.setFont(font);
		return this.myFont = font;
	}
	,set_fontSize: function(value) {
		return kha_graphics2_Graphics.prototype.set_fontSize.call(this,this.textPainter.fontSize = value);
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var vec = new kha_math_FastVector2();
		if(y2 == y1) {
			var v = new kha_math_FastVector2(0,-1);
			vec.x = v.x;
			vec.y = v.y;
		} else {
			var v1 = new kha_math_FastVector2(1,-(x2 - x1) / (y2 - y1));
			vec.x = v1.x;
			vec.y = v1.y;
		}
		vec.set_length(strength);
		var p1 = new kha_math_FastVector2(x1 + 0.5 * vec.x,y1 + 0.5 * vec.y);
		var p2 = new kha_math_FastVector2(x2 + 0.5 * vec.x,y2 + 0.5 * vec.y);
		var p3 = new kha_math_FastVector2(p1.x - vec.x,p1.y - vec.y);
		var p4 = new kha_math_FastVector2(p2.x - vec.x,p2.y - vec.y);
		var _this = this.get_transformation();
		var w = _this._02 * p1.x + _this._12 * p1.y + _this._22;
		var x = (_this._00 * p1.x + _this._10 * p1.y + _this._20) / w;
		var y = (_this._01 * p1.x + _this._11 * p1.y + _this._21) / w;
		var v2 = new kha_math_FastVector2(x,y);
		p1.x = v2.x;
		p1.y = v2.y;
		var _this1 = this.get_transformation();
		var w1 = _this1._02 * p2.x + _this1._12 * p2.y + _this1._22;
		var x3 = (_this1._00 * p2.x + _this1._10 * p2.y + _this1._20) / w1;
		var y3 = (_this1._01 * p2.x + _this1._11 * p2.y + _this1._21) / w1;
		var v3 = new kha_math_FastVector2(x3,y3);
		p2.x = v3.x;
		p2.y = v3.y;
		var _this2 = this.get_transformation();
		var w2 = _this2._02 * p3.x + _this2._12 * p3.y + _this2._22;
		var x4 = (_this2._00 * p3.x + _this2._10 * p3.y + _this2._20) / w2;
		var y4 = (_this2._01 * p3.x + _this2._11 * p3.y + _this2._21) / w2;
		var v4 = new kha_math_FastVector2(x4,y4);
		p3.x = v4.x;
		p3.y = v4.y;
		var _this3 = this.get_transformation();
		var w3 = _this3._02 * p4.x + _this3._12 * p4.y + _this3._22;
		var x5 = (_this3._00 * p4.x + _this3._10 * p4.y + _this3._20) / w3;
		var y5 = (_this3._01 * p4.x + _this3._11 * p4.y + _this3._21) / w3;
		var v5 = new kha_math_FastVector2(x5,y5);
		p4.x = v5.x;
		p4.y = v5.y;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p3.x,p3.y,p2.x,p2.y,p4.x,p4.y);
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.get_transformation();
		var value = new kha_math_FastVector2(x1,y1);
		var w = _this._02 * value.x + _this._12 * value.y + _this._22;
		var x = (_this._00 * value.x + _this._10 * value.y + _this._20) / w;
		var y = (_this._01 * value.x + _this._11 * value.y + _this._21) / w;
		var p1 = new kha_math_FastVector2(x,y);
		var _this1 = this.get_transformation();
		var value1 = new kha_math_FastVector2(x2,y2);
		var w1 = _this1._02 * value1.x + _this1._12 * value1.y + _this1._22;
		var x4 = (_this1._00 * value1.x + _this1._10 * value1.y + _this1._20) / w1;
		var y4 = (_this1._01 * value1.x + _this1._11 * value1.y + _this1._21) / w1;
		var p2 = new kha_math_FastVector2(x4,y4);
		var _this2 = this.get_transformation();
		var value2 = new kha_math_FastVector2(x3,y3);
		var w2 = _this2._02 * value2.x + _this2._12 * value2.y + _this2._22;
		var x5 = (_this2._00 * value2.x + _this2._10 * value2.y + _this2._20) / w2;
		var y5 = (_this2._01 * value2.x + _this2._11 * value2.y + _this2._21) / w2;
		var p3 = new kha_math_FastVector2(x5,y5);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y);
	}
	,myImageScaleQuality: null
	,get_imageScaleQuality: function() {
		return this.myImageScaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == this.myImageScaleQuality) {
			return value;
		}
		this.imagePainter.setBilinearFilter(value == 1);
		this.textPainter.setBilinearFilter(value == 1);
		return this.myImageScaleQuality = value;
	}
	,myMipmapScaleQuality: null
	,get_mipmapScaleQuality: function() {
		return this.myMipmapScaleQuality;
	}
	,set_mipmapScaleQuality: function(value) {
		this.imagePainter.setBilinearMipmapFilter(value == 1);
		return this.myMipmapScaleQuality = value;
	}
	,pipelineCache: null
	,lastPipeline: null
	,setPipeline: function(pipeline) {
		if(pipeline == this.lastPipeline) {
			return;
		}
		this.lastPipeline = pipeline;
		this.flush();
		if(pipeline == null) {
			this.imagePainter.set_pipeline(null);
			this.coloredPainter.set_pipeline(null);
			this.textPainter.set_pipeline(null);
		} else {
			var cache = this.pipelineCache.get(pipeline);
			if(cache == null) {
				cache = new kha_graphics4_PipelineCache(pipeline);
				this.pipelineCache.set(pipeline,cache);
			}
			this.imagePainter.set_pipeline(cache);
			this.coloredPainter.set_pipeline(cache);
			this.textPainter.set_pipeline(cache);
		}
	}
	,scissorEnabled: null
	,scissorX: null
	,scissorY: null
	,scissorW: null
	,scissorH: null
	,scissor: function(x,y,width,height) {
		this.scissorEnabled = true;
		this.scissorX = x;
		this.scissorY = y;
		this.scissorW = width;
		this.scissorH = height;
		this.flush();
		this.g.scissor(x,y,width,height);
	}
	,disableScissor: function() {
		this.scissorEnabled = false;
		this.flush();
		this.g.disableScissor();
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(kha_graphics4_Graphics2.current == null) {
			kha_graphics4_Graphics2.current = this;
		} else {
			throw new js__$Boot_HaxeError("End before you begin");
		}
		this.g.begin();
		if(clear) {
			this.clear(clearColor);
		}
		this.setProjection();
	}
	,clear: function(color) {
		this.flush();
		this.g.clear(color == null ? -16777216 : color);
	}
	,flush: function() {
		this.imagePainter.end();
		this.textPainter.end();
		this.coloredPainter.end();
	}
	,end: function() {
		this.flush();
		this.g.end();
		if(kha_graphics4_Graphics2.current == this) {
			kha_graphics4_Graphics2.current = null;
		} else {
			throw new js__$Boot_HaxeError("Begin before you end");
		}
	}
	,drawVideoInternal: function(video,x,y,width,height) {
	}
	,drawVideo: function(video,x,y,width,height) {
		this.setPipeline(kha_graphics4_Graphics2.videoPipeline);
		this.drawVideoInternal(video,x,y,width,height);
		this.setPipeline(null);
	}
	,__class__: kha_graphics4_Graphics2
});
var kha_graphics4_IndexBuffer = function(indexCount,usage,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.usage = usage;
	this.mySize = indexCount;
	this.buffer = kha_SystemImpl.gl.createBuffer();
	var this1 = new Uint32Array(indexCount);
	this._data = this1;
};
$hxClasses["kha.graphics4.IndexBuffer"] = kha_graphics4_IndexBuffer;
kha_graphics4_IndexBuffer.__name__ = "kha.graphics4.IndexBuffer";
kha_graphics4_IndexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,usage: null
	,lockStart: null
	,lockEnd: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		return this._data.subarray(this.lockStart,this.lockEnd);
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
		var data = this._data.subarray(this.lockStart,this.lockEnd);
		var glData = kha_SystemImpl.elementIndexUint == null ? new Uint16Array(data) : data;
		kha_SystemImpl.gl.bufferData(34963,glData,this.usage == 1 ? 35048 : 35044);
	}
	,set: function() {
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
	}
	,count: function() {
		return this.mySize;
	}
	,__class__: kha_graphics4_IndexBuffer
};
var kha_graphics4_PipelineStateBase = function() {
	this.inputLayout = null;
	this.vertexShader = null;
	this.fragmentShader = null;
	this.geometryShader = null;
	this.tessellationControlShader = null;
	this.tessellationEvaluationShader = null;
	this.cullMode = 2;
	this.depthWrite = false;
	this.depthMode = 0;
	this.stencilMode = 0;
	this.stencilBothPass = 0;
	this.stencilDepthFail = 0;
	this.stencilFail = 0;
	this.stencilReferenceValue = kha_graphics4_StencilValue.Static(0);
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blendSource = 1;
	this.blendDestination = 2;
	this.blendOperation = 0;
	this.alphaBlendSource = 1;
	this.alphaBlendDestination = 2;
	this.alphaBlendOperation = 0;
	this.colorWriteMasksRed = [];
	this.colorWriteMasksGreen = [];
	this.colorWriteMasksBlue = [];
	this.colorWriteMasksAlpha = [];
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.conservativeRasterization = false;
};
$hxClasses["kha.graphics4.PipelineStateBase"] = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineStateBase.__name__ = "kha.graphics4.PipelineStateBase";
kha_graphics4_PipelineStateBase.prototype = {
	inputLayout: null
	,vertexShader: null
	,fragmentShader: null
	,geometryShader: null
	,tessellationControlShader: null
	,tessellationEvaluationShader: null
	,cullMode: null
	,depthWrite: null
	,depthMode: null
	,stencilMode: null
	,stencilBothPass: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilReferenceValue: null
	,stencilReadMask: null
	,stencilWriteMask: null
	,blendSource: null
	,blendDestination: null
	,blendOperation: null
	,alphaBlendSource: null
	,alphaBlendDestination: null
	,alphaBlendOperation: null
	,colorWriteMasksRed: null
	,colorWriteMasksGreen: null
	,colorWriteMasksBlue: null
	,colorWriteMasksAlpha: null
	,set_colorWriteMask: function(value) {
		return this.set_colorWriteMaskRed(this.set_colorWriteMaskBlue(this.set_colorWriteMaskGreen(this.set_colorWriteMaskAlpha(value))));
	}
	,get_colorWriteMaskRed: function() {
		return this.colorWriteMasksRed[0];
	}
	,set_colorWriteMaskRed: function(value) {
		return this.colorWriteMasksRed[0] = value;
	}
	,get_colorWriteMaskGreen: function() {
		return this.colorWriteMasksGreen[0];
	}
	,set_colorWriteMaskGreen: function(value) {
		return this.colorWriteMasksGreen[0] = value;
	}
	,get_colorWriteMaskBlue: function() {
		return this.colorWriteMasksBlue[0];
	}
	,set_colorWriteMaskBlue: function(value) {
		return this.colorWriteMasksBlue[0] = value;
	}
	,get_colorWriteMaskAlpha: function() {
		return this.colorWriteMasksAlpha[0];
	}
	,set_colorWriteMaskAlpha: function(value) {
		return this.colorWriteMasksAlpha[0] = value;
	}
	,conservativeRasterization: null
	,__class__: kha_graphics4_PipelineStateBase
	,__properties__: {set_colorWriteMaskAlpha:"set_colorWriteMaskAlpha",get_colorWriteMaskAlpha:"get_colorWriteMaskAlpha",set_colorWriteMaskBlue:"set_colorWriteMaskBlue",get_colorWriteMaskBlue:"get_colorWriteMaskBlue",set_colorWriteMaskGreen:"set_colorWriteMaskGreen",get_colorWriteMaskGreen:"get_colorWriteMaskGreen",set_colorWriteMaskRed:"set_colorWriteMaskRed",get_colorWriteMaskRed:"get_colorWriteMaskRed",set_colorWriteMask:"set_colorWriteMask"}
};
var kha_graphics4_PipelineState = function() {
	this.program = null;
	kha_graphics4_PipelineStateBase.call(this);
	this.textures = [];
	this.textureValues = [];
};
$hxClasses["kha.graphics4.PipelineState"] = kha_graphics4_PipelineState;
kha_graphics4_PipelineState.__name__ = "kha.graphics4.PipelineState";
kha_graphics4_PipelineState.__super__ = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineState.prototype = $extend(kha_graphics4_PipelineStateBase.prototype,{
	program: null
	,textures: null
	,textureValues: null
	,'delete': function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
	}
	,compile: function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
		this.program = kha_SystemImpl.gl.createProgram();
		this.compileShader(this.vertexShader);
		this.compileShader(this.fragmentShader);
		kha_SystemImpl.gl.attachShader(this.program,this.vertexShader.shader);
		kha_SystemImpl.gl.attachShader(this.program,this.fragmentShader.shader);
		var index = 0;
		var _g = 0;
		var _g1 = this.inputLayout;
		while(_g < _g1.length) {
			var structure = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = structure.elements;
			while(_g2 < _g11.length) {
				var element = _g11[_g2];
				++_g2;
				kha_SystemImpl.gl.bindAttribLocation(this.program,index,element.name);
				if(element.data == 4) {
					index += 4;
				} else {
					++index;
				}
			}
		}
		kha_SystemImpl.gl.linkProgram(this.program);
		if(!kha_SystemImpl.gl.getProgramParameter(this.program,35714)) {
			throw new js__$Boot_HaxeError("Could not link the shader program:\n" + kha_SystemImpl.gl.getProgramInfoLog(this.program));
		}
	}
	,set: function() {
		kha_SystemImpl.gl.useProgram(this.program);
		var _g = 0;
		var _g1 = this.textureValues.length;
		while(_g < _g1) {
			var index = _g++;
			kha_SystemImpl.gl.uniform1i(this.textureValues[index],index);
		}
		kha_SystemImpl.gl.colorMask(this.get_colorWriteMaskRed(),this.get_colorWriteMaskGreen(),this.get_colorWriteMaskBlue(),this.get_colorWriteMaskAlpha());
	}
	,compileShader: function(shader) {
		if(shader.shader != null) {
			return;
		}
		var s = kha_SystemImpl.gl.createShader(shader.type);
		var highp = kha_SystemImpl.gl.getShaderPrecisionFormat(35632,36338);
		var highpSupported = highp.precision != 0;
		var files = shader.files;
		var _g = 0;
		var _g1 = files.length;
		while(_g < _g1) {
			var i = _g++;
			if(kha_SystemImpl.gl2) {
				if(files[i].indexOf("-webgl2") >= 0 || files[i].indexOf("runtime-string") >= 0) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			} else {
				if(!highpSupported && (files[i].indexOf("-relaxed") >= 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
				if(highpSupported && (files[i].indexOf("-relaxed") < 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			}
		}
		kha_SystemImpl.gl.compileShader(s);
		if(!kha_SystemImpl.gl.getShaderParameter(s,35713)) {
			throw new js__$Boot_HaxeError("Could not compile shader:\n" + kha_SystemImpl.gl.getShaderInfoLog(s));
		}
		shader.shader = s;
	}
	,getConstantLocation: function(name) {
		var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
		if(location == null) {
			haxe_Log.trace("Warning: Uniform " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 92, className : "kha.graphics4.PipelineState", methodName : "getConstantLocation"});
		}
		var type = 5126;
		var count = kha_SystemImpl.gl.getProgramParameter(this.program,35718);
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var info = kha_SystemImpl.gl.getActiveUniform(this.program,i);
			if(info.name == name || info.name == name + "[0]") {
				type = info.type;
				break;
			}
		}
		return new kha_js_graphics4_ConstantLocation(location,type);
	}
	,getTextureUnit: function(name) {
		var index = this.findTexture(name);
		if(index < 0) {
			var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
			if(location == null) {
				haxe_Log.trace("Warning: Sampler " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 111, className : "kha.graphics4.PipelineState", methodName : "getTextureUnit"});
			}
			index = this.textures.length;
			this.textureValues.push(location);
			this.textures.push(name);
		}
		return new kha_js_graphics4_TextureUnit(index);
	}
	,findTexture: function(name) {
		var _g = 0;
		var _g1 = this.textures.length;
		while(_g < _g1) {
			var index = _g++;
			if(this.textures[index] == name) {
				return index;
			}
		}
		return -1;
	}
	,__class__: kha_graphics4_PipelineState
});
var kha_graphics4_StencilValue = $hxEnums["kha.graphics4.StencilValue"] = { __ename__ : true, __constructs__ : ["Dynamic","Static"]
	,Dynamic: {_hx_index:0,__enum__:"kha.graphics4.StencilValue",toString:$estr}
	,Static: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"kha.graphics4.StencilValue",toString:$estr}; },$_.__params__ = ["value"],$_)
};
var kha_graphics4_TessellationControlShader = function(source,file) {
};
$hxClasses["kha.graphics4.TessellationControlShader"] = kha_graphics4_TessellationControlShader;
kha_graphics4_TessellationControlShader.__name__ = "kha.graphics4.TessellationControlShader";
kha_graphics4_TessellationControlShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationControlShader
};
var kha_graphics4_TessellationEvaluationShader = function(source,file) {
};
$hxClasses["kha.graphics4.TessellationEvaluationShader"] = kha_graphics4_TessellationEvaluationShader;
kha_graphics4_TessellationEvaluationShader.__name__ = "kha.graphics4.TessellationEvaluationShader";
kha_graphics4_TessellationEvaluationShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationEvaluationShader
};
var kha_graphics4_TextureUnit = function() { };
$hxClasses["kha.graphics4.TextureUnit"] = kha_graphics4_TextureUnit;
kha_graphics4_TextureUnit.__name__ = "kha.graphics4.TextureUnit";
kha_graphics4_TextureUnit.__isInterface__ = true;
var kha_graphics4_VertexBuffer = function(vertexCount,structure,usage,instanceDataStepRate,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	if(instanceDataStepRate == null) {
		instanceDataStepRate = 0;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.usage = usage;
	this.instanceDataStepRate = instanceDataStepRate;
	this.mySize = vertexCount;
	this.myStride = 0;
	var _g = 0;
	var _g1 = structure.elements;
	while(_g < _g1.length) {
		var element = _g1[_g];
		++_g;
		switch(element.data) {
		case 0:
			this.myStride += 4;
			break;
		case 1:
			this.myStride += 8;
			break;
		case 2:
			this.myStride += 12;
			break;
		case 3:
			this.myStride += 16;
			break;
		case 4:
			this.myStride += 64;
			break;
		case 5:
			this.myStride += 4;
			break;
		case 6:
			this.myStride += 8;
			break;
		}
	}
	this.buffer = kha_SystemImpl.gl.createBuffer();
	var this1 = new Float32Array(Std.int(vertexCount * this.myStride / 4));
	this._data = this1;
	this.sizes = [];
	this.offsets = [];
	this.types = [];
	this.sizes[structure.elements.length - 1] = 0;
	this.offsets[structure.elements.length - 1] = 0;
	this.types[structure.elements.length - 1] = 0;
	var offset = 0;
	var index = 0;
	var _g2 = 0;
	var _g3 = structure.elements;
	while(_g2 < _g3.length) {
		var element1 = _g3[_g2];
		++_g2;
		var size;
		var type;
		switch(element1.data) {
		case 0:
			size = 1;
			type = 5126;
			break;
		case 1:
			size = 2;
			type = 5126;
			break;
		case 2:
			size = 3;
			type = 5126;
			break;
		case 3:
			size = 4;
			type = 5126;
			break;
		case 4:
			size = 16;
			type = 5126;
			break;
		case 5:
			size = 2;
			type = 5122;
			break;
		case 6:
			size = 4;
			type = 5122;
			break;
		}
		this.sizes[index] = size;
		this.offsets[index] = offset;
		this.types[index] = type;
		switch(element1.data) {
		case 0:
			offset += 4;
			break;
		case 1:
			offset += 8;
			break;
		case 2:
			offset += 12;
			break;
		case 3:
			offset += 16;
			break;
		case 4:
			offset += 64;
			break;
		case 5:
			offset += 4;
			break;
		case 6:
			offset += 8;
			break;
		}
		++index;
	}
};
$hxClasses["kha.graphics4.VertexBuffer"] = kha_graphics4_VertexBuffer;
kha_graphics4_VertexBuffer.__name__ = "kha.graphics4.VertexBuffer";
kha_graphics4_VertexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,myStride: null
	,sizes: null
	,offsets: null
	,types: null
	,usage: null
	,instanceDataStepRate: null
	,lockStart: null
	,lockEnd: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		return this._data.subarray(this.lockStart * this.stride(),this.lockEnd * this.stride());
	}
	,lockInt16: function(start,count) {
		var this1 = new Int16Array(this.lock(start,count).buffer);
		return this1;
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		kha_SystemImpl.gl.bufferData(34962,this._data.subarray(this.lockStart * this.stride(),this.lockEnd * this.stride()),this.usage == 1 ? 35048 : 35044);
	}
	,stride: function() {
		return this.myStride;
	}
	,count: function() {
		return this.mySize;
	}
	,set: function(offset) {
		var ext = kha_SystemImpl.gl2 ? true : kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		var attributesOffset = 0;
		var _g = 0;
		var _g1 = this.sizes.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.sizes[i] > 4) {
				var size = this.sizes[i];
				var addonOffset = 0;
				while(size > 0) {
					kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
					kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,4,5126,false,this.myStride,this.offsets[i] + addonOffset);
					if(ext) {
						if(kha_SystemImpl.gl2) {
							kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
						} else {
							ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
						}
					}
					size -= 4;
					addonOffset += 16;
					++attributesOffset;
				}
			} else {
				var normalized = this.types[i] == 5126 ? false : true;
				kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
				kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,this.sizes[i],this.types[i],normalized,this.myStride,this.offsets[i]);
				if(ext) {
					if(kha_SystemImpl.gl2) {
						kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
					} else {
						ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
					}
				}
				++attributesOffset;
			}
		}
		return attributesOffset;
	}
	,__class__: kha_graphics4_VertexBuffer
};
var kha_graphics4_VertexElement = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["kha.graphics4.VertexElement"] = kha_graphics4_VertexElement;
kha_graphics4_VertexElement.__name__ = "kha.graphics4.VertexElement";
kha_graphics4_VertexElement.prototype = {
	name: null
	,data: null
	,__class__: kha_graphics4_VertexElement
};
var kha_graphics4_VertexShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) {
		var source = sources[_g];
		++_g;
		this.sources.push(source.toString());
	}
	this.type = 35633;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.VertexShader"] = kha_graphics4_VertexShader;
kha_graphics4_VertexShader.__name__ = "kha.graphics4.VertexShader";
kha_graphics4_VertexShader.fromSource = function(source) {
	var shader = new kha_graphics4_VertexShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_VertexShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_VertexShader
};
var kha_graphics4_VertexStructure = function() {
	this.elements = [];
	this.instanced = false;
};
$hxClasses["kha.graphics4.VertexStructure"] = kha_graphics4_VertexStructure;
kha_graphics4_VertexStructure.__name__ = "kha.graphics4.VertexStructure";
kha_graphics4_VertexStructure.prototype = {
	elements: null
	,instanced: null
	,add: function(name,data) {
		this.elements.push(new kha_graphics4_VertexElement(name,data));
	}
	,size: function() {
		return this.elements.length;
	}
	,byteSize: function() {
		var byteSize = 0;
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) {
			var i = _g++;
			byteSize += this.dataByteSize(this.elements[i].data);
		}
		return byteSize;
	}
	,dataByteSize: function(data) {
		switch(data) {
		case 0:
			return 4;
		case 1:
			return 8;
		case 2:
			return 12;
		case 3:
			return 16;
		case 4:
			return 64;
		case 5:
			return 4;
		case 6:
			return 8;
		}
	}
	,get: function(index) {
		return this.elements[index];
	}
	,__class__: kha_graphics4_VertexStructure
};
var kha_input_Gamepad = $hx_exports["kha"]["input"]["Gamepad"] = function(index,id) {
	if(id == null) {
		id = "unknown";
	}
	if(index == null) {
		index = 0;
	}
	this.index = index;
	this.axisListeners = [];
	this.buttonListeners = [];
	kha_input_Gamepad.instances[index] = this;
};
$hxClasses["kha.input.Gamepad"] = kha_input_Gamepad;
kha_input_Gamepad.__name__ = "kha.input.Gamepad";
kha_input_Gamepad.get = function(index) {
	if(index == null) {
		index = 0;
	}
	if(index >= kha_input_Gamepad.instances.length) {
		return null;
	}
	return kha_input_Gamepad.instances[index];
};
kha_input_Gamepad.notifyOnConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		kha_input_Gamepad.connectListeners.push(connectListener);
	}
	if(disconnectListener != null) {
		kha_input_Gamepad.disconnectListeners.push(disconnectListener);
	}
};
kha_input_Gamepad.removeConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.connectListeners,connectListener);
	}
	if(disconnectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.disconnectListeners,disconnectListener);
	}
};
kha_input_Gamepad.sendConnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = true;
	var _g = 0;
	var _g1 = kha_input_Gamepad.connectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.sendDisconnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = false;
	var _g = 0;
	var _g1 = kha_input_Gamepad.disconnectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.prototype = {
	index: null
	,notify: function(axisListener,buttonListener) {
		if(axisListener != null) {
			this.axisListeners.push(axisListener);
		}
		if(buttonListener != null) {
			this.buttonListeners.push(buttonListener);
		}
	}
	,remove: function(axisListener,buttonListener) {
		if(axisListener != null) {
			HxOverrides.remove(this.axisListeners,axisListener);
		}
		if(buttonListener != null) {
			HxOverrides.remove(this.buttonListeners,buttonListener);
		}
	}
	,axisListeners: null
	,buttonListeners: null
	,id: null
	,connected: null
	,get_id: function() {
		return kha_SystemImpl.getGamepadId(this.index);
	}
	,sendAxisEvent: function(axis,value) {
		var _g = 0;
		var _g1 = this.axisListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(axis,value);
		}
	}
	,sendButtonEvent: function(button,value) {
		var _g = 0;
		var _g1 = this.buttonListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(button,value);
		}
	}
	,__class__: kha_input_Gamepad
	,__properties__: {get_id:"get_id"}
};
var kha_input_BlockInterventions = $hxEnums["kha.input.BlockInterventions"] = { __ename__ : true, __constructs__ : ["Default","Full","None","Custom"]
	,Default: {_hx_index:0,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Full: {_hx_index:1,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,None: {_hx_index:2,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:3,func:func,__enum__:"kha.input.BlockInterventions",toString:$estr}; },$_.__params__ = ["func"],$_)
};
var kha_netsync_Controller = function() {
	this.__id = kha_netsync_ControllerBuilder.nextId++;
	this._inputBuffer = haxe_io_Bytes.alloc(1);
};
$hxClasses["kha.netsync.Controller"] = kha_netsync_Controller;
kha_netsync_Controller.__name__ = "kha.netsync.Controller";
kha_netsync_Controller.prototype = {
	__id: null
	,_inputBufferIndex: null
	,_inputBuffer: null
	,_id: function() {
		return this.__id;
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_netsync_Controller
};
var kha_input_Keyboard = $hx_exports["kha"]["input"]["Keyboard"] = function() {
	kha_netsync_Controller.call(this);
	this.downListeners = [];
	this.upListeners = [];
	this.pressListeners = [];
	kha_input_Keyboard.instance = this;
};
$hxClasses["kha.input.Keyboard"] = kha_input_Keyboard;
kha_input_Keyboard.__name__ = "kha.input.Keyboard";
kha_input_Keyboard.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getKeyboard(num);
};
kha_input_Keyboard.disableSystemInterventions = function(behavior) {
	kha_input_Keyboard.keyBehavior = behavior;
};
kha_input_Keyboard.__super__ = kha_netsync_Controller;
kha_input_Keyboard.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			this.downListeners.push(downListener);
		}
		if(upListener != null) {
			this.upListeners.push(upListener);
		}
		if(pressListener != null) {
			this.pressListeners.push(pressListener);
		}
	}
	,remove: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			HxOverrides.remove(this.downListeners,downListener);
		}
		if(upListener != null) {
			HxOverrides.remove(this.upListeners,upListener);
		}
		if(pressListener != null) {
			HxOverrides.remove(this.pressListeners,pressListener);
		}
	}
	,show: function() {
	}
	,hide: function() {
	}
	,downListeners: null
	,upListeners: null
	,pressListeners: null
	,sendDownEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = haxe_io_Bytes.alloc(5);
			bytes.setInt32(0,0);
			bytes.set(4,code);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.downListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendUpEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = haxe_io_Bytes.alloc(5);
			bytes.setInt32(0,1);
			bytes.set(4,code);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.upListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendPressEvent: function(char) {
		if(kha_netsync_Session.the() != null) {
			var bytes = haxe_io_Bytes.alloc(5);
			bytes.setInt32(0,2);
			bytes.set(4,HxOverrides.cca(char,0));
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.pressListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(char);
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			var input0 = bytes.get(4);
			this.sendDownEvent(input0);
			return;
		}
		if(funcindex == 1) {
			var input01 = bytes.get(4);
			this.sendUpEvent(input01);
			return;
		}
		if(funcindex == 2) {
			var code = bytes.get(4);
			var input02 = String.fromCodePoint(code);
			this.sendPressEvent(input02);
			return;
		}
	}
	,__class__: kha_input_Keyboard
});
var kha_input_Mouse = $hx_exports["kha"]["input"]["Mouse"] = function() {
	kha_netsync_Controller.call(this);
	kha_input_Mouse.instance = this;
};
$hxClasses["kha.input.Mouse"] = kha_input_Mouse;
kha_input_Mouse.__name__ = "kha.input.Mouse";
kha_input_Mouse.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getMouse(num);
};
kha_input_Mouse.__super__ = kha_netsync_Controller;
kha_input_Mouse.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,remove: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners == null) {
				this.windowWheelListeners = [];
			}
			while(this.windowWheelListeners.length <= windowId) this.windowWheelListeners.push([]);
			this.windowWheelListeners[windowId].push(wheelListener);
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners == null) {
				this.windowLeaveListeners = [];
			}
			while(this.windowLeaveListeners.length <= windowId) this.windowLeaveListeners.push([]);
			this.windowLeaveListeners[windowId].push(leaveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners != null) {
				if(windowId < this.windowDownListeners.length) {
					HxOverrides.remove(this.windowDownListeners[windowId],downListener);
				} else {
					haxe_Log.trace("no downListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 110, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no downListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 114, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(upListener != null) {
			if(this.windowUpListeners != null) {
				if(windowId < this.windowUpListeners.length) {
					HxOverrides.remove(this.windowUpListeners[windowId],upListener);
				} else {
					haxe_Log.trace("no upListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 124, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no upListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 128, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(moveListener != null) {
			if(this.windowMoveListeners != null) {
				if(windowId < this.windowMoveListeners.length) {
					HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
				} else {
					haxe_Log.trace("no moveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 138, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no moveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 142, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners != null) {
				if(windowId < this.windowWheelListeners.length) {
					HxOverrides.remove(this.windowWheelListeners[windowId],wheelListener);
				} else {
					haxe_Log.trace("no wheelListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 152, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no wheelListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 156, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners != null) {
				if(windowId < this.windowLeaveListeners.length) {
					HxOverrides.remove(this.windowLeaveListeners[windowId],leaveListener);
				} else {
					haxe_Log.trace("no leaveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 166, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no leaveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 170, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,canLock: function() {
		return false;
	}
	,isLocked: function() {
		return false;
	}
	,notifyOnLockChange: function(change,error) {
	}
	,removeFromLockChange: function(change,error) {
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,windowWheelListeners: null
	,windowLeaveListeners: null
	,sendLeaveEvent: function(windowId) {
		if(kha_netsync_Session.the() != null) {
			var bytes = haxe_io_Bytes.alloc(8);
			bytes.setInt32(0,0);
			bytes.setInt32(4,windowId);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowLeaveListeners != null) {
			var _g = 0;
			var _g1 = this.windowLeaveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener();
			}
		}
	}
	,sendDownEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = haxe_io_Bytes.alloc(20);
			bytes.setInt32(0,1);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendUpEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = haxe_io_Bytes.alloc(20);
			bytes.setInt32(0,2);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,movementX,movementY) {
		if(kha_netsync_Session.the() != null) {
			var bytes = haxe_io_Bytes.alloc(24);
			bytes.setInt32(0,3);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,x);
			bytes.setInt32(12,y);
			bytes.setInt32(16,movementX);
			bytes.setInt32(20,movementY);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,movementX,movementY);
			}
		}
	}
	,sendWheelEvent: function(windowId,delta) {
		if(kha_netsync_Session.the() != null) {
			var bytes = haxe_io_Bytes.alloc(12);
			bytes.setInt32(0,4);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,delta);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowWheelListeners != null) {
			var _g = 0;
			var _g1 = this.windowWheelListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(delta);
			}
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			var input0 = bytes.getInt32(4);
			this.sendLeaveEvent(input0);
			return;
		}
		if(funcindex == 1) {
			var input01 = bytes.getInt32(4);
			var input1 = bytes.getInt32(8);
			var input2 = bytes.getInt32(12);
			var input3 = bytes.getInt32(16);
			this.sendDownEvent(input01,input1,input2,input3);
			return;
		}
		if(funcindex == 2) {
			var input02 = bytes.getInt32(4);
			var input11 = bytes.getInt32(8);
			var input21 = bytes.getInt32(12);
			var input31 = bytes.getInt32(16);
			this.sendUpEvent(input02,input11,input21,input31);
			return;
		}
		if(funcindex == 3) {
			var input03 = bytes.getInt32(4);
			var input12 = bytes.getInt32(8);
			var input22 = bytes.getInt32(12);
			var input32 = bytes.getInt32(16);
			var input4 = bytes.getInt32(20);
			this.sendMoveEvent(input03,input12,input22,input32,input4);
			return;
		}
		if(funcindex == 4) {
			var input04 = bytes.getInt32(4);
			var input13 = bytes.getInt32(8);
			this.sendWheelEvent(input04,input13);
			return;
		}
	}
	,__class__: kha_input_Mouse
});
var kha_input_MouseImpl = function() {
	kha_input_Mouse.call(this);
};
$hxClasses["kha.input.MouseImpl"] = kha_input_MouseImpl;
kha_input_MouseImpl.__name__ = "kha.input.MouseImpl";
kha_input_MouseImpl.__super__ = kha_input_Mouse;
kha_input_MouseImpl.prototype = $extend(kha_input_Mouse.prototype,{
	lock: function() {
		kha_SystemImpl.lockMouse();
	}
	,unlock: function() {
		kha_SystemImpl.unlockMouse();
	}
	,canLock: function() {
		return kha_SystemImpl.canLockMouse();
	}
	,isLocked: function() {
		return kha_SystemImpl.isMouseLocked();
	}
	,notifyOnLockChange: function(func,error) {
		kha_SystemImpl.notifyOfMouseLockChange(func,error);
	}
	,removeFromLockChange: function(func,error) {
		kha_SystemImpl.removeFromMouseLockChange(func,error);
	}
	,hideSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "none";
	}
	,showSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "default";
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
	}
	,__class__: kha_input_MouseImpl
});
var kha_input_Pen = function() {
	kha_input_Pen.instance = this;
};
$hxClasses["kha.input.Pen"] = kha_input_Pen;
kha_input_Pen.__name__ = "kha.input.Pen";
kha_input_Pen.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getPen(num);
};
kha_input_Pen.prototype = {
	notify: function(downListener,upListener,moveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener);
	}
	,remove: function(downListener,upListener,moveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null && this.windowDownListeners != null) {
			if(windowId < this.windowDownListeners.length) {
				HxOverrides.remove(this.windowDownListeners[windowId],downListener);
			}
		}
		if(upListener != null && this.windowUpListeners != null) {
			if(windowId < this.windowUpListeners.length) {
				HxOverrides.remove(this.windowUpListeners[windowId],upListener);
			}
		}
		if(moveListener != null && this.windowMoveListeners != null) {
			if(windowId < this.windowMoveListeners.length) {
				HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
			}
		}
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,sendDownEvent: function(windowId,x,y,pressure) {
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendUpEvent: function(windowId,x,y,pressure) {
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,pressure) {
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,__class__: kha_input_Pen
};
var kha_input_Sensor = function() {
	this.listeners = [];
};
$hxClasses["kha.input.Sensor"] = kha_input_Sensor;
kha_input_Sensor.__name__ = "kha.input.Sensor";
kha_input_Sensor.get = function(type) {
	switch(type) {
	case 0:
		return kha_input_Sensor.accelerometer;
	case 1:
		return kha_input_Sensor.gyroscope;
	}
};
kha_input_Sensor._changed = function(type,x,y,z) {
	var sensor = kha_input_Sensor.get(type == 0 ? 0 : 1);
	var _g = 0;
	var _g1 = sensor.listeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(x,y,z);
	}
};
kha_input_Sensor.prototype = {
	listeners: null
	,notify: function(listener) {
		if(!kha_input_Sensor.isInited) {
			kha_SystemImpl.initSensor();
			kha_input_Sensor.isInited = true;
		}
		this.listeners.push(listener);
	}
	,__class__: kha_input_Sensor
};
var kha_input_Surface = $hx_exports["kha"]["input"]["Surface"] = function() {
	this.touchStartListeners = [];
	this.touchEndListeners = [];
	this.moveListeners = [];
	kha_input_Surface.instance = this;
};
$hxClasses["kha.input.Surface"] = kha_input_Surface;
kha_input_Surface.__name__ = "kha.input.Surface";
kha_input_Surface.get = function(num) {
	if(num == null) {
		num = 0;
	}
	if(num != 0) {
		return null;
	}
	return kha_input_Surface.instance;
};
kha_input_Surface.prototype = {
	notify: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			this.touchStartListeners.push(touchStartListener);
		}
		if(touchEndListener != null) {
			this.touchEndListeners.push(touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,remove: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			HxOverrides.remove(this.touchStartListeners,touchStartListener);
		}
		if(touchEndListener != null) {
			HxOverrides.remove(this.touchEndListeners,touchEndListener);
		}
		if(moveListener != null) {
			HxOverrides.remove(this.moveListeners,moveListener);
		}
	}
	,touchStartListeners: null
	,touchEndListeners: null
	,moveListeners: null
	,sendTouchStartEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchStartListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendTouchEndEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchEndListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendMoveEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.moveListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,__class__: kha_input_Surface
};
var kha_internal_BytesBlob = function(bytes) {
	this.bytes = bytes;
};
$hxClasses["kha.internal.BytesBlob"] = kha_internal_BytesBlob;
kha_internal_BytesBlob.__name__ = "kha.internal.BytesBlob";
kha_internal_BytesBlob.__interfaces__ = [kha_Resource];
kha_internal_BytesBlob.fromBytes = function(bytes) {
	return new kha_internal_BytesBlob(bytes);
};
kha_internal_BytesBlob.alloc = function(size) {
	return new kha_internal_BytesBlob(haxe_io_Bytes.alloc(size));
};
kha_internal_BytesBlob.readF32 = function(i) {
	var sign = (i & -2147483648) == 0 ? 1 : -1;
	var exp = i >> 23 & 255;
	var man = i & 8388607;
	switch(exp) {
	case 0:
		return 0.0;
	case 255:
		if(man != 0) {
			return NaN;
		} else if(sign > 0) {
			return Infinity;
		} else {
			return -Infinity;
		}
		break;
	default:
		return sign * ((man + 8388608) / 8388608.0) * Math.pow(2,exp - 127);
	}
};
kha_internal_BytesBlob.bit = function(value,position) {
	var b = (value >>> position & 1) == 1;
	if(b) {
		var a = 3;
		++a;
		return true;
	} else {
		var c = 4;
		--c;
		return false;
	}
};
kha_internal_BytesBlob.toText = function(chars,length) {
	var value = "";
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		value += String.fromCodePoint(chars[i]);
	}
	return value;
};
kha_internal_BytesBlob.prototype = {
	bytes: null
	,sub: function(start,length) {
		return new kha_internal_BytesBlob(this.bytes.sub(start,length));
	}
	,length: null
	,get_length: function() {
		return this.bytes.length;
	}
	,writeU8: function(position,value) {
		this.bytes.set(position,value);
	}
	,readU8: function(position) {
		var byte = this.bytes.get(position);
		++position;
		return byte;
	}
	,readS8: function(position) {
		var byte = this.bytes.get(position);
		++position;
		var sign = (byte & 128) == 0 ? 1 : -1;
		byte &= 127;
		return sign * byte;
	}
	,readU16BE: function(position) {
		var first = this.bytes.get(position);
		var second = this.bytes.get(position + 1);
		position += 2;
		return first * 256 + second;
	}
	,readU16LE: function(position) {
		var first = this.bytes.get(position);
		var second = this.bytes.get(position + 1);
		position += 2;
		return second * 256 + first;
	}
	,readU32LE: function(position) {
		var fourth = this.bytes.get(position);
		var third = this.bytes.get(position + 1);
		var second = this.bytes.get(position + 2);
		var first = this.bytes.get(position + 3);
		position += 4;
		return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
	}
	,readU32BE: function(position) {
		var fourth = this.bytes.get(position);
		var third = this.bytes.get(position + 1);
		var second = this.bytes.get(position + 2);
		var first = this.bytes.get(position + 3);
		position += 4;
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readS16BE: function(position) {
		var first = this.bytes.get(position);
		var second = this.bytes.get(position + 1);
		position += 2;
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		if(sign == -1) {
			return -32767 + first * 256 + second;
		} else {
			return first * 256 + second;
		}
	}
	,readS16LE: function(position) {
		var first = this.bytes.get(position);
		var second = this.bytes.get(position + 1);
		var sign = (second & 128) == 0 ? 1 : -1;
		second &= 127;
		position += 2;
		if(sign == -1) {
			return -32767 + second * 256 + first;
		} else {
			return second * 256 + first;
		}
	}
	,readS32LE: function(position) {
		var fourth = this.bytes.get(position);
		var third = this.bytes.get(position + 1);
		var second = this.bytes.get(position + 2);
		var first = this.bytes.get(position + 3);
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		} else {
			return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		}
	}
	,readS32BE: function(position) {
		var fourth = this.bytes.get(position);
		var third = this.bytes.get(position + 1);
		var second = this.bytes.get(position + 2);
		var first = this.bytes.get(position + 3);
		var sign = (fourth & 128) == 0 ? 1 : -1;
		fourth &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
		}
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readF32LE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32LE(position));
	}
	,readF32BE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32BE(position));
	}
	,toString: function() {
		return this.bytes.toString();
	}
	,readUtf8String: function() {
		return this.bytes.toString();
	}
	,toBytes: function() {
		return this.bytes;
	}
	,unload: function() {
		this.bytes = null;
	}
	,__class__: kha_internal_BytesBlob
	,__properties__: {get_length:"get_length"}
};
var kha_internal_HdrFormat = function() {
};
$hxClasses["kha.internal.HdrFormat"] = kha_internal_HdrFormat;
kha_internal_HdrFormat.__name__ = "kha.internal.HdrFormat";
kha_internal_HdrFormat.readBuf = function(buf) {
	var bytesRead = 0;
	while(true) {
		buf[bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < buf.length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readBufOffset = function(buf,offset,length) {
	var bytesRead = 0;
	while(true) {
		buf[offset + bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readPixelsRaw = function(buffer,data,offset,numpixels) {
	var numExpected = 4 * numpixels;
	var numRead = kha_internal_HdrFormat.readBufOffset(data,offset,numExpected);
	if(numRead < numExpected) {
		haxe_Log.trace("Error reading raw pixels: got " + numRead + " bytes, expected " + numExpected,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 43, className : "kha.internal.HdrFormat", methodName : "readPixelsRaw"});
		return;
	}
};
kha_internal_HdrFormat.readPixelsRawRLE = function(buffer,data,offset,scanline_width,num_scanlines) {
	var this1 = new Uint8Array(4);
	var rgbe = this1;
	var scanline_buffer = null;
	var ptr;
	var ptr_end;
	var count;
	var this2 = new Uint8Array(2);
	var buf = this2;
	var bufferLength = buffer.length;
	while(num_scanlines > 0) {
		if(kha_internal_HdrFormat.readBuf(rgbe) < rgbe.length) {
			haxe_Log.trace("Error reading bytes: expected " + rgbe.length,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 59, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(rgbe[0] != 2 || rgbe[1] != 2 || (rgbe[2] & 128) != 0) {
			data[offset++] = rgbe[0];
			data[offset++] = rgbe[1];
			data[offset++] = rgbe[2];
			data[offset++] = rgbe[3];
			kha_internal_HdrFormat.readPixelsRaw(buffer,data,offset,scanline_width * num_scanlines - 1);
			return;
		}
		if(((rgbe[2] & 255) << 8 | rgbe[3] & 255) != scanline_width) {
			haxe_Log.trace("Wrong scanline width " + ((rgbe[2] & 255) << 8 | rgbe[3] & 255) + ", expected " + scanline_width,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 74, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(scanline_buffer == null) {
			var this3 = new Uint8Array(4 * scanline_width);
			scanline_buffer = this3;
		}
		ptr = 0;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			ptr_end = (i + 1) * scanline_width;
			while(ptr < ptr_end) {
				if(kha_internal_HdrFormat.readBuf(buf) < buf.length) {
					haxe_Log.trace("Error reading 2-byte buffer",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 88, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
					return;
				}
				if((buf[0] & 255) > 128) {
					count = (buf[0] & 255) - 128;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 95, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					while(count-- > 0) scanline_buffer[ptr++] = buf[1];
				} else {
					count = buf[0] & 255;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 106, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					scanline_buffer[ptr++] = buf[1];
					if(--count > 0) {
						if(kha_internal_HdrFormat.readBufOffset(scanline_buffer,ptr,count) < count) {
							haxe_Log.trace("Error reading non-run data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 112, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
							return;
						}
						ptr += count;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = scanline_width;
		while(_g1 < _g2) {
			var i1 = _g1++;
			data[offset] = scanline_buffer[i1];
			data[offset + 1] = scanline_buffer[i1 + scanline_width];
			data[offset + 2] = scanline_buffer[i1 + 2 * scanline_width];
			data[offset + 3] = scanline_buffer[i1 + 3 * scanline_width];
			offset += 4;
		}
		--num_scanlines;
	}
};
kha_internal_HdrFormat.readLine = function() {
	var buf = "";
	while(true) {
		var b = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(b == 10) {
			++kha_internal_HdrFormat.fileOffset;
			break;
		}
		buf += String.fromCodePoint(b);
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength)) {
			break;
		}
	}
	return buf;
};
kha_internal_HdrFormat.parse = function(bytes) {
	kha_internal_HdrFormat.buffer = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(bytes);
	kha_internal_HdrFormat.bufferLength = kha_internal_HdrFormat.buffer.length;
	kha_internal_HdrFormat.fileOffset = 0;
	var width = 0;
	var height = 0;
	var exposure = 1.0;
	var gamma = 1.0;
	var rle = false;
	var _g = 0;
	while(_g < 20) {
		var i = _g++;
		var line = kha_internal_HdrFormat.readLine();
		if(kha_internal_HdrFormat.formatPattern.match(line)) {
			rle = true;
		} else if(kha_internal_HdrFormat.exposurePattern.match(line)) {
			exposure = Std.parseFloat(kha_internal_HdrFormat.exposurePattern.matched(1));
		} else if(kha_internal_HdrFormat.widthHeightPattern.match(line)) {
			height = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(1));
			width = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(2));
			break;
		}
	}
	if(!rle) {
		haxe_Log.trace("File is not run length encoded!",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 175, className : "kha.internal.HdrFormat", methodName : "parse"});
		return null;
	}
	var this1 = new Uint8Array(width * height * 4);
	var data = this1;
	var scanline_width = width;
	var num_scanlines = height;
	kha_internal_HdrFormat.readPixelsRawRLE(kha_internal_HdrFormat.buffer,data,0,scanline_width,num_scanlines);
	var this2 = new Float32Array(width * height * 4);
	var floatData = this2;
	var offset = 0;
	while(offset < data.length) {
		var r = data[offset] / 255;
		var g = data[offset + 1] / 255;
		var b = data[offset + 2] / 255;
		var e = data[offset + 3];
		var f = Math.pow(2.0,e - 128.0);
		r *= f;
		g *= f;
		b *= f;
		floatData[offset] = r;
		floatData[offset + 1] = g;
		floatData[offset + 2] = b;
		floatData[offset + 3] = 1.0;
		offset += 4;
	}
	return { width : width, height : height, data : floatData};
};
kha_internal_HdrFormat.prototype = {
	__class__: kha_internal_HdrFormat
};
var kha_js_AEAudioChannel = function(element,looping) {
	this.stopped = false;
	this.element = element;
	this.looping = looping;
};
$hxClasses["kha.js.AEAudioChannel"] = kha_js_AEAudioChannel;
kha_js_AEAudioChannel.__name__ = "kha.js.AEAudioChannel";
kha_js_AEAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_AEAudioChannel.prototype = {
	element: null
	,stopped: null
	,looping: null
	,play: function() {
		this.stopped = false;
		this.element.play();
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( e ) {
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 26, className : "kha.js.AEAudioChannel", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
			this.stopped = true;
		} catch( e ) {
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 37, className : "kha.js.AEAudioChannel", methodName : "stop"});
		}
	}
	,length: null
	,get_length: function() {
		if(isFinite(this.element.duration)) {
			return this.element.duration;
		} else {
			return Infinity;
		}
	}
	,get_position: function() {
		return this.element.currentTime;
	}
	,set_position: function(value) {
		return this.element.currentTime = value;
	}
	,get_volume: function() {
		return this.element.volume;
	}
	,set_volume: function(value) {
		return this.element.volume = value;
	}
	,finished: null
	,get_finished: function() {
		if(!this.stopped) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_js_AEAudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_js_AudioElementAudio = function() { };
$hxClasses["kha.js.AudioElementAudio"] = kha_js_AudioElementAudio;
kha_js_AudioElementAudio.__name__ = "kha.js.AudioElementAudio";
kha_js_AudioElementAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_AudioElementAudio.stream(sound,loop);
};
kha_js_AudioElementAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	sound.element.loop = loop;
	var channel = new kha_js_AEAudioChannel(sound.element,loop);
	channel.play();
	return channel;
};
var kha_js_CanvasGraphics = function(canvas) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.clipping = false;
	kha_graphics2_Graphics.call(this);
	this.canvas = canvas;
	kha_js_CanvasGraphics.instance = this;
	this.myColor = kha__$Color_Color_$Impl_$.fromBytes(0,0,0);
};
$hxClasses["kha.js.CanvasGraphics"] = kha_js_CanvasGraphics;
kha_js_CanvasGraphics.__name__ = "kha.js.CanvasGraphics";
kha_js_CanvasGraphics.stringWidth = function(font,text) {
	if(kha_js_CanvasGraphics.instance == null) {
		return 5 * text.length;
	} else {
		kha_js_CanvasGraphics.instance.set_font(font);
		return kha_js_CanvasGraphics.instance.canvas.measureText(text).width;
	}
};
kha_js_CanvasGraphics.__super__ = kha_graphics2_Graphics;
kha_js_CanvasGraphics.prototype = $extend(kha_graphics2_Graphics.prototype,{
	canvas: null
	,webfont: null
	,myColor: null
	,scaleQuality: null
	,clipping: null
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(clear) {
			this.clear(clearColor);
		}
	}
	,clear: function(color) {
		if(color == null) {
			color = 0;
		}
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		if((color >>> 24) * 0.00392156862745098 == 0) {
			this.canvas.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		} else {
			this.canvas.fillRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		}
		this.set_color(this.myColor);
	}
	,end: function() {
	}
	,drawImage: function(img,x,y) {
		this.canvas.globalAlpha = this.get_opacity();
		this.canvas.drawImage((js_Boot.__cast(img , kha_CanvasImage)).image,x,y);
		this.canvas.globalAlpha = 1;
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.canvas.globalAlpha = this.get_opacity();
		try {
			if(dw < 0 || dh < 0) {
				this.canvas.save();
				this.canvas.translate(dx,dy);
				var x = 0.0;
				var y = 0.0;
				if(dw < 0) {
					this.canvas.scale(-1,1);
					x = -dw;
				}
				if(dh < 0) {
					this.canvas.scale(1,-1);
					y = -dh;
				}
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,x,y,dw,dh);
				this.canvas.restore();
			} else {
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,dx,dy,dw,dh);
			}
		} catch( ex ) {
			var ex1 = ((ex) instanceof js__$Boot_HaxeError) ? ex.val : ex;
		}
		this.canvas.globalAlpha = 1;
	}
	,set_color: function(color) {
		this.myColor = color;
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		return color;
	}
	,get_color: function() {
		return this.myColor;
	}
	,get_imageScaleQuality: function() {
		return this.scaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == 0) {
			this.canvas.mozImageSmoothingEnabled = false;
			this.canvas.webkitImageSmoothingEnabled = false;
			this.canvas.msImageSmoothingEnabled = false;
			this.canvas.imageSmoothingEnabled = false;
		} else {
			this.canvas.mozImageSmoothingEnabled = true;
			this.canvas.webkitImageSmoothingEnabled = true;
			this.canvas.msImageSmoothingEnabled = true;
			this.canvas.imageSmoothingEnabled = true;
		}
		return this.scaleQuality = value;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.rect(x,y,width,height);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillRect: function(x,y,width,height) {
		var tmp = this.get_opacity();
		this.canvas.globalAlpha = tmp * ((this.myColor >>> 24) * 0.00392156862745098);
		this.canvas.fillRect(x,y,width,height);
		this.canvas.globalAlpha = this.get_opacity();
	}
	,drawArc: function(cx,cy,radius,sAngle,eAngle,strength,ccw) {
		if(ccw == null) {
			ccw = false;
		}
		if(strength == null) {
			strength = 1.0;
		}
		this._drawArc(cx,cy,radius,sAngle,eAngle,strength,ccw);
	}
	,drawCircle: function(cx,cy,radius,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this._drawArc(cx,cy,radius,0,2 * Math.PI,strength,false);
	}
	,_drawArc: function(cx,cy,radius,sAngle,eAngle,strength,ccw) {
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillArc: function(cx,cy,radius,sAngle,eAngle,ccw) {
		if(ccw == null) {
			ccw = false;
		}
		this.canvas.beginPath();
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.fill();
	}
	,fillCircle: function(cx,cy,radius) {
		this.canvas.beginPath();
		this.canvas.arc(cx,cy,radius,0,2 * Math.PI,false);
		this.canvas.fill();
	}
	,bakedQuadCache: null
	,drawString: function(text,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var ypos = y;
			var _g = 0;
			var _g1 = text.length;
			while(_g < _g1) {
				var i = _g++;
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(HxOverrides.cca(text,i)),xpos,ypos);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,drawCharacters: function(text,start,length,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var ypos = y;
			var _g = start;
			var _g1 = start + length;
			while(_g < _g1) {
				var i = _g++;
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(text[i]),xpos,ypos);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,set_font: function(font) {
		this.webfont = js_Boot.__cast(font , kha_js_Font);
		return this.webfont;
	}
	,get_font: function() {
		return this.webfont;
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldWith = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.moveTo(0,0);
		this.canvas.stroke();
		this.canvas.lineWidth = oldWith;
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.canvas.beginPath();
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.lineTo(x3,y3);
		this.canvas.closePath();
		this.canvas.fill();
	}
	,scissor: function(x,y,width,height) {
		if(!this.clipping) {
			this.canvas.save();
			this.clipping = true;
		}
		this.canvas.beginPath();
		this.canvas.rect(x,y,width,height);
		this.canvas.clip();
	}
	,disableScissor: function() {
		if(this.clipping) {
			this.canvas.restore();
			this.clipping = false;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
		this.canvas.drawImage((js_Boot.__cast(video , kha_js_Video)).element,x,y,width,height);
	}
	,setTransformation: function(transformation) {
		this.canvas.setTransform(transformation._00,transformation._01,transformation._10,transformation._11,transformation._20,transformation._21);
	}
	,__class__: kha_js_CanvasGraphics
});
var kha_js_Font = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.kravur = new kha_js_Font.Kravur(blob);
};
$hxClasses["kha.js.Font"] = kha_js_Font;
kha_js_Font.__name__ = "kha.js.Font";
kha_js_Font.__interfaces__ = [kha_Resource];
kha_js_Font.fromBytes = function(bytes) {
	return new kha_js_Font(kha_internal_BytesBlob.fromBytes(bytes));
};
kha_js_Font.prototype = {
	kravur: null
	,images: null
	,height: function(fontSize) {
		return this.kravur._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this.kravur._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this.kravur._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this.kravur._get(fontSize).getBaselinePosition();
	}
	,getImage: function(fontSize,color) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		var imageIndex = fontSize * 10000 + glyphs.length;
		if(!this.images.exists(imageIndex)) {
			var this1 = this.images;
			var v = new haxe_ds_IntMap();
			this1.set(imageIndex,v);
		}
		if(!this.images.get(imageIndex).exists(color)) {
			var kravur = this.kravur._get(fontSize);
			var canvas = window.document.createElement("canvas");
			canvas.width = kravur.width;
			canvas.height = kravur.height;
			var ctx = canvas.getContext("2d");
			ctx.fillStyle = "black";
			ctx.fillRect(0,0,kravur.width,kravur.height);
			var imageData = ctx.getImageData(0,0,kravur.width,kravur.height);
			var bytes = (js_Boot.__cast(kravur.getTexture() , kha_CanvasImage)).bytes;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				imageData.data[i * 4] = (color & 16711680) >>> 16;
				imageData.data[i * 4 + 1] = (color & 65280) >>> 8;
				imageData.data[i * 4 + 2] = color & 255;
				imageData.data[i * 4 + 3] = bytes.get(i);
			}
			ctx.putImageData(imageData,0,0);
			var img = window.document.createElement("img");
			img.src = canvas.toDataURL("image/png");
			this.images.get(imageIndex).set(color,img);
			return img;
		}
		return this.images.get(imageIndex).get(color);
	}
	,unload: function() {
		this.kravur = null;
		this.images = null;
	}
	,__class__: kha_js_Font
};
var kha_js_MobileWebAudio = function() { };
$hxClasses["kha.js.MobileWebAudio"] = kha_js_MobileWebAudio;
kha_js_MobileWebAudio.__name__ = "kha.js.MobileWebAudio";
kha_js_MobileWebAudio._init = function() {
	try {
		kha_js_MobileWebAudio._context = new AudioContext();
		return;
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( e2 ) {
		var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
	}
};
kha_js_MobileWebAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = new kha_js_MobileWebAudioChannel(sound,loop);
	channel.play();
	return channel;
};
kha_js_MobileWebAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_MobileWebAudio.play(sound,loop);
};
var kha_js_MobileWebAudioChannel = function(sound,loop) {
	this.stopped = false;
	this.paused = false;
	this.buffer = sound._buffer;
	this.loop = loop;
	this.createSource();
};
$hxClasses["kha.js.MobileWebAudioChannel"] = kha_js_MobileWebAudioChannel;
kha_js_MobileWebAudioChannel.__name__ = "kha.js.MobileWebAudioChannel";
kha_js_MobileWebAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_MobileWebAudioChannel.prototype = {
	buffer: null
	,loop: null
	,source: null
	,gain: null
	,startTime: null
	,pauseTime: null
	,paused: null
	,stopped: null
	,createSource: function() {
		var _gthis = this;
		this.source = kha_js_MobileWebAudio._context.createBufferSource();
		this.source.loop = this.loop;
		this.source.buffer = this.buffer;
		this.source.onended = function() {
			_gthis.stopped = true;
		};
		this.gain = kha_js_MobileWebAudio._context.createGain();
		this.source.connect(this.gain);
		this.gain.connect(kha_js_MobileWebAudio._context.destination);
	}
	,play: function() {
		if(this.paused || this.stopped) {
			this.createSource();
		}
		this.stopped = false;
		if(this.paused) {
			this.paused = false;
			this.startTime = kha_js_MobileWebAudio._context.currentTime - this.pauseTime;
			this.source.start(0,this.pauseTime);
		} else {
			this.startTime = kha_js_MobileWebAudio._context.currentTime;
			this.source.start();
		}
	}
	,pause: function() {
		this.pauseTime = kha_js_MobileWebAudio._context.currentTime - this.startTime;
		this.paused = true;
		this.source.stop();
	}
	,stop: function() {
		this.paused = false;
		this.stopped = true;
		this.source.stop();
	}
	,length: null
	,get_length: function() {
		return this.source.buffer.duration;
	}
	,get_position: function() {
		if(this.stopped) {
			return this.get_length();
		}
		if(this.paused) {
			return this.pauseTime;
		} else {
			return kha_js_MobileWebAudio._context.currentTime - this.startTime;
		}
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.gain.gain.value;
	}
	,set_volume: function(value) {
		return this.gain.gain.value = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_js_MobileWebAudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_js_MobileWebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		kha_js_MobileWebAudio._context.decodeAudioData(_gthis.compressedData.getData(),function(buffer) {
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis._buffer = buffer;
			done(_gthis);
		},function() {
			failed({ url : filename, error : "Audio format not supported"});
		});
	};
	request.send(null);
};
$hxClasses["kha.js.MobileWebAudioSound"] = kha_js_MobileWebAudioSound;
kha_js_MobileWebAudioSound.__name__ = "kha.js.MobileWebAudioSound";
kha_js_MobileWebAudioSound.__super__ = kha_Sound;
kha_js_MobileWebAudioSound.prototype = $extend(kha_Sound.prototype,{
	_buffer: null
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_MobileWebAudioSound
});
var kha_js_Sound = function(filenames,done,failed) {
	kha_Sound.call(this);
	this.done = done;
	this.failed = failed;
	kha_js_Sound.loading.push(this);
	this.element = window.document.createElement("audio");
	this.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(this.element.canPlayType("audio/ogg") != "" && StringTools.endsWith(filename,".ogg")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/wav") != "" && StringTools.endsWith(filename,".wav")) {
			this.filenames.push(filename);
		}
	}
	this.element.addEventListener("error",$bind(this,this.errorListener),false);
	this.element.addEventListener("canplay",$bind(this,this.canPlayThroughListener),false);
	this.element.src = this.filenames[0];
	this.element.preload = "auto";
	this.element.load();
};
$hxClasses["kha.js.Sound"] = kha_js_Sound;
kha_js_Sound.__name__ = "kha.js.Sound";
kha_js_Sound.__super__ = kha_Sound;
kha_js_Sound.prototype = $extend(kha_Sound.prototype,{
	filenames: null
	,done: null
	,failed: null
	,element: null
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		this.failed({ url : this.element.src});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		this.done(this);
		HxOverrides.remove(kha_js_Sound.loading,this);
	}
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_Sound
});
var kha_js_Video = function() {
	kha_Video.call(this);
};
$hxClasses["kha.js.Video"] = kha_js_Video;
kha_js_Video.__name__ = "kha.js.Video";
kha_js_Video.fromElement = function(element) {
	var video = new kha_js_Video();
	video.element = element;
	if(kha_SystemImpl.gl != null) {
		video.texture = kha_Image.fromVideo(video);
	}
	return video;
};
kha_js_Video.fromFile = function(filenames,done) {
	var video = new kha_js_Video();
	video.done = done;
	video.element = window.document.createElement("video");
	video.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(video.element.canPlayType("video/webm") != "" && StringTools.endsWith(filename,".webm")) {
			video.filenames.push(filename);
		}
		if(video.element.canPlayType("video/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			video.filenames.push(filename);
		}
	}
	video.element.addEventListener("error",$bind(video,video.errorListener),false);
	video.element.addEventListener("canplaythrough",$bind(video,video.canPlayThroughListener),false);
	video.element.preload = "auto";
	video.element.src = video.filenames[0];
};
kha_js_Video.__super__ = kha_Video;
kha_js_Video.prototype = $extend(kha_Video.prototype,{
	filenames: null
	,element: null
	,done: null
	,texture: null
	,width: function() {
		return this.element.videoWidth;
	}
	,height: function() {
		return this.element.videoHeight;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
		try {
			this.element.loop = loop;
			this.element.play();
		} catch( e ) {
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/Video.hx", lineNumber : 64, className : "kha.js.Video", methodName : "play"});
		}
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( e ) {
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/Video.hx", lineNumber : 73, className : "kha.js.Video", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
		} catch( e ) {
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/Video.hx", lineNumber : 83, className : "kha.js.Video", methodName : "stop"});
		}
	}
	,getCurrentPos: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,get_position: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,set_position: function(value) {
		this.element.currentTime = value / 1000;
		return value;
	}
	,getLength: function() {
		if(isFinite(this.element.duration)) {
			return Math.floor(this.element.duration * 1000);
		} else {
			return -1;
		}
	}
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		haxe_Log.trace("Error loading " + this.element.src,{ fileName : "kha/js/Video.hx", lineNumber : 120, className : "kha.js.Video", methodName : "errorListener"});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_Image.fromVideo(this);
		}
		this.done(this);
	}
	,__class__: kha_js_Video
});
var kha_js_WebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		done(_gthis);
	};
	request.send(null);
};
$hxClasses["kha.js.WebAudioSound"] = kha_js_WebAudioSound;
kha_js_WebAudioSound.__name__ = "kha.js.WebAudioSound";
kha_js_WebAudioSound.__super__ = kha_Sound;
kha_js_WebAudioSound.prototype = $extend(kha_Sound.prototype,{
	superUncompress: function(done) {
		kha_Sound.prototype.uncompress.call(this,done);
	}
	,uncompress: function(done) {
		var _gthis = this;
		kha_audio2_Audio._context.decodeAudioData(this.compressedData.getData(),function(buffer) {
			var ch0 = buffer.getChannelData(0);
			var ch1 = buffer.numberOfChannels == 1 ? ch0 : buffer.getChannelData(1);
			var len = ch0.length;
			var this1 = new Float32Array(len * 2);
			_gthis.uncompressedData = this1;
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis.sampleRate = Math.round(buffer.sampleRate);
			var idx = 0;
			var i = 0;
			var lidx = len * 2;
			var uncompressInner = null;
			uncompressInner = function() {
				var chk_len = idx + 11025;
				var next_chk = chk_len > lidx ? lidx : chk_len;
				while(idx < next_chk) {
					_gthis.uncompressedData[idx] = ch0[i];
					_gthis.uncompressedData[idx + 1] = ch1[i];
					idx += 2;
					i += 1;
				}
				if(idx < lidx) {
					window.setTimeout(uncompressInner,0);
				} else {
					_gthis.compressedData = null;
					done();
				}
			};
			uncompressInner();
		},function() {
			_gthis.superUncompress(done);
		});
	}
	,__class__: kha_js_WebAudioSound
});
var kha_js_graphics4_ConstantLocation = function(value,type) {
	this.value = value;
	this.type = type;
};
$hxClasses["kha.js.graphics4.ConstantLocation"] = kha_js_graphics4_ConstantLocation;
kha_js_graphics4_ConstantLocation.__name__ = "kha.js.graphics4.ConstantLocation";
kha_js_graphics4_ConstantLocation.__interfaces__ = [kha_graphics4_ConstantLocation];
kha_js_graphics4_ConstantLocation.prototype = {
	value: null
	,type: null
	,__class__: kha_js_graphics4_ConstantLocation
};
var kha_js_graphics4_Graphics = function(renderTarget) {
	this.matrix3Cache = new Float32Array(9);
	this.matrixCache = new Float32Array(16);
	this.useVertexAttributes = 0;
	this.isDepthAttachment = false;
	this.isCubeMap = false;
	this.colorMaskAlpha = true;
	this.colorMaskBlue = true;
	this.colorMaskGreen = true;
	this.colorMaskRed = true;
	this.depthMask = false;
	this.depthTest = false;
	this.currentPipeline = null;
	this.renderTarget = renderTarget;
	this.init();
	if(kha_SystemImpl.gl2) {
		this.instancedExtension = true;
	} else {
		this.instancedExtension = kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		this.blendMinMaxExtension = kha_SystemImpl.gl.getExtension("EXT_blend_minmax");
	}
};
$hxClasses["kha.js.graphics4.Graphics"] = kha_js_graphics4_Graphics;
kha_js_graphics4_Graphics.__name__ = "kha.js.graphics4.Graphics";
kha_js_graphics4_Graphics.__interfaces__ = [kha_graphics4_Graphics];
kha_js_graphics4_Graphics.getBlendFunc = function(factor) {
	switch(factor) {
	case 1:
		return 1;
	case 0:case 2:
		return 0;
	case 3:
		return 770;
	case 4:
		return 772;
	case 5:
		return 771;
	case 6:
		return 773;
	case 7:
		return 768;
	case 8:
		return 774;
	case 9:
		return 769;
	case 10:
		return 775;
	}
};
kha_js_graphics4_Graphics.getBlendOp = function(op) {
	switch(op) {
	case 0:
		return 32774;
	case 1:
		return 32778;
	case 2:
		return 32779;
	case 3:
		return 32775;
	case 4:
		return 32776;
	}
};
kha_js_graphics4_Graphics.prototype = {
	currentPipeline: null
	,depthTest: null
	,depthMask: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,indicesCount: null
	,renderTarget: null
	,renderTargetFrameBuffer: null
	,renderTargetMSAA: null
	,renderTargetTexture: null
	,isCubeMap: null
	,isDepthAttachment: null
	,instancedExtension: null
	,blendMinMaxExtension: null
	,useVertexAttributes: null
	,init: function() {
		if(this.renderTarget == null) {
			return;
		}
		this.isCubeMap = ((this.renderTarget) instanceof kha_graphics4_CubeMap);
		if(this.isCubeMap) {
			var cubeMap = js_Boot.__cast(this.renderTarget , kha_graphics4_CubeMap);
			this.renderTargetFrameBuffer = cubeMap.frameBuffer;
			this.renderTargetTexture = cubeMap.texture;
			this.isDepthAttachment = cubeMap.isDepthAttachment;
		} else {
			var image = js_Boot.__cast(this.renderTarget , kha_WebGLImage);
			this.renderTargetFrameBuffer = image.frameBuffer;
			this.renderTargetMSAA = image.MSAAFrameBuffer;
			this.renderTargetTexture = image.texture;
		}
	}
	,begin: function(additionalRenderTargets) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth(),kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
			if(additionalRenderTargets != null) {
				kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL,3553,this.renderTargetTexture,0);
				var _g = 0;
				var _g1 = additionalRenderTargets.length;
				while(_g < _g1) {
					var i = _g++;
					kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i + 1,3553,(js_Boot.__cast(additionalRenderTargets[i] , kha_WebGLImage)).texture,0);
				}
				var attachments = [kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL];
				var _g2 = 0;
				var _g3 = additionalRenderTargets.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					attachments.push(kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i1 + 1);
				}
				if(kha_SystemImpl.gl2) {
					kha_SystemImpl.gl.drawBuffers(attachments);
				} else {
					kha_SystemImpl.drawBuffers.drawBuffersWEBGL(attachments);
				}
			}
		}
	}
	,beginFace: function(face) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,this.isDepthAttachment ? 36096 : 36064,34069 + face,this.renderTargetTexture,0);
		kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
	}
	,beginEye: function(eye) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,null);
		if(eye == 0) {
			kha_SystemImpl.gl.viewport(0,0,Std.int(kha_System.windowWidth() * 0.5),kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.viewport(Std.int(kha_System.windowWidth() * 0.5),0,Std.int(kha_System.windowWidth() * 0.5),kha_System.windowHeight());
		}
	}
	,end: function() {
		if(this.renderTargetMSAA != null) {
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.READ_FRAMEBUFFER,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.DRAW_FRAMEBUFFER,this.renderTargetMSAA);
			kha_SystemImpl.gl.blitFramebuffer(0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),16384,9728);
		}
	}
	,flush: function() {
	}
	,vsynced: function() {
		return true;
	}
	,refreshRate: function() {
		return 60;
	}
	,clear: function(color,depth,stencil) {
		var clearMask = 0;
		if(color != null) {
			clearMask |= 16384;
			kha_SystemImpl.gl.colorMask(true,true,true,true);
			kha_SystemImpl.gl.clearColor(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,(color >>> 24) * 0.00392156862745098);
		}
		if(depth != null) {
			clearMask |= 256;
			kha_SystemImpl.gl.enable(2929);
			kha_SystemImpl.gl.depthMask(true);
			kha_SystemImpl.gl.clearDepth(depth);
		}
		if(stencil != null) {
			clearMask |= 1024;
			kha_SystemImpl.gl.enable(2960);
			kha_SystemImpl.gl.stencilMask(255);
			kha_SystemImpl.gl.clearStencil(stencil);
		}
		kha_SystemImpl.gl.clear(clearMask);
		kha_SystemImpl.gl.colorMask(this.colorMaskRed,this.colorMaskGreen,this.colorMaskBlue,this.colorMaskAlpha);
		if(this.depthTest) {
			kha_SystemImpl.gl.enable(2929);
		} else {
			kha_SystemImpl.gl.disable(2929);
		}
		kha_SystemImpl.gl.depthMask(this.depthMask);
	}
	,viewport: function(x,y,width,height) {
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.viewport(x,kha_System.windowHeight(0) - y - height,width,height);
		} else {
			kha_SystemImpl.gl.viewport(x,y,width,height);
		}
	}
	,scissor: function(x,y,width,height) {
		kha_SystemImpl.gl.enable(3089);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.scissor(x,kha_System.windowHeight(0) - y - height,width,height);
		} else {
			kha_SystemImpl.gl.scissor(x,y,width,height);
		}
	}
	,disableScissor: function() {
		kha_SystemImpl.gl.disable(3089);
	}
	,setDepthMode: function(write,mode) {
		switch(mode) {
		case 0:
			if(write) {
				kha_SystemImpl.gl.enable(2929);
			} else {
				kha_SystemImpl.gl.disable(2929);
			}
			this.depthTest = write;
			kha_SystemImpl.gl.depthFunc(519);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(512);
			break;
		case 2:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(514);
			break;
		case 3:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(517);
			break;
		case 4:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(513);
			break;
		case 5:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(515);
			break;
		case 6:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(516);
			break;
		case 7:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(518);
			break;
		}
		kha_SystemImpl.gl.depthMask(write);
		this.depthMask = write;
	}
	,setBlendingMode: function(source,destination,operation,alphaSource,alphaDestination,alphaOperation) {
		if(source == 1 && destination == 2) {
			kha_SystemImpl.gl.disable(3042);
		} else {
			kha_SystemImpl.gl.enable(3042);
			kha_SystemImpl.gl.blendFuncSeparate(kha_js_graphics4_Graphics.getBlendFunc(source),kha_js_graphics4_Graphics.getBlendFunc(destination),kha_js_graphics4_Graphics.getBlendFunc(alphaSource),kha_js_graphics4_Graphics.getBlendFunc(alphaDestination));
			kha_SystemImpl.gl.blendEquationSeparate(kha_js_graphics4_Graphics.getBlendOp(operation),kha_js_graphics4_Graphics.getBlendOp(alphaOperation));
		}
	}
	,createVertexBuffer: function(vertexCount,structure,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_VertexBuffer(vertexCount,structure,usage);
	}
	,setVertexBuffer: function(vertexBuffer) {
		this.useVertexAttributes = (js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(0);
	}
	,setVertexBuffers: function(vertexBuffers) {
		var offset = 0;
		var _g = 0;
		while(_g < vertexBuffers.length) {
			var vertexBuffer = vertexBuffers[_g];
			++_g;
			offset += (js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(offset);
		}
		this.useVertexAttributes = offset;
	}
	,createIndexBuffer: function(indexCount,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_IndexBuffer(indexCount,usage);
	}
	,setIndexBuffer: function(indexBuffer) {
		this.indicesCount = indexBuffer.count();
		(js_Boot.__cast(indexBuffer , kha_graphics4_IndexBuffer)).set();
	}
	,setTexture: function(stage,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast(texture , kha_WebGLImage)).set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setTextureDepth: function(stage,texture) {
		(js_Boot.__cast(texture , kha_WebGLImage)).setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,setTextureArray: function(unit,texture) {
	}
	,setVideoTexture: function(unit,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast((js_Boot.__cast(texture , kha_js_Video)).texture , kha_WebGLImage)).set((js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setImageTexture: function(unit,texture) {
	}
	,setTextureParameters: function(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(texunit , kha_js_graphics4_TextureUnit)).value);
		switch(uAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10242,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10242,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			break;
		}
		switch(vAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10243,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10243,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			break;
		}
		switch(minificationFilter) {
		case 0:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9984);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9986);
				break;
			}
			break;
		case 1:case 2:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9729);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9985);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9987);
				break;
			}
			if(minificationFilter == 2) {
				kha_SystemImpl.gl.texParameteri(3553,kha_SystemImpl.anisotropicFilter.TEXTURE_MAX_ANISOTROPY_EXT,4);
			}
			break;
		}
		switch(magnificationFilter) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10240,9728);
			break;
		case 1:case 2:
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			break;
		}
	}
	,setTexture3DParameters: function(texunit,uAddressing,vAddressing,wAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
	}
	,setTextureCompareMode: function(texunit,enabled) {
		if(enabled) {
			kha_SystemImpl.gl.texParameteri(3553,34892,34894);
			kha_SystemImpl.gl.texParameteri(3553,34893,515);
		} else {
			kha_SystemImpl.gl.texParameteri(3553,34892,0);
		}
	}
	,setCubeMapCompareMode: function(texunit,enabled) {
		if(enabled) {
			kha_SystemImpl.gl.texParameteri(34067,34892,34894);
			kha_SystemImpl.gl.texParameteri(34067,34893,515);
		} else {
			kha_SystemImpl.gl.texParameteri(34067,34892,0);
		}
	}
	,setCubeMap: function(stage,cubeMap) {
		if(cubeMap == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(34067,null);
		} else {
			cubeMap.set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setCubeMapDepth: function(stage,cubeMap) {
		cubeMap.setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,setCullMode: function(mode) {
		switch(mode) {
		case 0:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1029);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1028);
			break;
		case 2:
			kha_SystemImpl.gl.disable(2884);
			break;
		}
	}
	,setPipeline: function(pipe) {
		this.setCullMode(pipe.cullMode);
		this.setDepthMode(pipe.depthWrite,pipe.depthMode);
		this.setStencilParameters(pipe.stencilMode,pipe.stencilBothPass,pipe.stencilDepthFail,pipe.stencilFail,pipe.stencilReferenceValue,pipe.stencilReadMask,pipe.stencilWriteMask);
		this.setBlendingMode(pipe.blendSource,pipe.blendDestination,pipe.blendOperation,pipe.alphaBlendSource,pipe.alphaBlendDestination,pipe.alphaBlendOperation);
		this.currentPipeline = pipe;
		pipe.set();
		this.colorMaskRed = pipe.get_colorWriteMaskRed();
		this.colorMaskGreen = pipe.get_colorWriteMaskGreen();
		this.colorMaskBlue = pipe.get_colorWriteMaskBlue();
		this.colorMaskAlpha = pipe.get_colorWriteMaskAlpha();
	}
	,setStencilReferenceValue: function(value) {
		kha_SystemImpl.gl.stencilFunc(this.convertCompareMode(this.currentPipeline.stencilMode),value,this.currentPipeline.stencilReadMask);
	}
	,setBool: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value ? 1 : 0);
	}
	,setInt: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setInt2: function(location,value1,value2) {
		kha_SystemImpl.gl.uniform2i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2);
	}
	,setInt3: function(location,value1,value2,value3) {
		kha_SystemImpl.gl.uniform3i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3);
	}
	,setInt4: function(location,value1,value2,value3,value4) {
		kha_SystemImpl.gl.uniform4i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3,value4);
	}
	,setInts: function(location,values) {
		var webglLocation = js_Boot.__cast(location , kha_js_graphics4_ConstantLocation);
		switch(webglLocation.type) {
		case 35667:
			kha_SystemImpl.gl.uniform2iv(webglLocation.value,values);
			break;
		case 35668:
			kha_SystemImpl.gl.uniform3iv(webglLocation.value,values);
			break;
		case 35669:
			kha_SystemImpl.gl.uniform4iv(webglLocation.value,values);
			break;
		default:
			kha_SystemImpl.gl.uniform1iv(webglLocation.value,values);
		}
	}
	,setFloat: function(location,value) {
		kha_SystemImpl.gl.uniform1f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setFloat2: function(location,value1,value2) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2);
	}
	,setFloat3: function(location,value1,value2,value3) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3);
	}
	,setFloat4: function(location,value1,value2,value3,value4) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3,value4);
	}
	,setFloats: function(location,values) {
		var webglLocation = js_Boot.__cast(location , kha_js_graphics4_ConstantLocation);
		switch(webglLocation.type) {
		case 35664:
			kha_SystemImpl.gl.uniform2fv(webglLocation.value,values);
			break;
		case 35665:
			kha_SystemImpl.gl.uniform3fv(webglLocation.value,values);
			break;
		case 35666:
			kha_SystemImpl.gl.uniform4fv(webglLocation.value,values);
			break;
		case 35676:
			kha_SystemImpl.gl.uniformMatrix4fv(webglLocation.value,false,values);
			break;
		default:
			kha_SystemImpl.gl.uniform1fv(webglLocation.value,values);
		}
	}
	,setVector2: function(location,value) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y);
	}
	,setVector3: function(location,value) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z);
	}
	,setVector4: function(location,value) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z,value.w);
	}
	,matrixCache: null
	,setMatrix: function(location,matrix) {
		this.matrixCache[0] = matrix._00;
		this.matrixCache[1] = matrix._01;
		this.matrixCache[2] = matrix._02;
		this.matrixCache[3] = matrix._03;
		this.matrixCache[4] = matrix._10;
		this.matrixCache[5] = matrix._11;
		this.matrixCache[6] = matrix._12;
		this.matrixCache[7] = matrix._13;
		this.matrixCache[8] = matrix._20;
		this.matrixCache[9] = matrix._21;
		this.matrixCache[10] = matrix._22;
		this.matrixCache[11] = matrix._23;
		this.matrixCache[12] = matrix._30;
		this.matrixCache[13] = matrix._31;
		this.matrixCache[14] = matrix._32;
		this.matrixCache[15] = matrix._33;
		kha_SystemImpl.gl.uniformMatrix4fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,this.matrixCache);
	}
	,matrix3Cache: null
	,setMatrix3: function(location,matrix) {
		this.matrix3Cache[0] = matrix._00;
		this.matrix3Cache[1] = matrix._01;
		this.matrix3Cache[2] = matrix._02;
		this.matrix3Cache[3] = matrix._10;
		this.matrix3Cache[4] = matrix._11;
		this.matrix3Cache[5] = matrix._12;
		this.matrix3Cache[6] = matrix._20;
		this.matrix3Cache[7] = matrix._21;
		this.matrix3Cache[8] = matrix._22;
		kha_SystemImpl.gl.uniformMatrix3fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,this.matrix3Cache);
	}
	,drawIndexedVertices: function(start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
		var size = type == 5123 ? 2 : 4;
		kha_SystemImpl.gl.drawElements(4,count == -1 ? this.indicesCount : count,type,start * size);
		var _g = 0;
		var _g1 = this.useVertexAttributes;
		while(_g < _g1) {
			var i = _g++;
			kha_SystemImpl.gl.disableVertexAttribArray(i);
		}
	}
	,convertStencilAction: function(action) {
		switch(action) {
		case 0:
			return 7680;
		case 1:
			return 0;
		case 2:
			return 7681;
		case 3:
			return 7682;
		case 4:
			return 34055;
		case 5:
			return 7683;
		case 6:
			return 34056;
		case 7:
			return 5386;
		}
	}
	,convertCompareMode: function(compareMode) {
		switch(compareMode) {
		case 0:
			return 519;
		case 1:
			return 512;
		case 2:
			return 514;
		case 3:
			return 517;
		case 4:
			return 513;
		case 5:
			return 515;
		case 6:
			return 516;
		case 7:
			return 518;
		}
	}
	,setStencilParameters: function(compareMode,bothPass,depthFail,stencilFail,referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(compareMode == 0 && bothPass == 0 && depthFail == 0 && stencilFail == 0) {
			kha_SystemImpl.gl.disable(2960);
		} else {
			kha_SystemImpl.gl.enable(2960);
			var stencilFunc = this.convertCompareMode(compareMode);
			kha_SystemImpl.gl.stencilMask(writeMask);
			kha_SystemImpl.gl.stencilOp(this.convertStencilAction(stencilFail),this.convertStencilAction(depthFail),this.convertStencilAction(bothPass));
			switch(referenceValue._hx_index) {
			case 0:
				kha_SystemImpl.gl.stencilFunc(stencilFunc,0,readMask);
				break;
			case 1:
				var value = referenceValue.value;
				kha_SystemImpl.gl.stencilFunc(stencilFunc,value,readMask);
				break;
			}
		}
	}
	,drawIndexedVerticesInstanced: function(instanceCount,start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		if(this.instancedRenderingAvailable()) {
			var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
			var typeSize = kha_SystemImpl.elementIndexUint == null ? 2 : 4;
			if(kha_SystemImpl.gl2) {
				kha_SystemImpl.gl.drawElementsInstanced(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			} else {
				this.instancedExtension.drawElementsInstancedANGLE(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			}
		}
	}
	,instancedRenderingAvailable: function() {
		return this.instancedExtension;
	}
	,__class__: kha_js_graphics4_Graphics
};
var kha_js_graphics4_Graphics2 = function(canvas) {
	kha_graphics4_Graphics2.call(this,canvas);
};
$hxClasses["kha.js.graphics4.Graphics2"] = kha_js_graphics4_Graphics2;
kha_js_graphics4_Graphics2.__name__ = "kha.js.graphics4.Graphics2";
kha_js_graphics4_Graphics2.__super__ = kha_graphics4_Graphics2;
kha_js_graphics4_Graphics2.prototype = $extend(kha_graphics4_Graphics2.prototype,{
	drawVideoInternal: function(video,x,y,width,height) {
		var v = js_Boot.__cast(video , kha_js_Video);
		this.drawScaledSubImage(v.texture,0,0,v.texture.get_width(),v.texture.get_height(),x,y,width,height);
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		kha_SystemImpl.gl.colorMask(true,true,true,true);
		kha_SystemImpl.gl.disable(2929);
		kha_SystemImpl.gl.depthFunc(519);
		kha_graphics4_Graphics2.prototype.begin.call(this,clear,clearColor);
	}
	,__class__: kha_js_graphics4_Graphics2
});
var kha_js_graphics4_TextureUnit = function(value) {
	this.value = value;
};
$hxClasses["kha.js.graphics4.TextureUnit"] = kha_js_graphics4_TextureUnit;
kha_js_graphics4_TextureUnit.__name__ = "kha.js.graphics4.TextureUnit";
kha_js_graphics4_TextureUnit.__interfaces__ = [kha_graphics4_TextureUnit];
kha_js_graphics4_TextureUnit.prototype = {
	value: null
	,__class__: kha_js_graphics4_TextureUnit
};
var kha_vr_VrInterface = function() {
};
$hxClasses["kha.vr.VrInterface"] = kha_vr_VrInterface;
kha_vr_VrInterface.__name__ = "kha.vr.VrInterface";
kha_vr_VrInterface.prototype = {
	GetSensorState: function() {
		return null;
	}
	,GetPredictedSensorState: function(time) {
		return null;
	}
	,WarpSwapBlack: function() {
	}
	,WarpSwapLoadingIcon: function() {
	}
	,WarpSwap: function(parms) {
	}
	,IsPresenting: function() {
		return false;
	}
	,IsVrEnabled: function() {
		return false;
	}
	,GetTimeInSeconds: function() {
		return 0.0;
	}
	,GetProjectionMatrix: function(eye) {
		return null;
	}
	,GetViewMatrix: function(eye) {
		return null;
	}
	,onVRRequestPresent: function() {
	}
	,onVRExitPresent: function() {
	}
	,onResetPose: function() {
	}
	,__class__: kha_vr_VrInterface
};
var kha_js_vr_VrInterface = function() {
	this.vrHeight = 0;
	this.vrWidth = 0;
	this.height = 0;
	this.width = 0;
	this.rightViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.rightProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.vrEnabled = false;
	kha_vr_VrInterface.call(this);
	var displayEnabled = false;
	if(displayEnabled) {
		this.vrEnabled = true;
		this.getVRDisplays();
		haxe_Log.trace("Display enabled.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 39, className : "kha.js.vr.VrInterface", methodName : "new"});
	}
};
$hxClasses["kha.js.vr.VrInterface"] = kha_js_vr_VrInterface;
kha_js_vr_VrInterface.__name__ = "kha.js.vr.VrInterface";
kha_js_vr_VrInterface.__super__ = kha_vr_VrInterface;
kha_js_vr_VrInterface.prototype = $extend(kha_vr_VrInterface.prototype,{
	vrEnabled: null
	,vrDisplay: null
	,frameData: null
	,leftProjectionMatrix: null
	,rightProjectionMatrix: null
	,leftViewMatrix: null
	,rightViewMatrix: null
	,width: null
	,height: null
	,vrWidth: null
	,vrHeight: null
	,getVRDisplays: function() {
		var _gthis = this;
		var vrDisplayInstance = navigator.getVRDisplays();
		vrDisplayInstance.then(function(displays) {
			if(displays.length > 0) {
				_gthis.frameData = new VRFrameData();
				_gthis.vrDisplay = displays[0];
				_gthis.vrDisplay.depthNear = 0.1;
				_gthis.vrDisplay.depthFar = 1024.0;
				var leftEye = _gthis.vrDisplay.getEyeParameters("left");
				var rightEye = _gthis.vrDisplay.getEyeParameters("right");
				_gthis.width = kha_SystemImpl.khanvas.width;
				_gthis.height = kha_SystemImpl.khanvas.height;
				_gthis.vrWidth = Std.int(Math.max(leftEye.renderWidth,rightEye.renderWidth) * 2);
				_gthis.vrHeight = Std.int(Math.max(leftEye.renderHeight,rightEye.renderHeight));
			} else {
				haxe_Log.trace("There are no VR displays connected.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 59, className : "kha.js.vr.VrInterface", methodName : "getVRDisplays"});
			}
		});
	}
	,onVRRequestPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.requestPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
				_gthis.vrDisplay.requestAnimationFrame($bind(_gthis,_gthis.onAnimationFrame));
			});
		} catch( err ) {
			var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
			haxe_Log.trace("Failed to requestPresent.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 71, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
			haxe_Log.trace(err1,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 72, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
		}
	}
	,onVRExitPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.exitPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
			});
		} catch( err ) {
			var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
			haxe_Log.trace("Failed to exitPresent.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 82, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
			haxe_Log.trace(err1,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 83, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
		}
	}
	,onResetPose: function() {
		try {
			this.vrDisplay.resetPose();
		} catch( err ) {
			var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
			haxe_Log.trace("Failed to resetPose",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 91, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
			haxe_Log.trace(err1,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 92, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
		}
	}
	,onAnimationFrame: function(timestamp) {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			this.vrDisplay.requestAnimationFrame($bind(this,this.onAnimationFrame));
			this.vrDisplay.getFrameData(this.frameData);
			this.leftProjectionMatrix = this.createMatrixFromArray(this.frameData.leftProjectionMatrix);
			this.leftViewMatrix = this.createMatrixFromArray(this.frameData.leftViewMatrix);
			this.rightProjectionMatrix = this.createMatrixFromArray(this.frameData.rightProjectionMatrix);
			this.rightViewMatrix = this.createMatrixFromArray(this.frameData.rightViewMatrix);
			this.vrDisplay.submitFrame();
		}
	}
	,onResize: function() {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			kha_SystemImpl.khanvas.width = this.vrWidth;
			kha_SystemImpl.khanvas.height = this.vrHeight;
		} else {
			kha_SystemImpl.khanvas.width = this.width;
			kha_SystemImpl.khanvas.height = this.height;
		}
	}
	,GetSensorState: function() {
		return this.GetPredictedSensorState(0.0);
	}
	,GetPredictedSensorState: function(time) {
		var result = new kha_vr_SensorState();
		result.Predicted = new kha_vr_PoseState();
		result.Recorded = result.Predicted;
		result.Predicted.AngularAcceleration = new kha_math_Vector3();
		result.Predicted.AngularVelocity = new kha_math_Vector3();
		result.Predicted.LinearAcceleration = new kha_math_Vector3();
		result.Predicted.LinearVelocity = new kha_math_Vector3();
		result.Predicted.TimeInSeconds = time;
		result.Predicted.Pose = new kha_vr_Pose();
		result.Predicted.Pose.Orientation = new kha_math_Quaternion();
		result.Predicted.Pose.Position = new kha_math_Vector3();
		var mPose = this.frameData.pose;
		if(mPose != null) {
			result.Predicted.AngularVelocity = this.createVectorFromArray(mPose.angularVelocity);
			result.Predicted.AngularAcceleration = this.createVectorFromArray(mPose.angularAcceleration);
			result.Predicted.LinearVelocity = this.createVectorFromArray(mPose.linearVelocity);
			result.Predicted.LinearAcceleration = this.createVectorFromArray(mPose.linearAcceleration);
			result.Predicted.Pose.Orientation = this.createQuaternion(mPose.orientation);
			result.Predicted.Pose.Position = this.createVectorFromArray(mPose.position);
		}
		return result;
	}
	,WarpSwapBlack: function() {
	}
	,WarpSwapLoadingIcon: function() {
	}
	,WarpSwap: function(parms) {
	}
	,IsPresenting: function() {
		if(this.vrDisplay != null) {
			return this.vrDisplay.isPresenting;
		}
		return false;
	}
	,IsVrEnabled: function() {
		return this.vrEnabled;
	}
	,GetTimeInSeconds: function() {
		return kha_Scheduler.time();
	}
	,GetProjectionMatrix: function(eye) {
		if(eye == 0) {
			return this.leftProjectionMatrix;
		} else {
			return this.rightProjectionMatrix;
		}
	}
	,GetViewMatrix: function(eye) {
		if(eye == 0) {
			return this.leftViewMatrix;
		} else {
			return this.rightViewMatrix;
		}
	}
	,createMatrixFromArray: function(array) {
		var matrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
		matrix._00 = array[0];
		matrix._01 = array[1];
		matrix._02 = array[2];
		matrix._03 = array[3];
		matrix._10 = array[4];
		matrix._11 = array[5];
		matrix._12 = array[6];
		matrix._13 = array[7];
		matrix._20 = array[8];
		matrix._21 = array[9];
		matrix._22 = array[10];
		matrix._23 = array[11];
		matrix._30 = array[12];
		matrix._31 = array[13];
		matrix._32 = array[14];
		matrix._33 = array[15];
		return matrix;
	}
	,createVectorFromArray: function(array) {
		var vector = new kha_math_Vector3(0,0,0);
		if(array != null) {
			vector.x = array[0];
			vector.y = array[1];
			vector.z = array[2];
		}
		return vector;
	}
	,createQuaternion: function(array) {
		var quaternion = new kha_math_Quaternion(0,0,0,0);
		if(array != null) {
			quaternion.set_x(array[0]);
			quaternion.set_y(array[1]);
			quaternion.set_z(array[2]);
			quaternion.set_w(array[3]);
		}
		return quaternion;
	}
	,__class__: kha_js_vr_VrInterface
});
var kha_math_FastVector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.FastVector2"] = kha_math_FastVector2;
kha_math_FastVector2.__name__ = "kha.math.FastVector2";
kha_math_FastVector2.fromVector2 = function(v) {
	return new kha_math_FastVector2(v.x,v.y);
};
kha_math_FastVector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector2(" + this.x + ", " + this.y + ")";
	}
	,__class__: kha_math_FastVector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.FastVector3"] = kha_math_FastVector3;
kha_math_FastVector3.__name__ = "kha.math.FastVector3";
kha_math_FastVector3.fromVector3 = function(v) {
	return new kha_math_FastVector3(v.x,v.y,v.z);
};
kha_math_FastVector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector3(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: kha_math_FastVector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.FastVector4"] = kha_math_FastVector4;
kha_math_FastVector4.__name__ = "kha.math.FastVector4";
kha_math_FastVector4.fromVector4 = function(v) {
	return new kha_math_FastVector4(v.x,v.y,v.z,v.w);
};
kha_math_FastVector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector4(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: kha_math_FastVector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Matrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.Matrix3"] = kha_math_Matrix3;
kha_math_Matrix3.__name__ = "kha.math.Matrix3";
kha_math_Matrix3.fromFastMatrix3 = function(m) {
	return new kha_math_Matrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_Matrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_Matrix3
};
var kha_math_Matrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.Matrix4"] = kha_math_Matrix4;
kha_math_Matrix4.__name__ = "kha.math.Matrix4";
kha_math_Matrix4.fromFastMatrix4 = function(m) {
	return new kha_math_Matrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_Matrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_Matrix4(2 / (right - left),0,0,tx,0,2 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_Matrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_Matrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_Matrix4.lookAt = function(eye,at,up) {
	var _this = new kha_math_Vector3(at.x - eye.x,at.y - eye.y,at.z - eye.z);
	var v = new kha_math_Vector3(_this.x,_this.y,_this.z);
	var currentLength = v.get_length();
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		v.x *= mul;
		v.y *= mul;
		v.z *= mul;
	}
	var zaxis = v;
	var _x = zaxis.y * up.z - zaxis.z * up.y;
	var _y = zaxis.z * up.x - zaxis.x * up.z;
	var _z = zaxis.x * up.y - zaxis.y * up.x;
	var _this1 = new kha_math_Vector3(_x,_y,_z);
	var v1 = new kha_math_Vector3(_this1.x,_this1.y,_this1.z);
	var currentLength1 = v1.get_length();
	if(currentLength1 != 0) {
		var mul1 = 1 / currentLength1;
		v1.x *= mul1;
		v1.y *= mul1;
		v1.z *= mul1;
	}
	var xaxis = v1;
	var _x1 = xaxis.y * zaxis.z - xaxis.z * zaxis.y;
	var _y1 = xaxis.z * zaxis.x - xaxis.x * zaxis.z;
	var _z1 = xaxis.x * zaxis.y - xaxis.y * zaxis.x;
	var yaxis = new kha_math_Vector3(_x1,_y1,_z1);
	return new kha_math_Matrix4(xaxis.x,xaxis.y,xaxis.z,-(xaxis.x * eye.x + xaxis.y * eye.y + xaxis.z * eye.z),yaxis.x,yaxis.y,yaxis.z,-(yaxis.x * eye.x + yaxis.y * eye.y + yaxis.z * eye.z),-zaxis.x,-zaxis.y,-zaxis.z,zaxis.x * eye.x + zaxis.y * eye.y + zaxis.z * eye.z,0,0,0,1);
};
kha_math_Matrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_Matrix4
};
var kha_math_Quaternion = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.values = [];
	this.values.push(x);
	this.values.push(y);
	this.values.push(z);
	this.values.push(w);
};
$hxClasses["kha.math.Quaternion"] = kha_math_Quaternion;
kha_math_Quaternion.__name__ = "kha.math.Quaternion";
kha_math_Quaternion.fromAxisAngle = function(axis,radians) {
	var q = new kha_math_Quaternion();
	q.set_w(Math.cos(radians / 2.0));
	q.set_x(q.set_y(q.set_z(Math.sin(radians / 2.0))));
	var _g = q;
	_g.set_x(_g.get_x() * axis.x);
	var _g1 = q;
	_g1.set_y(_g1.get_y() * axis.y);
	var _g2 = q;
	_g2.set_z(_g2.get_z() * axis.z);
	return q;
};
kha_math_Quaternion.prototype = {
	values: null
	,slerp: function(t,q) {
		var epsilon = 0.0005;
		var dot = this.dot(q);
		if(dot > 1 - epsilon) {
			var result = q.add(this.sub(q).scaled(t));
			result.normalize();
			return result;
		}
		if(dot < 0) {
			dot = 0;
		}
		if(dot > 1) {
			dot = 1;
		}
		var theta0 = Math.acos(dot);
		var theta = theta0 * t;
		var q2 = q.sub(this.scaled(dot));
		q2.normalize();
		var result1 = this.scaled(Math.cos(theta)).add(q2.scaled(Math.sin(theta)));
		result1.normalize();
		return result1;
	}
	,rotated: function(b) {
		var q = new kha_math_Quaternion();
		q.set_w(this.get_w() * b.get_w() - this.get_x() * b.get_x() - this.get_y() * b.get_y() - this.get_z() * b.get_z());
		q.set_x(this.get_w() * b.get_x() + this.get_x() * b.get_w() + this.get_y() * b.get_z() - this.get_z() * b.get_y());
		q.set_y(this.get_w() * b.get_y() + this.get_y() * b.get_w() + this.get_z() * b.get_x() - this.get_x() * b.get_z());
		q.set_z(this.get_w() * b.get_z() + this.get_z() * b.get_w() + this.get_x() * b.get_y() - this.get_y() * b.get_x());
		q.normalize();
		return q;
	}
	,scaled: function(scale) {
		return new kha_math_Quaternion(this.get_x() * scale,this.get_y() * scale,this.get_z() * scale,this.get_w() * scale);
	}
	,scale: function(scale) {
		this.set_x(this.get_x() * scale);
		this.set_y(this.get_y() * scale);
		this.set_z(this.get_z() * scale);
		this.set_w(this.get_w() * scale);
	}
	,matrix: function() {
		var s = 2.0;
		var xs = this.get_x() * s;
		var ys = this.get_y() * s;
		var zs = this.get_z() * s;
		var wx = this.get_w() * xs;
		var wy = this.get_w() * ys;
		var wz = this.get_w() * zs;
		var xx = this.get_x() * xs;
		var xy = this.get_x() * ys;
		var xz = this.get_x() * zs;
		var yy = this.get_y() * ys;
		var yz = this.get_y() * zs;
		var zz = this.get_z() * zs;
		return new kha_math_Matrix4(1 - (yy + zz),xy - wz,xz + wy,0,xy + wz,1 - (xx + zz),yz - wx,0,xz - wy,yz + wx,1 - (xx + yy),0,0,0,0,1);
	}
	,get: function(index) {
		return this.values[index];
	}
	,set: function(index,value) {
		this.values[index] = value;
	}
	,get_x: function() {
		return this.values[0];
	}
	,set_x: function(value) {
		return this.values[0] = value;
	}
	,get_y: function() {
		return this.values[1];
	}
	,set_y: function(value) {
		return this.values[1] = value;
	}
	,get_z: function() {
		return this.values[2];
	}
	,set_z: function(value) {
		return this.values[2] = value;
	}
	,get_w: function() {
		return this.values[3];
	}
	,set_w: function(value) {
		return this.values[3] = value;
	}
	,get_length: function() {
		return Math.sqrt(this.get_x() * this.get_x() + this.get_y() * this.get_y() + this.get_z() * this.get_z() + this.get_w() * this.get_w());
	}
	,set_length: function(length) {
		if(this.get_length() == 0) {
			return 0;
		}
		var mul = length / this.get_length();
		var _g = this;
		_g.set_x(_g.get_x() * mul);
		var _g1 = this;
		_g1.set_y(_g1.get_y() * mul);
		var _g2 = this;
		_g2.set_z(_g2.get_z() * mul);
		return length;
	}
	,addVector: function(vec) {
		var result = new kha_math_Quaternion(this.get_x(),this.get_y(),this.get_z(),this.get_w());
		var q1 = new kha_math_Quaternion(0,vec.x,vec.y,vec.z);
		q1 = q1.mult(result);
		var _g = result;
		_g.set_x(_g.get_x() + q1.get_x() * 0.5);
		var _g1 = result;
		_g1.set_y(_g1.get_y() + q1.get_y() * 0.5);
		var _g2 = result;
		_g2.set_z(_g2.get_z() + q1.get_z() * 0.5);
		var _g3 = result;
		_g3.set_w(_g3.get_w() + q1.get_w() * 0.5);
		return result;
	}
	,add: function(q) {
		return new kha_math_Quaternion(this.get_x() + q.get_x(),this.get_y() + q.get_y(),this.get_z() + q.get_z(),this.get_w() + q.get_w());
	}
	,sub: function(q) {
		return new kha_math_Quaternion(this.get_x() - q.get_x(),this.get_y() - q.get_y(),this.get_z() - q.get_z(),this.get_w() - q.get_w());
	}
	,mult: function(r) {
		var q = new kha_math_Quaternion();
		q.set_x(this.get_w() * r.get_x() + this.get_x() * r.get_w() + this.get_y() * r.get_z() - this.get_z() * r.get_y());
		q.set_y(this.get_w() * r.get_y() - this.get_x() * r.get_z() + this.get_y() * r.get_w() + this.get_z() * r.get_x());
		q.set_z(this.get_w() * r.get_z() + this.get_x() * r.get_y() - this.get_y() * r.get_x() + this.get_z() * r.get_w());
		q.set_w(this.get_w() * r.get_w() - this.get_x() * r.get_x() - this.get_y() * r.get_y() - this.get_z() * r.get_z());
		return q;
	}
	,normalize: function() {
		this.scale(1.0 / this.get_length());
	}
	,dot: function(q) {
		return this.get_x() * q.get_x() + this.get_y() * q.get_y() + this.get_z() * q.get_z() + this.get_w() * q.get_w();
	}
	,getEulerAngles: function(A1,A2,A3,S,D) {
		if(D == null) {
			D = 1;
		}
		if(S == null) {
			S = 1;
		}
		var result = new kha_math_Vector3();
		var Q = [];
		Q[0] = this.get_x();
		Q[1] = this.get_y();
		Q[2] = this.get_z();
		var ww = this.get_w() * this.get_w();
		var Q11 = Q[A1] * Q[A1];
		var Q22 = Q[A2] * Q[A2];
		var Q33 = Q[A3] * Q[A3];
		var psign = -1;
		var SingularityRadius = 0.0000001;
		var PiOver2 = Math.PI / 2.0;
		if((A1 + 1) % 3 == A2 && (A2 + 1) % 3 == A3) {
			psign = 1;
		}
		var s2 = psign * 2.0 * (psign * this.get_w() * Q[A2] + Q[A1] * Q[A3]);
		if(s2 < -1 + SingularityRadius) {
			result.x = 0;
			result.y = -S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else if(s2 > 1 - SingularityRadius) {
			result.x = 0;
			result.y = S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else {
			result.x = -S * D * Math.atan2(-2 * (this.get_w() * Q[A1] - psign * Q[A2] * Q[A3]),ww + Q33 - Q11 - Q22);
			result.y = S * D * Math.asin(s2);
			result.z = S * D * Math.atan2(2 * (this.get_w() * Q[A3] - psign * Q[A1] * Q[A2]),ww + Q11 - Q22 - Q33);
		}
		return result;
	}
	,__class__: kha_math_Quaternion
	,__properties__: {set_length:"set_length",get_length:"get_length",set_w:"set_w",get_w:"get_w",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var kha_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.Vector2"] = kha_math_Vector2;
kha_math_Vector2.__name__ = "kha.math.Vector2";
kha_math_Vector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,__class__: kha_math_Vector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.Vector3"] = kha_math_Vector3;
kha_math_Vector3.__name__ = "kha.math.Vector3";
kha_math_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,__class__: kha_math_Vector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.Vector4"] = kha_math_Vector4;
kha_math_Vector4.__name__ = "kha.math.Vector4";
kha_math_Vector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,__class__: kha_math_Vector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_netsync_Client = function() { };
$hxClasses["kha.netsync.Client"] = kha_netsync_Client;
kha_netsync_Client.__name__ = "kha.netsync.Client";
kha_netsync_Client.__isInterface__ = true;
kha_netsync_Client.prototype = {
	get_id: null
	,id: null
	,send: null
	,receive: null
	,onClose: null
	,__class__: kha_netsync_Client
	,__properties__: {get_id:"get_id"}
};
var kha_netsync_ControllerBuilder = function() { };
$hxClasses["kha.netsync.ControllerBuilder"] = kha_netsync_ControllerBuilder;
kha_netsync_ControllerBuilder.__name__ = "kha.netsync.ControllerBuilder";
var kha_netsync_Entity = function() { };
$hxClasses["kha.netsync.Entity"] = kha_netsync_Entity;
kha_netsync_Entity.__name__ = "kha.netsync.Entity";
kha_netsync_Entity.__isInterface__ = true;
kha_netsync_Entity.prototype = {
	_id: null
	,_size: null
	,_send: null
	,_receive: null
	,__class__: kha_netsync_Entity
};
var kha_netsync_LocalClient = function(id) {
	this.myId = id;
};
$hxClasses["kha.netsync.LocalClient"] = kha_netsync_LocalClient;
kha_netsync_LocalClient.__name__ = "kha.netsync.LocalClient";
kha_netsync_LocalClient.__interfaces__ = [kha_netsync_Client];
kha_netsync_LocalClient.prototype = {
	myId: null
	,send: function(bytes,mandatory) {
	}
	,receive: function(receiver) {
	}
	,onClose: function(close) {
	}
	,controllers: null
	,get_controllers: function() {
		return null;
	}
	,id: null
	,get_id: function() {
		return this.myId;
	}
	,__class__: kha_netsync_LocalClient
	,__properties__: {get_id:"get_id",get_controllers:"get_controllers"}
};
var kha_netsync_Network = function(url,port,errorCallback,closeCallback) {
	this.open = false;
	var _gthis = this;
	this.socket = new WebSocket("ws://" + url + ":" + port);
	this.socket.onerror = function(error) {
		haxe_Log.trace("Network error.",{ fileName : "kha/netsync/Network.hx", lineNumber : 14, className : "kha.netsync.Network", methodName : "new"});
		errorCallback();
	};
	this.socket.binaryType = "arraybuffer";
	this.socket.onopen = function() {
		_gthis.open = true;
	};
	this.socket.onclose = function(event) {
		haxe_Log.trace("Network connection closed. " + kha_netsync_Network.webSocketCloseReason(event.code) + " (" + event.reason + ").",{ fileName : "kha/netsync/Network.hx", lineNumber : 22, className : "kha.netsync.Network", methodName : "new"});
		closeCallback();
	};
};
$hxClasses["kha.netsync.Network"] = kha_netsync_Network;
kha_netsync_Network.__name__ = "kha.netsync.Network";
kha_netsync_Network.webSocketCloseReason = function(code) {
	switch(code) {
	case 1000:
		return "Normal Closure";
	case 1001:
		return "Going Away";
	case 1002:
		return "Protocol error";
	case 1003:
		return "Unsupported Data";
	case 1005:
		return "No Status Rcvd";
	case 1006:
		return "Abnormal Closure";
	case 1007:
		return "Invalid frame";
	case 1008:
		return "Policy Violation";
	case 1009:
		return "Message Too Big";
	case 1010:
		return "Mandatory Ext.";
	case 1011:
		return "Internal Server Error";
	case 1015:
		return "TLS handshake";
	default:
		return "";
	}
};
kha_netsync_Network.prototype = {
	socket: null
	,open: null
	,send: function(bytes,mandatory) {
		if(this.open) {
			this.socket.send(bytes.getData());
		}
	}
	,listen: function(listener) {
		this.socket.onmessage = function(message) {
			var tmp = haxe_io_Bytes.ofData(message.data);
			listener(tmp);
		};
	}
	,__class__: kha_netsync_Network
};
var kha_netsync_State = function(time,data) {
	this.time = time;
	this.data = data;
};
$hxClasses["kha.netsync.State"] = kha_netsync_State;
kha_netsync_State.__name__ = "kha.netsync.State";
kha_netsync_State.prototype = {
	time: null
	,data: null
	,__class__: kha_netsync_State
};
var kha_netsync_Session = function(maxPlayers,address,port) {
	this.ping = 1;
	this.currentPlayers = 0;
	this.controllers = new haxe_ds_IntMap();
	this.entities = new haxe_ds_IntMap();
	kha_netsync_Session.instance = this;
	this.maxPlayers = maxPlayers;
	this.address = address;
	this.port = port;
};
$hxClasses["kha.netsync.Session"] = kha_netsync_Session;
kha_netsync_Session.__name__ = "kha.netsync.Session";
kha_netsync_Session.the = function() {
	return kha_netsync_Session.instance;
};
kha_netsync_Session.prototype = {
	entities: null
	,controllers: null
	,maxPlayers: null
	,currentPlayers: null
	,ping: null
	,address: null
	,port: null
	,startCallback: null
	,refusedCallback: null
	,resetCallback: null
	,localClient: null
	,network: null
	,updateTaskId: null
	,pingTaskId: null
	,me: null
	,get_me: function() {
		return this.localClient;
	}
	,addEntity: function(entity) {
		this.entities.set(entity._id(),entity);
	}
	,addController: function(controller) {
		haxe_Log.trace("Adding controller id " + controller._id(),{ fileName : "kha/netsync/Session.hx", lineNumber : 88, className : "kha.netsync.Session", methodName : "addController"});
		controller._inputBufferIndex = 0;
		this.controllers.set(controller._id(),controller);
	}
	,sendControllerUpdate: function(id,bytes) {
		if(this.controllers.exists(id)) {
			if(this.controllers.get(id)._inputBuffer.length < this.controllers.get(id)._inputBufferIndex + 4 + bytes.length) {
				var newBuffer = haxe_io_Bytes.alloc(this.controllers.get(id)._inputBufferIndex + 4 + bytes.length);
				newBuffer.blit(0,this.controllers.get(id)._inputBuffer,0,this.controllers.get(id)._inputBufferIndex);
				this.controllers.get(id)._inputBuffer = newBuffer;
			}
			this.controllers.get(id)._inputBuffer.setInt32(this.controllers.get(id)._inputBufferIndex,bytes.length);
			this.controllers.get(id)._inputBuffer.blit(this.controllers.get(id)._inputBufferIndex + 4,bytes,0,bytes.length);
			this.controllers.get(id)._inputBufferIndex += 4 + bytes.length;
		}
	}
	,sendPing: function() {
		var bytes = haxe_io_Bytes.alloc(5);
		bytes.set(0,4);
		bytes.setFloat(1,kha_Scheduler.realTime());
		this.sendToServer(bytes);
	}
	,sendPlayerUpdate: function() {
	}
	,receive: function(bytes,client) {
		switch(bytes.get(0)) {
		case 0:
			var index = bytes.get(1);
			this.localClient = new kha_netsync_LocalClient(index);
			kha_Scheduler.resetTime();
			this.startCallback();
			break;
		case 1:
			var time = bytes.getDouble(1);
			var offset = 9;
			var entity = this.entities.iterator();
			while(entity.hasNext()) {
				var entity1 = entity.next();
				entity1._receive(offset,bytes);
				offset += entity1._size();
			}
			kha_Scheduler.warp(time);
			break;
		case 3:
			switch(bytes.get(1)) {
			case 0:
				break;
			case 1:
				this.executeRPC(bytes);
				break;
			}
			break;
		case 4:
			var sendTime = bytes.getFloat(1);
			this.ping = kha_Scheduler.realTime() - sendTime;
			break;
		case 5:
			this.refusedCallback();
			break;
		case 6:
			this.currentPlayers = bytes.getInt32(1);
			break;
		}
	}
	,executeRPC: function(bytes) {
		var args = [];
		var syncId = bytes.getInt32(2);
		var index = 6;
		var classnamelength = bytes.getUInt16(index);
		index += 2;
		var classname = "";
		var _g = 0;
		var _g1 = classnamelength;
		while(_g < _g1) {
			var i = _g++;
			var code = bytes.get(index);
			classname += String.fromCodePoint(code);
			++index;
		}
		var methodnamelength = bytes.getUInt16(index);
		index += 2;
		var methodname = "";
		var _g2 = 0;
		var _g3 = methodnamelength;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var code1 = bytes.get(index);
			methodname += String.fromCodePoint(code1);
			++index;
		}
		while(index < bytes.length) {
			var type = bytes.get(index);
			++index;
			switch(type) {
			case 66:
				var value = bytes.get(index) == 1;
				++index;
				haxe_Log.trace("Bool: " + (value == null ? "null" : "" + value),{ fileName : "kha/netsync/Session.hx", lineNumber : 295, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value);
				break;
			case 70:
				var value1 = bytes.getDouble(index);
				index += 8;
				haxe_Log.trace("Float: " + value1,{ fileName : "kha/netsync/Session.hx", lineNumber : 300, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value1);
				break;
			case 73:
				var value2 = bytes.getInt32(index);
				index += 4;
				haxe_Log.trace("Int: " + value2,{ fileName : "kha/netsync/Session.hx", lineNumber : 305, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value2);
				break;
			case 83:
				var length = bytes.getUInt16(index);
				index += 2;
				var str = "";
				var _g4 = 0;
				var _g5 = length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					var code2 = bytes.get(index);
					str += String.fromCodePoint(code2);
					++index;
				}
				haxe_Log.trace("String: " + str,{ fileName : "kha/netsync/Session.hx", lineNumber : 315, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(str);
				break;
			default:
				haxe_Log.trace("Unknown argument type.",{ fileName : "kha/netsync/Session.hx", lineNumber : 318, className : "kha.netsync.Session", methodName : "executeRPC"});
			}
		}
		if(syncId == -1) {
			Reflect.callMethod(null,Reflect.field(Type.resolveClass(classname),methodname + "_remotely"),args);
		} else {
			Reflect.callMethod(kha_netsync_SyncBuilder.objects[syncId],Reflect.field(kha_netsync_SyncBuilder.objects[syncId],methodname + "_remotely"),args);
		}
	}
	,waitForStart: function(callback,refuseCallback,errorCallback,closeCallback,resCallback) {
		var _gthis = this;
		this.startCallback = callback;
		this.refusedCallback = refuseCallback;
		this.resetCallback = resCallback;
		this.network = new kha_netsync_Network(this.address,this.port,errorCallback,function() {
			closeCallback();
			_gthis.reset();
		});
		this.network.listen(function(bytes) {
			_gthis.receive(bytes);
		});
		this.updateTaskId = kha_Scheduler.addFrameTask($bind(this,this.update),0);
		this.ping = 1;
		this.pingTaskId = kha_Scheduler.addTimeTask($bind(this,this.sendPing),0,1);
	}
	,reset: function() {
		kha_Scheduler.removeFrameTask(this.updateTaskId);
		kha_Scheduler.removeTimeTask(this.pingTaskId);
		this.currentPlayers = 0;
		this.ping = 1;
		this.controllers = new haxe_ds_IntMap();
		this.entities = new haxe_ds_IntMap();
		this.resetCallback();
	}
	,update: function() {
		var controller = this.controllers.iterator();
		while(controller.hasNext()) {
			var controller1 = controller.next();
			if(controller1._inputBufferIndex > 0) {
				var bytes = haxe_io_Bytes.alloc(22 + controller1._inputBufferIndex);
				bytes.set(0,2);
				bytes.setInt32(1,controller1._id());
				bytes.setDouble(5,kha_Scheduler.time());
				bytes.setInt32(13,kha_System.windowWidth(0));
				bytes.setInt32(17,kha_System.windowHeight(0));
				bytes.set(21,0);
				bytes.blit(22,controller1._inputBuffer,0,controller1._inputBufferIndex);
				this.sendToServer(bytes);
				controller1._inputBufferIndex = 0;
			}
		}
	}
	,sendToServer: function(bytes) {
		this.network.send(bytes,false);
	}
	,__class__: kha_netsync_Session
	,__properties__: {get_me:"get_me"}
};
var kha_netsync_SyncBuilder = function() { };
$hxClasses["kha.netsync.SyncBuilder"] = kha_netsync_SyncBuilder;
kha_netsync_SyncBuilder.__name__ = "kha.netsync.SyncBuilder";
var kha_simd_Float32x4 = function(_0,_1,_2,_3) {
	this._0 = _0;
	this._1 = _1;
	this._2 = _2;
	this._3 = _3;
};
$hxClasses["kha.simd.Float32x4"] = kha_simd_Float32x4;
kha_simd_Float32x4.__name__ = "kha.simd.Float32x4";
kha_simd_Float32x4.create = function() {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.loadAllFast = function(t) {
	return new kha_simd_Float32x4(t,t,t,t);
};
kha_simd_Float32x4.load = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.loadFast = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.get = function(t,index) {
	var value = 0;
	switch(index) {
	case 0:
		value = t._0;
		break;
	case 1:
		value = t._1;
		break;
	case 2:
		value = t._2;
		break;
	case 3:
		value = t._3;
		break;
	}
	return value;
};
kha_simd_Float32x4.getFast = function(t,index) {
	switch(index) {
	case 0:
		return t._0;
	case 1:
		return t._1;
	case 2:
		return t._2;
	case 3:
		return t._3;
	}
	return 0;
};
kha_simd_Float32x4.abs = function(t) {
	return new kha_simd_Float32x4(Math.abs(t._0),Math.abs(t._1),Math.abs(t._2),Math.abs(t._3));
};
kha_simd_Float32x4.add = function(a,b) {
	return new kha_simd_Float32x4(a._0 + b._0,a._1 + b._1,a._2 + b._2,a._3 + b._3);
};
kha_simd_Float32x4.div = function(a,b) {
	return new kha_simd_Float32x4(a._0 / b._0,a._1 / b._1,a._2 / b._2,a._3 / b._3);
};
kha_simd_Float32x4.mul = function(a,b) {
	return new kha_simd_Float32x4(a._0 * b._0,a._1 * b._1,a._2 * b._2,a._3 * b._3);
};
kha_simd_Float32x4.neg = function(t) {
	return new kha_simd_Float32x4(-t._0,-t._1,-t._2,-t._3);
};
kha_simd_Float32x4.reciprocalApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.reciprocalSqrtApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.sub = function(a,b) {
	return new kha_simd_Float32x4(a._0 - b._0,a._1 - b._1,a._2 - b._2,a._3 - b._3);
};
kha_simd_Float32x4.sqrt = function(t) {
	return new kha_simd_Float32x4(Math.sqrt(t._0),Math.sqrt(t._1),Math.sqrt(t._2),Math.sqrt(t._3));
};
kha_simd_Float32x4.prototype = {
	_0: null
	,_1: null
	,_2: null
	,_3: null
	,__class__: kha_simd_Float32x4
};
var kha_vr_Pose = function() {
	this.Orientation = new kha_math_Quaternion();
	this.Position = new kha_math_Vector3();
};
$hxClasses["kha.vr.Pose"] = kha_vr_Pose;
kha_vr_Pose.__name__ = "kha.vr.Pose";
kha_vr_Pose.prototype = {
	Orientation: null
	,Position: null
	,__class__: kha_vr_Pose
};
var kha_vr_PoseState = function() {
};
$hxClasses["kha.vr.PoseState"] = kha_vr_PoseState;
kha_vr_PoseState.__name__ = "kha.vr.PoseState";
kha_vr_PoseState.prototype = {
	Pose: null
	,AngularVelocity: null
	,LinearVelocity: null
	,AngularAcceleration: null
	,LinearAcceleration: null
	,TimeInSeconds: null
	,__class__: kha_vr_PoseState
};
var kha_vr_SensorState = function() {
};
$hxClasses["kha.vr.SensorState"] = kha_vr_SensorState;
kha_vr_SensorState.__name__ = "kha.vr.SensorState";
kha_vr_SensorState.prototype = {
	Predicted: null
	,Recorded: null
	,Temperature: null
	,Status: null
	,__class__: kha_vr_SensorState
};
var kha_vr_TimeWarpImage = function() {
};
$hxClasses["kha.vr.TimeWarpImage"] = kha_vr_TimeWarpImage;
kha_vr_TimeWarpImage.__name__ = "kha.vr.TimeWarpImage";
kha_vr_TimeWarpImage.prototype = {
	Image: null
	,TexCoordsFromTanAngles: null
	,Pose: null
	,__class__: kha_vr_TimeWarpImage
};
var kha_vr_TimeWarpParms = function() {
};
$hxClasses["kha.vr.TimeWarpParms"] = kha_vr_TimeWarpParms;
kha_vr_TimeWarpParms.__name__ = "kha.vr.TimeWarpParms";
kha_vr_TimeWarpParms.prototype = {
	LeftImage: null
	,RightImage: null
	,LeftOverlay: null
	,RightOverlay: null
	,__class__: kha_vr_TimeWarpParms
};
var zui_Handle = function(ops) {
	this.changed = false;
	this.dragY = 0;
	this.dragX = 0;
	this.dragEnabled = false;
	this.lastMaxY = 0.0;
	this.lastMaxX = 0.0;
	this.layout = 0;
	this.scrollEnabled = false;
	this.scrollOffset = 0.0;
	this.redraws = 2;
	this.texture = null;
	this.text = "";
	this.value = 0.0;
	this.color = -1;
	this.position = 0;
	this.selected = false;
	if(ops != null) {
		if(ops.selected != null) {
			this.selected = ops.selected;
		}
		if(ops.position != null) {
			this.position = ops.position;
		}
		if(ops.value != null) {
			this.value = ops.value;
		}
		if(ops.text != null) {
			this.text = ops.text;
		}
		if(ops.color != null) {
			this.color = ops.color;
		}
		if(ops.layout != null) {
			this.layout = ops.layout;
		}
	}
};
$hxClasses["zui.Handle"] = zui_Handle;
zui_Handle.__name__ = "zui.Handle";
zui_Handle.prototype = {
	selected: null
	,position: null
	,color: null
	,value: null
	,text: null
	,texture: null
	,redraws: null
	,scrollOffset: null
	,scrollEnabled: null
	,layout: null
	,lastMaxX: null
	,lastMaxY: null
	,dragEnabled: null
	,dragX: null
	,dragY: null
	,changed: null
	,children: null
	,nest: function(i,ops) {
		if(this.children == null) {
			this.children = new haxe_ds_IntMap();
		}
		var c = this.children.get(i);
		if(c == null) {
			c = new zui_Handle(ops);
			this.children.set(i,c);
		}
		return c;
	}
	,unnest: function(i) {
		if(this.children != null) {
			this.children.remove(i);
		}
	}
	,__class__: zui_Handle
};
var zui_Canvas = function() { };
$hxClasses["zui.Canvas"] = zui_Canvas;
zui_Canvas.__name__ = "zui.Canvas";
zui_Canvas.draw = function(ui,canvas,g) {
	zui_Canvas.screenW = kha_System.windowWidth();
	zui_Canvas.screenH = kha_System.windowHeight();
	zui_Canvas.events = [];
	zui_Canvas._ui = ui;
	g.end();
	ui.begin(g);
	g.begin(false);
	ui.g = g;
	var _g = 0;
	var _g1 = canvas.elements;
	while(_g < _g1.length) {
		var elem = _g1[_g];
		++_g;
		if(elem.parent == null) {
			zui_Canvas.drawElement(ui,canvas,elem);
		}
	}
	g.end();
	ui.end();
	g.begin(false);
	return zui_Canvas.events;
};
zui_Canvas.drawElement = function(ui,canvas,element,px,py) {
	if(py == null) {
		py = 0.0;
	}
	if(px == null) {
		px = 0.0;
	}
	if(element == null || element.visible == false) {
		return;
	}
	var anchorOffset = zui_Canvas.getAnchorOffset(canvas,element);
	px += anchorOffset[0];
	py += anchorOffset[1];
	ui._x = canvas.x + zui_Canvas.scaled(element.x) + px;
	ui._y = canvas.y + zui_Canvas.scaled(element.y) + py;
	ui._w = zui_Canvas.scaled(element.width);
	var rotated = element.rotation != null && element.rotation != 0;
	if(rotated) {
		ui.g.pushRotation(element.rotation,ui._x + zui_Canvas.scaled(element.width) / 2,ui._y + zui_Canvas.scaled(element.height) / 2);
	}
	switch(element.type) {
	case 0:
		var font = ui.ops.font;
		var size = ui.fontSize;
		var fontAsset = element.asset != null && StringTools.endsWith(element.asset,".ttf");
		if(fontAsset) {
			ui.ops.font = zui_Canvas.getAsset(canvas,element.asset);
		}
		ui.fontSize = zui_Canvas.scaled(element.height);
		ui.t.TEXT_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).TEXT_COL);
		ui.text(zui_Canvas.getText(canvas,element),element.alignment);
		ui.ops.font = font;
		ui.fontSize = size;
		break;
	case 1:
		var image = zui_Canvas.getAsset(canvas,element.asset);
		var fontAsset1 = element.asset != null && StringTools.endsWith(element.asset,".ttf");
		if(image != null && !fontAsset1) {
			ui.imageScrollAlign = false;
			var tint = element.color != null ? element.color : -1;
			if(ui.image(image,tint,zui_Canvas.scaled(element.height)) == 3) {
				var e = element.event;
				if(e != null && e != "") {
					zui_Canvas.events.push(e);
				}
			}
			ui.imageScrollAlign = true;
		}
		break;
	case 2:
		var eh = ui.t.ELEMENT_H;
		var bh = ui.t.BUTTON_H;
		ui.t.ELEMENT_H = element.height;
		ui.t.BUTTON_H = element.height;
		ui.t.BUTTON_COL = zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL);
		ui.t.BUTTON_TEXT_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).BUTTON_TEXT_COL);
		ui.t.BUTTON_HOVER_COL = zui_Canvas.getColor(element.color_hover,zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL);
		ui.t.BUTTON_PRESSED_COL = zui_Canvas.getColor(element.color_press,zui_Canvas.getTheme(canvas.theme).BUTTON_PRESSED_COL);
		if(ui.button(zui_Canvas.getText(canvas,element),element.alignment)) {
			var e1 = element.event;
			if(e1 != null && e1 != "") {
				zui_Canvas.events.push(e1);
			}
		}
		ui.t.ELEMENT_H = eh;
		ui.t.BUTTON_H = bh;
		break;
	case 3:
		break;
	case 6:
		ui.t.TEXT_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).TEXT_COL);
		ui.t.ACCENT_COL = zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL);
		ui.t.ACCENT_HOVER_COL = zui_Canvas.getColor(element.color_hover,zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL);
		ui.check(zui_Canvas.h.nest(element.id),zui_Canvas.getText(canvas,element));
		break;
	case 7:
		ui.t.TEXT_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).TEXT_COL);
		ui.t.ACCENT_COL = zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL);
		ui.t.ACCENT_HOVER_COL = zui_Canvas.getColor(element.color_hover,zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL);
		zui_Ext.inlineRadio(ui,zui_Canvas.h.nest(element.id),zui_Canvas.getText(canvas,element).split(";"));
		break;
	case 8:
		ui.t.TEXT_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).TEXT_COL);
		ui.t.LABEL_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).TEXT_COL);
		ui.t.ACCENT_COL = zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL);
		ui.t.SEPARATOR_COL = zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL);
		ui.t.ACCENT_HOVER_COL = zui_Canvas.getColor(element.color_hover,zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL);
		ui.combo(zui_Canvas.h.nest(element.id),zui_Canvas.getText(canvas,element).split(";"));
		break;
	case 9:
		ui.t.TEXT_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).TEXT_COL);
		ui.t.LABEL_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).TEXT_COL);
		ui.t.ACCENT_COL = zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL);
		ui.t.ACCENT_HOVER_COL = zui_Canvas.getColor(element.color_hover,zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL);
		ui.slider(zui_Canvas.h.nest(element.id),zui_Canvas.getText(canvas,element),0.0,1.0,true,100,true,element.alignment);
		break;
	case 10:
		ui.t.TEXT_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).TEXT_COL);
		ui.t.LABEL_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).TEXT_COL);
		ui.t.ACCENT_COL = zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL);
		ui.t.ACCENT_HOVER_COL = zui_Canvas.getColor(element.color_hover,zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL);
		ui.textInput(zui_Canvas.h.nest(element.id),zui_Canvas.getText(canvas,element),element.alignment);
		if(zui_Canvas.h.nest(element.id).changed) {
			var e2 = element.event;
			if(e2 != null && e2 != "") {
				zui_Canvas.events.push(e2);
			}
		}
		break;
	case 11:
		ui.t.TEXT_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).TEXT_COL);
		ui.t.LABEL_COL = zui_Canvas.getColor(element.color_text,zui_Canvas.getTheme(canvas.theme).TEXT_COL);
		ui.t.ACCENT_COL = zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL);
		ui.t.ACCENT_HOVER_COL = zui_Canvas.getColor(element.color_hover,zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL);
		zui_Ext.keyInput(ui,zui_Canvas.h.nest(element.id),zui_Canvas.getText(canvas,element));
		break;
	case 12:
		var col = ui.g.get_color();
		ui.g.set_color(zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL));
		ui.g.fillRect(ui._x,ui._y,ui._w,zui_Canvas.scaled(element.height));
		ui.g.set_color(col);
		break;
	case 13:
		var col1 = ui.g.get_color();
		ui.g.set_color(zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL));
		ui.g.drawRect(ui._x,ui._y,ui._w,zui_Canvas.scaled(element.height),element.strength);
		ui.g.set_color(col1);
		break;
	case 14:
		var col2 = ui.g.get_color();
		ui.g.set_color(zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL));
		kha_graphics2_GraphicsExtension.fillCircle(ui.g,ui._x + zui_Canvas.scaled(element.width) / 2,ui._y + zui_Canvas.scaled(element.height) / 2,ui._w / 2);
		ui.g.set_color(col2);
		break;
	case 15:
		var col3 = ui.g.get_color();
		ui.g.set_color(zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL));
		kha_graphics2_GraphicsExtension.drawCircle(ui.g,ui._x + zui_Canvas.scaled(element.width) / 2,ui._y + zui_Canvas.scaled(element.height) / 2,ui._w / 2,element.strength);
		ui.g.set_color(col3);
		break;
	case 16:
		var col4 = ui.g.get_color();
		ui.g.set_color(zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL));
		ui.g.fillTriangle(ui._x + ui._w / 2,ui._y,ui._x,ui._y + zui_Canvas.scaled(element.height),ui._x + ui._w,ui._y + zui_Canvas.scaled(element.height));
		ui.g.set_color(col4);
		break;
	case 17:
		var col5 = ui.g.get_color();
		ui.g.set_color(zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL));
		ui.g.drawLine(ui._x + ui._w / 2,ui._y,ui._x,ui._y + zui_Canvas.scaled(element.height),element.strength);
		ui.g.drawLine(ui._x,ui._y + zui_Canvas.scaled(element.height),ui._x + ui._w,ui._y + zui_Canvas.scaled(element.height),element.strength);
		ui.g.drawLine(ui._x + ui._w,ui._y + zui_Canvas.scaled(element.height),ui._x + ui._w / 2,ui._y,element.strength);
		ui.g.set_color(col5);
		break;
	case 18:
		var col6 = ui.g.get_color();
		var progress = element.progress_at;
		var totalprogress = element.progress_total;
		ui.g.set_color(zui_Canvas.getColor(element.color_progress,zui_Canvas.getTheme(canvas.theme).TEXT_COL));
		ui.g.fillRect(ui._x,ui._y,ui._w / totalprogress * Math.min(progress,totalprogress),zui_Canvas.scaled(element.height));
		ui.g.set_color(zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL));
		ui.g.drawRect(ui._x,ui._y,ui._w,zui_Canvas.scaled(element.height),element.strength);
		ui.g.set_color(col6);
		break;
	case 19:
		var col7 = ui.g.get_color();
		var progress1 = element.progress_at;
		var totalprogress1 = element.progress_total;
		ui.g.set_color(zui_Canvas.getColor(element.color_progress,zui_Canvas.getTheme(canvas.theme).TEXT_COL));
		kha_graphics2_GraphicsExtension.drawArc(ui.g,ui._x + zui_Canvas.scaled(element.width) / 2,ui._y + zui_Canvas.scaled(element.height) / 2,ui._w / 2,-Math.PI / 2,Math.PI * 2 / totalprogress1 * progress1 - Math.PI / 2,element.strength);
		ui.g.set_color(zui_Canvas.getColor(element.color,zui_Canvas.getTheme(canvas.theme).BUTTON_COL));
		kha_graphics2_GraphicsExtension.fillCircle(ui.g,ui._x + zui_Canvas.scaled(element.width) / 2,ui._y + zui_Canvas.scaled(element.height) / 2,ui._w / 2 - 10);
		ui.g.set_color(col7);
		break;
	}
	if(element.children != null) {
		var _g1 = 0;
		var _g2 = element.children;
		while(_g1 < _g2.length) {
			var id = _g2[_g1];
			++_g1;
			zui_Canvas.drawElement(ui,canvas,zui_Canvas.elemById(canvas,id),zui_Canvas.scaled(element.x) + px,zui_Canvas.scaled(element.y) + py);
		}
	}
	if(rotated) {
		ui.g.popTransformation();
	}
};
zui_Canvas.getText = function(canvas,e) {
	return e.text;
};
zui_Canvas.getAsset = function(canvas,asset) {
	var _g = 0;
	var _g1 = canvas.assets;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		if(a.name == asset) {
			return zui_Canvas.assetMap.get(a.id);
		}
	}
	return null;
};
zui_Canvas.getElementId = function(canvas) {
	if(zui_Canvas.elemId == -1) {
		var _g = 0;
		var _g1 = canvas.elements;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(zui_Canvas.elemId < e.id) {
				zui_Canvas.elemId = e.id;
			}
		}
	}
	return ++zui_Canvas.elemId;
};
zui_Canvas.getAssetId = function(canvas) {
	if(zui_Canvas.assetId == -1) {
		var _g = 0;
		var _g1 = canvas.assets;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(zui_Canvas.assetId < a.id) {
				zui_Canvas.assetId = a.id;
			}
		}
	}
	return ++zui_Canvas.assetId;
};
zui_Canvas.elemById = function(canvas,id) {
	var _g = 0;
	var _g1 = canvas.elements;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		if(e.id == id) {
			return e;
		}
	}
	return null;
};
zui_Canvas.scaled = function(f) {
	return Std.int(f * zui_Canvas._ui.SCALE());
};
zui_Canvas.getColor = function(color,defaultColor) {
	if(color != null) {
		return color;
	} else {
		return defaultColor;
	}
};
zui_Canvas.getTheme = function(theme) {
	var _g = 0;
	var _g1 = zui_Canvas.themes;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		if(t.NAME == theme) {
			return t;
		}
	}
	return null;
};
zui_Canvas.getAnchorOffset = function(canvas,element) {
	var boxWidth;
	var boxHeight;
	var offsetX = 0.0;
	var offsetY = 0.0;
	if(element.parent == null) {
		boxWidth = zui_Canvas.scaled(canvas.width);
		boxHeight = zui_Canvas.scaled(canvas.height);
	} else {
		var parent = zui_Canvas.elemById(canvas,element.parent);
		boxWidth = zui_Canvas.scaled(parent.width);
		boxHeight = zui_Canvas.scaled(parent.height);
	}
	switch(element.anchor) {
	case 1:
		offsetX += boxWidth / 2 - zui_Canvas.scaled(element.width) / 2;
		break;
	case 2:
		offsetX += boxWidth - zui_Canvas.scaled(element.width);
		break;
	case 3:
		offsetY += boxHeight / 2 - zui_Canvas.scaled(element.height) / 2;
		break;
	case 4:
		offsetX += boxWidth / 2 - zui_Canvas.scaled(element.width) / 2;
		offsetY += boxHeight / 2 - zui_Canvas.scaled(element.height) / 2;
		break;
	case 5:
		offsetX += boxWidth - zui_Canvas.scaled(element.width);
		offsetY += boxHeight / 2 - zui_Canvas.scaled(element.height) / 2;
		break;
	case 6:
		offsetY += boxHeight - zui_Canvas.scaled(element.height);
		break;
	case 7:
		offsetX += boxWidth / 2 - zui_Canvas.scaled(element.width) / 2;
		offsetY += boxHeight - zui_Canvas.scaled(element.height);
		break;
	case 8:
		offsetX += boxWidth - zui_Canvas.scaled(element.width);
		offsetY += boxHeight - zui_Canvas.scaled(element.height);
		break;
	}
	return [offsetX,offsetY];
};
var zui_Ext = function() { };
$hxClasses["zui.Ext"] = zui_Ext;
zui_Ext.__name__ = "zui.Ext";
zui_Ext.floatInput = function(ui,handle,label,align) {
	if(align == null) {
		align = 0;
	}
	if(label == null) {
		label = "";
	}
	handle.text = handle.value == null ? "null" : "" + handle.value;
	var text = ui.textInput(handle,label,align);
	handle.value = Std.parseFloat(text);
	return handle.value;
};
zui_Ext.keyInput = function(ui,handle,label,align) {
	if(align == null) {
		align = 0;
	}
	if(label == null) {
		label = "";
	}
	if(!ui.isVisible(ui.ELEMENT_H())) {
		ui.endElement();
		return Std.int(handle.value);
	}
	var hover = ui.getHover();
	if(hover && zui_Zui.onTextHover != null) {
		zui_Zui.onTextHover();
	}
	ui.g.set_color(hover ? ui.t.ACCENT_HOVER_COL : ui.t.ACCENT_COL);
	ui.drawRect(ui.g,ui.t.FILL_ACCENT_BG,ui._x + ui.buttonOffsetY,ui._y + ui.buttonOffsetY,ui._w - ui.buttonOffsetY * 2,ui.BUTTON_H());
	var startEdit = ui.getReleased() || ui.tabPressed;
	if(ui.textSelectedHandle != handle && startEdit) {
		ui.startTextEdit(handle);
	}
	if(ui.textSelectedHandle == handle) {
		zui_Ext.listenToKey(ui,handle);
	} else {
		handle.changed = false;
	}
	if(label != "") {
		ui.g.set_color(ui.t.LABEL_COL);
		var labelAlign = align == 2 ? 0 : 2;
		var xOffset = labelAlign == 0 ? 7 : 0;
		ui.drawString(ui.g,label,xOffset,0,labelAlign);
	}
	handle.text = zui_Ext.keycodeToString(Std.int(handle.value));
	ui.g.set_color(ui.t.TEXT_COL);
	if(ui.textSelectedHandle != handle) {
		ui.drawString(ui.g,handle.text,null,0,align);
	} else {
		ui.drawString(ui.g,ui.textSelected,null,0,align);
	}
	ui.endElement();
	return Std.int(handle.value);
};
zui_Ext.listenToKey = function(ui,handle) {
	if(ui.isKeyDown) {
		handle.value = ui.key;
		handle.changed = ui.changed = true;
		ui.textSelectedHandle = null;
		ui.isTyping = false;
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().hide();
		}
	} else {
		ui.textSelected = "Press a key...";
	}
};
zui_Ext.list = function(ui,handle,ar,opts) {
	var selected = 0;
	if(opts == null) {
		opts = { };
	}
	var addCb = opts.addCb != null ? opts.addCb : function(name) {
		ar.push(name);
	};
	var removeCb = opts.removeCb != null ? opts.removeCb : function(i) {
		ar.splice(i,1);
	};
	var getNameCb = opts.getNameCb != null ? opts.getNameCb : function(i1) {
		return ar[i1];
	};
	var setNameCb = opts.setNameCb != null ? opts.setNameCb : function(i2,name1) {
		ar[i2] = name1;
	};
	var getLabelCb = opts.getLabelCb != null ? opts.getLabelCb : function(i3) {
		return "";
	};
	var itemDrawCb = opts.itemDrawCb;
	var showRadio = opts.showRadio != null && opts.showRadio;
	var editable = opts.editable != null ? opts.editable : true;
	var showAdd = opts.showAdd != null ? opts.showAdd : true;
	var addLabel = opts.addLabel != null ? opts.addLabel : "Add";
	var i4 = 0;
	while(i4 < ar.length) {
		if(showRadio) {
			ui.row([0.12,0.68,0.2]);
			if(ui.radio(handle.nest(0),i4,"")) {
				selected = i4;
			}
		} else {
			ui.row([0.8,0.2]);
		}
		var itemHandle = handle.nest(i4);
		itemHandle.text = getNameCb(i4);
		if(editable) {
			setNameCb(i4,ui.textInput(itemHandle,getLabelCb(i4)));
		} else {
			ui.text(getNameCb(i4));
		}
		if(ui.button("X")) {
			removeCb(i4);
		} else {
			++i4;
		}
		if(itemDrawCb != null) {
			itemDrawCb(itemHandle.nest(i4),i4 - 1);
		}
	}
	if(showAdd && ui.button(addLabel)) {
		addCb("untitled");
	}
	return selected;
};
zui_Ext.panelList = function(ui,handle,ar,addCb,removeCb,getNameCb,setNameCb,itemDrawCb,editable,showAdd,addLabel) {
	if(addLabel == null) {
		addLabel = "Add";
	}
	if(showAdd == null) {
		showAdd = true;
	}
	if(editable == null) {
		editable = true;
	}
	if(addCb == null) {
		addCb = function(name) {
			ar.push(name);
		};
	}
	if(removeCb == null) {
		removeCb = function(i) {
			ar.splice(i,1);
		};
	}
	if(getNameCb == null) {
		getNameCb = function(i1) {
			return ar[i1];
		};
	}
	if(setNameCb == null) {
		setNameCb = function(i2,name1) {
			ar[i2] = name1;
		};
	}
	var i3 = 0;
	while(i3 < ar.length) {
		ui.row([0.12,0.68,0.2]);
		var expanded = ui.panel(handle.nest(i3),"");
		var itemHandle = handle.nest(i3);
		if(editable) {
			setNameCb(i3,ui.textInput(itemHandle,getNameCb(i3)));
		} else {
			ui.text(getNameCb(i3));
		}
		if(ui.button("X")) {
			removeCb(i3);
		} else {
			++i3;
		}
		if(itemDrawCb != null && expanded) {
			itemDrawCb(itemHandle.nest(i3),i3 - 1);
		}
	}
	if(showAdd && ui.button(addLabel)) {
		addCb("untitled");
	}
};
zui_Ext.colorField = function(ui,handle,alpha) {
	if(alpha == null) {
		alpha = false;
	}
	ui.g.set_color(handle.color);
	ui.drawRect(ui.g,true,ui._x + 2,ui._y + ui.buttonOffsetY,ui._w - 4,ui.BUTTON_H());
	ui.g.set_color(ui.getHover() ? ui.t.ACCENT_HOVER_COL : ui.t.ACCENT_COL);
	ui.drawRect(ui.g,false,ui._x + 2,ui._y + ui.buttonOffsetY,ui._w - 4,ui.BUTTON_H(),1.0);
	if(ui.getStarted()) {
		zui_Popup.showCustom(new zui_Zui(ui.ops),function(ui1) {
			zui_Ext.colorWheel(ui1,handle,alpha);
		},Std.int(ui.inputX),Std.int(ui.inputY),200,500);
	}
	ui.endElement();
	return handle.color;
};
zui_Ext.colorPicker = function(ui,handle,alpha) {
	if(alpha == null) {
		alpha = false;
	}
	var r = ui.slider(handle.nest(0,{ value : ((handle.color & 16711680) >>> 16) * 0.00392156862745098}),"R",0,1,true);
	var g = ui.slider(handle.nest(1,{ value : ((handle.color & 65280) >>> 8) * 0.00392156862745098}),"G",0,1,true);
	var b = ui.slider(handle.nest(2,{ value : (handle.color & 255) * 0.00392156862745098}),"B",0,1,true);
	var a = (handle.color >>> 24) * 0.00392156862745098;
	if(alpha) {
		a = ui.slider(handle.nest(3,{ value : a}),"A",0,1,true);
	}
	var col = kha__$Color_Color_$Impl_$.fromFloats(r,g,b,a);
	ui.text("",2,col);
	return col;
};
zui_Ext.initPath = function(handle,systemId) {
	handle.text = systemId == "Windows" ? "C:\\Users" : "/";
};
zui_Ext.fileBrowser = function(ui,handle,foldersOnly) {
	if(foldersOnly == null) {
		foldersOnly = false;
	}
	var sep = "/";
	var files = [];
	var userAgent = navigator.userAgent.toLowerCase();
	if(userAgent.indexOf(" electron/") > -1) {
		if(handle.text == "") {
			var pp = window.process.platform;
			var systemId = pp == "win32" ? "Windows" : pp == "darwin" ? "OSX" : "Linux";
			zui_Ext.initPath(handle,systemId);
		}
		try {
			files = require("fs").readdirSync(handle.text);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		}
	}
	var i1 = handle.text.indexOf("/");
	var i2 = handle.text.indexOf("\\");
	var nested = i1 > -1 && handle.text.length - 1 > i1 || i2 > -1 && handle.text.length - 1 > i2;
	handle.changed = false;
	if(nested && ui.button("..",0)) {
		handle.changed = ui.changed = true;
		handle.text = handle.text.substring(0,handle.text.lastIndexOf(sep));
		if(handle.text.length == 2 && handle.text.charAt(1) == ":") {
			handle.text += sep;
		}
	}
	var _g = 0;
	while(_g < files.length) {
		var f = files[_g];
		++_g;
		if(f == "" || f.charAt(0) == ".") {
			continue;
		}
		if(ui.button(f,0)) {
			handle.changed = ui.changed = true;
			if(handle.text.charAt(handle.text.length - 1) != sep) {
				handle.text += sep;
			}
			handle.text += f;
		}
	}
	return handle.text;
};
zui_Ext.inlineRadio = function(ui,handle,texts,align) {
	if(align == null) {
		align = 1;
	}
	if(!ui.isVisible(ui.ELEMENT_H())) {
		ui.endElement();
		return handle.position;
	}
	if(ui.getReleased()) {
		if(++handle.position >= texts.length) {
			handle.position = 0;
		}
		handle.changed = ui.changed = true;
	} else {
		handle.changed = false;
	}
	var hover = ui.getHover();
	zui_Ext.drawInlineRadio(ui,texts[handle.position],hover,align);
	ui.endElement();
	return handle.position;
};
zui_Ext.drawInlineRadio = function(ui,text,hover,align) {
	if(align == null) {
		align = 1;
	}
	if(hover) {
		ui.g.set_color(ui.t.ACCENT_HOVER_COL);
		ui.g.fillRect(ui._x + ui.buttonOffsetY,ui._y + ui.buttonOffsetY,ui._w - ui.buttonOffsetY * 2,ui.BUTTON_H());
	} else {
		ui.g.set_color(ui.t.ACCENT_COL);
		if(!ui.enabled) {
			ui.fadeColor();
		}
		ui.g.drawRect(ui._x + ui.buttonOffsetY,ui._y + ui.buttonOffsetY,ui._w - ui.buttonOffsetY * 2,ui.BUTTON_H());
	}
	ui.g.set_color(ui.t.TEXT_COL);
	ui.drawString(ui.g,text,ui.TEXT_OFFSET(),0,align);
};
zui_Ext.colorWheel = function(ui,handle,alpha,w,rowAlign,colorPreview) {
	if(colorPreview == null) {
		colorPreview = true;
	}
	if(rowAlign == null) {
		rowAlign = false;
	}
	if(alpha == null) {
		alpha = false;
	}
	if(w == null) {
		w = ui._w;
	}
	zui_Ext.rgbToHsv(((handle.color & 16711680) >>> 16) * 0.00392156862745098,((handle.color & 65280) >>> 8) * 0.00392156862745098,(handle.color & 255) * 0.00392156862745098,zui_Ext.ar);
	var chue = zui_Ext.ar[0];
	var csat = zui_Ext.ar[1];
	var cval = zui_Ext.ar[2];
	var calpha = (handle.color >>> 24) * 0.00392156862745098;
	var px = ui._x;
	var py = ui._y;
	var scroll = ui.currentWindow != null && ui.currentWindow.scrollEnabled;
	if(!scroll) {
		w -= ui.SCROLL_W();
		px += ui.SCROLL_W() / 2;
	}
	ui.image(ui.ops.color_wheel,kha__$Color_Color_$Impl_$.fromFloats(cval,cval,cval));
	var ph = ui._y - py;
	var ox = px + w / 2;
	var oy = py + ph / 2;
	var cw = w * 0.7;
	var cwh = cw / 2;
	var cx = ox;
	var cy = oy + csat * cwh;
	var theta = chue * (Math.PI * 2.0);
	var cx2 = Math.cos(theta) * (cx - ox) - Math.sin(theta) * (cy - oy) + ox;
	var cy2 = Math.sin(theta) * (cx - ox) + Math.cos(theta) * (cy - oy) + oy;
	cx = cx2;
	cy = cy2;
	ui.g.set_color(-16777216);
	ui.g.fillRect(cx - 3 * ui.SCALE(),cy - 3 * ui.SCALE(),6 * ui.SCALE(),6 * ui.SCALE());
	ui.g.set_color(-1);
	ui.g.fillRect(cx - 2 * ui.SCALE(),cy - 2 * ui.SCALE(),4 * ui.SCALE(),4 * ui.SCALE());
	if(rowAlign) {
		if(alpha) {
			ui.row([0.33333333333333331,0.33333333333333331,0.33333333333333331]);
		} else {
			ui.row([0.5,0.5]);
		}
	}
	var valHandle = handle.nest(0);
	valHandle.value = Math.round(cval * 100) / 100;
	cval = ui.slider(valHandle,"Value",0.0,1.0,true);
	if(valHandle.changed) {
		handle.changed = ui.changed = true;
	} else {
		handle.changed = false;
	}
	if(alpha) {
		var alphaHandle = handle.nest(1,{ value : Math.round(calpha * 100) / 100});
		calpha = ui.slider(alphaHandle,"Alpha",0.0,1.0,true);
		if(alphaHandle.changed) {
			handle.changed = ui.changed = true;
		}
	}
	var gx = ox + ui._windowX;
	var gy = oy + ui._windowY;
	if(ui.inputStarted && ui.getInputInRect(gx - cwh,gy - cwh,cw,cw)) {
		zui_Ext.wheelSelectedHande = handle;
	}
	if(ui.inputReleased) {
		zui_Ext.wheelSelectedHande = null;
	}
	if(ui.inputDown && zui_Ext.wheelSelectedHande == handle) {
		csat = Math.min(zui_Ext.dist(gx,gy,ui.inputX,ui.inputY),cwh) / cwh;
		var angle = Math.atan2(ui.inputX - gx,ui.inputY - gy);
		if(angle < 0) {
			angle = Math.PI + (Math.PI - Math.abs(angle));
		}
		angle = Math.PI * 2 - angle;
		chue = angle / (Math.PI * 2);
		handle.changed = ui.changed = true;
	}
	zui_Ext.hsvToRgb(chue,csat,cval,zui_Ext.ar);
	handle.color = kha__$Color_Color_$Impl_$.fromFloats(zui_Ext.ar[0],zui_Ext.ar[1],zui_Ext.ar[2],calpha);
	if(colorPreview) {
		ui.text("",2,handle.color);
	}
	return handle.color;
};
zui_Ext.textArea = function(ui,handle,align,editable) {
	if(editable == null) {
		editable = true;
	}
	if(align == null) {
		align = 0;
	}
	var lines = handle.text.split("\n");
	var selected = ui.textSelectedHandle == handle;
	var cursorStartX = ui.cursorX;
	var keyPressed = selected && ui.isKeyPressed;
	ui.highlightOnSelect = false;
	ui.tabSwitchEnabled = false;
	ui.g.set_color(ui.t.SEPARATOR_COL);
	ui.drawRect(ui.g,true,ui._x + ui.buttonOffsetY,ui._y + ui.buttonOffsetY,ui._w - ui.buttonOffsetY * 2,lines.length * ui.ELEMENT_H() - ui.buttonOffsetY * 2);
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		if(!selected && ui.getHover() || selected && i == handle.position) {
			handle.position = i;
			handle.text = lines[i];
			ui.textInput(handle,"",align,editable);
			if(keyPressed && ui.key != 13) {
				lines[i] = ui.textSelected;
			}
		} else {
			ui.text(lines[i],align);
		}
		ui._y -= ui.ELEMENT_OFFSET();
	}
	ui._y += ui.ELEMENT_OFFSET();
	if(keyPressed) {
		if(ui.key == 40 && handle.position < lines.length - 1) {
			handle.position++;
		}
		if(ui.key == 38 && handle.position > 0) {
			handle.position--;
		}
		if(editable && ui.key == 13) {
			handle.position++;
			lines.splice(handle.position,0,HxOverrides.substr(lines[handle.position - 1],ui.cursorX,null));
			lines[handle.position - 1] = HxOverrides.substr(lines[handle.position - 1],0,ui.cursorX);
			ui.startTextEdit(handle);
			ui.cursorX = ui.highlightAnchor = 0;
		}
		if(editable && ui.key == 8 && cursorStartX == 0 && handle.position > 0) {
			handle.position--;
			ui.cursorX = ui.highlightAnchor = lines[handle.position].length;
			lines[handle.position] += lines[handle.position + 1];
			lines.splice(handle.position + 1,1);
		}
		ui.textSelected = lines[handle.position];
	}
	ui.highlightOnSelect = true;
	ui.tabSwitchEnabled = true;
	handle.text = lines.join("\n");
	return handle.text;
};
zui_Ext.keycodeToString = function(keycode) {
	switch(keycode) {
	case -1:
		return "None";
	case 0:
		return "Unknown";
	case 1:
		return "Back";
	case 3:
		return "Cancel";
	case 6:
		return "Help";
	case 8:
		return "Backspace";
	case 9:
		return "Tab";
	case 12:
		return "Clear";
	case 13:
		return "Return";
	case 16:
		return "Shift";
	case 17:
		return "Ctrl";
	case 18:
		return "Alt";
	case 19:
		return "Pause";
	case 20:
		return "CapsLock";
	case 21:
		return "Kana";
	case 22:
		return "Eisu";
	case 23:
		return "Junja";
	case 24:
		return "Final";
	case 25:
		return "Hanja";
	case 27:
		return "Esc";
	case 28:
		return "Convert";
	case 29:
		return "NonConvert";
	case 30:
		return "Accept";
	case 31:
		return "ModeChange";
	case 32:
		return "Space";
	case 33:
		return "PageUp";
	case 34:
		return "PageDown";
	case 35:
		return "End";
	case 36:
		return "Home";
	case 37:
		return "Left";
	case 38:
		return "Up";
	case 39:
		return "Right";
	case 40:
		return "Down";
	case 41:
		return "Select";
	case 42:
		return "Print";
	case 43:
		return "Execute";
	case 44:
		return "PrintScreen";
	case 45:
		return "Insert";
	case 46:
		return "Delete";
	case 58:
		return "Colon";
	case 59:
		return "Semicolon";
	case 60:
		return "LessThan";
	case 61:
		return "Equals";
	case 62:
		return "GreaterThan";
	case 63:
		return "QuestionMark";
	case 64:
		return "At";
	case 91:
		return "Win";
	case 93:
		return "ContextMenu";
	case 95:
		return "Sleep";
	case 96:
		return "Numpad0";
	case 97:
		return "Numpad1";
	case 98:
		return "Numpad2";
	case 99:
		return "Numpad3";
	case 100:
		return "Numpad4";
	case 101:
		return "Numpad5";
	case 102:
		return "Numpad6";
	case 103:
		return "Numpad7";
	case 104:
		return "Numpad8";
	case 105:
		return "Numpad9";
	case 106:
		return "Multiply";
	case 107:
		return "Add";
	case 108:
		return "Separator";
	case 109:
		return "Subtract";
	case 110:
		return "Decimal";
	case 111:
		return "Divide";
	case 112:
		return "F1";
	case 113:
		return "F2";
	case 114:
		return "F3";
	case 115:
		return "F4";
	case 116:
		return "F5";
	case 117:
		return "F6";
	case 118:
		return "F7";
	case 119:
		return "F8";
	case 120:
		return "F9";
	case 121:
		return "F10";
	case 122:
		return "F11";
	case 123:
		return "F12";
	case 124:
		return "F13";
	case 125:
		return "F14";
	case 126:
		return "F15";
	case 127:
		return "F16";
	case 128:
		return "F17";
	case 129:
		return "F18";
	case 130:
		return "F19";
	case 131:
		return "F20";
	case 132:
		return "F21";
	case 133:
		return "F22";
	case 134:
		return "F23";
	case 135:
		return "F24";
	case 144:
		return "NumLock";
	case 145:
		return "ScrollLock";
	case 146:
		return "WinOemFjJisho";
	case 147:
		return "WinOemFjMasshou";
	case 148:
		return "WinOemFjTouroku";
	case 149:
		return "WinOemFjLoya";
	case 150:
		return "WinOemFjRoya";
	case 160:
		return "Circumflex";
	case 161:
		return "Exclamation";
	case 162:
		return "DoubleQuote";
	case 163:
		return "Hash";
	case 164:
		return "Dollar";
	case 165:
		return "Percent";
	case 166:
		return "Ampersand";
	case 167:
		return "Underscore";
	case 168:
		return "OpenParen";
	case 169:
		return "CloseParen";
	case 170:
		return "Asterisk";
	case 171:
		return "Plus";
	case 172:
		return "Pipe";
	case 173:
		return "HyphenMinus";
	case 174:
		return "OpenCurlyBracket";
	case 175:
		return "CloseCurlyBracket";
	case 176:
		return "Tilde";
	case 181:
		return "VolumeMute";
	case 182:
		return "VolumeDown";
	case 183:
		return "VolumeUp";
	case 188:
		return "Comma";
	case 190:
		return "Period";
	case 191:
		return "Slash";
	case 192:
		return "BackQuote";
	case 219:
		return "OpenBracket";
	case 220:
		return "BackSlash";
	case 221:
		return "CloseBracket";
	case 222:
		return "Quote";
	case 224:
		return "Meta";
	case 225:
		return "AltGr";
	case 227:
		return "WinIcoHelp";
	case 228:
		return "WinIco00";
	case 230:
		return "WinIcoClear";
	case 233:
		return "WinOemReset";
	case 234:
		return "WinOemJump";
	case 235:
		return "WinOemPA1";
	case 236:
		return "WinOemPA2";
	case 237:
		return "WinOemPA3";
	case 238:
		return "WinOemWSCTRL";
	case 239:
		return "WinOemCUSEL";
	case 240:
		return "WinOemATTN";
	case 241:
		return "WinOemFinish";
	case 242:
		return "WinOemCopy";
	case 243:
		return "WinOemAuto";
	case 244:
		return "WinOemENLW";
	case 245:
		return "WinOemBackTab";
	case 246:
		return "ATTN";
	case 247:
		return "CRSEL";
	case 248:
		return "EXSEL";
	case 249:
		return "EREOF";
	case 250:
		return "Play";
	case 251:
		return "Zoom";
	case 253:
		return "PA1";
	case 254:
		return "WinOemClear";
	}
	return String.fromCodePoint(keycode);
};
zui_Ext.dist = function(x1,y1,x2,y2) {
	var vx = x1 - x2;
	var vy = y1 - y2;
	return Math.sqrt(vx * vx + vy * vy);
};
zui_Ext.fract = function(f) {
	return f - Std.int(f);
};
zui_Ext.mix = function(x,y,a) {
	return x * (1.0 - a) + y * a;
};
zui_Ext.clamp = function(x,minVal,maxVal) {
	return Math.min(Math.max(x,minVal),maxVal);
};
zui_Ext.step = function(edge,x) {
	if(x < edge) {
		return 0.0;
	} else {
		return 1.0;
	}
};
zui_Ext.hsvToRgb = function(cR,cG,cB,out) {
	var px = Math.abs(zui_Ext.fract(cR + 1.0) * 6.0 - 3.0);
	var py = Math.abs(zui_Ext.fract(cR + 0.66666666666666663) * 6.0 - 3.0);
	var pz = Math.abs(zui_Ext.fract(cR + 0.33333333333333331) * 6.0 - 3.0);
	out[0] = cB * zui_Ext.mix(1.0,zui_Ext.clamp(px - 1.0,0.0,1.0),cG);
	out[1] = cB * zui_Ext.mix(1.0,zui_Ext.clamp(py - 1.0,0.0,1.0),cG);
	out[2] = cB * zui_Ext.mix(1.0,zui_Ext.clamp(pz - 1.0,0.0,1.0),cG);
};
zui_Ext.rgbToHsv = function(cR,cG,cB,out) {
	var px = zui_Ext.mix(cB,cG,zui_Ext.step(cB,cG));
	var py = zui_Ext.mix(cG,cB,zui_Ext.step(cB,cG));
	var pz = zui_Ext.mix(-1.0,0.0,zui_Ext.step(cB,cG));
	var pw = zui_Ext.mix(0.66666666666666663,-0.33333333333333331,zui_Ext.step(cB,cG));
	var qx = zui_Ext.mix(px,cR,zui_Ext.step(px,cR));
	var qy = zui_Ext.mix(py,py,zui_Ext.step(px,cR));
	var qz = zui_Ext.mix(pw,pz,zui_Ext.step(px,cR));
	var qw = zui_Ext.mix(cR,px,zui_Ext.step(px,cR));
	var d = qx - Math.min(qw,qy);
	out[0] = Math.abs(qz + (qw - qy) / (6.0 * d + 1.0e-10));
	out[1] = d / (qx + 1.0e-10);
	out[2] = qx;
};
var zui_Popup = function() { };
$hxClasses["zui.Popup"] = zui_Popup;
zui_Popup.__name__ = "zui.Popup";
zui_Popup.render = function(g) {
	if(zui_Popup.boxCommands == null) {
		zui_Popup.ui.begin(g);
		if(zui_Popup.ui.window(zui_Popup.hwnd,zui_Popup.modalX,zui_Popup.modalY,zui_Popup.modalW,zui_Popup.modalH)) {
			zui_Popup.drawTitle(g);
			var _g = 0;
			var _g1 = zui_Popup.boxText.split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				zui_Popup.ui.text(line);
			}
			zui_Popup.ui._y = zui_Popup.ui._h - zui_Popup.ui.t.BUTTON_H - 10;
			zui_Popup.ui.row([0.33333333333333331,0.33333333333333331,0.33333333333333331]);
			zui_Popup.ui.endElement();
			if(zui_Popup.ui.button("OK")) {
				zui_Popup.show = false;
			}
		}
		zui_Popup.ui.end();
	} else {
		zui_Popup.ui.begin(g);
		if(zui_Popup.ui.window(zui_Popup.hwnd,zui_Popup.modalX,zui_Popup.modalY,zui_Popup.modalW,zui_Popup.modalH)) {
			zui_Popup.drawTitle(g);
			zui_Popup.ui._y += 10;
			zui_Popup.boxCommands(zui_Popup.ui);
		}
		zui_Popup.ui.end();
	}
};
zui_Popup.drawTitle = function(g) {
	if(zui_Popup.boxTitle != "") {
		g.set_color(zui_Popup.ui.t.SEPARATOR_COL);
		zui_Popup.ui.drawRect(g,true,zui_Popup.ui._x,zui_Popup.ui._y,zui_Popup.ui._w,zui_Popup.ui.t.BUTTON_H);
		g.set_color(zui_Popup.ui.t.TEXT_COL);
		zui_Popup.ui.text(zui_Popup.boxTitle);
	}
};
zui_Popup.update = function() {
	var inUse = zui_Popup.ui.comboSelectedHandle != null;
	if(zui_Popup.ui.inputStarted && !inUse) {
		if(zui_Popup.ui.inputX < zui_Popup.modalX || zui_Popup.ui.inputX > zui_Popup.modalX + zui_Popup.modalW || zui_Popup.ui.inputY < zui_Popup.modalY || zui_Popup.ui.inputY > zui_Popup.modalY + zui_Popup.modalH) {
			zui_Popup.show = false;
		}
	}
};
zui_Popup.showMessage = function(ui,title,text) {
	zui_Popup.ui = ui;
	zui_Popup.init();
	zui_Popup.boxTitle = title;
	zui_Popup.boxText = text;
	zui_Popup.boxCommands = null;
};
zui_Popup.showCustom = function(ui,commands,mx,my,mw,mh) {
	if(mh == null) {
		mh = 160;
	}
	if(mw == null) {
		mw = 400;
	}
	if(my == null) {
		my = -1;
	}
	if(mx == null) {
		mx = -1;
	}
	zui_Popup.ui = ui;
	zui_Popup.init(mx,my,mw,mh);
	zui_Popup.boxTitle = "";
	zui_Popup.boxText = "";
	zui_Popup.boxCommands = commands;
};
zui_Popup.init = function(mx,my,mw,mh) {
	if(mh == null) {
		mh = 160;
	}
	if(mw == null) {
		mw = 400;
	}
	if(my == null) {
		my = -1;
	}
	if(mx == null) {
		mx = -1;
	}
	var appW = kha_System.windowWidth();
	var appH = kha_System.windowHeight();
	zui_Popup.modalX = mx;
	zui_Popup.modalY = my;
	zui_Popup.modalW = Std.int(mw * zui_Popup.ui.SCALE());
	zui_Popup.modalH = Std.int(mh * zui_Popup.ui.SCALE());
	if(mx == -1) {
		zui_Popup.modalX = Std.int(appW / 2 - zui_Popup.modalW / 2);
	}
	if(my == -1) {
		zui_Popup.modalY = Std.int(appH / 2 - zui_Popup.modalH / 2);
	}
	zui_Popup.modalX = Std.int(Math.max(0,Math.min(zui_Popup.modalX,appW - zui_Popup.modalW)));
	zui_Popup.modalY = Std.int(Math.max(0,Math.min(zui_Popup.modalY,appH - zui_Popup.modalH)));
	zui_Popup.hwnd.dragX = 0;
	zui_Popup.hwnd.dragY = 0;
	zui_Popup.show = true;
};
var zui_Themes = function() { };
$hxClasses["zui.Themes"] = zui_Themes;
zui_Themes.__name__ = "zui.Themes";
var zui_Zui = function(ops) {
	this.checkSelectImage = null;
	this.elementsBaked = false;
	this.tabVertical = false;
	this.tabScroll = 0.0;
	this.tabHandle = null;
	this.tabColors = null;
	this.tabNames = null;
	this.tooltipTime = 0.0;
	this.tooltipWait = false;
	this.tooltipShown = false;
	this.tooltipY = 0.0;
	this.tooltipX = 0.0;
	this.tooltipInvertY = false;
	this.tooltipImgMaxWidth = null;
	this.tooltipImg = null;
	this.tooltipText = "";
	this.comboToSubmit = 0;
	this.submitComboHandle = null;
	this.comboSelectedWindow = null;
	this.comboSelectedHandle = null;
	this.tabPressedHandle = null;
	this.tabPressed = false;
	this.textToSubmit = "";
	this.submitTextHandle = null;
	this.textSelectedHandle = null;
	this.restoreY = -1.0;
	this.restoreX = -1.0;
	this.windowHeaderH = 0.0;
	this.windowHeaderW = 0.0;
	this.dragHandle = null;
	this.scrollHandle = null;
	this.windowEnded = true;
	this._windowY = 0.0;
	this._windowX = 0.0;
	this.imageScrollAlign = true;
	this.scrollAlign = 0.0;
	this.curRatio = -1;
	this.highlightAnchor = 0;
	this.cursorX = 0;
	this.inputStartedTime = 0.0;
	this.key = null;
	this.isReturnDown = false;
	this.isEscapeDown = false;
	this.isDeleteDown = false;
	this.isBackspaceDown = false;
	this.isADown = false;
	this.isAltDown = false;
	this.isCtrlDown = false;
	this.isShiftDown = false;
	this.isKeyDown = false;
	this.isKeyPressed = false;
	this.inputWheelDelta = 0;
	this.inputEnabled = true;
	this.inputRegistered = false;
	this.touchHold = false;
	this.highlightFullRow = false;
	this.tabSwitchEnabled = true;
	this.highlightOnSelect = true;
	this.alwaysRedraw = false;
	this.scrollEnabled = true;
	this.imageInvertY = false;
	this.changed = false;
	this.isReleased = false;
	this.isHovered = false;
	this.isPushed = false;
	this.isStarted = false;
	this.enabled = true;
	this.isTyping = false;
	this.isScrolling = false;
	if(ops.theme == null) {
		ops.theme = zui_Themes.dark;
	}
	this.t = ops.theme;
	if(ops.khaWindowId == null) {
		ops.khaWindowId = 0;
	}
	if(ops.scaleFactor == null) {
		ops.scaleFactor = 1.0;
	}
	if(ops.autoNotifyInput == null) {
		ops.autoNotifyInput = true;
	}
	this.ops = ops;
	this.setScale(ops.scaleFactor);
	if(ops.autoNotifyInput) {
		this.registerInput();
	}
	if(zui_Zui.copyReceiver == null) {
		zui_Zui.copyReceiver = this;
		kha_System.notifyOnCutCopyPaste($bind(this,this.onCut),$bind(this,this.onCopy),$bind(this,this.onPaste));
		kha_System.notifyOnFrames(function(frames) {
			if((zui_Zui.isCopy || zui_Zui.isPaste) && ++zui_Zui.copyFrame > 1) {
				zui_Zui.isCopy = zui_Zui.isCut = zui_Zui.isPaste = false;
				zui_Zui.copyFrame = 0;
			}
		});
	}
	var rtTextVS = kha_graphics4_Graphics2.createTextVertexStructure();
	this.rtTextPipeline = kha_graphics4_Graphics2.createTextPipeline(rtTextVS);
	this.rtTextPipeline.alphaBlendSource = 1;
	this.rtTextPipeline.compile();
};
$hxClasses["zui.Zui"] = zui_Zui;
zui_Zui.__name__ = "zui.Zui";
zui_Zui.clampi = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
zui_Zui.prototype = {
	isScrolling: null
	,isTyping: null
	,enabled: null
	,isStarted: null
	,isPushed: null
	,isHovered: null
	,isReleased: null
	,changed: null
	,imageInvertY: null
	,scrollEnabled: null
	,alwaysRedraw: null
	,highlightOnSelect: null
	,tabSwitchEnabled: null
	,highlightFullRow: null
	,touchHold: null
	,inputRegistered: null
	,inputEnabled: null
	,inputX: null
	,inputY: null
	,inputStartedX: null
	,inputStartedY: null
	,inputDX: null
	,inputDY: null
	,inputWheelDelta: null
	,inputStarted: null
	,inputStartedR: null
	,inputReleased: null
	,inputReleasedR: null
	,inputDown: null
	,inputDownR: null
	,isKeyPressed: null
	,isKeyDown: null
	,isShiftDown: null
	,isCtrlDown: null
	,isAltDown: null
	,isADown: null
	,isBackspaceDown: null
	,isDeleteDown: null
	,isEscapeDown: null
	,isReturnDown: null
	,key: null
	,char: null
	,inputStartedTime: null
	,cursorX: null
	,highlightAnchor: null
	,ratios: null
	,curRatio: null
	,xBeforeSplit: null
	,wBeforeSplit: null
	,g: null
	,t: null
	,ops: null
	,globalG: null
	,rtTextPipeline: null
	,fontSize: null
	,fontOffsetY: null
	,arrowOffsetX: null
	,arrowOffsetY: null
	,titleOffsetX: null
	,buttonOffsetY: null
	,checkOffsetX: null
	,checkOffsetY: null
	,checkSelectOffsetX: null
	,checkSelectOffsetY: null
	,radioOffsetX: null
	,radioOffsetY: null
	,radioSelectOffsetX: null
	,radioSelectOffsetY: null
	,scrollAlign: null
	,imageScrollAlign: null
	,_x: null
	,_y: null
	,_w: null
	,_h: null
	,_windowX: null
	,_windowY: null
	,_windowW: null
	,_windowH: null
	,currentWindow: null
	,windowEnded: null
	,scrollHandle: null
	,dragHandle: null
	,windowHeaderW: null
	,windowHeaderH: null
	,restoreX: null
	,restoreY: null
	,textSelectedHandle: null
	,textSelected: null
	,submitTextHandle: null
	,textToSubmit: null
	,tabPressed: null
	,tabPressedHandle: null
	,comboSelectedHandle: null
	,comboSelectedWindow: null
	,comboSelectedAlign: null
	,comboSelectedTexts: null
	,comboItemCount: null
	,comboItemOffset: null
	,comboSelectedLabel: null
	,comboSelectedX: null
	,comboSelectedY: null
	,comboSelectedW: null
	,submitComboHandle: null
	,comboToSubmit: null
	,tooltipText: null
	,tooltipImg: null
	,tooltipImgMaxWidth: null
	,tooltipInvertY: null
	,tooltipX: null
	,tooltipY: null
	,tooltipShown: null
	,tooltipWait: null
	,tooltipTime: null
	,tabNames: null
	,tabColors: null
	,tabHandle: null
	,tabScroll: null
	,tabVertical: null
	,elementsBaked: null
	,checkSelectImage: null
	,setScale: function(factor) {
		this.ops.scaleFactor = factor;
		this.fontSize = this.FONT_SIZE();
		var fontHeight = this.ops.font.height(this.fontSize);
		this.fontOffsetY = (this.ELEMENT_H() - fontHeight) / 2;
		this.arrowOffsetY = (this.ELEMENT_H() - this.ARROW_SIZE()) / 2;
		this.arrowOffsetX = this.arrowOffsetY;
		this.titleOffsetX = (this.arrowOffsetX * 2 + this.ARROW_SIZE()) / this.SCALE();
		this.buttonOffsetY = (this.ELEMENT_H() - this.BUTTON_H()) / 2;
		this.checkOffsetY = (this.ELEMENT_H() - this.CHECK_SIZE()) / 2;
		this.checkOffsetX = this.checkOffsetY;
		this.checkSelectOffsetY = (this.CHECK_SIZE() - this.CHECK_SELECT_SIZE()) / 2;
		this.checkSelectOffsetX = this.checkSelectOffsetY;
		this.radioOffsetY = (this.ELEMENT_H() - this.CHECK_SIZE()) / 2;
		this.radioOffsetX = this.radioOffsetY;
		this.radioSelectOffsetY = (this.CHECK_SIZE() - this.CHECK_SELECT_SIZE()) / 2;
		this.radioSelectOffsetX = this.radioSelectOffsetY;
		this.elementsBaked = false;
	}
	,bakeElements: function() {
		if(this.checkSelectImage != null) {
			this.checkSelectImage.unload();
		}
		this.checkSelectImage = kha_Image.createRenderTarget(Std.int(this.CHECK_SELECT_SIZE()),Std.int(this.CHECK_SELECT_SIZE()),null,0,1,this.ops.khaWindowId);
		var g = this.checkSelectImage.get_g2();
		g.begin(true,0);
		g.set_color(this.t.ACCENT_SELECT_COL);
		g.drawLine(0,0,this.checkSelectImage.get_width(),this.checkSelectImage.get_height(),2 * this.SCALE());
		g.drawLine(this.checkSelectImage.get_width(),0,0,this.checkSelectImage.get_height(),2 * this.SCALE());
		g.end();
		this.elementsBaked = true;
	}
	,remove: function() {
		if(this.ops.autoNotifyInput) {
			this.unregisterInput();
		}
	}
	,registerInput: function() {
		kha_input_Mouse.get().notifyWindowed(this.ops.khaWindowId,$bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),$bind(this,this.onMouseWheel));
		kha_input_Keyboard.get().notify($bind(this,this.onKeyDown),$bind(this,this.onKeyUp),$bind(this,this.onKeyPress));
		this.inputRegistered = true;
	}
	,unregisterInput: function() {
		kha_input_Mouse.get().removeWindowed(this.ops.khaWindowId,$bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),$bind(this,this.onMouseWheel));
		kha_input_Keyboard.get().remove($bind(this,this.onKeyDown),$bind(this,this.onKeyUp),$bind(this,this.onKeyPress));
		this.endInput();
		this.inputX = this.inputY = 0;
		this.inputRegistered = false;
	}
	,begin: function(g) {
		if(!this.elementsBaked) {
			this.bakeElements();
		}
		this.changed = false;
		this.globalG = g;
		this._x = 0;
		this._y = 0;
		this._w = 0;
		this._h = 0;
	}
	,end: function(last) {
		if(last == null) {
			last = true;
		}
		if(!this.windowEnded) {
			this.endWindow();
		}
		this.drawCombo();
		this.drawTooltip();
		this.tabPressedHandle = null;
		if(last) {
			this.endInput();
		}
	}
	,beginRegion: function(g,x,y,w) {
		if(!this.elementsBaked) {
			g.end();
			this.bakeElements();
			g.begin(false);
		}
		this.changed = false;
		this.globalG = g;
		this.g = g;
		this.currentWindow = null;
		this.tooltipText = "";
		this.tooltipImg = null;
		this._windowX = 0;
		this._windowY = 0;
		this._windowW = w;
		this._x = x;
		this._y = y;
		this._w = w;
	}
	,endRegion: function(last) {
		if(last == null) {
			last = true;
		}
		this.drawTooltip();
		this.tabPressedHandle = null;
		if(last) {
			this.endInput();
		}
	}
	,endInput: function() {
		this.isKeyPressed = false;
		this.inputStarted = false;
		this.inputStartedR = false;
		this.inputReleased = false;
		this.inputReleasedR = false;
		this.inputDX = 0;
		this.inputDY = 0;
		this.inputWheelDelta = 0;
		zui_Zui.textToPaste = "";
		if(zui_Zui.keyRepeat && this.isKeyDown && kha_Scheduler.time() - zui_Zui.keyRepeatTime > 0.05) {
			if(this.key == 8 || this.key == 46 || this.key == 37 || this.key == 39 || this.key == 38 || this.key == 40) {
				zui_Zui.keyRepeatTime = kha_Scheduler.time();
				this.isKeyPressed = true;
			}
		}
		if(zui_Zui.touchControls && this.inputDown && this.inputX == this.inputStartedX && this.inputY == this.inputStartedY && this.inputStartedTime > 0 && kha_Scheduler.time() - this.inputStartedTime > 0.5) {
			this.touchHold = true;
			this.inputStartedTime = 0;
		}
	}
	,inputChanged: function() {
		if(!(this.inputDX != 0 || this.inputDY != 0 || this.inputWheelDelta != 0 || this.inputStarted || this.inputStartedR || this.inputReleased || this.inputReleasedR || this.inputDown || this.inputDownR)) {
			return this.isKeyPressed;
		} else {
			return true;
		}
	}
	,windowDirty: function(handle,x,y,w,h) {
		var wx = x + handle.dragX;
		var wy = y + handle.dragY;
		var inputChanged = this.getInputInRect(wx,wy,w,h) && this.inputChanged();
		if(!(this.alwaysRedraw || this.isScrolling || this.isTyping)) {
			return inputChanged;
		} else {
			return true;
		}
	}
	,window: function(handle,x,y,w,h,drag) {
		if(drag == null) {
			drag = false;
		}
		if(handle.texture == null || w != handle.texture.get_width() || h != handle.texture.get_height()) {
			this.resize(handle,w,h,this.ops.khaWindowId);
		}
		if(!this.windowEnded) {
			this.endWindow();
		}
		this.windowEnded = false;
		this.g = handle.texture.get_g2();
		this.currentWindow = handle;
		this._windowX = x + handle.dragX;
		this._windowY = y + handle.dragY;
		this._windowW = w;
		this._windowH = h;
		this.windowHeaderW = 0;
		this.windowHeaderH = 0;
		if(this.windowDirty(handle,x,y,w,h)) {
			handle.redraws = 2;
		}
		if(zui_Zui.onBorderHover != null) {
			if(this.getInputInRect(this._windowX - 4,this._windowY,8,this._windowH)) {
				zui_Zui.onBorderHover(handle,0);
			} else if(this.getInputInRect(this._windowX + this._windowW - 4,this._windowY,8,this._windowH)) {
				zui_Zui.onBorderHover(handle,1);
			} else if(this.getInputInRect(this._windowX,this._windowY - 4,this._windowW,8)) {
				zui_Zui.onBorderHover(handle,2);
			} else if(this.getInputInRect(this._windowX,this._windowY + this._windowH - 4,this._windowW,8)) {
				zui_Zui.onBorderHover(handle,3);
			}
		}
		if(handle.redraws <= 0) {
			return false;
		}
		this._x = 0;
		this._y = handle.scrollOffset;
		if(handle.layout == 1) {
			w = Std.int(this.ELEMENT_W());
		}
		this._w = !handle.scrollEnabled ? w : w - this.SCROLL_W();
		this._h = h;
		this.tooltipText = "";
		this.tooltipImg = null;
		this.tabNames = null;
		if(this.t.FILL_WINDOW_BG) {
			this.g.begin(true,this.t.WINDOW_BG_COL);
		} else {
			this.g.begin(true,0);
			this.g.set_color(this.t.WINDOW_BG_COL);
			this.g.fillRect(this._x,this._y - handle.scrollOffset,handle.lastMaxX,handle.lastMaxY);
		}
		handle.dragEnabled = drag;
		if(drag) {
			if(this.inputStarted && this.getInputInRect(this._windowX,this._windowY,this._windowW,this.HEADER_DRAG_H())) {
				this.dragHandle = handle;
			} else if(this.inputReleased) {
				this.dragHandle = null;
			}
			if(handle == this.dragHandle) {
				handle.redraws = 2;
				handle.dragX += Std.int(this.inputDX);
				handle.dragY += Std.int(this.inputDY);
			}
			this._y += this.HEADER_DRAG_H();
			this.windowHeaderH += this.HEADER_DRAG_H();
		}
		return true;
	}
	,endWindow: function(bindGlobalG) {
		if(bindGlobalG == null) {
			bindGlobalG = true;
		}
		var handle = this.currentWindow;
		if(handle == null) {
			return;
		}
		if(handle.redraws > 0 || this.isScrolling || this.isTyping) {
			if(this.tabNames != null) {
				this.drawTabs();
			}
			if(handle.dragEnabled) {
				this.g.set_color(this.t.SEPARATOR_COL);
				this.g.fillRect(0,0,this._windowW,this.HEADER_DRAG_H());
			}
			var wh = this._windowH - this.windowHeaderH;
			var fullHeight = this._y - handle.scrollOffset - this.windowHeaderH;
			if(fullHeight < wh || handle.layout == 1 || !this.scrollEnabled) {
				handle.scrollEnabled = false;
				handle.scrollOffset = 0;
			} else {
				handle.scrollEnabled = true;
				if(this.tabScroll < 0) {
					handle.scrollOffset = this.tabScroll;
					this.tabScroll = 0;
				}
				var wy = this._windowY + this.windowHeaderH;
				var amountToScroll = fullHeight - wh;
				var amountScrolled = -handle.scrollOffset;
				var ratio = amountScrolled / amountToScroll;
				var barH = wh * Math.abs(wh / fullHeight);
				barH = Math.max(barH,this.ELEMENT_H());
				var totalScrollableArea = wh - barH;
				var e = amountToScroll / totalScrollableArea;
				var barY = totalScrollableArea * ratio + this.windowHeaderH;
				var barFocus = this.getInputInRect(this._windowX + this._windowW - this.SCROLL_W(),barY + this._windowY,this.SCROLL_W(),barH);
				if(this.inputStarted && barFocus) {
					this.scrollHandle = handle;
					this.isScrolling = true;
				}
				var scrollDelta = this.inputWheelDelta;
				if(zui_Zui.touchControls && this.inputDownR && this.inputDY != 0) {
					this.isScrolling = true;
					scrollDelta = -this.inputDY / 20;
				}
				if(handle == this.scrollHandle) {
					this.scroll(this.inputDY * e,fullHeight);
				} else if(scrollDelta != 0 && this.comboSelectedHandle == null && this.getInputInRect(this._windowX,wy,this._windowW,wh)) {
					this.scroll(scrollDelta * this.ELEMENT_H(),fullHeight);
				}
				if(handle.scrollOffset > 0) {
					handle.scrollOffset = 0;
				} else if(fullHeight + handle.scrollOffset < wh) {
					handle.scrollOffset = wh - fullHeight;
				}
				this.g.set_color(this.t.WINDOW_BG_COL);
				this.g.fillRect(this._windowW - this.SCROLL_W(),wy,this.SCROLL_W(),wh);
				this.g.set_color(this.t.ACCENT_COL);
				var scrollbarFocus = this.getInputInRect(this._windowX + this._windowW - this.SCROLL_W(),wy,this.SCROLL_W(),wh);
				var barW = scrollbarFocus || handle == this.scrollHandle ? this.SCROLL_W() : this.SCROLL_W() / 3;
				this.g.fillRect(this._windowW - barW - this.scrollAlign,barY,barW,barH);
			}
			handle.lastMaxX = this._x;
			handle.lastMaxY = this._y;
			if(handle.layout == 0) {
				handle.lastMaxX += this._windowW;
			} else {
				handle.lastMaxY += this._windowH;
			}
			handle.redraws--;
			this.g.end();
		}
		this.windowEnded = true;
		if(zui_Zui.alwaysRedrawWindow || handle.redraws > -4) {
			if(bindGlobalG) {
				this.globalG.begin(false);
			}
			this.globalG.set_color(this.t.WINDOW_TINT_COL);
			this.globalG.drawImage(handle.texture,this._windowX,this._windowY);
			if(bindGlobalG) {
				this.globalG.end();
			}
			if(handle.redraws <= 0) {
				handle.redraws--;
			}
		}
	}
	,scroll: function(delta,fullHeight) {
		this.currentWindow.scrollOffset -= delta;
	}
	,tab: function(handle,text,vertical,color) {
		if(color == null) {
			color = -1;
		}
		if(vertical == null) {
			vertical = false;
		}
		if(this.tabNames == null) {
			this.tabNames = [];
			this.tabColors = [];
			this.tabHandle = handle;
			this.tabVertical = vertical;
			this._w -= this.tabVertical ? Std.int(this.ELEMENT_OFFSET() + this.ELEMENT_W() - this.SCALE()) : 0;
			if(vertical) {
				this.windowHeaderW += this.ELEMENT_W();
			} else {
				this.windowHeaderH += this.BUTTON_H() + this.buttonOffsetY + this.ELEMENT_OFFSET();
			}
			this.restoreX = this.inputX;
			this.restoreY = this.inputY;
			if(!vertical && this.getInputInRect(this._windowX,this._windowY,this._windowW,this.windowHeaderH)) {
				this.inputX = this.inputY = -1;
			}
			if(vertical) {
				this._x += this.windowHeaderW + 6;
				this._w -= 6;
			} else {
				this._y += this.windowHeaderH + 3;
			}
		}
		this.tabNames.push(text);
		this.tabColors.push(color);
		return handle.position == this.tabNames.length - 1;
	}
	,drawTabs: function() {
		this.inputX = this.restoreX;
		this.inputY = this.restoreY;
		if(this.currentWindow == null) {
			return;
		}
		var tabX = 0.0;
		var tabY = 0.0;
		var tabH = Std.int(this.BUTTON_H() * 1.1);
		var origy = this._y;
		this._y = this.currentWindow.dragEnabled ? this.HEADER_DRAG_H() : 0;
		this.tabHandle.changed = false;
		this.g.set_color(this.t.SEPARATOR_COL);
		if(this.tabVertical) {
			this.g.fillRect(0,this._y,this.ELEMENT_W(),this._windowH);
		} else {
			this.g.fillRect(0,this._y,this._windowW,this.buttonOffsetY + tabH + 2);
		}
		this.g.set_color(this.t.ACCENT_COL);
		if(this.tabVertical) {
			this.g.fillRect(this.ELEMENT_W(),this._y,1,this._windowH);
		} else {
			this.g.fillRect(this.buttonOffsetY,this._y + this.buttonOffsetY + tabH + 2,this._windowW - this.buttonOffsetY * 2,1);
		}
		var basey = this.tabVertical ? this._y : this._y + 2;
		var _g = 0;
		var _g1 = this.tabNames.length;
		while(_g < _g1) {
			var i = _g++;
			this._x = tabX;
			this._y = basey + tabY;
			this._w = this.tabVertical ? Std.int(this.ELEMENT_W() - this.SCALE()) : Std.int(this.ops.font.width(this.fontSize,this.tabNames[i]) + this.buttonOffsetY * 2 + 18 * this.SCALE());
			var released = this.getReleased();
			var pushed = this.getPushed();
			var hover = this.getHover();
			if(released) {
				var h = this.tabHandle.nest(this.tabHandle.position);
				h.scrollOffset = this.currentWindow.scrollOffset;
				h = this.tabHandle.nest(i);
				this.tabScroll = h.scrollOffset;
				this.tabHandle.position = i;
				this.currentWindow.redraws = 3;
				this.tabHandle.changed = true;
			}
			var selected = this.tabHandle.position == i;
			this.g.set_color(pushed || hover ? this.t.BUTTON_HOVER_COL : this.tabColors[i] != -1 ? this.tabColors[i] : selected ? this.t.WINDOW_BG_COL : this.t.SEPARATOR_COL);
			if(this.tabVertical) {
				tabY += tabH + 1;
			} else {
				tabX += this._w + 1;
			}
			this.drawRect(this.g,true,this._x + this.buttonOffsetY,this._y + this.buttonOffsetY,this._w,tabH);
			this.g.set_color(selected ? this.t.BUTTON_TEXT_COL : this.t.LABEL_COL);
			this.drawString(this.g,this.tabNames[i],this.t.TEXT_OFFSET,0,0);
			if(selected && !this.tabVertical) {
				this.g.set_color(this.t.WINDOW_BG_COL);
				this.g.fillRect(this._x + this.buttonOffsetY + 1,this._y + this.buttonOffsetY + tabH,this._w - 1,1);
			}
		}
		this._x = 0;
		this._y = origy;
		this._w = Std.int(!this.currentWindow.scrollEnabled ? this._windowW : this._windowW - this.SCROLL_W());
	}
	,panel: function(handle,text,isTree,filled,pack) {
		if(pack == null) {
			pack = true;
		}
		if(filled == null) {
			filled = true;
		}
		if(isTree == null) {
			isTree = false;
		}
		if(!this.isVisible(this.ELEMENT_H())) {
			this.endElement();
			return handle.selected;
		}
		if(this.getReleased()) {
			handle.selected = !handle.selected;
			handle.changed = this.changed = true;
		}
		if(filled) {
			this.g.set_color(this.t.PANEL_BG_COL);
			this.drawRect(this.g,true,this._x,this._y,this._w,this.ELEMENT_H());
		}
		if(isTree) {
			this.drawTree(handle.selected);
		} else {
			this.drawArrow(handle.selected);
		}
		this.g.set_color(this.t.LABEL_COL);
		this.g.set_opacity(1.0);
		this.drawString(this.g,text,this.titleOffsetX,0);
		this.endElement();
		if(pack && !handle.selected) {
			this._y -= this.ELEMENT_OFFSET();
		}
		return handle.selected;
	}
	,image: function(image,tint,h,sx,sy,sw,sh) {
		if(sh == null) {
			sh = 0;
		}
		if(sw == null) {
			sw = 0;
		}
		if(sy == null) {
			sy = 0;
		}
		if(sx == null) {
			sx = 0;
		}
		if(tint == null) {
			tint = -1;
		}
		var iw = (sw > 0 ? sw : image.get_width()) * this.SCALE();
		var ih = (sh > 0 ? sh : image.get_height()) * this.SCALE();
		var w = Math.min(iw,this._w);
		var x = this._x;
		var scroll = this.currentWindow != null && this.currentWindow.scrollEnabled;
		var r = this.curRatio == -1 ? 1.0 : this.getRatio(this.ratios[this.curRatio],1);
		if(this.imageScrollAlign) {
			w = Math.min(iw,this._w - this.buttonOffsetY * 2);
			x += this.buttonOffsetY;
			if(!scroll) {
				w -= this.SCROLL_W() * r;
				x += this.SCROLL_W() * r / 2;
			}
		} else if(scroll) {
			w += this.SCROLL_W() * r;
		}
		var ratio = h == null ? w / iw : h / ih;
		if(h == null) {
			h = ih * ratio;
		} else {
			w = iw * ratio;
		}
		if(!this.isVisible(h)) {
			this.endElement(h);
			return 0;
		}
		var started = this.getStarted(h);
		var down = this.getPushed(h);
		var released = this.getReleased(h);
		var hover = this.getHover(h);
		this.g.set_color(tint);
		if(!this.enabled) {
			this.fadeColor();
		}
		var h_float = h;
		if(sw > 0) {
			if(this.imageInvertY) {
				this.g.drawScaledSubImage(image,sx,sy,sw,sh,x,this._y + h_float,w,-h_float);
			} else {
				this.g.drawScaledSubImage(image,sx,sy,sw,sh,x,this._y,w,h_float);
			}
		} else if(this.imageInvertY) {
			this.g.drawScaledImage(image,x,this._y + h_float,w,-h_float);
		} else {
			this.g.drawScaledImage(image,x,this._y,w,h_float);
		}
		this.endElement(h);
		if(started) {
			return 1;
		} else if(released) {
			return 3;
		} else if(down) {
			return 2;
		} else {
			return 0;
		}
	}
	,text: function(text,align,bg) {
		if(bg == null) {
			bg = 0;
		}
		if(align == null) {
			align = 0;
		}
		if(text.indexOf("\n") >= 0) {
			this.splitText(text,align,bg);
			return 0;
		}
		var h = Math.max(this.ELEMENT_H(),this.ops.font.height(this.fontSize));
		if(!this.isVisible(h)) {
			this.endElement(h + this.ELEMENT_OFFSET());
			return 0;
		}
		var started = this.getStarted(h);
		var down = this.getPushed(h);
		var released = this.getReleased(h);
		var hover = this.getHover(h);
		if(bg != 0) {
			this.g.set_color(bg);
			this.g.fillRect(this._x + this.buttonOffsetY,this._y + this.buttonOffsetY,this._w - this.buttonOffsetY * 2,this.BUTTON_H());
		}
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.TEXT_OFFSET(),0,align);
		this.endElement(h + this.ELEMENT_OFFSET());
		if(started) {
			return 1;
		} else if(released) {
			return 3;
		} else if(down) {
			return 2;
		} else {
			return 0;
		}
	}
	,splitText: function(lines,align,bg) {
		if(bg == null) {
			bg = 0;
		}
		if(align == null) {
			align = 0;
		}
		var _g = 0;
		var _g1 = lines.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			this.text(line,align,bg);
		}
	}
	,startTextEdit: function(handle) {
		this.isTyping = true;
		this.submitTextHandle = this.textSelectedHandle;
		this.textToSubmit = this.textSelected;
		this.textSelectedHandle = handle;
		this.textSelected = handle.text;
		this.cursorX = handle.text.length;
		if(this.tabPressed) {
			this.tabPressed = false;
			this.isKeyPressed = false;
		} else if(!this.highlightOnSelect) {
			var x = this.inputX - (this._windowX + this._x + this.TEXT_OFFSET());
			this.cursorX = 0;
			while(this.cursorX < this.textSelected.length && this.ops.font.width(this.fontSize,HxOverrides.substr(this.textSelected,0,this.cursorX)) < x) this.cursorX++;
		}
		this.tabPressedHandle = handle;
		this.highlightAnchor = this.highlightOnSelect ? 0 : this.cursorX;
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().show();
		}
	}
	,submitTextEdit: function() {
		this.submitTextHandle.text = this.textToSubmit;
		this.submitTextHandle.changed = this.changed = true;
		this.submitTextHandle = null;
		this.textToSubmit = "";
		this.textSelected = "";
	}
	,updateTextEdit: function(align,editable) {
		if(editable == null) {
			editable = true;
		}
		if(align == null) {
			align = 0;
		}
		var text = this.textSelected;
		if(this.isKeyPressed) {
			if(this.key == 37) {
				if(this.cursorX > 0) {
					this.cursorX--;
				}
			} else if(this.key == 39) {
				if(this.cursorX < text.length) {
					this.cursorX++;
				}
			} else if(editable && this.key == 8) {
				if(this.cursorX > 0 && this.highlightAnchor == this.cursorX) {
					text = HxOverrides.substr(text,0,this.cursorX - 1) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX--;
				} else if(this.highlightAnchor < this.cursorX) {
					text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX = this.highlightAnchor;
				} else {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
				}
			} else if(editable && this.key == 46) {
				if(this.highlightAnchor == this.cursorX) {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.cursorX + 1,null);
				} else if(this.highlightAnchor < this.cursorX) {
					text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX = this.highlightAnchor;
				} else {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
				}
			} else if(this.key == 13) {
				this.deselectText();
			} else if(this.key == 27) {
				this.textSelected = this.textSelectedHandle.text;
				this.deselectText();
			} else if(this.key == 9 && this.tabSwitchEnabled) {
				this.tabPressed = true;
				this.deselectText();
				this.key = null;
			} else if(this.key == 36) {
				this.cursorX = 0;
			} else if(this.key == 35) {
				this.cursorX = text.length;
			} else if(this.isCtrlDown && this.isADown) {
				this.cursorX = text.length;
				this.highlightAnchor = 0;
			} else if(editable && this.key != 16 && this.key != 20 && this.key != 17 && this.key != 18 && this.key != 38 && this.key != 40 && this.char != null && this.char != "" && HxOverrides.cca(this.char,0) >= 32) {
				text = HxOverrides.substr(text,0,this.highlightAnchor) + this.char + HxOverrides.substr(text,this.cursorX,null);
				this.cursorX = this.cursorX + 1 > text.length ? text.length : this.cursorX + 1;
			}
			var selecting = this.isShiftDown && (this.key == 37 || this.key == 39 || this.key == 16);
			if(!selecting && !this.isCtrlDown) {
				this.highlightAnchor = this.cursorX;
			}
		}
		if(zui_Zui.textToPaste != "") {
			text = HxOverrides.substr(text,0,this.highlightAnchor) + zui_Zui.textToPaste + HxOverrides.substr(text,this.cursorX,null);
			this.cursorX += zui_Zui.textToPaste.length;
			this.highlightAnchor = this.cursorX;
			zui_Zui.textToPaste = "";
		}
		if(this.highlightAnchor == this.cursorX) {
			zui_Zui.textToCopy = text;
		} else if(this.highlightAnchor < this.cursorX) {
			zui_Zui.textToCopy = text.substring(this.highlightAnchor,this.cursorX);
		} else {
			zui_Zui.textToCopy = text.substring(this.cursorX,this.highlightAnchor);
		}
		if(zui_Zui.isCut) {
			if(this.highlightAnchor == this.cursorX) {
				text = "";
			} else if(this.highlightAnchor < this.cursorX) {
				text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
				this.cursorX = this.highlightAnchor;
			} else {
				text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
			}
		}
		var off = this.TEXT_OFFSET();
		var lineHeight = this.ELEMENT_H();
		var cursorHeight = lineHeight - this.buttonOffsetY * 3.0;
		if(this.highlightAnchor != this.cursorX) {
			var istart = this.cursorX;
			var iend = this.highlightAnchor;
			if(this.highlightAnchor < this.cursorX) {
				istart = this.highlightAnchor;
				iend = this.cursorX;
			}
			var hlstr = HxOverrides.substr(text,istart,iend - istart);
			var hlstrw = this.ops.font.width(this.fontSize,hlstr);
			var startoff = this.ops.font.width(this.fontSize,HxOverrides.substr(text,0,istart));
			var hlStart = align == 0 ? this._x + startoff + off : this._x + this._w - hlstrw - off;
			if(align == 2) {
				hlStart -= this.ops.font.width(this.fontSize,HxOverrides.substr(text,iend,text.length));
			}
			this.g.set_color(this.t.ACCENT_SELECT_COL);
			this.g.fillRect(hlStart,this._y + this.buttonOffsetY * 1.5,hlstrw,cursorHeight);
		}
		var time = kha_Scheduler.time();
		if(this.isKeyDown || time % (this.FLASH_SPEED() * 2.0) < this.FLASH_SPEED()) {
			var str = align == 0 ? HxOverrides.substr(text,0,this.cursorX) : text.substring(this.cursorX,text.length);
			var strw = this.ops.font.width(this.fontSize,str);
			var cursorX = align == 0 ? this._x + strw + off : this._x + this._w - strw - off;
			this.g.set_color(this.t.TEXT_COL);
			this.g.fillRect(cursorX,this._y + this.buttonOffsetY * 1.5,this.SCALE(),cursorHeight);
		}
		this.textSelected = text;
	}
	,textInput: function(handle,label,align,editable) {
		if(editable == null) {
			editable = true;
		}
		if(align == null) {
			align = 0;
		}
		if(label == null) {
			label = "";
		}
		if(!this.isVisible(this.ELEMENT_H())) {
			this.endElement();
			return handle.text;
		}
		var hover = this.getHover();
		if(hover && zui_Zui.onTextHover != null) {
			zui_Zui.onTextHover();
		}
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		this.drawRect(this.g,this.t.FILL_ACCENT_BG,this._x + this.buttonOffsetY,this._y + this.buttonOffsetY,this._w - this.buttonOffsetY * 2,this.BUTTON_H());
		var startEdit = this.getReleased() || this.tabPressed;
		if(this.textSelectedHandle != handle && startEdit) {
			this.startTextEdit(handle);
		}
		if(this.textSelectedHandle == handle) {
			this.updateTextEdit(align,editable);
		}
		if(this.submitTextHandle == handle) {
			this.submitTextEdit();
		} else {
			handle.changed = false;
		}
		if(label != "") {
			this.g.set_color(this.t.LABEL_COL);
			var labelAlign = align == 2 ? 0 : 2;
			var xOffset = labelAlign == 0 ? 7 : 0;
			this.drawString(this.g,label,xOffset,0,labelAlign);
		}
		this.g.set_color(this.t.TEXT_COL);
		if(this.textSelectedHandle != handle) {
			this.drawString(this.g,handle.text,null,0,align);
		} else {
			this.drawString(this.g,this.textSelected,null,0,align);
		}
		this.endElement();
		return handle.text;
	}
	,deselectText: function() {
		if(this.textSelectedHandle == null) {
			return;
		}
		this.submitTextHandle = this.textSelectedHandle;
		this.textToSubmit = this.textSelected;
		this.textSelectedHandle = null;
		this.isTyping = false;
		if(this.currentWindow != null) {
			this.currentWindow.redraws = 2;
		}
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().hide();
		}
		this.highlightAnchor = this.cursorX;
	}
	,button: function(text,align,label) {
		if(label == null) {
			label = "";
		}
		if(align == null) {
			align = 1;
		}
		if(!this.isVisible(this.ELEMENT_H())) {
			this.endElement();
			return false;
		}
		var released = this.getReleased();
		var pushed = this.getPushed();
		var hover = this.getHover();
		if(released) {
			this.changed = true;
		}
		this.g.set_color(pushed ? this.t.BUTTON_PRESSED_COL : hover ? this.t.BUTTON_HOVER_COL : this.t.BUTTON_COL);
		this.drawRect(this.g,this.t.FILL_BUTTON_BG,this._x + this.buttonOffsetY,this._y + this.buttonOffsetY,this._w - this.buttonOffsetY * 2,this.BUTTON_H());
		this.g.set_color(this.t.BUTTON_TEXT_COL);
		this.drawString(this.g,text,this.TEXT_OFFSET(),0,align);
		if(label != "") {
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,label,this.TEXT_OFFSET(),0,align == 2 ? 0 : 2);
		}
		this.endElement();
		return released;
	}
	,check: function(handle,text) {
		if(!this.isVisible(this.ELEMENT_H())) {
			this.endElement();
			return handle.selected;
		}
		if(this.getReleased()) {
			handle.selected = !handle.selected;
			handle.changed = this.changed = true;
		} else {
			handle.changed = false;
		}
		var hover = this.getHover();
		this.drawCheck(handle.selected,hover);
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.titleOffsetX,0,0);
		this.endElement();
		return handle.selected;
	}
	,radio: function(handle,position,text) {
		if(!this.isVisible(this.ELEMENT_H())) {
			this.endElement();
			return handle.position == position;
		}
		if(position == 0) {
			handle.changed = false;
		}
		if(this.getReleased()) {
			handle.position = position;
			handle.changed = this.changed = true;
		}
		var hover = this.getHover();
		this.drawRadio(handle.position == position,hover);
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.titleOffsetX,0);
		this.endElement();
		return handle.position == position;
	}
	,combo: function(handle,texts,label,showLabel,align,itemCount) {
		if(itemCount == null) {
			itemCount = -1;
		}
		if(align == null) {
			align = 0;
		}
		if(showLabel == null) {
			showLabel = false;
		}
		if(label == null) {
			label = "";
		}
		if(!this.isVisible(this.ELEMENT_H())) {
			this.endElement();
			return handle.position;
		}
		if(this.getReleased()) {
			if(this.comboSelectedHandle == null) {
				this.inputEnabled = false;
				this.comboSelectedHandle = handle;
				this.comboSelectedWindow = this.currentWindow;
				this.comboSelectedAlign = align;
				this.comboSelectedTexts = texts;
				this.comboSelectedLabel = label;
				this.comboSelectedX = Std.int(this._x + this._windowX);
				this.comboSelectedY = Std.int(this._y + this._windowY + this.ELEMENT_H());
				this.comboSelectedW = Std.int(this._w);
				this.comboItemCount = itemCount < 0 ? texts.length : itemCount;
				this.comboItemOffset = -1;
			}
		}
		if(handle == this.submitComboHandle) {
			handle.position = this.comboToSubmit;
			this.submitComboHandle = null;
			handle.changed = this.changed = true;
		} else {
			handle.changed = false;
		}
		if(this.inputWheelDelta != 0 && this.comboSelectedHandle != null) {
			if(this.inputWheelDelta > 0) {
				this.comboItemOffset += 1;
			} else {
				this.comboItemOffset -= 1;
			}
			var maxOffset = this.comboSelectedTexts.length - this.comboItemCount;
			if(this.comboItemOffset > maxOffset) {
				this.comboItemOffset = maxOffset;
			}
			if(this.comboItemOffset < 0) {
				this.comboItemOffset = 0;
			}
		}
		var hover = this.getHover();
		if(hover) {
			this.g.set_color(this.t.ACCENT_HOVER_COL);
			this.drawRect(this.g,this.t.FILL_ACCENT_BG,this._x + this.buttonOffsetY,this._y + this.buttonOffsetY,this._w - this.buttonOffsetY * 2,this.BUTTON_H());
		} else {
			this.g.set_color(this.t.ACCENT_COL);
			this.drawRect(this.g,this.t.FILL_ACCENT_BG,this._x + this.buttonOffsetY,this._y + this.buttonOffsetY,this._w - this.buttonOffsetY * 2,this.BUTTON_H());
		}
		var x = this._x + this._w - this.arrowOffsetX - 8;
		var y = this._y + this.arrowOffsetY + 3;
		this.g.fillTriangle(x,y,x + this.ARROW_SIZE(),y,x + this.ARROW_SIZE() / 2,y + this.ARROW_SIZE() / 2);
		if(showLabel && label != "") {
			if(align == 0) {
				this._x -= 15;
			}
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,label,null,0,align == 0 ? 2 : 0);
			if(align == 0) {
				this._x += 15;
			}
		}
		if(align == 2) {
			this._x -= 15;
		}
		this.g.set_color(this.t.TEXT_COL);
		if(texts.length > 0) {
			this.drawString(this.g,texts[handle.position],null,0,align);
		}
		if(align == 2) {
			this._x += 15;
		}
		this.endElement();
		return handle.position;
	}
	,slider: function(handle,text,from,to,filled,precision,displayValue,align,textEdit) {
		if(textEdit == null) {
			textEdit = true;
		}
		if(align == null) {
			align = 2;
		}
		if(displayValue == null) {
			displayValue = true;
		}
		if(precision == null) {
			precision = 100.0;
		}
		if(filled == null) {
			filled = false;
		}
		if(to == null) {
			to = 1.0;
		}
		if(from == null) {
			from = 0.0;
		}
		if(!this.isVisible(this.ELEMENT_H())) {
			this.endElement();
			return handle.value;
		}
		if(this.getStarted()) {
			this.scrollHandle = handle;
			this.isScrolling = true;
		}
		handle.changed = false;
		if(handle == this.scrollHandle) {
			var range = to - from;
			var sliderX = this._x + this._windowX + this.buttonOffsetY;
			var sliderW = this._w - this.buttonOffsetY * 2;
			var step = range / sliderW;
			var value = from + (this.inputX - sliderX) * step;
			handle.value = Math.round(value * precision) / precision;
			if(handle.value < from) {
				handle.value = from;
			} else if(handle.value > to) {
				handle.value = to;
			}
			handle.changed = this.changed = true;
		}
		var hover = this.getHover();
		this.drawSlider(handle.value,from,to,filled,hover);
		var startEdit = (this.getReleased() || this.tabPressed) && textEdit;
		if(startEdit) {
			handle.text = handle.value + "";
			this.startTextEdit(handle);
			handle.changed = this.changed = true;
		}
		var lalign = align == 0 ? 2 : 0;
		if(this.textSelectedHandle == handle) {
			this.updateTextEdit(lalign);
		}
		if(this.submitTextHandle == handle) {
			this.submitTextEdit();
			handle.value = Std.parseFloat(handle.text);
			handle.changed = this.changed = true;
		}
		this.g.set_color(this.t.LABEL_COL);
		this.drawString(this.g,text,null,0,align);
		if(displayValue) {
			this.g.set_color(this.t.TEXT_COL);
			if(this.textSelectedHandle != handle) {
				this.drawString(this.g,handle.value + "",null,0,lalign);
			} else {
				this.drawString(this.g,this.textSelected,null,0,lalign);
			}
		}
		this.endElement();
		return handle.value;
	}
	,separator: function(h,fill) {
		if(fill == null) {
			fill = true;
		}
		if(h == null) {
			h = 4;
		}
		if(!this.isVisible(this.ELEMENT_H())) {
			this._y += h * this.SCALE();
			return;
		}
		if(fill) {
			this.g.set_color(this.t.SEPARATOR_COL);
			this.g.fillRect(this._x,this._y,this._w,h * this.SCALE());
		}
		this._y += h * this.SCALE();
	}
	,tooltip: function(text) {
		this.tooltipText = text;
		this.tooltipY = this._y + this._windowY;
	}
	,tooltipImage: function(image,maxWidth) {
		this.tooltipImg = image;
		this.tooltipImgMaxWidth = maxWidth;
		this.tooltipInvertY = this.imageInvertY;
		this.tooltipY = this._y + this._windowY;
	}
	,drawArrow: function(selected) {
		var x = this._x + this.arrowOffsetX;
		var y = this._y + this.arrowOffsetY;
		this.g.set_color(this.t.TEXT_COL);
		if(selected) {
			this.g.fillTriangle(x,y,x + this.ARROW_SIZE(),y,x + this.ARROW_SIZE() / 2,y + this.ARROW_SIZE());
		} else {
			this.g.fillTriangle(x,y,x,y + this.ARROW_SIZE(),x + this.ARROW_SIZE(),y + this.ARROW_SIZE() / 2);
		}
	}
	,drawTree: function(selected) {
		var SIGN_W = 7 * this.SCALE();
		var x = this._x + this.arrowOffsetX + 1;
		var y = this._y + this.arrowOffsetY + 1;
		this.g.set_color(this.t.TEXT_COL);
		if(selected) {
			this.g.fillRect(x,y + SIGN_W / 2 - 1,SIGN_W,SIGN_W / 8);
		} else {
			this.g.fillRect(x,y + SIGN_W / 2 - 1,SIGN_W,SIGN_W / 8);
			this.g.fillRect(x + SIGN_W / 2 - 1,y,SIGN_W / 8,SIGN_W);
		}
	}
	,drawCheck: function(selected,hover) {
		var x = this._x + this.checkOffsetX;
		var y = this._y + this.checkOffsetY;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		this.drawRect(this.g,this.t.FILL_ACCENT_BG,x,y,this.CHECK_SIZE(),this.CHECK_SIZE());
		if(selected) {
			this.g.set_color(-1);
			if(!this.enabled) {
				this.fadeColor();
			}
			var size = Std.int(this.CHECK_SELECT_SIZE());
			this.g.drawScaledImage(this.checkSelectImage,x + this.checkSelectOffsetX,y + this.checkSelectOffsetY,size,size);
		}
	}
	,drawRadio: function(selected,hover) {
		var x = this._x + this.radioOffsetX;
		var y = this._y + this.radioOffsetY;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		this.drawRect(this.g,this.t.FILL_ACCENT_BG,x,y,this.CHECK_SIZE(),this.CHECK_SIZE());
		if(selected) {
			this.g.set_color(this.t.ACCENT_SELECT_COL);
			if(!this.enabled) {
				this.fadeColor();
			}
			this.g.fillRect(x + this.radioSelectOffsetX,y + this.radioSelectOffsetY,this.CHECK_SELECT_SIZE(),this.CHECK_SELECT_SIZE());
		}
	}
	,drawSlider: function(value,from,to,filled,hover) {
		var x = this._x + this.buttonOffsetY;
		var y = this._y + this.buttonOffsetY;
		var w = this._w - this.buttonOffsetY * 2;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		this.drawRect(this.g,this.t.FILL_ACCENT_BG,x,y,w,this.BUTTON_H());
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var offset = (value - from) / (to - from);
		var barW = 8 * this.SCALE();
		var sliderX = filled ? x : x + (w - barW) * offset;
		var sliderW = filled ? w * offset : barW;
		sliderW = Math.max(Math.min(sliderW,w),0);
		this.drawRect(this.g,true,sliderX,y,sliderW,this.BUTTON_H());
	}
	,drawCombo: function() {
		if(this.comboSelectedHandle == null) {
			return;
		}
		var _g = this.g;
		this.globalG.set_color(this.t.SEPARATOR_COL);
		var elementSize = Std.int(this.ELEMENT_H() + this.ELEMENT_OFFSET());
		var maxItemCount = Std.int(Math.min(this.comboSelectedTexts.length,this.comboItemCount));
		var comboH = (maxItemCount + 1) * elementSize;
		this.globalG.begin(false);
		var distTop = this.comboSelectedY - comboH - Std.int(this.ELEMENT_H());
		var distBottom = kha_System.windowHeight() - (this.comboSelectedY + comboH);
		var outOfScreen = distBottom < 0 && distBottom < distTop;
		var comboY = outOfScreen ? this.comboSelectedY - comboH - Std.int(this.ELEMENT_H()) : this.comboSelectedY;
		this.globalG.fillRect(this.comboSelectedX,comboY,this.comboSelectedW,comboH);
		this.beginRegion(this.globalG,this.comboSelectedX,comboY,this.comboSelectedW);
		if(this.comboItemOffset == -1) {
			if(outOfScreen) {
				this.comboItemOffset = this.comboSelectedTexts.length - 1 - this.comboSelectedHandle.position;
			} else {
				this.comboItemOffset = this.comboSelectedHandle.position;
			}
			this.comboItemOffset = zui_Zui.clampi(this.comboItemOffset,0,this.comboSelectedTexts.length - maxItemCount);
		}
		if(outOfScreen) {
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,this.comboSelectedLabel,null,0,2);
			this._y += elementSize;
			this.fill(0,0,this._w / this.SCALE(),this.SCALE(),this.t.ACCENT_SELECT_COL);
		}
		this.inputEnabled = true;
		var BUTTON_COL = this.t.BUTTON_COL;
		var _g1 = this.comboItemOffset;
		var _g11 = this.comboItemOffset + maxItemCount;
		while(_g1 < _g11) {
			var i = _g1++;
			var j = outOfScreen ? this.comboSelectedTexts.length - 1 - i : i;
			this.t.BUTTON_COL = j == this.comboSelectedHandle.position ? this.t.ACCENT_SELECT_COL : this.t.SEPARATOR_COL;
			if(this.button(this.comboSelectedTexts[j],this.comboSelectedAlign)) {
				this.comboToSubmit = j;
				this.submitComboHandle = this.comboSelectedHandle;
				if(this.comboSelectedWindow != null) {
					this.comboSelectedWindow.redraws = 2;
				}
				break;
			}
		}
		this.t.BUTTON_COL = BUTTON_COL;
		if(!outOfScreen) {
			this.fill(0,0,this._w / this.SCALE(),this.SCALE(),this.t.ACCENT_SELECT_COL);
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,this.comboSelectedLabel,null,0,2);
		}
		if((this.inputReleased || this.isEscapeDown) && !zui_Zui.comboFirst) {
			this.comboSelectedHandle = null;
			zui_Zui.comboFirst = true;
		} else {
			zui_Zui.comboFirst = false;
		}
		this.inputEnabled = this.comboSelectedHandle == null;
		this.endRegion(false);
		this.globalG.end();
		this.g = _g;
	}
	,drawTooltip: function() {
		if(this.tooltipText != "" || this.tooltipImg != null) {
			if(this.inputChanged()) {
				this.tooltipShown = false;
				this.tooltipWait = this.inputDX == 0 && this.inputDY == 0;
			}
			if(!this.tooltipShown) {
				this.tooltipShown = true;
				this.tooltipX = this.inputX;
				this.tooltipTime = kha_Scheduler.time();
			}
			if(!this.tooltipWait && kha_Scheduler.time() - this.tooltipTime > this.TOOLTIP_DELAY()) {
				if(this.tooltipText != "") {
					this.drawTooltipText();
				} else {
					this.drawTooltipImage();
				}
			}
		} else {
			this.tooltipShown = false;
		}
	}
	,drawTooltipText: function() {
		this.globalG.set_color(this.t.TEXT_COL);
		var lines = this.tooltipText.split("\n");
		var tooltipW = 0.0;
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var lineTooltipW = this.ops.font.width(this.fontSize,line);
			if(lineTooltipW > tooltipW) {
				tooltipW = lineTooltipW;
			}
		}
		this.tooltipX = Math.min(this.tooltipX,kha_System.windowWidth() - tooltipW - 20);
		this.globalG.begin(false);
		this.globalG.fillRect(this.tooltipX,this.tooltipY,tooltipW + 20,this.ELEMENT_H() * lines.length * 0.6);
		this.globalG.set_font(this.ops.font);
		this.globalG.set_fontSize(this.fontSize);
		this.globalG.set_color(this.t.ACCENT_COL);
		var _g1 = 0;
		var _g2 = lines.length;
		while(_g1 < _g2) {
			var i = _g1++;
			this.globalG.drawString(lines[i],this.tooltipX + 5,this.tooltipY + i * this.fontSize);
		}
		this.globalG.end();
	}
	,drawTooltipImage: function() {
		var w = this.tooltipImg.get_width();
		if(this.tooltipImgMaxWidth != null && w > this.tooltipImgMaxWidth) {
			w = this.tooltipImgMaxWidth;
		}
		var h = this.tooltipImg.get_height() * (w / this.tooltipImg.get_width());
		this.tooltipX = Math.min(this.tooltipX,kha_System.windowWidth() - w - 20);
		this.tooltipY = Math.min(this.tooltipY,kha_System.windowHeight() - h - 20);
		this.globalG.set_color(-16777216);
		this.globalG.begin(false);
		this.globalG.fillRect(this.tooltipX,this.tooltipY,w,h);
		this.globalG.set_color(-1);
		if(this.tooltipInvertY) {
			this.globalG.drawScaledImage(this.tooltipImg,this.tooltipX,this.tooltipY + h,w,-h);
		} else {
			this.globalG.drawScaledImage(this.tooltipImg,this.tooltipX,this.tooltipY,w,h);
		}
		this.globalG.end();
	}
	,drawString: function(g,text,xOffset,yOffset,align) {
		if(align == null) {
			align = 0;
		}
		if(yOffset == null) {
			yOffset = 0;
		}
		var fullLength = text.length;
		while(text.length > 0 && this.ops.font.width(this.fontSize,text) > this._w) text = HxOverrides.substr(text,0,text.length - 1);
		if(text.length < fullLength) {
			text += "..";
		}
		if(xOffset == null) {
			xOffset = this.t.TEXT_OFFSET;
		}
		xOffset *= this.SCALE();
		g.set_font(this.ops.font);
		g.set_fontSize(this.fontSize);
		if(align == 1) {
			xOffset = this._w / 2 - this.ops.font.width(this.fontSize,text) / 2;
		} else if(align == 2) {
			xOffset = this._w - this.ops.font.width(this.fontSize,text) - this.TEXT_OFFSET();
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		g.set_pipeline(this.rtTextPipeline);
		g.drawString(text,this._x + xOffset,this._y + this.fontOffsetY + yOffset);
		g.set_pipeline(null);
	}
	,endElement: function(elementSize) {
		if(elementSize == null) {
			elementSize = this.ELEMENT_H() + this.ELEMENT_OFFSET();
		}
		if(this.currentWindow == null || this.currentWindow.layout == 0) {
			if(this.curRatio == -1 || this.ratios != null && this.curRatio == this.ratios.length - 1) {
				this._y += elementSize;
				if(this.ratios != null && this.curRatio == this.ratios.length - 1) {
					this.curRatio = -1;
					this.ratios = null;
					this._x = this.xBeforeSplit;
					this._w = this.wBeforeSplit;
					this.highlightFullRow = false;
				}
			} else {
				this.curRatio++;
				this._x += this._w;
				this._w = Std.int(this.getRatio(this.ratios[this.curRatio],this.wBeforeSplit));
			}
		} else {
			this._x += this._w + this.ELEMENT_OFFSET();
		}
	}
	,highlightNextRow: function() {
		this.highlightFullRow = true;
	}
	,getRatio: function(ratio,dyn) {
		if(ratio < 0) {
			return -ratio;
		} else {
			return ratio * dyn;
		}
	}
	,row: function(ratios) {
		this.ratios = ratios;
		this.curRatio = 0;
		this.xBeforeSplit = this._x;
		this.wBeforeSplit = this._w;
		this._w = Std.int(this.getRatio(ratios[this.curRatio],this._w));
	}
	,indent: function(bothSides) {
		if(bothSides == null) {
			bothSides = true;
		}
		this._x += this.TAB_W();
		this._w -= this.TAB_W();
		if(bothSides) {
			this._w -= this.TAB_W();
		}
	}
	,unindent: function(bothSides) {
		if(bothSides == null) {
			bothSides = true;
		}
		this._x -= this.TAB_W();
		this._w += this.TAB_W();
		if(bothSides) {
			this._w += this.TAB_W();
		}
	}
	,fadeColor: function() {
		this.g.set_color(kha__$Color_Color_$Impl_$.fromFloats(((this.g.get_color() & 16711680) >>> 16) * 0.00392156862745098,((this.g.get_color() & 65280) >>> 8) * 0.00392156862745098,(this.g.get_color() & 255) * 0.00392156862745098,0.25));
	}
	,fill: function(x,y,w,h,color) {
		this.g.set_color(color);
		if(!this.enabled) {
			this.fadeColor();
		}
		this.g.fillRect(this._x + x * this.SCALE(),this._y + y * this.SCALE() - 1,w * this.SCALE(),h * this.SCALE());
		this.g.set_color(-1);
	}
	,rect: function(x,y,w,h,color,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.g.set_color(color);
		if(!this.enabled) {
			this.fadeColor();
		}
		this.g.drawRect(this._x + x * this.SCALE(),this._y + y * this.SCALE(),w * this.SCALE(),h * this.SCALE(),strength);
		this.g.set_color(-1);
	}
	,drawRect: function(g,fill,x,y,w,h,strength) {
		if(strength == null) {
			strength = 0.0;
		}
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
	}
	,isVisible: function(elemH) {
		if(this.currentWindow == null) {
			return true;
		}
		if(this._y + elemH > this.windowHeaderH) {
			return this._y < this.currentWindow.texture.get_height();
		} else {
			return false;
		}
	}
	,getReleased: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isReleased = this.enabled && this.inputEnabled && this.inputReleased && this.getHover(elemH) && this.getInitialHover(elemH);
		return this.isReleased;
	}
	,getPushed: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isPushed = this.enabled && this.inputEnabled && this.inputDown && this.getHover(elemH) && this.getInitialHover(elemH);
		return this.isPushed;
	}
	,getStarted: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isStarted = this.enabled && this.inputEnabled && this.inputStarted && this.getHover(elemH);
		return this.isStarted;
	}
	,getInitialHover: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		if(elemH == -1.0) {
			elemH = this.ELEMENT_H();
		}
		if(this.enabled && this.inputEnabled && this.inputStartedX >= this._windowX + this._x && this.inputStartedX < this._windowX + this._x + this._w && this.inputStartedY >= this._windowY + this._y) {
			return this.inputStartedY < this._windowY + this._y + elemH;
		} else {
			return false;
		}
	}
	,getHover: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		if(elemH == -1.0) {
			elemH = this.ELEMENT_H();
		}
		this.isHovered = this.enabled && this.inputEnabled && this.inputX >= this._windowX + (this.highlightFullRow ? 0 : this._x) && this.inputX < this._windowX + this._x + (this.highlightFullRow ? this._windowW : this._w) && this.inputY >= this._windowY + this._y && this.inputY < this._windowY + this._y + elemH;
		return this.isHovered;
	}
	,getInputInRect: function(x,y,w,h,scale) {
		if(scale == null) {
			scale = 1.0;
		}
		if(this.enabled && this.inputEnabled && this.inputX >= x * scale && this.inputX < (x + w) * scale && this.inputY >= y * scale) {
			return this.inputY < (y + h) * scale;
		} else {
			return false;
		}
	}
	,onMouseDown: function(button,x,y) {
		if(button == 0) {
			this.inputStarted = true;
		} else {
			this.inputStartedR = true;
		}
		if(button == 0) {
			this.inputDown = true;
		} else {
			this.inputDownR = true;
		}
		this.inputStartedTime = kha_Scheduler.time();
		this.setInputPosition(x,y);
		this.inputStartedX = x;
		this.inputStartedY = y;
	}
	,onMouseUp: function(button,x,y) {
		if(this.isScrolling) {
			this.isScrolling = false;
			this.scrollHandle = null;
			if(x == this.inputStartedX && y == this.inputStartedY) {
				if(button == 0) {
					this.inputReleased = true;
				} else {
					this.inputReleasedR = true;
				}
			}
		} else if(button == 0) {
			this.inputReleased = true;
		} else {
			this.inputReleasedR = true;
		}
		if(button == 0) {
			this.inputDown = false;
		} else {
			this.inputDownR = false;
		}
		this.setInputPosition(x,y);
		this.deselectText();
		if(this.touchHold) {
			this.touchHold = false;
			this.inputReleased = false;
			this.inputReleasedR = true;
		}
	}
	,onMouseMove: function(x,y,movementX,movementY) {
		this.setInputPosition(x,y);
	}
	,onMouseWheel: function(delta) {
		this.inputWheelDelta = delta;
	}
	,setInputPosition: function(x,y) {
		this.inputDX += x - this.inputX;
		this.inputDY += y - this.inputY;
		this.inputX = x;
		this.inputY = y;
	}
	,onKeyDown: function(code) {
		this.key = code;
		this.isKeyPressed = true;
		this.isKeyDown = true;
		zui_Zui.keyRepeatTime = kha_Scheduler.time() + 0.4;
		switch(code) {
		case 8:
			this.isBackspaceDown = true;
			break;
		case 13:
			this.isReturnDown = true;
			break;
		case 16:
			this.isShiftDown = true;
			break;
		case 17:
			this.isCtrlDown = true;
			break;
		case 18:
			this.isAltDown = true;
			break;
		case 27:
			this.isEscapeDown = true;
			break;
		case 32:
			this.char = " ";
			break;
		case 46:
			this.isDeleteDown = true;
			break;
		case 65:
			this.isADown = true;
			break;
		default:
		}
	}
	,onKeyUp: function(code) {
		this.isKeyDown = false;
		switch(code) {
		case 8:
			this.isBackspaceDown = false;
			break;
		case 13:
			this.isReturnDown = false;
			break;
		case 16:
			this.isShiftDown = false;
			break;
		case 17:
			this.isCtrlDown = false;
			break;
		case 18:
			this.isAltDown = false;
			break;
		case 27:
			this.isEscapeDown = false;
			break;
		case 46:
			this.isDeleteDown = false;
			break;
		case 65:
			this.isADown = false;
			break;
		default:
		}
	}
	,onKeyPress: function(char) {
		this.char = char;
		this.isKeyPressed = true;
	}
	,onCut: function() {
		zui_Zui.isCut = true;
		return this.onCopy();
	}
	,onCopy: function() {
		zui_Zui.isCopy = true;
		return zui_Zui.textToCopy;
	}
	,onPaste: function(s) {
		zui_Zui.isPaste = true;
		zui_Zui.textToPaste = s;
	}
	,ELEMENT_W: function() {
		return this.t.ELEMENT_W * this.SCALE();
	}
	,ELEMENT_H: function() {
		return this.t.ELEMENT_H * this.SCALE();
	}
	,ELEMENT_OFFSET: function() {
		return this.t.ELEMENT_OFFSET * this.SCALE();
	}
	,ARROW_SIZE: function() {
		return this.t.ARROW_SIZE * this.SCALE();
	}
	,BUTTON_H: function() {
		return this.t.BUTTON_H * this.SCALE();
	}
	,CHECK_SIZE: function() {
		return this.t.CHECK_SIZE * this.SCALE();
	}
	,CHECK_SELECT_SIZE: function() {
		return this.t.CHECK_SELECT_SIZE * this.SCALE();
	}
	,FONT_SIZE: function() {
		return Std.int(this.t.FONT_SIZE * this.SCALE());
	}
	,SCROLL_W: function() {
		return Std.int(this.t.SCROLL_W * this.SCALE());
	}
	,TEXT_OFFSET: function() {
		return this.t.TEXT_OFFSET * this.SCALE();
	}
	,TAB_W: function() {
		return Std.int(this.t.TAB_W * this.SCALE());
	}
	,HEADER_DRAG_H: function() {
		return Std.int(15 * this.SCALE());
	}
	,SCALE: function() {
		return this.ops.scaleFactor;
	}
	,FLASH_SPEED: function() {
		return 0.5;
	}
	,TOOLTIP_DELAY: function() {
		return 1.0;
	}
	,resize: function(handle,w,h,khaWindowId) {
		if(khaWindowId == null) {
			khaWindowId = 0;
		}
		handle.redraws = 2;
		if(handle.texture != null) {
			handle.texture.unload();
		}
		if(w < 1) {
			w = 1;
		}
		if(h < 1) {
			h = 1;
		}
		handle.texture = kha_Image.createRenderTarget(w,h,0,0,1,khaWindowId);
		handle.texture.get_g2().set_imageScaleQuality(1);
	}
	,__class__: zui_Zui
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
Main.projectName = "third_person";
Main.projectPackage = "arm";
Main.voxelgiVoxelSize = 0.25;
Main.voxelgiHalfExtents = 16;
arm_GunController.__meta__ = { fields : { fireFreq : { prop : null}}};
armory_trait_internal_CameraController.keyUp = "w";
armory_trait_internal_CameraController.keyDown = "s";
armory_trait_internal_CameraController.keyLeft = "a";
armory_trait_internal_CameraController.keyRight = "d";
armory_trait_internal_CameraController.keyStrafeUp = "e";
armory_trait_internal_CameraController.keyStrafeDown = "q";
arm_ThirdPersonController.rotationSpeed = 1.0;
armory_data_Config.configLoaded = false;
armory_renderpath_Inc.superSample = 1.0;
armory_renderpath_Inc.pointIndex = 0;
armory_renderpath_Inc.spotIndex = 0;
armory_renderpath_Inc.lastFrame = -1;
armory_renderpath_RenderPathCreator.setTargetMeshes = armory_renderpath_RenderPathDeferred.setTargetMeshes;
armory_renderpath_RenderPathCreator.drawMeshes = armory_renderpath_RenderPathDeferred.drawMeshes;
armory_renderpath_RenderPathCreator.applyConfig = armory_renderpath_RenderPathDeferred.applyConfig;
armory_system_Event.events = new haxe_ds_StringMap();
armory_trait_physics_bullet_PhysicsWorld.sceneRemoved = false;
armory_trait_physics_bullet_PhysicsWorld.nullvec = true;
kha_math_FastMatrix4.width = 4;
kha_math_FastMatrix4.height = 4;
iron_math_Mat4.helpVec = new iron_math_Vec4();
iron_math_Mat4.helpMat = iron_math_Mat4.identity();
iron_math_Quat.helpVec0 = new iron_math_Vec4();
iron_math_Quat.helpVec1 = new iron_math_Vec4();
iron_math_Quat.helpVec2 = new iron_math_Vec4();
iron_math_Quat.helpMat = iron_math_Mat4.identity();
iron_math_Quat.xAxis = iron_math_Vec4.xAxis();
iron_math_Quat.yAxis = iron_math_Vec4.yAxis();
armory_trait_physics_bullet_RigidBody.nextId = 0;
armory_trait_physics_bullet_RigidBody.ammoArray = -1;
armory_trait_physics_bullet_RigidBody.nullvec = true;
armory_trait_physics_bullet_RigidBody.quat = new iron_math_Quat();
armory_trait_physics_bullet_RigidBody.CF_STATIC_OBJECT = 1;
armory_trait_physics_bullet_RigidBody.CF_KINEMATIC_OBJECT = 2;
armory_trait_physics_bullet_RigidBody.CF_NO_CONTACT_RESPONSE = 4;
armory_trait_physics_bullet_RigidBody.CF_CHARACTER_OBJECT = 16;
armory_trait_physics_bullet_RigidBody.convexHullCache = new haxe_ds_ObjectMap();
armory_trait_physics_bullet_RigidBody.triangleMeshCache = new haxe_ds_ObjectMap();
armory_trait_physics_bullet_RigidBody.usersCache = new haxe_ds_ObjectMap();
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
iron_App.traitInits = [];
iron_App.traitUpdates = [];
iron_App.traitLateUpdates = [];
iron_App.traitRenders = [];
iron_App.traitRenders2D = [];
iron_App.pauseUpdates = false;
iron_App.lastw = -1;
iron_App.lasth = -1;
iron_Scene.uidCounter = 0;
iron_Scene.framePassed = true;
iron_data_ConstData.skydomeIndices = [0,1,2,0,3,4,3,5,6,5,7,8,7,9,10,9,11,12,13,14,15,11,16,17,13,18,2,14,2,19,2,1,20,1,4,21,4,6,22,6,8,23,8,10,24,10,12,25,14,26,15,17,27,25,22,23,28,24,29,28,24,25,30,26,31,15,25,27,32,26,19,33,19,20,34,20,21,35,21,22,36,33,34,37,34,35,38,35,36,39,36,28,40,28,29,41,30,42,41,31,43,15,30,32,44,31,33,45,40,41,46,42,47,46,43,48,15,42,44,49,43,45,50,45,37,51,37,38,52,39,53,52,39,40,54,50,51,55,51,52,56,53,57,56,53,54,58,46,59,58,46,47,60,48,61,15,47,49,62,48,50,63,59,64,65,59,60,66,61,67,15,60,62,68,61,63,69,63,55,70,56,71,70,56,57,72,57,58,65,70,71,73,71,72,74,72,65,75,64,76,75,64,66,77,67,78,15,68,79,77,67,69,80,69,70,81,76,77,82,78,83,15,77,79,84,80,85,83,80,81,86,81,73,87,74,88,87,74,75,89,76,90,89,87,88,91,88,89,92,90,93,92,90,82,94,83,95,15,82,84,96,83,85,97,86,98,97,86,87,99,95,100,15,96,101,102,95,97,103,97,98,104,98,99,105,91,106,105,91,92,107,93,108,107,93,94,102,105,106,109,106,107,110,108,111,110,108,102,112,100,113,15,102,101,114,100,103,115,103,104,116,104,105,117,114,118,119,113,115,120,115,116,121,117,122,121,109,123,122,109,110,124,111,125,124,111,112,119,113,126,15,123,124,127,125,128,127,125,119,129,126,130,15,119,118,131,126,120,132,121,133,132,121,122,134,122,123,135,130,132,136,132,133,137,133,134,138,134,135,139,135,127,140,128,141,140,128,129,142,130,143,15,129,131,144,139,140,145,141,146,145,141,142,147,143,148,15,142,144,149,143,136,150,137,151,150,138,152,151,138,139,153,150,151,154,152,155,154,153,156,155,153,145,157,146,158,157,146,147,159,148,160,15,147,149,161,148,150,162,158,163,164,158,159,165,160,166,15,161,167,165,160,162,168,162,154,169,155,170,169,156,171,170,156,157,164,169,170,172,171,173,172,171,164,174,163,175,174,163,165,176,166,177,15,165,167,178,166,168,179,168,169,180,176,181,182,177,183,15,176,178,184,177,179,185,179,180,186,172,187,186,173,188,187,173,174,189,175,182,189,187,190,191,188,192,190,188,189,193,182,194,193,182,181,195,183,196,15,181,184,197,183,185,198,185,186,191,194,195,199,196,200,15,195,197,201,196,198,202,198,191,203,190,204,203,192,205,204,192,193,206,194,207,206,205,208,209,205,206,210,207,211,210,207,199,212,200,213,15,199,201,214,202,215,213,202,203,216,204,209,216,213,217,15,214,218,219,215,220,217,215,216,221,209,222,221,209,208,223,208,210,224,211,225,224,211,212,219,223,226,227,223,224,228,225,229,228,225,219,230,217,231,15,218,232,230,220,233,231,220,221,234,222,227,234,230,232,235,231,233,236,233,234,237,227,238,237,227,226,239,226,228,240,229,241,240,229,230,242,231,243,15,239,240,244,241,245,244,241,242,246,243,247,15,235,248,246,243,236,249,237,250,249,238,251,250,239,252,251,249,250,253,250,251,254,252,255,254,252,244,256,245,257,256,245,246,258,247,259,15,248,260,258,247,249,261,257,262,263,258,264,262,259,265,15,258,260,266,259,261,267,261,253,268,253,254,269,255,270,269,255,256,263,268,271,272,269,273,271,270,274,273,270,263,275,262,276,275,262,264,277,265,278,15,264,266,279,267,272,278,276,280,281,276,277,282,278,283,15,277,279,284,278,272,285,272,271,286,271,273,287,274,288,287,274,275,281,287,3,0,288,5,3,281,7,5,280,9,7,282,11,9,283,13,15,282,284,16,285,18,13,286,0,18,0,2,18,0,4,1,3,6,4,5,8,6,7,10,8,9,12,10,11,17,12,13,2,14,14,19,26,2,20,19,1,21,20,4,22,21,6,23,22,8,24,23,10,25,24,17,25,12,22,28,36,24,28,23,24,30,29,25,32,30,26,33,31,19,34,33,20,35,34,21,36,35,33,37,45,34,38,37,35,39,38,36,40,39,28,41,40,30,41,29,30,44,42,31,45,43,40,46,54,42,46,41,42,49,47,43,50,48,45,51,50,37,52,51,39,52,38,39,54,53,50,55,63,51,56,55,53,56,52,53,58,57,46,58,54,46,60,59,47,62,60,48,63,61,59,65,58,59,66,64,60,68,66,61,69,67,63,70,69,56,70,55,56,72,71,57,65,72,70,73,81,71,74,73,72,75,74,64,75,65,64,77,76,68,77,66,67,80,78,69,81,80,76,82,90,77,84,82,80,83,78,80,86,85,81,87,86,74,87,73,74,89,88,76,89,75,87,91,99,88,92,91,90,92,89,90,94,93,82,96,94,83,97,95,86,97,85,86,99,98,96,102,94,95,103,100,97,104,103,98,105,104,91,105,99,91,107,106,93,107,92,93,102,108,105,109,117,106,110,109,108,110,107,108,112,111,102,114,112,100,115,113,103,116,115,104,117,116,114,119,112,113,120,126,115,121,120,117,121,116,109,122,117,109,124,123,111,124,110,111,119,125,123,127,135,125,127,124,125,129,128,119,131,129,126,132,130,121,132,120,121,134,133,122,135,134,130,136,143,132,137,136,133,138,137,134,139,138,135,140,139,128,140,127,128,142,141,129,144,142,139,145,153,141,145,140,141,147,146,142,149,147,143,150,148,137,150,136,138,151,137,138,153,152,150,154,162,152,154,151,153,155,152,153,157,156,146,157,145,146,159,158,147,161,159,148,162,160,158,164,157,158,165,163,161,165,159,160,168,166,162,169,168,155,169,154,156,170,155,156,164,171,169,172,180,171,172,170,171,174,173,163,174,164,163,176,175,165,178,176,166,179,177,168,180,179,176,182,175,176,184,181,177,185,183,179,186,185,172,186,180,173,187,172,173,189,188,175,189,174,187,191,186,188,190,187,188,193,192,182,193,189,182,195,194,181,197,195,183,198,196,185,191,198,194,199,207,195,201,199,196,202,200,198,203,202,190,203,191,192,204,190,192,206,205,194,206,193,205,209,204,205,210,208,207,210,206,207,212,211,199,214,212,202,213,200,202,216,215,204,216,203,214,219,212,215,217,213,215,221,220,209,221,216,209,223,222,208,224,223,211,224,210,211,219,225,223,227,222,223,228,226,225,228,224,225,230,229,218,230,219,220,231,217,220,234,233,222,234,221,230,235,242,231,236,243,233,237,236,227,237,234,227,239,238,226,240,239,229,240,228,229,242,241,239,244,252,241,244,240,241,246,245,235,246,242,243,249,247,237,249,236,238,250,237,239,251,238,249,253,261,250,254,253,252,254,251,252,256,255,245,256,244,245,258,257,248,258,246,247,261,259,257,263,256,258,262,257,258,266,264,259,267,265,261,268,267,253,269,268,255,269,254,255,263,270,268,272,267,269,271,268,270,273,269,270,275,274,262,275,263,262,277,276,264,279,277,267,278,265,276,281,275,276,282,280,277,284,282,278,285,283,272,286,285,271,287,286,274,287,273,274,281,288,287,0,286,288,3,287,281,5,288,280,7,281,282,9,280,282,16,11,285,13,283,286,18,285,84,289,96,96,289,101,101,289,114,114,289,118,118,289,131,144,131,289,149,144,289,149,289,161,161,289,167,167,289,178,178,289,184,184,289,197,197,289,201,201,289,214,214,289,218,218,289,232,232,289,235,235,289,248,260,248,289,260,289,266,266,289,279,279,289,284,284,289,16,16,289,17,27,17,289,27,289,32,44,32,289,44,289,49,49,289,62,62,289,68,68,289,79,79,289,84];
iron_data_ConstData.skydomePos = [-0.55557,0.0,0.83147,-0.544895,0.108386,0.83147,-0.37533,0.074658,0.92388,-0.707107,0.0,0.707107,-0.69352,0.13795,0.707107,-0.83147,0.0,0.55557,-0.815493,0.162212,0.55557,-0.92388,0.0,0.382683,-0.906127,0.18024,0.382683,-0.980785,0.0,0.19509,-0.96194,0.191342,0.19509,-1.0,0.0,0.0,-0.980785,0.19509,0.0,-0.19509,0.0,0.980785,-0.191342,0.03806,0.980785,0.0,0.0,1.,-0.980785,0.0,-0.28234,-0.96194,0.191342,-0.28234,-0.382683,0.0,0.92388,-0.353553,0.146447,0.92388,-0.51328,0.212608,0.83147,-0.653281,0.270598,0.707107,-0.768178,0.31819,0.55557,-0.853553,0.353553,0.382683,-0.906127,0.37533,0.19509,-0.923879,0.382684,0.0,-0.18024,0.074658,0.980785,-0.906127,0.37533,-0.28234,-0.768178,0.51328,0.382683,-0.815493,0.544895,0.19509,-0.831469,0.55557,0.0,-0.162212,0.108387,0.980785,-0.815493,0.544895,-0.28234,-0.31819,0.212608,0.92388,-0.46194,0.308658,0.83147,-0.587938,0.392848,0.707107,-0.691342,0.46194,0.55557,-0.392847,0.392848,0.83147,-0.5,0.5,0.707107,-0.587938,0.587938,0.55557,-0.653281,0.653282,0.382683,-0.69352,0.69352,0.19509,-0.707107,0.707107,0.0,-0.13795,0.13795,0.980785,-0.69352,0.69352,-0.28234,-0.270598,0.270598,0.92388,-0.544895,0.815493,0.19509,-0.55557,0.83147,0.0,-0.108386,0.162212,0.980785,-0.544895,0.815493,-0.28234,-0.212607,0.31819,0.92388,-0.308658,0.46194,0.83147,-0.392847,0.587938,0.707107,-0.46194,0.691342,0.55557,-0.51328,0.768178,0.382683,-0.212607,0.51328,0.83147,-0.270598,0.653282,0.707107,-0.318189,0.768178,0.55557,-0.353553,0.853554,0.382683,-0.37533,0.906128,0.19509,-0.382683,0.92388,0.0,-0.074658,0.18024,0.980785,-0.37533,0.906128,-0.28234,-0.146446,0.353554,0.92388,-0.191341,0.96194,0.19509,-0.18024,0.906128,0.382683,-0.19509,0.980785,0.0,-0.03806,0.191342,0.980785,-0.191341,0.96194,-0.28234,-0.074658,0.375331,0.92388,-0.108386,0.544895,0.83147,-0.137949,0.69352,0.707107,-0.162211,0.815493,0.55557,0.0,0.707107,0.707107,0.0,0.83147,0.55557,0.0,0.92388,0.382683,0.0,0.980785,0.19509,0.0,1.,0.0,0.0,0.195091,0.980785,0.0,0.980785,-0.28234,0.0,0.382684,0.92388,0.0,0.55557,0.83147,0.195091,0.980785,0.0,0.038061,0.191342,0.980785,0.191342,0.96194,-0.28234,0.074658,0.375331,0.92388,0.108387,0.544895,0.83147,0.13795,0.69352,0.707107,0.162212,0.815493,0.55557,0.18024,0.906128,0.382683,0.191342,0.96194,0.19509,0.31819,0.768178,0.55557,0.353554,0.853554,0.382683,0.375331,0.906127,0.19509,0.382684,0.92388,0.0,0.074658,0.18024,0.980785,0.375331,0.906127,-0.28234,0.146447,0.353554,0.92388,0.212608,0.51328,0.83147,0.270598,0.653282,0.707107,0.108387,0.162212,0.980785,0.544895,0.815493,-0.28234,0.555571,0.83147,0.0,0.212608,0.31819,0.92388,0.308659,0.46194,0.83147,0.392848,0.587938,0.707107,0.46194,0.691342,0.55557,0.51328,0.768178,0.382683,0.544895,0.815493,0.19509,0.587938,0.587938,0.55557,0.653282,0.653282,0.382683,0.69352,0.69352,0.19509,0.707107,0.707107,0.0,0.13795,0.13795,0.980785,0.69352,0.69352,-0.28234,0.270599,0.270598,0.92388,0.392848,0.392848,0.83147,0.5,0.5,0.707107,0.815493,0.544895,-0.28234,0.83147,0.55557,0.0,0.31819,0.212608,0.92388,0.46194,0.308658,0.83147,0.587938,0.392848,0.707107,0.691342,0.46194,0.55557,0.768178,0.51328,0.382683,0.815493,0.544895,0.19509,0.162212,0.108386,0.980785,0.853554,0.353553,0.382683,0.906128,0.37533,0.19509,0.92388,0.382683,0.0,0.18024,0.074658,0.980785,0.906128,0.37533,-0.28234,0.353554,0.146447,0.92388,0.51328,0.212608,0.83147,0.653282,0.270598,0.707107,0.768178,0.31819,0.55557,0.375331,0.074658,0.92388,0.544896,0.108386,0.83147,0.69352,0.13795,0.707107,0.815493,0.162212,0.55557,0.906128,0.18024,0.382683,0.96194,0.191342,0.19509,0.980786,0.19509,0.0,0.191342,0.03806,0.980785,0.96194,0.191342,-0.28234,0.92388,0.0,0.382683,0.980785,0.0,0.19509,1.,0.0,0.0,0.195091,0.0,0.980785,0.980785,0.0,-0.28234,0.382684,0.0,0.92388,0.555571,0.0,0.83147,0.707107,0.0,0.707107,0.83147,0.0,0.55557,0.544896,-0.108386,0.83147,0.69352,-0.13795,0.707107,0.815493,-0.162212,0.55557,0.906128,-0.18024,0.382683,0.96194,-0.191342,0.19509,0.980786,-0.19509,0.0,0.191342,-0.03806,0.980785,0.96194,-0.191342,-0.28234,0.375331,-0.074658,0.92388,0.906127,-0.37533,0.19509,0.853554,-0.353553,0.382683,0.92388,-0.382684,0.0,0.18024,-0.074658,0.980785,0.906127,-0.37533,-0.28234,0.353554,-0.146447,0.92388,0.51328,-0.212608,0.83147,0.653282,-0.270598,0.707107,0.768178,-0.31819,0.55557,0.587938,-0.392847,0.707107,0.691342,-0.46194,0.55557,0.768178,-0.51328,0.382683,0.815493,-0.544895,0.19509,0.83147,-0.55557,0.0,0.162212,-0.108386,0.980785,0.815493,-0.544895,-0.28234,0.31819,-0.212608,0.92388,0.46194,-0.308658,0.83147,0.707107,-0.707107,0.0,0.69352,-0.69352,0.19509,0.13795,-0.13795,0.980785,0.69352,-0.69352,-0.28234,0.270598,-0.270598,0.92388,0.392848,-0.392848,0.83147,0.5,-0.5,0.707107,0.587938,-0.587938,0.55557,0.653282,-0.653281,0.382683,0.392848,-0.587938,0.707107,0.308659,-0.46194,0.83147,0.46194,-0.691342,0.55557,0.51328,-0.768178,0.382683,0.544895,-0.815493,0.19509,0.55557,-0.83147,0.0,0.108387,-0.162212,0.980785,0.544895,-0.815493,-0.28234,0.212608,-0.31819,0.92388,0.382684,-0.92388,0.0,0.074658,-0.18024,0.980785,0.37533,-0.906127,-0.28234,0.146447,-0.353553,0.92388,0.212608,-0.51328,0.83147,0.270598,-0.653281,0.707107,0.31819,-0.768177,0.55557,0.353554,-0.853553,0.382683,0.37533,-0.906127,0.19509,0.162212,-0.815493,0.55557,0.13795,-0.69352,0.707107,0.18024,-0.906127,0.382683,0.191342,-0.961939,0.19509,0.19509,-0.980785,0.0,0.038061,-0.191342,0.980785,0.191342,-0.961939,-0.28234,0.074658,-0.37533,0.92388,0.108387,-0.544895,0.83147,0.0,-0.19509,0.980785,0.0,-0.980785,-0.28234,0.0,-1.0,0.0,0.0,-0.382683,0.92388,0.0,-0.55557,0.83147,0.0,-0.707107,0.707107,0.0,-0.831469,0.55557,0.0,-0.923879,0.382683,0.0,-0.980785,0.19509,-0.162211,-0.815493,0.55557,-0.137949,-0.69352,0.707107,-0.18024,-0.906127,0.382683,-0.191342,-0.961939,0.19509,-0.19509,-0.980785,0.0,-0.03806,-0.191342,0.980785,-0.191342,-0.961939,-0.28234,-0.074658,-0.37533,0.92388,-0.108386,-0.544895,0.83147,-0.37533,-0.906127,-0.28234,-0.146446,-0.353553,0.92388,-0.212607,-0.51328,0.83147,-0.270598,-0.653281,0.707107,-0.318189,-0.768177,0.55557,-0.353553,-0.853553,0.382683,-0.37533,-0.906127,0.19509,-0.382683,-0.923879,0.0,-0.074658,-0.18024,0.980785,-0.51328,-0.768178,0.382683,-0.544895,-0.815493,0.19509,-0.55557,-0.831469,0.0,-0.108386,-0.162212,0.980785,-0.544895,-0.815493,-0.28234,-0.212607,-0.31819,0.92388,-0.308658,-0.46194,0.83147,-0.392847,-0.587938,0.707107,-0.461939,-0.691341,0.55557,-0.392847,-0.392847,0.83147,-0.5,-0.5,0.707107,-0.587937,-0.587937,0.55557,-0.653281,-0.653281,0.382683,-0.693519,-0.693519,0.19509,-0.707106,-0.707106,0.0,-0.137949,-0.13795,0.980785,-0.693519,-0.693519,-0.28234,-0.270598,-0.270598,0.92388,-0.815492,-0.544895,0.19509,-0.768177,-0.51328,0.382683,-0.831469,-0.55557,0.0,-0.162211,-0.108386,0.980785,-0.815492,-0.544895,-0.28234,-0.318189,-0.212607,0.92388,-0.461939,-0.308658,0.83147,-0.587937,-0.392847,0.707107,-0.691341,-0.461939,0.55557,-0.51328,-0.212607,0.83147,-0.353553,-0.146447,0.92388,-0.653281,-0.270598,0.707107,-0.768177,-0.318189,0.55557,-0.853553,-0.353553,0.382683,-0.906127,-0.37533,0.19509,-0.923879,-0.382683,0.0,-0.18024,-0.074658,0.980785,-0.906127,-0.37533,-0.28234,-0.961939,-0.191341,0.19509,-0.906127,-0.18024,0.382683,-0.980785,-0.19509,0.0,-0.191342,-0.03806,0.980785,-0.961939,-0.191341,-0.28234,-0.37533,-0.074658,0.92388,-0.544895,-0.108386,0.83147,-0.69352,-0.13795,0.707107,-0.815492,-0.162211,0.55557,0.0,0.0,-0.860043];
iron_data_ConstData.skydomeNor = [0.559771,0.0,-0.828639,0.548997,-0.109195,-0.828639,0.380413,-0.075655,-0.92169,0.710135,0.0,-0.704031,0.696493,-0.138524,-0.704031,0.833338,0.0,-0.552751,0.817316,-0.162572,-0.552751,0.924741,0.0,-0.380535,0.90698,-0.180395,-0.380535,0.980987,0.0,-0.193915,0.962157,-0.191382,-0.193915,0.999878,0.0,-0.015015,0.980651,-0.195044,-0.015015,0.200964,0.0,-0.979583,0.197089,-0.039186,-0.979583,0.0,0.0,-1.0,0.858486,0.0,0.512803,0.841975,-0.167455,0.512803,0.38786,0.0,-0.92169,0.358348,-0.148412,-0.92169,0.517136,-0.214209,-0.828639,0.656056,-0.271737,-0.704031,0.76989,-0.318888,-0.552751,0.854366,-0.353862,-0.380535,0.906339,-0.375408,-0.193915,0.923765,-0.382611,-0.015015,0.185644,-0.076907,-0.979583,0.793146,-0.328532,0.512803,0.768914,-0.513749,-0.380535,0.815668,-0.545,-0.193915,0.831355,-0.555498,-0.015015,0.167089,-0.111637,-0.979583,0.713797,-0.476943,0.512803,0.322489,-0.215491,-0.92169,0.465407,-0.310984,-0.828639,0.590442,-0.394513,-0.704031,0.692892,-0.462966,-0.552751,0.395795,-0.395795,-0.828639,0.502121,-0.502121,-0.704031,0.589251,-0.589251,-0.552751,0.65389,-0.65389,-0.380535,0.693655,-0.693655,-0.193915,0.707022,-0.707022,-0.015015,0.142094,-0.142094,-0.979583,0.607044,-0.607044,0.512803,0.27427,-0.27427,-0.92169,0.545,-0.815668,-0.193915,0.555498,-0.831355,-0.015015,0.111637,-0.167089,-0.979583,0.476943,-0.713797,0.512803,0.215491,-0.322489,-0.92169,0.310984,-0.465407,-0.828639,0.394513,-0.590442,-0.704031,0.462966,-0.692892,-0.552751,0.513749,-0.768914,-0.380535,0.214209,-0.517136,-0.828639,0.271737,-0.656056,-0.704031,0.318888,-0.76989,-0.552751,0.353862,-0.854366,-0.380535,0.375408,-0.906339,-0.193915,0.382611,-0.923765,-0.015015,0.076907,-0.185644,-0.979583,0.328532,-0.793146,0.512803,0.148412,-0.358348,-0.92169,0.191382,-0.962157,-0.193915,0.180395,-0.90698,-0.380535,0.195044,-0.980651,-0.015015,0.039186,-0.197089,-0.979583,0.167455,-0.841975,0.512803,0.075655,-0.380413,-0.92169,0.109195,-0.548997,-0.828639,0.138524,-0.696493,-0.704031,0.162572,-0.817316,-0.552751,0.0,-0.710135,-0.704031,0.0,-0.833338,-0.552751,0.0,-0.924741,-0.380535,0.0,-0.980987,-0.193915,0.0,-0.999878,-0.015015,0.0,-0.200964,-0.979583,0.0,-0.858486,0.512803,0.0,-0.38786,-0.92169,0.0,-0.559771,-0.828639,-0.195044,-0.980651,-0.015015,-0.039186,-0.197089,-0.979583,-0.167455,-0.841975,0.512803,-0.075655,-0.380413,-0.92169,-0.109195,-0.548997,-0.828639,-0.138524,-0.696493,-0.704031,-0.162572,-0.817316,-0.552751,-0.180395,-0.90698,-0.380535,-0.191382,-0.962157,-0.193915,-0.318888,-0.76989,-0.552751,-0.353862,-0.854366,-0.380535,-0.375408,-0.906339,-0.193915,-0.382611,-0.923765,-0.015015,-0.076907,-0.185644,-0.979583,-0.328532,-0.793146,0.512803,-0.148412,-0.358348,-0.92169,-0.214209,-0.517136,-0.828639,-0.271737,-0.656056,-0.704031,-0.111637,-0.167089,-0.979583,-0.476943,-0.713797,0.512803,-0.555498,-0.831355,-0.015015,-0.215491,-0.322489,-0.92169,-0.310984,-0.465407,-0.828639,-0.394513,-0.590442,-0.704031,-0.462966,-0.692892,-0.552751,-0.513749,-0.768914,-0.380535,-0.545,-0.815668,-0.193915,-0.589251,-0.589251,-0.552751,-0.65389,-0.65389,-0.380535,-0.693655,-0.693655,-0.193915,-0.707022,-0.707022,-0.015015,-0.142094,-0.142094,-0.979583,-0.607044,-0.607044,0.512803,-0.27427,-0.27427,-0.92169,-0.395795,-0.395795,-0.828639,-0.502121,-0.502121,-0.704031,-0.713797,-0.476943,0.512803,-0.831355,-0.555498,-0.015015,-0.322489,-0.215491,-0.92169,-0.465407,-0.310984,-0.828639,-0.590442,-0.394513,-0.704031,-0.692892,-0.462966,-0.552751,-0.768914,-0.513749,-0.380535,-0.815668,-0.545,-0.193915,-0.167089,-0.111637,-0.979583,-0.854366,-0.353862,-0.380535,-0.906339,-0.375408,-0.193915,-0.923765,-0.382611,-0.015015,-0.185644,-0.076907,-0.979583,-0.793146,-0.328532,0.512803,-0.358348,-0.148412,-0.92169,-0.517136,-0.214209,-0.828639,-0.656056,-0.271737,-0.704031,-0.76989,-0.318888,-0.552751,-0.380413,-0.075655,-0.92169,-0.548997,-0.109195,-0.828639,-0.696493,-0.138524,-0.704031,-0.817316,-0.162572,-0.552751,-0.90698,-0.180395,-0.380535,-0.962157,-0.191382,-0.193915,-0.980651,-0.195044,-0.015015,-0.197089,-0.039186,-0.979583,-0.841975,-0.167455,0.512803,-0.924741,0.0,-0.380535,-0.980987,0.0,-0.193915,-0.999878,0.0,-0.015015,-0.200964,0.0,-0.979583,-0.858486,0.0,0.512803,-0.38786,0.0,-0.92169,-0.559771,0.0,-0.828639,-0.710135,0.0,-0.704031,-0.833338,0.0,-0.552751,-0.548997,0.109195,-0.828639,-0.696493,0.138524,-0.704031,-0.817316,0.162572,-0.552751,-0.90698,0.180395,-0.380535,-0.962157,0.191382,-0.193915,-0.980651,0.195044,-0.015015,-0.197089,0.039186,-0.979583,-0.841975,0.167455,0.512803,-0.380413,0.075655,-0.92169,-0.906339,0.375408,-0.193915,-0.854366,0.353862,-0.380535,-0.923765,0.382611,-0.015015,-0.185644,0.076907,-0.979583,-0.793146,0.328532,0.512803,-0.358348,0.148412,-0.92169,-0.517136,0.214209,-0.828639,-0.656056,0.271737,-0.704031,-0.76989,0.318888,-0.552751,-0.590442,0.394513,-0.704031,-0.692892,0.462966,-0.552751,-0.768914,0.513749,-0.380535,-0.815668,0.545,-0.193915,-0.831355,0.555498,-0.015015,-0.167089,0.111637,-0.979583,-0.713797,0.476943,0.512803,-0.322489,0.215491,-0.92169,-0.465407,0.310984,-0.828639,-0.707022,0.707022,-0.015015,-0.693655,0.693655,-0.193915,-0.142094,0.142094,-0.979583,-0.607044,0.607044,0.512803,-0.27427,0.27427,-0.92169,-0.395795,0.395795,-0.828639,-0.502121,0.502121,-0.704031,-0.589251,0.589251,-0.552751,-0.65389,0.65389,-0.380535,-0.394513,0.590442,-0.704031,-0.310984,0.465407,-0.828639,-0.462966,0.692892,-0.552751,-0.513749,0.768914,-0.380535,-0.545,0.815668,-0.193915,-0.555498,0.831355,-0.015015,-0.111637,0.167089,-0.979583,-0.476943,0.713797,0.512803,-0.215491,0.322489,-0.92169,-0.382611,0.923765,-0.015015,-0.076907,0.185644,-0.979583,-0.328532,0.793146,0.512803,-0.148412,0.358348,-0.92169,-0.214209,0.517136,-0.828639,-0.271737,0.656056,-0.704031,-0.318888,0.76989,-0.552751,-0.353862,0.854366,-0.380535,-0.375408,0.906339,-0.193915,-0.162572,0.817316,-0.552751,-0.138524,0.696493,-0.704031,-0.180395,0.90698,-0.380535,-0.191382,0.962157,-0.193915,-0.195044,0.980651,-0.015015,-0.039186,0.197089,-0.979583,-0.167455,0.841975,0.512803,-0.075655,0.380413,-0.92169,-0.109195,0.548997,-0.828639,0.0,0.200964,-0.979583,0.0,0.858486,0.512803,0.0,0.999878,-0.015015,0.0,0.38786,-0.92169,0.0,0.559771,-0.828639,0.0,0.710135,-0.704031,0.0,0.833338,-0.552751,0.0,0.924741,-0.380535,0.0,0.980987,-0.193915,0.162572,0.817316,-0.552751,0.138524,0.696493,-0.704031,0.180395,0.90698,-0.380535,0.191382,0.962157,-0.193915,0.195044,0.980651,-0.015015,0.039186,0.197089,-0.979583,0.167455,0.841975,0.512803,0.075655,0.380413,-0.92169,0.109195,0.548997,-0.828639,0.328532,0.793146,0.512803,0.148412,0.358348,-0.92169,0.214209,0.517136,-0.828639,0.271737,0.656056,-0.704031,0.318888,0.76989,-0.552751,0.353862,0.854366,-0.380535,0.375408,0.906339,-0.193915,0.382611,0.923765,-0.015015,0.076907,0.185644,-0.979583,0.513749,0.768914,-0.380535,0.545,0.815668,-0.193915,0.555498,0.831355,-0.015015,0.111637,0.167089,-0.979583,0.476943,0.713797,0.512803,0.215491,0.322489,-0.92169,0.310984,0.465407,-0.828639,0.394513,0.590442,-0.704031,0.462966,0.692892,-0.552751,0.395795,0.395795,-0.828639,0.502121,0.502121,-0.704031,0.589251,0.589251,-0.552751,0.65389,0.65389,-0.380535,0.693655,0.693655,-0.193915,0.707022,0.707022,-0.015015,0.142094,0.142094,-0.979583,0.607044,0.607044,0.512803,0.27427,0.27427,-0.92169,0.815668,0.545,-0.193915,0.768914,0.513749,-0.380535,0.831355,0.555498,-0.015015,0.167089,0.111637,-0.979583,0.713797,0.476943,0.512803,0.322489,0.215491,-0.92169,0.465407,0.310984,-0.828639,0.590442,0.394513,-0.704031,0.692892,0.462966,-0.552751,0.517136,0.214209,-0.828639,0.358348,0.148412,-0.92169,0.656056,0.271737,-0.704031,0.76989,0.318888,-0.552751,0.854366,0.353862,-0.380535,0.906339,0.375408,-0.193915,0.923765,0.382611,-0.015015,0.185644,0.076907,-0.979583,0.793146,0.328532,0.512803,0.962157,0.191382,-0.193915,0.90698,0.180395,-0.380535,0.980651,0.195044,-0.015015,0.197089,0.039186,-0.979583,0.841975,0.167486,0.512803,0.380413,0.075655,-0.92169,0.548997,0.109195,-0.828639,0.696493,0.138524,-0.704031,0.817316,0.162572,-0.552751,0.0,0.0,0.999969];
iron_data_Data.cachedSceneRaws = new haxe_ds_StringMap();
iron_data_Data.cachedMeshes = new haxe_ds_StringMap();
iron_data_Data.cachedLights = new haxe_ds_StringMap();
iron_data_Data.cachedCameras = new haxe_ds_StringMap();
iron_data_Data.cachedMaterials = new haxe_ds_StringMap();
iron_data_Data.cachedParticles = new haxe_ds_StringMap();
iron_data_Data.cachedWorlds = new haxe_ds_StringMap();
iron_data_Data.cachedShaders = new haxe_ds_StringMap();
iron_data_Data.cachedBlobs = new haxe_ds_StringMap();
iron_data_Data.cachedImages = new haxe_ds_StringMap();
iron_data_Data.cachedSounds = new haxe_ds_StringMap();
iron_data_Data.cachedVideos = new haxe_ds_StringMap();
iron_data_Data.cachedFonts = new haxe_ds_StringMap();
iron_data_Data.assetsLoaded = 0;
iron_data_Data.loadingMeshes = new haxe_ds_StringMap();
iron_data_Data.loadingLights = new haxe_ds_StringMap();
iron_data_Data.loadingCameras = new haxe_ds_StringMap();
iron_data_Data.loadingMaterials = new haxe_ds_StringMap();
iron_data_Data.loadingParticles = new haxe_ds_StringMap();
iron_data_Data.loadingWorlds = new haxe_ds_StringMap();
iron_data_Data.loadingShaders = new haxe_ds_StringMap();
iron_data_Data.loadingSceneRaws = new haxe_ds_StringMap();
iron_data_Data.loadingBlobs = new haxe_ds_StringMap();
iron_data_Data.loadingImages = new haxe_ds_StringMap();
iron_data_Data.loadingSounds = new haxe_ds_StringMap();
iron_data_Data.loadingVideos = new haxe_ds_StringMap();
iron_data_Data.loadingFonts = new haxe_ds_StringMap();
iron_data_Data.sep = "/";
iron_data_Data.dataPath = "";
iron_data_MaterialData.uidCounter = 0;
iron_data_MaterialContext.num = 0;
iron_math_RayCaster.VPInv = iron_math_Mat4.identity();
iron_math_RayCaster.PInv = iron_math_Mat4.identity();
iron_math_RayCaster.VInv = iron_math_Mat4.identity();
iron_math_RayCaster.loc = new iron_math_Vec4();
iron_math_RayCaster.nor = new iron_math_Vec4();
iron_math_RayCaster.m = iron_math_Mat4.identity();
iron_object_Animation.m1 = iron_math_Mat4.identity();
iron_object_Animation.m2 = iron_math_Mat4.identity();
iron_object_Animation.vpos = new iron_math_Vec4();
iron_object_Animation.vpos2 = new iron_math_Vec4();
iron_object_Animation.vscl = new iron_math_Vec4();
iron_object_Animation.vscl2 = new iron_math_Vec4();
iron_object_Animation.q1 = new iron_math_Quat();
iron_object_Animation.q2 = new iron_math_Quat();
iron_object_Animation.q3 = new iron_math_Quat();
iron_object_Animation.vp = new iron_math_Vec4();
iron_object_Animation.vs = new iron_math_Vec4();
iron_object_BoneAnimation.skinMaxBones = 128;
iron_object_BoneAnimation.m = iron_math_Mat4.identity();
iron_object_BoneAnimation.m1 = iron_math_Mat4.identity();
iron_object_BoneAnimation.m2 = iron_math_Mat4.identity();
iron_object_BoneAnimation.bm = iron_math_Mat4.identity();
iron_object_BoneAnimation.wm = iron_math_Mat4.identity();
iron_object_BoneAnimation.vpos = new iron_math_Vec4();
iron_object_BoneAnimation.vscl = new iron_math_Vec4();
iron_object_BoneAnimation.q1 = new iron_math_Quat();
iron_object_BoneAnimation.q2 = new iron_math_Quat();
iron_object_BoneAnimation.q3 = new iron_math_Quat();
iron_object_BoneAnimation.vpos2 = new iron_math_Vec4();
iron_object_BoneAnimation.vscl2 = new iron_math_Vec4();
iron_object_BoneAnimation.v1 = new iron_math_Vec4();
iron_object_BoneAnimation.v2 = new iron_math_Vec4();
iron_object_Object.uidCounter = 0;
iron_object_Object.seed = 1;
iron_object_CameraObject.temp = new iron_math_Vec4();
iron_object_CameraObject.q = new iron_math_Quat();
iron_object_CameraObject.sphereCenter = new iron_math_Vec4();
iron_object_CameraObject.vcenter = new iron_math_Vec4();
iron_object_CameraObject.vup = new iron_math_Vec4();
iron_object_LightObject.cascadeCount = 1;
iron_object_LightObject.cascadeSplitFactor = 0.8;
iron_object_LightObject.cascadeBounds = 1.0;
iron_object_LightObject.slicesX = 16;
iron_object_LightObject.slicesY = 16;
iron_object_LightObject.slicesZ = 16;
iron_object_LightObject.maxLights = 16;
iron_object_LightObject.maxLightsCluster = 4;
iron_object_LightObject.clusterNear = 3.0;
iron_object_LightObject.lpos = new iron_math_Vec4();
iron_object_LightObject.m = iron_math_Mat4.identity();
iron_object_LightObject.eye = new iron_math_Vec4();
iron_object_Transform.temp = iron_math_Mat4.identity();
iron_object_Transform.q = new iron_math_Quat();
kha_math_FastMatrix3.width = 3;
kha_math_FastMatrix3.height = 3;
iron_object_Uniforms.biasMat = new iron_math_Mat4(0.5,0.0,0.0,0.5,0.0,0.5,0.0,0.5,0.0,0.0,0.5,0.5,0.0,0.0,0.0,1.0);
iron_object_Uniforms.helpMat = iron_math_Mat4.identity();
iron_object_Uniforms.helpMat2 = iron_math_Mat4.identity();
iron_object_Uniforms.helpMat3 = iron_math_Mat3.identity();
iron_object_Uniforms.helpVec = new iron_math_Vec4();
iron_object_Uniforms.helpVec2 = new iron_math_Vec4();
iron_object_Uniforms.helpQuat = new iron_math_Quat();
iron_object_Uniforms.defaultFilter = 1;
iron_system_Input.occupied = false;
iron_system_Input.gamepads = [];
iron_system_Input.registered = false;
iron_system_Mouse.buttons = ["left","right","middle"];
iron_system_Pen.buttons = ["tip"];
iron_system_Keyboard.keys = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","space","backspace","tab","enter","shift","control","alt","escape","delete","up","down","left","right","back",",",".",":",";","<","=",">","?","!","\"","#","$","%","&","_","(",")","*","|","{","}","[","]","~","`","/","\\","@","+","-","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12"];
iron_system_Gamepad.buttonsPS = ["cross","circle","square","triangle","l1","r1","l2","r2","share","options","l3","r3","up","down","left","right","home","touchpad"];
iron_system_Gamepad.buttonsXBOX = ["a","b","x","y","l1","r1","l2","r2","share","options","l3","r3","up","down","left","right","home","touchpad"];
iron_system_Gamepad.buttons = iron_system_Gamepad.buttonsPS;
iron_system_Time.scale = 1.0;
iron_system_Time.last = 0.0;
iron_system_Time.realDelta = 0.0;
kha_Assets.images = new kha__$Assets_ImageList();
kha_Assets.sounds = new kha__$Assets_SoundList();
kha_Assets.blobs = new kha__$Assets_BlobList();
kha_Assets.fonts = new kha__$Assets_FontList();
kha_Assets.videos = new kha__$Assets_VideoList();
kha__$Color_Color_$Impl_$.Black = -16777216;
kha__$Color_Color_$Impl_$.White = -1;
kha__$Color_Color_$Impl_$.Red = -65536;
kha__$Color_Color_$Impl_$.Blue = -16776961;
kha__$Color_Color_$Impl_$.Green = -16711936;
kha__$Color_Color_$Impl_$.Magenta = -65281;
kha__$Color_Color_$Impl_$.Yellow = -256;
kha__$Color_Color_$Impl_$.Cyan = -16711681;
kha__$Color_Color_$Impl_$.Purple = -8388480;
kha__$Color_Color_$Impl_$.Pink = -16181;
kha__$Color_Color_$Impl_$.Orange = -23296;
kha__$Color_Color_$Impl_$.Transparent = 0;
kha__$Color_Color_$Impl_$.invMaxChannelValue = 0.00392156862745098;
kha_Display.instance = new kha_Display();
kha_Scheduler.timeWarpSaveTime = 10.0;
kha_Scheduler.DIF_COUNT = 3;
kha_Scheduler.maxframetime = 0.5;
kha_Scheduler.startTime = 0;
kha_Shaders.Blue_mesh_fragData0 = "s1884:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgSW1hZ2VUZXh0dXJlOwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjNCBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZSA9IHRleHR1cmUoSW1hZ2VUZXh0dXJlLCB0ZXhDb29yZCk7CiAgICBoaWdocCB2ZWMzIEltYWdlVGV4dHVyZV9Db2xvcl9yZXMgPSBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZS54eXo7CiAgICBoaWdocCB2ZWMzIGJhc2Vjb2wgPSB2ZWMzKDAuMDE5NjkzMDA1ODMwMDQ5NTE0NzcwNTA3ODEyNSwgMC4yODkzMzcyMTc4MDc3Njk3NzUzOTA2MjUsIDAuNzc0MjM3ODcxMTcwMDQzOTQ1MzEyNSk7CiAgICBoaWdocCBmbG9hdCByb3VnaG5lc3MgPSBJbWFnZVRleHR1cmVfQ29sb3JfcmVzLng7CiAgICBoaWdocCBmbG9hdCBtZXRhbGxpYyA9IDAuMDsKICAgIGhpZ2hwIGZsb2F0IG9jY2x1c2lvbiA9IDEuMDsKICAgIGhpZ2hwIGZsb2F0IHNwZWN1bGFyID0gMS4wOwogICAgbiAvPSB2ZWMzKChhYnMobi54KSArIGFicyhuLnkpKSArIGFicyhuLnopKTsKICAgIGhpZ2hwIHZlYzIgXzExMjsKICAgIGlmIChuLnogPj0gMC4wKQogICAgewogICAgICAgIF8xMTIgPSBuLnh5OwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF8xMTIgPSBvY3RhaGVkcm9uV3JhcChuLnh5KTsKICAgIH0KICAgIG4gPSB2ZWMzKF8xMTIueCwgXzExMi55LCBuLnopOwogICAgZnJhZ0NvbG9yWzBdID0gdmVjNChuLnh5LCByb3VnaG5lc3MsIHBhY2tGbG9hdEludDE2KG1ldGFsbGljLCAwdSkpOwogICAgZnJhZ0NvbG9yWzFdID0gdmVjNChiYXNlY29sLCBwYWNrRmxvYXQyKG9jY2x1c2lvbiwgc3BlY3VsYXIpKTsKfQoK";
kha_Shaders.Blue_mesh_vertData0 = "s422:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIGZsb2F0IHRleFVucGFjazsKdW5pZm9ybSBtYXQzIE47CnVuaWZvcm0gbWF0NCBXVlA7CgppbiB2ZWM0IHBvczsKb3V0IHZlYzIgdGV4Q29vcmQ7CmluIHZlYzIgdGV4OwpvdXQgdmVjMyB3bm9ybWFsOwppbiB2ZWMyIG5vcjsKCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgc3BvcyA9IHZlYzQocG9zLnh5eiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4ICogdGV4VW5wYWNrOwogICAgd25vcm1hbCA9IG5vcm1hbGl6ZShOICogdmVjMyhub3IsIHBvcy53KSk7CiAgICBnbF9Qb3NpdGlvbiA9IFdWUCAqIHNwb3M7Cn0KCg";
kha_Shaders.BotBody_armskin_mesh_fragData0 = "s1571:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjMyBiYXNlY29sID0gdmVjMygwLjI0Mjg0MjEyMjkxMjQwNjkyMTM4NjcxODc1LCAwLjI2NjczNjE3OTU5MDIyNTIxOTcyNjU2MjUsIDAuMjQxNDMyODYwNDkzNjU5OTczMTQ0NTMxMjUpOwogICAgaGlnaHAgZmxvYXQgcm91Z2huZXNzID0gMC41OwogICAgaGlnaHAgZmxvYXQgbWV0YWxsaWMgPSAwLjA7CiAgICBoaWdocCBmbG9hdCBvY2NsdXNpb24gPSAxLjA7CiAgICBoaWdocCBmbG9hdCBzcGVjdWxhciA9IDEuMDsKICAgIG4gLz0gdmVjMygoYWJzKG4ueCkgKyBhYnMobi55KSkgKyBhYnMobi56KSk7CiAgICBoaWdocCB2ZWMyIF85NjsKICAgIGlmIChuLnogPj0gMC4wKQogICAgewogICAgICAgIF85NiA9IG4ueHk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzk2ID0gb2N0YWhlZHJvbldyYXAobi54eSk7CiAgICB9CiAgICBuID0gdmVjMyhfOTYueCwgXzk2LnksIG4ueik7CiAgICBmcmFnQ29sb3JbMF0gPSB2ZWM0KG4ueHksIHJvdWdobmVzcywgcGFja0Zsb2F0SW50MTYobWV0YWxsaWMsIDB1KSk7CiAgICBmcmFnQ29sb3JbMV0gPSB2ZWM0KGJhc2Vjb2wsIHBhY2tGbG9hdDIob2NjbHVzaW9uLCBzcGVjdWxhcikpOwp9Cgo";
kha_Shaders.BotBody_armskin_mesh_vertData0 = "s2331:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgc2tpbkJvbmVzWzEzMF07CnVuaWZvcm0gZmxvYXQgcG9zVW5wYWNrOwp1bmlmb3JtIG1hdDMgTjsKdW5pZm9ybSBtYXQ0IFdWUDsKCmluIHZlYzQgcG9zOwppbiB2ZWM0IGJvbmU7CmluIHZlYzQgd2VpZ2h0OwpvdXQgdmVjMyB3bm9ybWFsOwppbiB2ZWMyIG5vcjsKCnZvaWQgZ2V0U2tpbm5pbmdEdWFsUXVhdChpdmVjNCBib25lXzEsIGlub3V0IHZlYzQgd2VpZ2h0XzEsIGlub3V0IHZlYzQgQSwgaW5vdXQgdmVjNCBCKQp7CiAgICBpdmVjNCBib25laSA9IGJvbmVfMSAqIGl2ZWM0KDIpOwogICAgbWF0NCBtYXRBID0gbWF0NCh2ZWM0KHNraW5Cb25lc1tib25laS54XSksIHZlYzQoc2tpbkJvbmVzW2JvbmVpLnldKSwgdmVjNChza2luQm9uZXNbYm9uZWkuel0pLCB2ZWM0KHNraW5Cb25lc1tib25laS53XSkpOwogICAgbWF0NCBtYXRCID0gbWF0NCh2ZWM0KHNraW5Cb25lc1tib25laS54ICsgMV0pLCB2ZWM0KHNraW5Cb25lc1tib25laS55ICsgMV0pLCB2ZWM0KHNraW5Cb25lc1tib25laS56ICsgMV0pLCB2ZWM0KHNraW5Cb25lc1tib25laS53ICsgMV0pKTsKICAgIHZlYzMgXzEyOSA9IHdlaWdodF8xLnh5eiAqIHNpZ24obWF0QVszXSAqIG1hdEEpLnh5ejsKICAgIHdlaWdodF8xID0gdmVjNChfMTI5LngsIF8xMjkueSwgXzEyOS56LCB3ZWlnaHRfMS53KTsKICAgIEEgPSBtYXRBICogd2VpZ2h0XzE7CiAgICBCID0gbWF0QiAqIHdlaWdodF8xOwogICAgZmxvYXQgaW52Tm9ybUEgPSAxLjAgLyBsZW5ndGgoQSk7CiAgICBBICo9IGludk5vcm1BOwogICAgQiAqPSBpbnZOb3JtQTsKfQoKdm9pZCBtYWluKCkKewogICAgdmVjNCBzcG9zID0gdmVjNChwb3MueHl6LCAxLjApOwogICAgdmVjNCBwYXJhbSA9IHdlaWdodDsKICAgIHZlYzQgc2tpbkI7CiAgICB2ZWM0IHBhcmFtXzIgPSBza2luQjsKICAgIHZlYzQgcGFyYW1fMTsKICAgIGdldFNraW5uaW5nRHVhbFF1YXQoaXZlYzQoYm9uZSAqIDMyNzY3LjApLCBwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMik7CiAgICB2ZWM0IHNraW5BID0gcGFyYW1fMTsKICAgIHNraW5CID0gcGFyYW1fMjsKICAgIHZlYzMgXzE3OSA9IHNwb3MueHl6ICogcG9zVW5wYWNrOwogICAgc3BvcyA9IHZlYzQoXzE3OS54LCBfMTc5LnksIF8xNzkueiwgc3Bvcy53KTsKICAgIHZlYzMgXzIwMCA9IHNwb3MueHl6ICsgKGNyb3NzKHNraW5BLnh5eiwgY3Jvc3Moc2tpbkEueHl6LCBzcG9zLnh5eikgKyAoc3Bvcy54eXogKiBza2luQS53KSkgKiAyLjApOwogICAgc3BvcyA9IHZlYzQoXzIwMC54LCBfMjAwLnksIF8yMDAueiwgc3Bvcy53KTsKICAgIHZlYzMgXzIyMyA9IHNwb3MueHl6ICsgKCgoKHNraW5CLnh5eiAqIHNraW5BLncpIC0gKHNraW5BLnh5eiAqIHNraW5CLncpKSArIGNyb3NzKHNraW5BLnh5eiwgc2tpbkIueHl6KSkgKiAyLjApOwogICAgc3BvcyA9IHZlYzQoXzIyMy54LCBfMjIzLnksIF8yMjMueiwgc3Bvcy53KTsKICAgIHZlYzMgXzIzMCA9IHNwb3MueHl6IC8gdmVjMyhwb3NVbnBhY2spOwogICAgc3BvcyA9IHZlYzQoXzIzMC54LCBfMjMwLnksIF8yMzAueiwgc3Bvcy53KTsKICAgIHdub3JtYWwgPSBub3JtYWxpemUoTiAqICh2ZWMzKG5vciwgcG9zLncpICsgKGNyb3NzKHNraW5BLnh5eiwgY3Jvc3Moc2tpbkEueHl6LCB2ZWMzKG5vciwgcG9zLncpKSArICh2ZWMzKG5vciwgcG9zLncpICogc2tpbkEudykpICogMi4wKSkpOwogICAgZ2xfUG9zaXRpb24gPSBXVlAgKiBzcG9zOwp9Cgo";
kha_Shaders.BotBody_armskin_shadowmap_vertData0 = "s2080:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzQgc2tpbkJvbmVzWzEzMF07CnVuaWZvcm0gZmxvYXQgcG9zVW5wYWNrOwp1bmlmb3JtIG1hdDQgTFdWUDsKCmluIHZlYzQgcG9zOwppbiB2ZWM0IGJvbmU7CmluIHZlYzQgd2VpZ2h0OwoKdm9pZCBnZXRTa2lubmluZ0R1YWxRdWF0KGl2ZWM0IGJvbmVfMSwgaW5vdXQgdmVjNCB3ZWlnaHRfMSwgaW5vdXQgdmVjNCBBLCBpbm91dCB2ZWM0IEIpCnsKICAgIGl2ZWM0IGJvbmVpID0gYm9uZV8xICogaXZlYzQoMik7CiAgICBtYXQ0IG1hdEEgPSBtYXQ0KHZlYzQoc2tpbkJvbmVzW2JvbmVpLnhdKSwgdmVjNChza2luQm9uZXNbYm9uZWkueV0pLCB2ZWM0KHNraW5Cb25lc1tib25laS56XSksIHZlYzQoc2tpbkJvbmVzW2JvbmVpLnddKSk7CiAgICBtYXQ0IG1hdEIgPSBtYXQ0KHZlYzQoc2tpbkJvbmVzW2JvbmVpLnggKyAxXSksIHZlYzQoc2tpbkJvbmVzW2JvbmVpLnkgKyAxXSksIHZlYzQoc2tpbkJvbmVzW2JvbmVpLnogKyAxXSksIHZlYzQoc2tpbkJvbmVzW2JvbmVpLncgKyAxXSkpOwogICAgdmVjMyBfMTI5ID0gd2VpZ2h0XzEueHl6ICogc2lnbihtYXRBWzNdICogbWF0QSkueHl6OwogICAgd2VpZ2h0XzEgPSB2ZWM0KF8xMjkueCwgXzEyOS55LCBfMTI5LnosIHdlaWdodF8xLncpOwogICAgQSA9IG1hdEEgKiB3ZWlnaHRfMTsKICAgIEIgPSBtYXRCICogd2VpZ2h0XzE7CiAgICBmbG9hdCBpbnZOb3JtQSA9IDEuMCAvIGxlbmd0aChBKTsKICAgIEEgKj0gaW52Tm9ybUE7CiAgICBCICo9IGludk5vcm1BOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IHNwb3MgPSB2ZWM0KHBvcy54eXosIDEuMCk7CiAgICB2ZWM0IHBhcmFtID0gd2VpZ2h0OwogICAgdmVjNCBza2luQjsKICAgIHZlYzQgcGFyYW1fMiA9IHNraW5COwogICAgdmVjNCBwYXJhbV8xOwogICAgZ2V0U2tpbm5pbmdEdWFsUXVhdChpdmVjNChib25lICogMzI3NjcuMCksIHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yKTsKICAgIHZlYzQgc2tpbkEgPSBwYXJhbV8xOwogICAgc2tpbkIgPSBwYXJhbV8yOwogICAgdmVjMyBfMTc5ID0gc3Bvcy54eXogKiBwb3NVbnBhY2s7CiAgICBzcG9zID0gdmVjNChfMTc5LngsIF8xNzkueSwgXzE3OS56LCBzcG9zLncpOwogICAgdmVjMyBfMjAwID0gc3Bvcy54eXogKyAoY3Jvc3Moc2tpbkEueHl6LCBjcm9zcyhza2luQS54eXosIHNwb3MueHl6KSArIChzcG9zLnh5eiAqIHNraW5BLncpKSAqIDIuMCk7CiAgICBzcG9zID0gdmVjNChfMjAwLngsIF8yMDAueSwgXzIwMC56LCBzcG9zLncpOwogICAgdmVjMyBfMjIzID0gc3Bvcy54eXogKyAoKCgoc2tpbkIueHl6ICogc2tpbkEudykgLSAoc2tpbkEueHl6ICogc2tpbkIudykpICsgY3Jvc3Moc2tpbkEueHl6LCBza2luQi54eXopKSAqIDIuMCk7CiAgICBzcG9zID0gdmVjNChfMjIzLngsIF8yMjMueSwgXzIyMy56LCBzcG9zLncpOwogICAgdmVjMyBfMjMwID0gc3Bvcy54eXogLyB2ZWMzKHBvc1VucGFjayk7CiAgICBzcG9zID0gdmVjNChfMjMwLngsIF8yMzAueSwgXzIzMC56LCBzcG9zLncpOwogICAgZ2xfUG9zaXRpb24gPSBMV1ZQICogc3BvczsKfQoK";
kha_Shaders.BotColor_armskin_mesh_fragData0 = "s1595:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjMyBiYXNlY29sID0gdmVjMygwLjc0ODQwMTQ2MzAzMTc2ODc5ODgyODEyNSwgMC4wODgwOTk5NTY1MTI0NTExNzE4NzUsIDAuMDk0NDA2MzU4ODk3Njg2MDA0NjM4NjcxODc1KTsKICAgIGhpZ2hwIGZsb2F0IHJvdWdobmVzcyA9IDAuMzAwMDAwMDExOTIwOTI4OTU1MDc4MTI1OwogICAgaGlnaHAgZmxvYXQgbWV0YWxsaWMgPSAwLjA7CiAgICBoaWdocCBmbG9hdCBvY2NsdXNpb24gPSAxLjA7CiAgICBoaWdocCBmbG9hdCBzcGVjdWxhciA9IDEuMDsKICAgIG4gLz0gdmVjMygoYWJzKG4ueCkgKyBhYnMobi55KSkgKyBhYnMobi56KSk7CiAgICBoaWdocCB2ZWMyIF85NjsKICAgIGlmIChuLnogPj0gMC4wKQogICAgewogICAgICAgIF85NiA9IG4ueHk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzk2ID0gb2N0YWhlZHJvbldyYXAobi54eSk7CiAgICB9CiAgICBuID0gdmVjMyhfOTYueCwgXzk2LnksIG4ueik7CiAgICBmcmFnQ29sb3JbMF0gPSB2ZWM0KG4ueHksIHJvdWdobmVzcywgcGFja0Zsb2F0SW50MTYobWV0YWxsaWMsIDB1KSk7CiAgICBmcmFnQ29sb3JbMV0gPSB2ZWM0KGJhc2Vjb2wsIHBhY2tGbG9hdDIob2NjbHVzaW9uLCBzcGVjdWxhcikpOwp9Cgo";
kha_Shaders.BotJoints_armskin_mesh_fragData0 = "s1494:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjMyBiYXNlY29sID0gdmVjMygwLjExMDY4ODg3MjYzNTM2NDUzMjQ3MDcwMzEyNSk7CiAgICBoaWdocCBmbG9hdCByb3VnaG5lc3MgPSAwLjU7CiAgICBoaWdocCBmbG9hdCBtZXRhbGxpYyA9IDAuMDsKICAgIGhpZ2hwIGZsb2F0IG9jY2x1c2lvbiA9IDEuMDsKICAgIGhpZ2hwIGZsb2F0IHNwZWN1bGFyID0gMC41OwogICAgbiAvPSB2ZWMzKChhYnMobi54KSArIGFicyhuLnkpKSArIGFicyhuLnopKTsKICAgIGhpZ2hwIHZlYzIgXzk0OwogICAgaWYgKG4ueiA%PSAwLjApCiAgICB7CiAgICAgICAgXzk0ID0gbi54eTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBfOTQgPSBvY3RhaGVkcm9uV3JhcChuLnh5KTsKICAgIH0KICAgIG4gPSB2ZWMzKF85NC54LCBfOTQueSwgbi56KTsKICAgIGZyYWdDb2xvclswXSA9IHZlYzQobi54eSwgcm91Z2huZXNzLCBwYWNrRmxvYXRJbnQxNihtZXRhbGxpYywgMHUpKTsKICAgIGZyYWdDb2xvclsxXSA9IHZlYzQoYmFzZWNvbCwgcGFja0Zsb2F0MihvY2NsdXNpb24sIHNwZWN1bGFyKSk7Cn0KCg";
kha_Shaders.Box_mesh_fragData0 = "s1495:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjMyBiYXNlY29sID0gdmVjMygwLjAyNzIwOTk3ODU1MDY3MjUzMTEyNzkyOTY4NzUpOwogICAgaGlnaHAgZmxvYXQgcm91Z2huZXNzID0gMC41OwogICAgaGlnaHAgZmxvYXQgbWV0YWxsaWMgPSAwLjA7CiAgICBoaWdocCBmbG9hdCBvY2NsdXNpb24gPSAxLjA7CiAgICBoaWdocCBmbG9hdCBzcGVjdWxhciA9IDAuNTsKICAgIG4gLz0gdmVjMygoYWJzKG4ueCkgKyBhYnMobi55KSkgKyBhYnMobi56KSk7CiAgICBoaWdocCB2ZWMyIF85NDsKICAgIGlmIChuLnogPj0gMC4wKQogICAgewogICAgICAgIF85NCA9IG4ueHk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzk0ID0gb2N0YWhlZHJvbldyYXAobi54eSk7CiAgICB9CiAgICBuID0gdmVjMyhfOTQueCwgXzk0LnksIG4ueik7CiAgICBmcmFnQ29sb3JbMF0gPSB2ZWM0KG4ueHksIHJvdWdobmVzcywgcGFja0Zsb2F0SW50MTYobWV0YWxsaWMsIDB1KSk7CiAgICBmcmFnQ29sb3JbMV0gPSB2ZWM0KGJhc2Vjb2wsIHBhY2tGbG9hdDIob2NjbHVzaW9uLCBzcGVjdWxhcikpOwp9Cgo";
kha_Shaders.Ground_mesh_fragData0 = "s2315:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgSW1hZ2VUZXh0dXJlOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBJbWFnZVRleHR1cmVfMDAxOwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjNCBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZSA9IHRleHR1cmUoSW1hZ2VUZXh0dXJlLCB0ZXhDb29yZCk7CiAgICBoaWdocCB2ZWMzIF84MiA9IHBvdyhJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZS54eXosIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7CiAgICBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZSA9IHZlYzQoXzgyLngsIF84Mi55LCBfODIueiwgSW1hZ2VUZXh0dXJlX3RleHJlYWRfc3RvcmUudyk7CiAgICBoaWdocCB2ZWM0IEltYWdlVGV4dHVyZV8wMDFfdGV4cmVhZF9zdG9yZSA9IHRleHR1cmUoSW1hZ2VUZXh0dXJlXzAwMSwgdGV4Q29vcmQpOwogICAgaGlnaHAgdmVjMyBJbWFnZVRleHR1cmVfQ29sb3JfcmVzID0gSW1hZ2VUZXh0dXJlX3RleHJlYWRfc3RvcmUueHl6OwogICAgaGlnaHAgdmVjMyBJbWFnZVRleHR1cmVfMDAxX0NvbG9yX3JlcyA9IEltYWdlVGV4dHVyZV8wMDFfdGV4cmVhZF9zdG9yZS54eXo7CiAgICBoaWdocCB2ZWMzIGJhc2Vjb2wgPSBJbWFnZVRleHR1cmVfQ29sb3JfcmVzOwogICAgaGlnaHAgZmxvYXQgcm91Z2huZXNzID0gSW1hZ2VUZXh0dXJlXzAwMV9Db2xvcl9yZXMueDsKICAgIGhpZ2hwIGZsb2F0IG1ldGFsbGljID0gMC4wOwogICAgaGlnaHAgZmxvYXQgb2NjbHVzaW9uID0gMS4wOwogICAgaGlnaHAgZmxvYXQgc3BlY3VsYXIgPSAxLjA7CiAgICBuIC89IHZlYzMoKGFicyhuLngpICsgYWJzKG4ueSkpICsgYWJzKG4ueikpOwogICAgaGlnaHAgdmVjMiBfMTI0OwogICAgaWYgKG4ueiA%PSAwLjApCiAgICB7CiAgICAgICAgXzEyNCA9IG4ueHk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzEyNCA9IG9jdGFoZWRyb25XcmFwKG4ueHkpOwogICAgfQogICAgbiA9IHZlYzMoXzEyNC54LCBfMTI0LnksIG4ueik7CiAgICBmcmFnQ29sb3JbMF0gPSB2ZWM0KG4ueHksIHJvdWdobmVzcywgcGFja0Zsb2F0SW50MTYobWV0YWxsaWMsIDB1KSk7CiAgICBmcmFnQ29sb3JbMV0gPSB2ZWM0KGJhc2Vjb2wsIHBhY2tGbG9hdDIob2NjbHVzaW9uLCBzcGVjdWxhcikpOwp9Cgo";
kha_Shaders.Gun2_mesh_fragData0 = "s1812:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgSW1hZ2VUZXh0dXJlOwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjNCBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZSA9IHRleHR1cmUoSW1hZ2VUZXh0dXJlLCB0ZXhDb29yZCk7CiAgICBoaWdocCB2ZWMzIEltYWdlVGV4dHVyZV9Db2xvcl9yZXMgPSBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZS54eXo7CiAgICBoaWdocCB2ZWMzIGJhc2Vjb2wgPSB2ZWMzKDAuMDI3MTU3NjYwNTczNzIwOTMyMDA2ODM1OTM3NSk7CiAgICBoaWdocCBmbG9hdCByb3VnaG5lc3MgPSBJbWFnZVRleHR1cmVfQ29sb3JfcmVzLng7CiAgICBoaWdocCBmbG9hdCBtZXRhbGxpYyA9IDAuMDsKICAgIGhpZ2hwIGZsb2F0IG9jY2x1c2lvbiA9IDEuMDsKICAgIGhpZ2hwIGZsb2F0IHNwZWN1bGFyID0gMS4wOwogICAgbiAvPSB2ZWMzKChhYnMobi54KSArIGFicyhuLnkpKSArIGFicyhuLnopKTsKICAgIGhpZ2hwIHZlYzIgXzExMDsKICAgIGlmIChuLnogPj0gMC4wKQogICAgewogICAgICAgIF8xMTAgPSBuLnh5OwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF8xMTAgPSBvY3RhaGVkcm9uV3JhcChuLnh5KTsKICAgIH0KICAgIG4gPSB2ZWMzKF8xMTAueCwgXzExMC55LCBuLnopOwogICAgZnJhZ0NvbG9yWzBdID0gdmVjNChuLnh5LCByb3VnaG5lc3MsIHBhY2tGbG9hdEludDE2KG1ldGFsbGljLCAwdSkpOwogICAgZnJhZ0NvbG9yWzFdID0gdmVjNChiYXNlY29sLCBwYWNrRmxvYXQyKG9jY2x1c2lvbiwgc3BlY3VsYXIpKTsKfQoK";
kha_Shaders.Gun_mesh_fragData0 = "s1886:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgSW1hZ2VUZXh0dXJlOwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjNCBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZSA9IHRleHR1cmUoSW1hZ2VUZXh0dXJlLCB0ZXhDb29yZCk7CiAgICBoaWdocCB2ZWMzIEltYWdlVGV4dHVyZV9Db2xvcl9yZXMgPSBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZS54eXo7CiAgICBoaWdocCB2ZWMzIGJhc2Vjb2wgPSB2ZWMzKDAuMTk5NDQ5OTQxNTE1OTIyNTQ2Mzg2NzE4NzUsIDAuMTc5MTM5NTI0Njk4MjU3NDQ2Mjg5MDYyNSwgMC45MzAxMTExMTAyMTA0MTg3MDExNzE4NzUpOwogICAgaGlnaHAgZmxvYXQgcm91Z2huZXNzID0gSW1hZ2VUZXh0dXJlX0NvbG9yX3Jlcy54OwogICAgaGlnaHAgZmxvYXQgbWV0YWxsaWMgPSAwLjA7CiAgICBoaWdocCBmbG9hdCBvY2NsdXNpb24gPSAxLjA7CiAgICBoaWdocCBmbG9hdCBzcGVjdWxhciA9IDEuMDsKICAgIG4gLz0gdmVjMygoYWJzKG4ueCkgKyBhYnMobi55KSkgKyBhYnMobi56KSk7CiAgICBoaWdocCB2ZWMyIF8xMTI7CiAgICBpZiAobi56ID49IDAuMCkKICAgIHsKICAgICAgICBfMTEyID0gbi54eTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBfMTEyID0gb2N0YWhlZHJvbldyYXAobi54eSk7CiAgICB9CiAgICBuID0gdmVjMyhfMTEyLngsIF8xMTIueSwgbi56KTsKICAgIGZyYWdDb2xvclswXSA9IHZlYzQobi54eSwgcm91Z2huZXNzLCBwYWNrRmxvYXRJbnQxNihtZXRhbGxpYywgMHUpKTsKICAgIGZyYWdDb2xvclsxXSA9IHZlYzQoYmFzZWNvbCwgcGFja0Zsb2F0MihvY2NsdXNpb24sIHNwZWN1bGFyKSk7Cn0KCg";
kha_Shaders.Material_001_mesh_fragData0 = "s2006:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgSW1hZ2VUZXh0dXJlOwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjNCBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZSA9IHRleHR1cmUoSW1hZ2VUZXh0dXJlLCB0ZXhDb29yZCk7CiAgICBoaWdocCB2ZWMzIF84MiA9IHBvdyhJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZS54eXosIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7CiAgICBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZSA9IHZlYzQoXzgyLngsIF84Mi55LCBfODIueiwgSW1hZ2VUZXh0dXJlX3RleHJlYWRfc3RvcmUudyk7CiAgICBoaWdocCB2ZWMzIEltYWdlVGV4dHVyZV9Db2xvcl9yZXMgPSBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZS54eXo7CiAgICBoaWdocCB2ZWMzIGJhc2Vjb2wgPSBJbWFnZVRleHR1cmVfQ29sb3JfcmVzOwogICAgaGlnaHAgZmxvYXQgcm91Z2huZXNzID0gMC41OwogICAgaGlnaHAgZmxvYXQgbWV0YWxsaWMgPSAwLjA7CiAgICBoaWdocCBmbG9hdCBvY2NsdXNpb24gPSAxLjA7CiAgICBoaWdocCBmbG9hdCBzcGVjdWxhciA9IDAuNTsKICAgIG4gLz0gdmVjMygoYWJzKG4ueCkgKyBhYnMobi55KSkgKyBhYnMobi56KSk7CiAgICBoaWdocCB2ZWMyIF8xMTU7CiAgICBpZiAobi56ID49IDAuMCkKICAgIHsKICAgICAgICBfMTE1ID0gbi54eTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBfMTE1ID0gb2N0YWhlZHJvbldyYXAobi54eSk7CiAgICB9CiAgICBuID0gdmVjMyhfMTE1LngsIF8xMTUueSwgbi56KTsKICAgIGZyYWdDb2xvclswXSA9IHZlYzQobi54eSwgcm91Z2huZXNzLCBwYWNrRmxvYXRJbnQxNihtZXRhbGxpYywgMHUpKTsKICAgIGZyYWdDb2xvclsxXSA9IHZlYzQoYmFzZWNvbCwgcGFja0Zsb2F0MihvY2NsdXNpb24sIHNwZWN1bGFyKSk7Cn0KCg";
kha_Shaders.Material_mesh_fragData0 = "s2006:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgSW1hZ2VUZXh0dXJlOwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjNCBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZSA9IHRleHR1cmUoSW1hZ2VUZXh0dXJlLCB0ZXhDb29yZCk7CiAgICBoaWdocCB2ZWMzIF84MiA9IHBvdyhJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZS54eXosIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7CiAgICBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZSA9IHZlYzQoXzgyLngsIF84Mi55LCBfODIueiwgSW1hZ2VUZXh0dXJlX3RleHJlYWRfc3RvcmUudyk7CiAgICBoaWdocCB2ZWMzIEltYWdlVGV4dHVyZV9Db2xvcl9yZXMgPSBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZS54eXo7CiAgICBoaWdocCB2ZWMzIGJhc2Vjb2wgPSBJbWFnZVRleHR1cmVfQ29sb3JfcmVzOwogICAgaGlnaHAgZmxvYXQgcm91Z2huZXNzID0gMC41OwogICAgaGlnaHAgZmxvYXQgbWV0YWxsaWMgPSAwLjA7CiAgICBoaWdocCBmbG9hdCBvY2NsdXNpb24gPSAxLjA7CiAgICBoaWdocCBmbG9hdCBzcGVjdWxhciA9IDAuNTsKICAgIG4gLz0gdmVjMygoYWJzKG4ueCkgKyBhYnMobi55KSkgKyBhYnMobi56KSk7CiAgICBoaWdocCB2ZWMyIF8xMTU7CiAgICBpZiAobi56ID49IDAuMCkKICAgIHsKICAgICAgICBfMTE1ID0gbi54eTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBfMTE1ID0gb2N0YWhlZHJvbldyYXAobi54eSk7CiAgICB9CiAgICBuID0gdmVjMyhfMTE1LngsIF8xMTUueSwgbi56KTsKICAgIGZyYWdDb2xvclswXSA9IHZlYzQobi54eSwgcm91Z2huZXNzLCBwYWNrRmxvYXRJbnQxNihtZXRhbGxpYywgMHUpKTsKICAgIGZyYWdDb2xvclsxXSA9IHZlYzQoYmFzZWNvbCwgcGFja0Zsb2F0MihvY2NsdXNpb24sIHNwZWN1bGFyKSk7Cn0KCg";
kha_Shaders.Projectile_mesh_fragData0 = "s1532:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjMyBiYXNlY29sID0gdmVjMygwLjgwMDAwMDA3MTUyNTU3MzczMDQ2ODc1LCAwLjYxMjA1MTU0NjU3MzYzODkxNjAxNTYyNSwgMC4wKTsKICAgIGhpZ2hwIGZsb2F0IHJvdWdobmVzcyA9IDAuMDsKICAgIGhpZ2hwIGZsb2F0IG1ldGFsbGljID0gMC4wOwogICAgaGlnaHAgZmxvYXQgb2NjbHVzaW9uID0gMS4wOwogICAgaGlnaHAgZmxvYXQgc3BlY3VsYXIgPSAwLjA7CiAgICBuIC89IHZlYzMoKGFicyhuLngpICsgYWJzKG4ueSkpICsgYWJzKG4ueikpOwogICAgaGlnaHAgdmVjMiBfOTQ7CiAgICBpZiAobi56ID49IDAuMCkKICAgIHsKICAgICAgICBfOTQgPSBuLnh5OwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF85NCA9IG9jdGFoZWRyb25XcmFwKG4ueHkpOwogICAgfQogICAgbiA9IHZlYzMoXzk0LngsIF85NC55LCBuLnopOwogICAgZnJhZ0NvbG9yWzBdID0gdmVjNChuLnh5LCByb3VnaG5lc3MsIHBhY2tGbG9hdEludDE2KG1ldGFsbGljLCAwdSkpOwogICAgZnJhZ0NvbG9yWzFdID0gdmVjNChiYXNlY29sLCBwYWNrRmxvYXQyKG9jY2x1c2lvbiwgc3BlY3VsYXIpKTsKfQoK";
kha_Shaders.Red_mesh_fragData0 = "s1884:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgSW1hZ2VUZXh0dXJlOwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjNCBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZSA9IHRleHR1cmUoSW1hZ2VUZXh0dXJlLCB0ZXhDb29yZCk7CiAgICBoaWdocCB2ZWMzIEltYWdlVGV4dHVyZV9Db2xvcl9yZXMgPSBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZS54eXo7CiAgICBoaWdocCB2ZWMzIGJhc2Vjb2wgPSB2ZWMzKDAuOTU4NzgwMTY5NDg2OTk5NTExNzE4NzUsIDAuMDgzODA0NTQ3Nzg2NzEyNjQ2NDg0Mzc1LCAwLjA4NzI2MTM4NjIxNTY4Njc5ODA5NTcwMzEyNSk7CiAgICBoaWdocCBmbG9hdCByb3VnaG5lc3MgPSBJbWFnZVRleHR1cmVfQ29sb3JfcmVzLng7CiAgICBoaWdocCBmbG9hdCBtZXRhbGxpYyA9IDAuMDsKICAgIGhpZ2hwIGZsb2F0IG9jY2x1c2lvbiA9IDEuMDsKICAgIGhpZ2hwIGZsb2F0IHNwZWN1bGFyID0gMS4wOwogICAgbiAvPSB2ZWMzKChhYnMobi54KSArIGFicyhuLnkpKSArIGFicyhuLnopKTsKICAgIGhpZ2hwIHZlYzIgXzExMjsKICAgIGlmIChuLnogPj0gMC4wKQogICAgewogICAgICAgIF8xMTIgPSBuLnh5OwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF8xMTIgPSBvY3RhaGVkcm9uV3JhcChuLnh5KTsKICAgIH0KICAgIG4gPSB2ZWMzKF8xMTIueCwgXzExMi55LCBuLnopOwogICAgZnJhZ0NvbG9yWzBdID0gdmVjNChuLnh5LCByb3VnaG5lc3MsIHBhY2tGbG9hdEludDE2KG1ldGFsbGljLCAwdSkpOwogICAgZnJhZ0NvbG9yWzFdID0gdmVjNChiYXNlY29sLCBwYWNrRmxvYXQyKG9jY2x1c2lvbiwgc3BlY3VsYXIpKTsKfQoK";
kha_Shaders.Wall_mesh_fragData0 = "s2331:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgSW1hZ2VUZXh0dXJlXzAwMTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgSW1hZ2VUZXh0dXJlOwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjNCBJbWFnZVRleHR1cmVfMDAxX3RleHJlYWRfc3RvcmUgPSB0ZXh0dXJlKEltYWdlVGV4dHVyZV8wMDEsIHRleENvb3JkKTsKICAgIGhpZ2hwIHZlYzMgXzgyID0gcG93KEltYWdlVGV4dHVyZV8wMDFfdGV4cmVhZF9zdG9yZS54eXosIHZlYzMoMi4yMDAwMDAwNDc2ODM3MTU4MjAzMTI1KSk7CiAgICBJbWFnZVRleHR1cmVfMDAxX3RleHJlYWRfc3RvcmUgPSB2ZWM0KF84Mi54LCBfODIueSwgXzgyLnosIEltYWdlVGV4dHVyZV8wMDFfdGV4cmVhZF9zdG9yZS53KTsKICAgIGhpZ2hwIHZlYzQgSW1hZ2VUZXh0dXJlX3RleHJlYWRfc3RvcmUgPSB0ZXh0dXJlKEltYWdlVGV4dHVyZSwgdGV4Q29vcmQpOwogICAgaGlnaHAgdmVjMyBJbWFnZVRleHR1cmVfMDAxX0NvbG9yX3JlcyA9IEltYWdlVGV4dHVyZV8wMDFfdGV4cmVhZF9zdG9yZS54eXo7CiAgICBoaWdocCB2ZWMzIEltYWdlVGV4dHVyZV9Db2xvcl9yZXMgPSBJbWFnZVRleHR1cmVfdGV4cmVhZF9zdG9yZS54eXo7CiAgICBoaWdocCB2ZWMzIGJhc2Vjb2wgPSBJbWFnZVRleHR1cmVfMDAxX0NvbG9yX3JlczsKICAgIGhpZ2hwIGZsb2F0IHJvdWdobmVzcyA9IEltYWdlVGV4dHVyZV9Db2xvcl9yZXMueDsKICAgIGhpZ2hwIGZsb2F0IG1ldGFsbGljID0gMC4wOwogICAgaGlnaHAgZmxvYXQgb2NjbHVzaW9uID0gMS4wOwogICAgaGlnaHAgZmxvYXQgc3BlY3VsYXIgPSAxLjA7CiAgICBuIC89IHZlYzMoKGFicyhuLngpICsgYWJzKG4ueSkpICsgYWJzKG4ueikpOwogICAgaGlnaHAgdmVjMiBfMTI0OwogICAgaWYgKG4ueiA%PSAwLjApCiAgICB7CiAgICAgICAgXzEyNCA9IG4ueHk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzEyNCA9IG9jdGFoZWRyb25XcmFwKG4ueHkpOwogICAgfQogICAgbiA9IHZlYzMoXzEyNC54LCBfMTI0LnksIG4ueik7CiAgICBmcmFnQ29sb3JbMF0gPSB2ZWM0KG4ueHksIHJvdWdobmVzcywgcGFja0Zsb2F0SW50MTYobWV0YWxsaWMsIDB1KSk7CiAgICBmcmFnQ29sb3JbMV0gPSB2ZWM0KGJhc2Vjb2wsIHBhY2tGbG9hdDIob2NjbHVzaW9uLCBzcGVjdWxhcikpOwp9Cgo";
kha_Shaders.armdefault_mesh_fragData0 = "s1491:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKaW4gaGlnaHAgdmVjMyB3bm9ybWFsOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3JbMl07CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIGZsb2F0IHBhY2tGbG9hdEludDE2KGhpZ2hwIGZsb2F0IGYsIHVpbnQgaSkKewogICAgcmV0dXJuICgwLjA2MjQ4NTY5NDg4NTI1MzkwNjI1ICogZikgKyAoMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSAqIGZsb2F0KGkpKTsKfQoKaGlnaHAgZmxvYXQgcGFja0Zsb2F0MihoaWdocCBmbG9hdCBmMSwgaGlnaHAgZmxvYXQgZjIpCnsKICAgIHJldHVybiBmbG9vcihmMSAqIDI1NS4wKSArIG1pbihmMiwgMC45OTAwMDAwMDk1MzY3NDMxNjQwNjI1KTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBuID0gbm9ybWFsaXplKHdub3JtYWwpOwogICAgaGlnaHAgdmVjMyBiYXNlY29sID0gdmVjMygwLjgwMDAwMDAxMTkyMDkyODk1NTA3ODEyNSk7CiAgICBoaWdocCBmbG9hdCByb3VnaG5lc3MgPSAwLjI1OwogICAgaGlnaHAgZmxvYXQgbWV0YWxsaWMgPSAwLjA7CiAgICBoaWdocCBmbG9hdCBvY2NsdXNpb24gPSAxLjA7CiAgICBoaWdocCBmbG9hdCBzcGVjdWxhciA9IDAuNTsKICAgIG4gLz0gdmVjMygoYWJzKG4ueCkgKyBhYnMobi55KSkgKyBhYnMobi56KSk7CiAgICBoaWdocCB2ZWMyIF85NTsKICAgIGlmIChuLnogPj0gMC4wKQogICAgewogICAgICAgIF85NSA9IG4ueHk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzk1ID0gb2N0YWhlZHJvbldyYXAobi54eSk7CiAgICB9CiAgICBuID0gdmVjMyhfOTUueCwgXzk1LnksIG4ueik7CiAgICBmcmFnQ29sb3JbMF0gPSB2ZWM0KG4ueHksIHJvdWdobmVzcywgcGFja0Zsb2F0SW50MTYobWV0YWxsaWMsIDB1KSk7CiAgICBmcmFnQ29sb3JbMV0gPSB2ZWM0KGJhc2Vjb2wsIHBhY2tGbG9hdDIob2NjbHVzaW9uLCBzcGVjdWxhcikpOwp9Cgo";
kha_Shaders.armdefault_mesh_vertData0 = "s303:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDMgTjsKdW5pZm9ybSBtYXQ0IFdWUDsKCmluIHZlYzQgcG9zOwpvdXQgdmVjMyB3bm9ybWFsOwppbiB2ZWMyIG5vcjsKCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgc3BvcyA9IHZlYzQocG9zLnh5eiwgMS4wKTsKICAgIHdub3JtYWwgPSBub3JtYWxpemUoTiAqIHZlYzMobm9yLCBwb3MudykpOwogICAgZ2xfUG9zaXRpb24gPSBXVlAgKiBzcG9zOwp9Cgo";
kha_Shaders.armdefault_shadowmap_fragData0 = "s107:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdm9pZCBtYWluKCkKewp9Cgo";
kha_Shaders.armdefault_shadowmap_vertData0 = "s180:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgTFdWUDsKCmluIHZlYzQgcG9zOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCBzcG9zID0gdmVjNChwb3MueHl6LCAxLjApOwogICAgZ2xfUG9zaXRpb24gPSBMV1ZQICogc3BvczsKfQoK";
kha_Shaders.bloom_pass_fragData0 = "s723:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKb3V0IGhpZ2hwIHZlYzQgZnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBjb2wgPSB0ZXh0dXJlTG9kKHRleCwgdGV4Q29vcmQsIDAuMCkueHl6OwogICAgaGlnaHAgZmxvYXQgYnJpZ2h0bmVzcyA9IGRvdChjb2wsIHZlYzMoMC4yMTI1OTk5OTI3NTIwNzUxOTUzMTI1LCAwLjcxNTIwMDAwNjk2MTgyMjUwOTc2NTYyNSwgMC4wNzIyMDAwMDAyODYxMDIyOTQ5MjE4NzUpKTsKICAgIGlmIChicmlnaHRuZXNzID4gMS4wKQogICAgewogICAgICAgIGZyYWdDb2xvciA9IHZlYzQoY29sLngsIGNvbC55LCBjb2wueiwgZnJhZ0NvbG9yLncpOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGZyYWdDb2xvciA9IHZlYzQodmVjMygwLjApLngsIHZlYzMoMC4wKS55LCB2ZWMzKDAuMCkueiwgZnJhZ0NvbG9yLncpOwogICAgfQp9Cgo";
kha_Shaders.blur_adaptive_pass_fragData0 = "s1723:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgZ2J1ZmZlcjA7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHRleDsKdW5pZm9ybSBoaWdocCB2ZWMyIGRpckludjsKCmluIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7Cm91dCBoaWdocCB2ZWM0IGZyYWdDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIGZsb2F0IHJvdWdobmVzcyA9IHRleHR1cmVMb2QoZ2J1ZmZlcjAsIHRleENvb3JkLCAwLjApLno7CiAgICBpZiAocm91Z2huZXNzID49IDAuODAwMDAwMDExOTIwOTI4OTU1MDc4MTI1KQogICAgewogICAgICAgIGhpZ2hwIHZlYzMgXzM3ID0gdGV4dHVyZUxvZCh0ZXgsIHRleENvb3JkLCAwLjApLnh5ejsKICAgICAgICBmcmFnQ29sb3IgPSB2ZWM0KF8zNy54LCBfMzcueSwgXzM3LnosIGZyYWdDb2xvci53KTsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBoaWdocCB2ZWMzIF81MCA9IHRleHR1cmVMb2QodGV4LCB0ZXhDb29yZCArIChkaXJJbnYgKiAyLjUpLCAwLjApLnh5ejsKICAgIGZyYWdDb2xvciA9IHZlYzQoXzUwLngsIF81MC55LCBfNTAueiwgZnJhZ0NvbG9yLncpOwogICAgaGlnaHAgdmVjMyBfNjMgPSBmcmFnQ29sb3IueHl6ICsgdGV4dHVyZUxvZCh0ZXgsIHRleENvb3JkICsgKGRpckludiAqIDEuNSksIDAuMCkueHl6OwogICAgZnJhZ0NvbG9yID0gdmVjNChfNjMueCwgXzYzLnksIF82My56LCBmcmFnQ29sb3Iudyk7CiAgICBoaWdocCB2ZWMzIF83MiA9IGZyYWdDb2xvci54eXogKyB0ZXh0dXJlTG9kKHRleCwgdGV4Q29vcmQsIDAuMCkueHl6OwogICAgZnJhZ0NvbG9yID0gdmVjNChfNzIueCwgXzcyLnksIF83Mi56LCBmcmFnQ29sb3Iudyk7CiAgICBoaWdocCB2ZWMzIF84NCA9IGZyYWdDb2xvci54eXogKyB0ZXh0dXJlTG9kKHRleCwgdGV4Q29vcmQgLSAoZGlySW52ICogMS41KSwgMC4wKS54eXo7CiAgICBmcmFnQ29sb3IgPSB2ZWM0KF84NC54LCBfODQueSwgXzg0LnosIGZyYWdDb2xvci53KTsKICAgIGhpZ2hwIHZlYzMgXzk2ID0gZnJhZ0NvbG9yLnh5eiArIHRleHR1cmVMb2QodGV4LCB0ZXhDb29yZCAtIChkaXJJbnYgKiAyLjUpLCAwLjApLnh5ejsKICAgIGZyYWdDb2xvciA9IHZlYzQoXzk2LngsIF85Ni55LCBfOTYueiwgZnJhZ0NvbG9yLncpOwogICAgaGlnaHAgdmVjMyBfMTAzID0gZnJhZ0NvbG9yLnh5eiAvIHZlYzMoNS4wKTsKICAgIGZyYWdDb2xvciA9IHZlYzQoXzEwMy54LCBfMTAzLnksIF8xMDMueiwgZnJhZ0NvbG9yLncpOwp9Cgo";
kha_Shaders.blur_edge_pass_fragData0 = "s3175:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgZ2J1ZmZlcjA7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHRleDsKdW5pZm9ybSBoaWdocCB2ZWMyIGRpckludjsKCmluIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7Cm91dCBoaWdocCBmbG9hdCBmcmFnQ29sb3I7CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIHZlYzMgZ2V0Tm9yKGhpZ2hwIHZlYzIgZW5jKQp7CiAgICBoaWdocCB2ZWMzIG47CiAgICBuLnogPSAoMS4wIC0gYWJzKGVuYy54KSkgLSBhYnMoZW5jLnkpOwogICAgaGlnaHAgdmVjMiBfNTM7CiAgICBpZiAobi56ID49IDAuMCkKICAgIHsKICAgICAgICBfNTMgPSBlbmM7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzUzID0gb2N0YWhlZHJvbldyYXAoZW5jKTsKICAgIH0KICAgIG4gPSB2ZWMzKF81My54LCBfNTMueSwgbi56KTsKICAgIG4gPSBub3JtYWxpemUobik7CiAgICByZXR1cm4gbjsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMyBub3IgPSBnZXROb3IodGV4dHVyZUxvZChnYnVmZmVyMCwgdGV4Q29vcmQsIDAuMCkueHkpOwogICAgZnJhZ0NvbG9yID0gdGV4dHVyZUxvZCh0ZXgsIHRleENvb3JkLCAwLjApLnggKiAwLjEzMjU3MTk5NTI1ODMzMTI5ODgyODEyNTsKICAgIGhpZ2hwIGZsb2F0IHdlaWdodCA9IDAuMTMyNTcxOTk1MjU4MzMxMjk4ODI4MTI1OwogICAgZm9yIChpbnQgaSA9IDE7IGkgPCA4OyBpKyspCiAgICB7CiAgICAgICAgaGlnaHAgZmxvYXQgcG9zYWRkID0gZmxvYXQoaSk7CiAgICAgICAgaGlnaHAgdmVjMyBub3IyID0gZ2V0Tm9yKHRleHR1cmVMb2QoZ2J1ZmZlcjAsIHRleENvb3JkICsgKGRpckludiAqIGZsb2F0KGkpKSwgMC4wKS54eSk7CiAgICAgICAgaGlnaHAgZmxvYXQgaW5mbHVlbmNlRmFjdG9yID0gc3RlcCgwLjk0OTk5OTk4ODA3OTA3MTA0NDkyMTg3NSwgZG90KG5vcjIsIG5vcikpOwogICAgICAgIGhpZ2hwIGZsb2F0IGNvbCA9IHRleHR1cmVMb2QodGV4LCB0ZXhDb29yZCArIChkaXJJbnYgKiBwb3NhZGQpLCAwLjApLng7CiAgICAgICAgaGlnaHAgZmxvYXQgaW5kZXhhYmxlWzEwXSA9IGZsb2F0W10oMC4xMzI1NzE5OTUyNTgzMzEyOTg4MjgxMjUsIDAuMTI1NDcxOTk0MjgwODE1MTI0NTExNzE4NzUsIDAuMTA2MzcyOTk3MTY0NzI2MjU3MzI0MjE4NzUsIDAuMDgwNzc5OTk5NDk0NTUyNjEyMzA0Njg3NSwgMC4wNTQ5NDk5OTg4NTU1OTA4MjAzMTI1LCAwLjAzMzQ4MjAwMDIzMTc0Mjg1ODg4NjcxODc1LCAwLjAxODI3NTAwMDE1NDk3MjA3NjQxNjAxNTYyNSwgMC4wMDg5MzM5OTk1NzU2NzQ1MzM4NDM5OTQxNDA2MjUsIDAuMDAzOTExOTk5OTg1NTc1Njc1OTY0MzU1NDY4NzUsIDAuMDAxNTM1MDAwMDQ2NzE1MTQwMzQyNzEyNDAyMzQzNzUpOwogICAgICAgIGhpZ2hwIGZsb2F0IHcgPSBpbmRleGFibGVbaV0gKiBpbmZsdWVuY2VGYWN0b3I7CiAgICAgICAgZnJhZ0NvbG9yICs9IChjb2wgKiB3KTsKICAgICAgICB3ZWlnaHQgKz0gdzsKICAgICAgICBub3IyID0gZ2V0Tm9yKHRleHR1cmVMb2QoZ2J1ZmZlcjAsIHRleENvb3JkIC0gKGRpckludiAqIGZsb2F0KGkpKSwgMC4wKS54eSk7CiAgICAgICAgaW5mbHVlbmNlRmFjdG9yID0gc3RlcCgwLjk0OTk5OTk4ODA3OTA3MTA0NDkyMTg3NSwgZG90KG5vcjIsIG5vcikpOwogICAgICAgIGNvbCA9IHRleHR1cmVMb2QodGV4LCB0ZXhDb29yZCAtIChkaXJJbnYgKiBwb3NhZGQpLCAwLjApLng7CiAgICAgICAgaGlnaHAgZmxvYXQgaW5kZXhhYmxlXzFbMTBdID0gZmxvYXRbXSgwLjEzMjU3MTk5NTI1ODMzMTI5ODgyODEyNSwgMC4xMjU0NzE5OTQyODA4MTUxMjQ1MTE3MTg3NSwgMC4xMDYzNzI5OTcxNjQ3MjYyNTczMjQyMTg3NSwgMC4wODA3Nzk5OTk0OTQ1NTI2MTIzMDQ2ODc1LCAwLjA1NDk0OTk5ODg1NTU5MDgyMDMxMjUsIDAuMDMzNDgyMDAwMjMxNzQyODU4ODg2NzE4NzUsIDAuMDE4Mjc1MDAwMTU0OTcyMDc2NDE2MDE1NjI1LCAwLjAwODkzMzk5OTU3NTY3NDUzMzg0Mzk5NDE0MDYyNSwgMC4wMDM5MTE5OTk5ODU1NzU2NzU5NjQzNTU0Njg3NSwgMC4wMDE1MzUwMDAwNDY3MTUxNDAzNDI3MTI0MDIzNDM3NSk7CiAgICAgICAgdyA9IGluZGV4YWJsZV8xW2ldICogaW5mbHVlbmNlRmFjdG9yOwogICAgICAgIGZyYWdDb2xvciArPSAoY29sICogdyk7CiAgICAgICAgd2VpZ2h0ICs9IHc7CiAgICB9CiAgICBmcmFnQ29sb3IgLz0gd2VpZ2h0Owp9Cgo";
kha_Shaders.blur_gaus_pass_fragData0 = "s2356:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCB2ZWMyIGRpcjsKdW5pZm9ybSBoaWdocCB2ZWMyIHNjcmVlblNpemU7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHRleDsKCm91dCBoaWdocCB2ZWM0IGZyYWdDb2xvcjsKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzIgX3N0ZXAgPSAoZGlyIC8gc2NyZWVuU2l6ZSkgKiAzLjA7CiAgICBoaWdocCB2ZWMzIF8zNCA9IHRleHR1cmVMb2QodGV4LCB0ZXhDb29yZCwgMC4wKS54eXogKiAwLjEzMjU3MTk5NTI1ODMzMTI5ODgyODEyNTsKICAgIGZyYWdDb2xvciA9IHZlYzQoXzM0LngsIF8zNC55LCBfMzQueiwgZnJhZ0NvbG9yLncpOwogICAgZm9yIChpbnQgaSA9IDE7IGkgPCAxMDsgaSsrKQogICAgewogICAgICAgIGhpZ2hwIHZlYzIgcyA9IF9zdGVwICogKGZsb2F0KGkpICsgMC41KTsKICAgICAgICBoaWdocCBmbG9hdCBpbmRleGFibGVbMTBdID0gZmxvYXRbXSgwLjEzMjU3MTk5NTI1ODMzMTI5ODgyODEyNSwgMC4xMjU0NzE5OTQyODA4MTUxMjQ1MTE3MTg3NSwgMC4xMDYzNzI5OTcxNjQ3MjYyNTczMjQyMTg3NSwgMC4wODA3Nzk5OTk0OTQ1NTI2MTIzMDQ2ODc1LCAwLjA1NDk0OTk5ODg1NTU5MDgyMDMxMjUsIDAuMDMzNDgyMDAwMjMxNzQyODU4ODg2NzE4NzUsIDAuMDE4Mjc1MDAwMTU0OTcyMDc2NDE2MDE1NjI1LCAwLjAwODkzMzk5OTU3NTY3NDUzMzg0Mzk5NDE0MDYyNSwgMC4wMDM5MTE5OTk5ODU1NzU2NzU5NjQzNTU0Njg3NSwgMC4wMDE1MzUwMDAwNDY3MTUxNDAzNDI3MTI0MDIzNDM3NSk7CiAgICAgICAgaGlnaHAgdmVjMyBfODUgPSBmcmFnQ29sb3IueHl6ICsgKHRleHR1cmVMb2QodGV4LCB0ZXhDb29yZCArIHMsIDAuMCkueHl6ICogaW5kZXhhYmxlW2ldKTsKICAgICAgICBmcmFnQ29sb3IgPSB2ZWM0KF84NS54LCBfODUueSwgXzg1LnosIGZyYWdDb2xvci53KTsKICAgICAgICBoaWdocCBmbG9hdCBpbmRleGFibGVfMVsxMF0gPSBmbG9hdFtdKDAuMTMyNTcxOTk1MjU4MzMxMjk4ODI4MTI1LCAwLjEyNTQ3MTk5NDI4MDgxNTEyNDUxMTcxODc1LCAwLjEwNjM3Mjk5NzE2NDcyNjI1NzMyNDIxODc1LCAwLjA4MDc3OTk5OTQ5NDU1MjYxMjMwNDY4NzUsIDAuMDU0OTQ5OTk4ODU1NTkwODIwMzEyNSwgMC4wMzM0ODIwMDAyMzE3NDI4NTg4ODY3MTg3NSwgMC4wMTgyNzUwMDAxNTQ5NzIwNzY0MTYwMTU2MjUsIDAuMDA4OTMzOTk5NTc1Njc0NTMzODQzOTk0MTQwNjI1LCAwLjAwMzkxMTk5OTk4NTU3NTY3NTk2NDM1NTQ2ODc1LCAwLjAwMTUzNTAwMDA0NjcxNTE0MDM0MjcxMjQwMjM0Mzc1KTsKICAgICAgICBoaWdocCB2ZWMzIF8xMDEgPSBmcmFnQ29sb3IueHl6ICsgKHRleHR1cmVMb2QodGV4LCB0ZXhDb29yZCAtIHMsIDAuMCkueHl6ICogaW5kZXhhYmxlXzFbaV0pOwogICAgICAgIGZyYWdDb2xvciA9IHZlYzQoXzEwMS54LCBfMTAxLnksIF8xMDEueiwgZnJhZ0NvbG9yLncpOwogICAgfQogICAgaGlnaHAgdmVjMyBfMTA5ID0gZnJhZ0NvbG9yLnh5eiAqIDAuNjk5OTk5OTg4MDc5MDcxMDQ0OTIxODc1OwogICAgZnJhZ0NvbG9yID0gdmVjNChfMTA5LngsIF8xMDkueSwgXzEwOS56LCBmcmFnQ29sb3Iudyk7CiAgICBoaWdocCB2ZWMzIF8xMTYgPSBtaW4oZnJhZ0NvbG9yLnh5eiwgdmVjMyg2NC4wKSk7CiAgICBmcmFnQ29sb3IgPSB2ZWM0KF8xMTYueCwgXzExNi55LCBfMTE2LnosIGZyYWdDb2xvci53KTsKfQoK";
kha_Shaders.compositor_pass_fragData0 = "s870:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKb3V0IGhpZ2hwIHZlYzQgZnJhZ0NvbG9yOwoKaGlnaHAgdmVjMyB0b25lbWFwRmlsbWljKGhpZ2hwIHZlYzMgY29sb3IpCnsKICAgIGhpZ2hwIHZlYzMgeCA9IG1heCh2ZWMzKDAuMCksIGNvbG9yIC0gdmVjMygwLjAwNDAwMDAwMDE4OTk4OTgwNTIyMTU1NzYxNzE4NzUpKTsKICAgIHJldHVybiAoeCAqICgoeCAqIDYuMTk5OTk5ODA5MjY1MTM2NzE4NzUpICsgdmVjMygwLjUpKSkgLyAoKHggKiAoKHggKiA2LjE5OTk5OTgwOTI2NTEzNjcxODc1KSArIHZlYzMoMS43MDAwMDAwNDc2ODM3MTU4MjAzMTI1KSkpICsgdmVjMygwLjA1OTk5OTk5ODY1ODg5NTQ5MjU1MzcxMDkzNzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMiB0ZXhDbyA9IHRleENvb3JkOwogICAgZnJhZ0NvbG9yID0gdGV4dHVyZUxvZCh0ZXgsIHRleENvLCAwLjApOwogICAgaGlnaHAgdmVjMyBfNTkgPSB0b25lbWFwRmlsbWljKGZyYWdDb2xvci54eXopOwogICAgZnJhZ0NvbG9yID0gdmVjNChfNTkueCwgXzU5LnksIF81OS56LCBmcmFnQ29sb3Iudyk7Cn0KCg";
kha_Shaders.compositor_pass_vertData0 = "s203:I3ZlcnNpb24gMzAwIGVzCgpvdXQgdmVjMiB0ZXhDb29yZDsKaW4gdmVjMiBwb3M7Cgp2b2lkIG1haW4oKQp7CiAgICB0ZXhDb29yZCA9IChwb3MgKiB2ZWMyKDAuNSkpICsgdmVjMigwLjUpOwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwp9Cgo";
kha_Shaders.deferred_light_fragData0 = "s22976:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCB2ZWM0IGNhc0RhdGFbMjBdOwp1bmlmb3JtIGhpZ2hwIG1hdDQgTFdWUFNwb3QwOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRFNoYWRvdyBzaGFkb3dNYXBTcG90WzRdOwp1bmlmb3JtIGhpZ2hwIG1hdDQgTFdWUFNwb3QxOwp1bmlmb3JtIGhpZ2hwIG1hdDQgTFdWUFNwb3QyOwp1bmlmb3JtIGhpZ2hwIG1hdDQgTFdWUFNwb3QzOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXJDdWJlU2hhZG93IHNoYWRvd01hcFBvaW50WzRdOwp1bmlmb3JtIGhpZ2hwIHZlYzIgbGlnaHRQcm9qOwp1bmlmb3JtIGhpZ2hwIHZlYzQgc2hpcnJbN107CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGdidWZmZXIwOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBnYnVmZmVyMTsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgZ2J1ZmZlckQ7CnVuaWZvcm0gaGlnaHAgdmVjMyBleWU7CnVuaWZvcm0gaGlnaHAgdmVjMyBleWVMb29rOwp1bmlmb3JtIGhpZ2hwIHZlYzIgY2FtZXJhUHJvajsKdW5pZm9ybSBoaWdocCB2ZWMzIGJhY2tncm91bmRDb2w7CnVuaWZvcm0gaGlnaHAgZmxvYXQgZW52bWFwU3RyZW5ndGg7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHNzYW90ZXg7CnVuaWZvcm0gaGlnaHAgdmVjMyBzdW5EaXI7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEU2hhZG93IHNoYWRvd01hcDsKdW5pZm9ybSBoaWdocCBmbG9hdCBzaGFkb3dzQmlhczsKdW5pZm9ybSBoaWdocCB2ZWMzIHN1bkNvbDsKdW5pZm9ybSBoaWdocCB2ZWMyIGNhbWVyYVBsYW5lOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBjbHVzdGVyc0RhdGE7CnVuaWZvcm0gaGlnaHAgdmVjNCBsaWdodHNBcnJheVszMl07CnVuaWZvcm0gaGlnaHAgdmVjNCBsaWdodHNBcnJheVNwb3RbMTZdOwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjMyB2aWV3UmF5OwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3I7CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCnZvaWQgdW5wYWNrRmxvYXRJbnQxNihoaWdocCBmbG9hdCB2YWwsIG91dCBoaWdocCBmbG9hdCBmLCBpbm91dCB1aW50IGkpCnsKICAgIGkgPSB1aW50KGludCgodmFsIC8gMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSkgKyAxLjUyNTkwMjE4OTMxNDM2NTM4Njk2Mjg5MDYyNWUtMDUpKTsKICAgIGYgPSBjbGFtcCgoKCgtMC4wNjI1MDA5NTM2NzQzMTY0MDYyNSkgKiBmbG9hdChpKSkgKyB2YWwpIC8gMC4wNjI0ODU2OTQ4ODUyNTM5MDYyNSwgMC4wLCAxLjApOwp9CgpoaWdocCB2ZWMyIHVucGFja0Zsb2F0MihoaWdocCBmbG9hdCBmKQp7CiAgICByZXR1cm4gdmVjMihmbG9vcihmKSAvIDI1NS4wLCBmcmFjdChmKSk7Cn0KCmhpZ2hwIHZlYzMgc3VyZmFjZUFsYmVkbyhoaWdocCB2ZWMzIGJhc2VDb2xvciwgaGlnaHAgZmxvYXQgbWV0YWxuZXNzKQp7CiAgICByZXR1cm4gbWl4KGJhc2VDb2xvciwgdmVjMygwLjApLCB2ZWMzKG1ldGFsbmVzcykpOwp9CgpoaWdocCB2ZWMzIHN1cmZhY2VGMChoaWdocCB2ZWMzIGJhc2VDb2xvciwgaGlnaHAgZmxvYXQgbWV0YWxuZXNzKQp7CiAgICByZXR1cm4gbWl4KHZlYzMoMC4wMzk5OTk5OTkxMDU5MzAzMjgzNjkxNDA2MjUpLCBiYXNlQ29sb3IsIHZlYzMobWV0YWxuZXNzKSk7Cn0KCmhpZ2hwIHZlYzMgZ2V0UG9zKGhpZ2hwIHZlYzMgZXllXzEsIGhpZ2hwIHZlYzMgZXllTG9va18xLCBoaWdocCB2ZWMzIHZpZXdSYXlfMSwgaGlnaHAgZmxvYXQgZGVwdGgsIGhpZ2hwIHZlYzIgY2FtZXJhUHJval8xKQp7CiAgICBoaWdocCBmbG9hdCBsaW5lYXJEZXB0aCA9IGNhbWVyYVByb2pfMS55IC8gKCgoZGVwdGggKiAwLjUpICsgMC41KSAtIGNhbWVyYVByb2pfMS54KTsKICAgIGhpZ2hwIGZsb2F0IHZpZXdaRGlzdCA9IGRvdChleWVMb29rXzEsIHZpZXdSYXlfMSk7CiAgICBoaWdocCB2ZWMzIHdwb3NpdGlvbiA9IGV5ZV8xICsgKHZpZXdSYXlfMSAqIChsaW5lYXJEZXB0aCAvIHZpZXdaRGlzdCkpOwogICAgcmV0dXJuIHdwb3NpdGlvbjsKfQoKaGlnaHAgdmVjMyBzaElycmFkaWFuY2UoaGlnaHAgdmVjMyBub3IpCnsKICAgIGhpZ2hwIHZlYzMgY2wwMCA9IHZlYzMoc2hpcnJbMF0ueCwgc2hpcnJbMF0ueSwgc2hpcnJbMF0ueik7CiAgICBoaWdocCB2ZWMzIGNsMW0xID0gdmVjMyhzaGlyclswXS53LCBzaGlyclsxXS54LCBzaGlyclsxXS55KTsKICAgIGhpZ2hwIHZlYzMgY2wxMCA9IHZlYzMoc2hpcnJbMV0ueiwgc2hpcnJbMV0udywgc2hpcnJbMl0ueCk7CiAgICBoaWdocCB2ZWMzIGNsMTEgPSB2ZWMzKHNoaXJyWzJdLnksIHNoaXJyWzJdLnosIHNoaXJyWzJdLncpOwogICAgaGlnaHAgdmVjMyBjbDJtMiA9IHZlYzMoc2hpcnJbM10ueCwgc2hpcnJbM10ueSwgc2hpcnJbM10ueik7CiAgICBoaWdocCB2ZWMzIGNsMm0xID0gdmVjMyhzaGlyclszXS53LCBzaGlycls0XS54LCBzaGlycls0XS55KTsKICAgIGhpZ2hwIHZlYzMgY2wyMCA9IHZlYzMoc2hpcnJbNF0ueiwgc2hpcnJbNF0udywgc2hpcnJbNV0ueCk7CiAgICBoaWdocCB2ZWMzIGNsMjEgPSB2ZWMzKHNoaXJyWzVdLnksIHNoaXJyWzVdLnosIHNoaXJyWzVdLncpOwogICAgaGlnaHAgdmVjMyBjbDIyID0gdmVjMyhzaGlycls2XS54LCBzaGlycls2XS55LCBzaGlycls2XS56KTsKICAgIHJldHVybiAoKCgoKCgoKCgoY2wyMiAqIDAuNDI5MDQyOTk0OTc2MDQzNzAxMTcxODc1KSAqICgobm9yLnkgKiBub3IueSkgLSAoKC1ub3IueikgKiAoLW5vci56KSkpKSArICgoKGNsMjAgKiAwLjc0MzEyNTAyMTQ1NzY3MjExOTE0MDYyNSkgKiBub3IueCkgKiBub3IueCkpICsgKGNsMDAgKiAwLjg4NjIyNzAxMTY4MDYwMzAyNzM0Mzc1KSkgLSAoY2wyMCAqIDAuMjQ3NzA3OTkyNzkyMTI5NTE2NjAxNTYyNSkpICsgKCgoY2wybTIgKiAwLjg1ODA4NTk4OTk1MjA4NzQwMjM0Mzc1KSAqIG5vci55KSAqICgtbm9yLnopKSkgKyAoKChjbDIxICogMC44NTgwODU5ODk5NTIwODc0MDIzNDM3NSkgKiBub3IueSkgKiBub3IueCkpICsgKCgoY2wybTEgKiAwLjg1ODA4NTk4OTk1MjA4NzQwMjM0Mzc1KSAqICgtbm9yLnopKSAqIG5vci54KSkgKyAoKGNsMTEgKiAxLjAyMzMyNzk0NjY2MjkwMjgzMjAzMTI1KSAqIG5vci55KSkgKyAoKGNsMW0xICogMS4wMjMzMjc5NDY2NjI5MDI4MzIwMzEyNSkgKiAoLW5vci56KSkpICsgKChjbDEwICogMS4wMjMzMjc5NDY2NjI5MDI4MzIwMzEyNSkgKiBub3IueCk7Cn0KCmhpZ2hwIHZlYzMgbGFtYmVydERpZmZ1c2VCUkRGKGhpZ2hwIHZlYzMgYWxiZWRvLCBoaWdocCBmbG9hdCBubCkKewogICAgcmV0dXJuIGFsYmVkbyAqIG1heCgwLjAsIG5sKTsKfQoKaGlnaHAgZmxvYXQgZF9nZ3goaGlnaHAgZmxvYXQgbmgsIGhpZ2hwIGZsb2F0IGEpCnsKICAgIGhpZ2hwIGZsb2F0IGEyID0gYSAqIGE7CiAgICBoaWdocCBmbG9hdCBkZW5vbSA9IHBvdygoKG5oICogbmgpICogKGEyIC0gMS4wKSkgKyAxLjAsIDIuMCk7CiAgICByZXR1cm4gKGEyICogMC4zMTgzMDk4NzMzNDI1MTQwMzgwODU5Mzc1KSAvIGRlbm9tOwp9CgpoaWdocCBmbG9hdCB2X3NtaXRoc2NobGljayhoaWdocCBmbG9hdCBubCwgaGlnaHAgZmxvYXQgbnYsIGhpZ2hwIGZsb2F0IGEpCnsKICAgIHJldHVybiAxLjAgLyAoKChubCAqICgxLjAgLSBhKSkgKyBhKSAqICgobnYgKiAoMS4wIC0gYSkpICsgYSkpOwp9CgpoaWdocCB2ZWMzIGZfc2NobGljayhoaWdocCB2ZWMzIGYwLCBoaWdocCBmbG9hdCB2aCkKewogICAgcmV0dXJuIGYwICsgKCh2ZWMzKDEuMCkgLSBmMCkgKiBleHAyKCgoKC01LjU1NDcyOTkzODUwNzA4MDA3ODEyNSkgKiB2aCkgLSA2Ljk4MzE2MDAxODkyMDg5ODQzNzUpICogdmgpKTsKfQoKaGlnaHAgdmVjMyBzcGVjdWxhckJSREYoaGlnaHAgdmVjMyBmMCwgaGlnaHAgZmxvYXQgcm91Z2huZXNzLCBoaWdocCBmbG9hdCBubCwgaGlnaHAgZmxvYXQgbmgsIGhpZ2hwIGZsb2F0IG52LCBoaWdocCBmbG9hdCB2aCkKewogICAgaGlnaHAgZmxvYXQgYSA9IHJvdWdobmVzcyAqIHJvdWdobmVzczsKICAgIHJldHVybiAoZl9zY2hsaWNrKGYwLCB2aCkgKiAoZF9nZ3gobmgsIGEpICogY2xhbXAodl9zbWl0aHNjaGxpY2sobmwsIG52LCBhKSwgMC4wLCAxLjApKSkgLyB2ZWMzKDQuMCk7Cn0KCmhpZ2hwIG1hdDQgZ2V0Q2FzY2FkZU1hdChoaWdocCBmbG9hdCBkLCBpbm91dCBpbnQgY2FzaSwgaW5vdXQgaW50IGNhc0luZGV4KQp7CiAgICBoaWdocCB2ZWM0IGNvbXAgPSB2ZWM0KGZsb2F0KGQgPiBjYXNEYXRhWzE2XS54KSwgZmxvYXQoZCA%";
kha_Shaders.downsample_depth_fragData0 = "s783:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4ZGVwdGg7CnVuaWZvcm0gaGlnaHAgdmVjMiBzY3JlZW5TaXplSW52OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKb3V0IGhpZ2hwIGZsb2F0IGZyYWdDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIGZsb2F0IGQwID0gdGV4dHVyZUxvZCh0ZXhkZXB0aCwgdGV4Q29vcmQsIDAuMCkueDsKICAgIGhpZ2hwIGZsb2F0IGQxID0gdGV4dHVyZUxvZCh0ZXhkZXB0aCwgdGV4Q29vcmQgKyB2ZWMyKHNjcmVlblNpemVJbnYueCwgMC4wKSwgMC4wKS54OwogICAgaGlnaHAgZmxvYXQgZDIgPSB0ZXh0dXJlTG9kKHRleGRlcHRoLCB0ZXhDb29yZCArIHZlYzIoMC4wLCBzY3JlZW5TaXplSW52LnkpLCAwLjApLng7CiAgICBoaWdocCBmbG9hdCBkMyA9IHRleHR1cmVMb2QodGV4ZGVwdGgsIHRleENvb3JkICsgdmVjMihzY3JlZW5TaXplSW52LngsIHNjcmVlblNpemVJbnYueSksIDAuMCkueDsKICAgIGZyYWdDb2xvciA9IG1heChtYXgoZDAsIGQxKSwgbWF4KGQyLCBkMykpOwp9Cgo";
kha_Shaders.painter_colored_fragData0 = "s223:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSBmcmFnbWVudENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData0 = "s311:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData0 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData0 = "s380:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_fragData0 = "s367:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSB2ZWM0KGZyYWdtZW50Q29sb3IueHl6LCB0ZXh0dXJlKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_vertData0 = "s402:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBmcmFnbWVudENvbG9yOwppbiB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_video_fragData0 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData0 = "s380:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.pass_vertData0 = "s203:I3ZlcnNpb24gMzAwIGVzCgpvdXQgdmVjMiB0ZXhDb29yZDsKaW4gdmVjMiBwb3M7Cgp2b2lkIG1haW4oKQp7CiAgICB0ZXhDb29yZCA9IChwb3MgKiB2ZWMyKDAuNSkpICsgdmVjMigwLjUpOwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwp9Cgo";
kha_Shaders.pass_viewray2_vertData0 = "s400:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgaW52UDsKCm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHBvczsKb3V0IHZlYzMgdmlld1JheTsKCnZvaWQgbWFpbigpCnsKICAgIHRleENvb3JkID0gKHBvcyAqIHZlYzIoMC41KSkgKyB2ZWMyKDAuNSk7CiAgICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zLCAwLjAsIDEuMCk7CiAgICB2ZWM0IHYgPSB2ZWM0KHBvcy54LCBwb3MueSwgMS4wLCAxLjApOwogICAgdiA9IHZlYzQoaW52UCAqIHYpOwogICAgdmlld1JheSA9IHZlYzModi54eSAvIHZlYzIodi56KSwgMS4wKTsKfQoK";
kha_Shaders.pass_viewray_vertData0 = "s504:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgaW52VlA7CnVuaWZvcm0gdmVjMyBleWU7CgpvdXQgdmVjMiB0ZXhDb29yZDsKaW4gdmVjMiBwb3M7Cm91dCB2ZWMzIHZpZXdSYXk7Cgp2b2lkIG1haW4oKQp7CiAgICB0ZXhDb29yZCA9IChwb3MgKiB2ZWMyKDAuNSkpICsgdmVjMigwLjUpOwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwogICAgdmVjNCB2ID0gdmVjNChwb3MueCwgcG9zLnksIDEuMCwgMS4wKTsKICAgIHYgPSB2ZWM0KGludlZQICogdik7CiAgICB2ZWMzIF82MiA9IHYueHl6IC8gdmVjMyh2LncpOwogICAgdiA9IHZlYzQoXzYyLngsIF82Mi55LCBfNjIueiwgdi53KTsKICAgIHZpZXdSYXkgPSB2Lnh5eiAtIGV5ZTsKfQoK";
kha_Shaders.smaa_blend_weight_fragData0 = "s24270:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCB2ZWMyIHNjcmVlblNpemVJbnY7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGVkZ2VzVGV4Owp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBhcmVhVGV4Owp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBzZWFyY2hUZXg7CnVuaWZvcm0gaGlnaHAgdmVjMiBzY3JlZW5TaXplOwoKaW4gaGlnaHAgdmVjNCBvZmZzZXQwOwppbiBoaWdocCB2ZWM0IG9mZnNldDI7CmluIGhpZ2hwIHZlYzQgb2Zmc2V0MTsKb3V0IGhpZ2hwIHZlYzQgZnJhZ0NvbG9yOwppbiBoaWdocCB2ZWMyIHRleENvb3JkOwppbiBoaWdocCB2ZWMyIHBpeGNvb3JkOwpoaWdocCB2ZWMyIGNkd19lbmQ7CgpoaWdocCB2ZWM0IHRleHR1cmVMb2RBKGhpZ2hwIHNhbXBsZXIyRCB0ZXgsIGhpZ2hwIHZlYzIgY29vcmQsIGhpZ2hwIGZsb2F0IGxvZCkKewogICAgcmV0dXJuIHRleHR1cmVMb2QodGV4LCBjb29yZCwgbG9kKTsKfQoKaGlnaHAgdmVjMiBTTUFBU2VhcmNoRGlhZzEoaGlnaHAgdmVjMiB0ZXhjb29yZCwgaGlnaHAgdmVjMiBkaXIpCnsKICAgIGhpZ2hwIHZlYzQgY29vcmQgPSB2ZWM0KHRleGNvb3JkLCAtMS4wLCAxLjApOwogICAgaGlnaHAgdmVjMyB0ID0gdmVjMyhzY3JlZW5TaXplSW52LCAxLjApOwogICAgaGlnaHAgZmxvYXQgY3cgPSBjb29yZC53OwogICAgd2hpbGUgKChjb29yZC56IDwgNy4wKSAmJiAoY3cgPiAwLjg5OTk5OTk3NjE1ODE0MjA4OTg0Mzc1KSkKICAgIHsKICAgICAgICBoaWdocCB2ZWMzIF8xODEgPSAodCAqIHZlYzMoZGlyLCAxLjApKSArIGNvb3JkLnh5ejsKICAgICAgICBjb29yZCA9IHZlYzQoXzE4MS54LCBfMTgxLnksIF8xODEueiwgY29vcmQudyk7CiAgICAgICAgaGlnaHAgdmVjMiBwYXJhbSA9IGNvb3JkLnh5OwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzEgPSAwLjA7CiAgICAgICAgY2R3X2VuZCA9IHRleHR1cmVMb2RBKGVkZ2VzVGV4LCBwYXJhbSwgcGFyYW1fMSkueHk7CiAgICAgICAgY3cgPSBkb3QoY2R3X2VuZCwgdmVjMigwLjUpKTsKICAgIH0KICAgIGNvb3JkLncgPSBjdzsKICAgIHJldHVybiBjb29yZC56dzsKfQoKaGlnaHAgdmVjNCBTTUFBRGVjb2RlRGlhZ0JpbGluZWFyQWNjZXNzKGlub3V0IGhpZ2hwIHZlYzQgZSkKewogICAgaGlnaHAgdmVjMiBfMTI5ID0gZS54eiAqIGFicygoZS54eiAqIDUuMCkgLSB2ZWMyKDMuNzUpKTsKICAgIGUgPSB2ZWM0KF8xMjkueCwgZS55LCBfMTI5LnksIGUudyk7CiAgICByZXR1cm4gZmxvb3IoZSArIHZlYzQoMC41KSk7Cn0KCmhpZ2hwIHZlYzIgU01BQUFyZWFEaWFnKGhpZ2hwIHZlYzIgZGlzdCwgaGlnaHAgdmVjMiBlLCBoaWdocCBmbG9hdCBvZmZzZXQpCnsKICAgIGhpZ2hwIHZlYzIgdGV4Y29vcmQgPSAodmVjMigyMC4wKSAqIGUpICsgZGlzdDsKICAgIHRleGNvb3JkID0gKHZlYzIoMC4wMDYyNTAwMDAwOTMxMzIyNTc0NjE1NDc4NTE1NjI1LCAwLjAwMTc4NTcxNDI5NTY5Mjc0MTg3MDg4MDEyNjk1MzEyNSkgKiB0ZXhjb29yZCkgKyB2ZWMyKDAuMDAzMTI1MDAwMDQ2NTY2MTI4NzMwNzczOTI1NzgxMjUsIDAuMDAwODkyODU3MTQ3ODQ2MzcwOTM1NDQwMDYzNDc2NTYyNSk7CiAgICB0ZXhjb29yZC54ICs9IDAuNTsKICAgIHRleGNvb3JkLnkgKz0gKDAuMTQyODU3MTQ5MjQzMzU0Nzk3MzYzMjgxMjUgKiBvZmZzZXQpOwogICAgcmV0dXJuIHRleHR1cmVMb2QoYXJlYVRleCwgdGV4Y29vcmQsIDAuMCkueHk7Cn0KCmhpZ2hwIHZlYzIgU01BQURlY29kZURpYWdCaWxpbmVhckFjY2Vzcyhpbm91dCBoaWdocCB2ZWMyIGUpCnsKICAgIGUueCAqPSBhYnMoKDUuMCAqIGUueCkgLSAzLjc1KTsKICAgIHJldHVybiBmbG9vcihlICsgdmVjMigwLjUpKTsKfQoKaGlnaHAgdmVjMiBTTUFBU2VhcmNoRGlhZzIoaGlnaHAgdmVjMiB0ZXhjb29yZCwgaGlnaHAgdmVjMiBkaXIpCnsKICAgIGhpZ2hwIHZlYzQgY29vcmQgPSB2ZWM0KHRleGNvb3JkLCAtMS4wLCAxLjApOwogICAgY29vcmQueCArPSAoMC4yNSAqIHNjcmVlblNpemVJbnYueCk7CiAgICBoaWdocCB2ZWMzIHQgPSB2ZWMzKHNjcmVlblNpemVJbnYsIDEuMCk7CiAgICBoaWdocCBmbG9hdCBjdyA9IGNvb3JkLnc7CiAgICB3aGlsZSAoKGNvb3JkLnogPCA3LjApICYmIChjdyA%IDAuODk5OTk5OTc2MTU4MTQyMDg5ODQzNzUpKQogICAgewogICAgICAgIGhpZ2hwIHZlYzMgXzI0NCA9ICh0ICogdmVjMyhkaXIsIDEuMCkpICsgY29vcmQueHl6OwogICAgICAgIGNvb3JkID0gdmVjNChfMjQ0LngsIF8yNDQueSwgXzI0NC56LCBjb29yZC53KTsKICAgICAgICBoaWdocCB2ZWMyIHBhcmFtID0gY29vcmQueHk7CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMSA9IDAuMDsKICAgICAgICBjZHdfZW5kID0gdGV4dHVyZUxvZEEoZWRnZXNUZXgsIHBhcmFtLCBwYXJhbV8xKS54eTsKICAgICAgICBoaWdocCB2ZWMyIHBhcmFtXzIgPSBjZHdfZW5kOwogICAgICAgIGhpZ2hwIHZlYzIgXzI1NSA9IFNNQUFEZWNvZGVEaWFnQmlsaW5lYXJBY2Nlc3MocGFyYW1fMik7CiAgICAgICAgY2R3X2VuZCA9IF8yNTU7CiAgICAgICAgY3cgPSBkb3QoY2R3X2VuZCwgdmVjMigwLjUpKTsKICAgIH0KICAgIGNvb3JkLncgPSBjdzsKICAgIHJldHVybiBjb29yZC56dzsKfQoKaGlnaHAgdmVjMiBTTUFBQ2FsY3VsYXRlRGlhZ1dlaWdodHMoaGlnaHAgdmVjMiB0ZXhjb29yZCwgaGlnaHAgdmVjMiBlLCBoaWdocCB2ZWM0IHN1YnNhbXBsZUluZGljZXMpCnsKICAgIGhpZ2hwIHZlYzIgd2VpZ2h0cyA9IHZlYzIoMC4wKTsKICAgIGhpZ2hwIHZlYzQgZDsKICAgIGlmIChlLnggPiAwLjApCiAgICB7CiAgICAgICAgaGlnaHAgdmVjMiBwYXJhbSA9IHRleGNvb3JkOwogICAgICAgIGhpZ2hwIHZlYzIgcGFyYW1fMSA9IHZlYzIoLTEuMCwgMS4wKTsKICAgICAgICBoaWdocCB2ZWMyIF8zMTEgPSBTTUFBU2VhcmNoRGlhZzEocGFyYW0sIHBhcmFtXzEpOwogICAgICAgIGQgPSB2ZWM0KF8zMTEueCwgZC55LCBfMzExLnksIGQudyk7CiAgICAgICAgaGlnaHAgZmxvYXQgZGFkZCA9IGZsb2F0KGNkd19lbmQueSA%IDAuODk5OTk5OTc2MTU4MTQyMDg5ODQzNzUpOwogICAgICAgIGQueCArPSBkYWRkOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGQgPSB2ZWM0KHZlYzIoMC4wKS54LCBkLnksIHZlYzIoMC4wKS55LCBkLncpOwogICAgfQogICAgaGlnaHAgdmVjMiBwYXJhbV8yID0gdGV4Y29vcmQ7CiAgICBoaWdocCB2ZWMyIHBhcmFtXzMgPSB2ZWMyKDEuMCwgLTEuMCk7CiAgICBoaWdocCB2ZWMyIF8zMzIgPSBTTUFBU2VhcmNoRGlhZzEocGFyYW1fMiwgcGFyYW1fMyk7CiAgICBkID0gdmVjNChkLngsIF8zMzIueCwgZC56LCBfMzMyLnkpOwogICAgaWYgKChkLnggKyBkLnkpID4gMi4wKQogICAgewogICAgICAgIGhpZ2hwIHZlYzQgY29vcmRzID0gKHZlYzQoKC1kLngpICsgMC4yNSwgZC54LCBkLnksICgtZC55KSAtIDAuMjUpICogc2NyZWVuU2l6ZUludi54eXh5KSArIHRleGNvb3JkLnh5eHk7CiAgICAgICAgaGlnaHAgdmVjMiBwYXJhbV80ID0gY29vcmRzLnh5ICsgKHZlYzIoLTEuMCwgMC4wKSAqIHNjcmVlblNpemVJbnYpOwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzUgPSAwLjA7CiAgICAgICAgaGlnaHAgdmVjMiBfMzc0ID0gdGV4dHVyZUxvZEEoZWRnZXNUZXgsIHBhcmFtXzQsIHBhcmFtXzUpLnh5OwogICAgICAgIGhpZ2hwIHZlYzQgYzsKICAgICAgICBjID0gdmVjNChfMzc0LngsIF8zNzQueSwgYy56LCBjLncpOwogICAgICAgIGhpZ2hwIHZlYzIgcGFyYW1fNiA9IGNvb3Jkcy56dyArICh2ZWMyKDEuMCwgMC4wKSAqIHNjcmVlblNpemVJbnYpOwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzcgPSAwLjA7CiAgICAgICAgaGlnaHAgdmVjMiBfMzg2ID0gdGV4dHVyZUxvZEEoZWRnZXNUZXgsIHBhcmFtXzYsIHBhcmFtXzcpLnh5OwogICAgICAgIGMgPSB2ZWM0KGMueCwgYy55LCBfMzg2LngsIF8zODYueSk7CiAgICAgICAgaGlnaHAgdmVjNCBwYXJhbV84ID0gYzsKICAgICAgICBoaWdocCB2ZWM0IF8zOTEgPSBTTUFBRGVjb2RlRGlhZ0JpbGluZWFyQWNjZXNzKHBhcmFtXzgpOwogICAgICAgIGMgPSB2ZWM0KF8zOTEueSwgXzM5MS54LCBfMzkxLncsIF8zOTEueik7CiAgICAgICAgaGlnaHAgdmVjMiBjYyA9ICh2ZWMyKDIuMCkgKiBjLnh6KSArIGMueXc7CiAgICAgICAgaGlnaHAgZmxvYXQgYTFjb25keCA9IHN0ZXAoMC44OTk5OTk5NzYxNTgxNDIwODk4NDM3NSwgZC56KTsKICAgICAgICBoaWdocCBmbG9hdCBhMWNvbmR5ID0gc3RlcCgwLjg5OTk5OTk3NjE1ODE0MjA4OTg0Mzc1LCBkLncpOwogICAgICAgIGlmIChhMWNvbmR4ID09IDEuMCkKICAgICAgICB7CiAgICAgICAgICAgIGNjLnggPSAwLjA7CiAgICAgICAgfQogICAgICAgIGlmIChhMWNvbmR5ID09IDEuMCkKICAgICAgICB7CiAgICAgICAgICAgIGNjLnkgPSAwLjA7CiAgICAgICAgfQogICAgICAgIGhpZ2hwIHZlYzIgcGFyYW1fOSA9IGQueHk7CiAgICAgICAgaGlnaHAgdmVjMiBwYXJhbV8xMCA9IGNjOwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzExID0gc3Vic2FtcGxlSW5kaWNlcy56OwogICAgICAgIHdlaWdodHMgKz0gU01BQUFyZWFEaWFnKHBhcmFtXzksIHBhcmFtXzEwLCBwYXJhbV8xMSk7CiAgICB9CiAgICBoaWdocCB2ZWMyIHBhcmFtXzEyID0gdGV4Y29vcmQ7CiAgICBoaWdocCB2ZWMyIHBhcmFtXzEzID0gdmVjMigtMS4wKTsKICAgIGhpZ2hwIHZlYzIgXzQzNSA9IFNNQUFTZWFyY2hEaWFnMihwYXJhbV8xMiwgcGFyYW1fMTMpOwogICAgZCA9IHZlYzQoXzQzNS54LCBkLnksIF80MzUueSwgZC53KTsKICAgIGhpZ2hwIHZlYzIgcGFyYW1fMTQgPSB0ZXhjb29yZCArICh2ZWMyKDEuMCwgMC4wKSAqIHNjcmVlblNpemVJbnYpOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMTUgPSAwLjA7CiAgICBpZiAodGV4dHVyZUxvZEEoZWRnZXNUZXgsIHBhcmFtXzE0LCBwYXJhbV8xNSkueCA%IDAuMCkKICAgIHsKICAgICAgICBoaWdocCB2ZWMyIHBhcmFtXzE2ID0gdGV4Y29vcmQ7CiAgICAgICAgaGlnaHAgdmVjMiBwYXJhbV8xNyA9IHZlYzIoMS4wKTsKICAgICAgICBoaWdocCB2ZWMyIF80NTMgPSBTTUFBU2VhcmNoRGlhZzIocGFyYW1fMTYsIHBhcmFtXzE3KTsKICAgICAgICBkID0gdmVjNChkLngsIF80NTMueCwgZC56LCBfNDUzLnkpOwogICAgICAgIGhpZ2hwIGZsb2F0IGRhZGRfMSA9IGZsb2F0KGNkd19lbmQueSA%%IDAuODI4MTAwMDI1NjUzODM5MTExMzI4MTI1OwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBfNzcxID0gXzc2NTsKICAgICAgICB9CiAgICAgICAgYm9vbCBfNzc3OwogICAgICAgIGlmIChfNzcxKQogICAgICAgIHsKICAgICAgICAgICAgXzc3NyA9IGUueSA9PSAwLjA7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIF83NzcgPSBfNzcxOwogICAgICAgIH0KICAgICAgICBpZiAoXzc3NykKICAgICAgICB7CiAgICAgICAgICAgIGhpZ2hwIHZlYzIgcGFyYW0gPSB0ZXhjb29yZDsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMSA9IDAuMDsKICAgICAgICAgICAgZSA9IHRleHR1cmVMb2RBKGVkZ2VzVGV4LCBwYXJhbSwgcGFyYW1fMSkueHk7CiAgICAgICAgICAgIHRleGNvb3JkID0gKHZlYzIoMC4wLCAyLjApICogc2NyZWVuU2l6ZUludikgKyB0ZXhjb29yZDsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgIH0KICAgIGhpZ2hwIHZlYzIgcGFyYW1fMiA9IGUueXg7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8zID0gMC41OwogICAgaGlnaHAgZmxvYXQgb2Zmc2V0ID0gKCgtMi4wMDc4NzQwMTE5OTM0MDgyMDMxMjUpICogU01BQVNlYXJjaExlbmd0aChwYXJhbV8yLCBwYXJhbV8zKSkgKyAzLjI1OwogICAgcmV0dXJuICgoLXNjcmVlblNpemVJbnYueSkgKiBvZmZzZXQpICsgdGV4Y29vcmQueTsKfQoKaGlnaHAgdmVjMiBTTUFBRGV0ZWN0VmVydGljYWxDb3JuZXJQYXR0ZXJuKGlub3V0IGhpZ2hwIHZlYzIgd2VpZ2h0cywgaGlnaHAgdmVjNCB0ZXhjb29yZCwgaGlnaHAgdmVjMiBkKQp7CiAgICBoaWdocCB2ZWMyIGxlZnRSaWdodCA9IHN0ZXAoZCwgZC55eCk7CiAgICBoaWdocCB2ZWMyIHJvdW5kaW5nID0gbGVmdFJpZ2h0ICogMC43NTsKICAgIHJvdW5kaW5nIC89IHZlYzIobGVmdFJpZ2h0LnggKyBsZWZ0UmlnaHQueSk7CiAgICBoaWdocCB2ZWMyIGZhY3RvciA9IHZlYzIoMS4wKTsKICAgIGhpZ2hwIHZlYzIgcGFyYW0gPSB0ZXhjb29yZC54eSArICh2ZWMyKDEuMCwgMC4wKSAqIHNjcmVlblNpemVJbnYpOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMSA9IDAuMDsKICAgIGZhY3Rvci54IC09IChyb3VuZGluZy54ICogdGV4dHVyZUxvZEEoZWRnZXNUZXgsIHBhcmFtLCBwYXJhbV8xKS55KTsKICAgIGhpZ2hwIHZlYzIgcGFyYW1fMiA9IHRleGNvb3JkLnp3ICsgKHZlYzIoMS4wKSAqIHNjcmVlblNpemVJbnYpOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMyA9IDAuMDsKICAgIGZhY3Rvci54IC09IChyb3VuZGluZy55ICogdGV4dHVyZUxvZEEoZWRnZXNUZXgsIHBhcmFtXzIsIHBhcmFtXzMpLnkpOwogICAgaGlnaHAgdmVjMiBwYXJhbV80ID0gdGV4Y29vcmQueHkgKyAodmVjMigtMi4wLCAwLjApICogc2NyZWVuU2l6ZUludik7CiAgICBoaWdocCBmbG9hdCBwYXJhbV81ID0gMC4wOwogICAgZmFjdG9yLnkgLT0gKHJvdW5kaW5nLnggKiB0ZXh0dXJlTG9kQShlZGdlc1RleCwgcGFyYW1fNCwgcGFyYW1fNSkueSk7CiAgICBoaWdocCB2ZWMyIHBhcmFtXzYgPSB0ZXhjb29yZC56dyArICh2ZWMyKC0yLjAsIDEuMCkgKiBzY3JlZW5TaXplSW52KTsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzcgPSAwLjA7CiAgICBmYWN0b3IueSAtPSAocm91bmRpbmcueSAqIHRleHR1cmVMb2RBKGVkZ2VzVGV4LCBwYXJhbV82LCBwYXJhbV83KS55KTsKICAgIHdlaWdodHMgKj0gY2xhbXAoZmFjdG9yLCB2ZWMyKDAuMCksIHZlYzIoMS4wKSk7CiAgICByZXR1cm4gd2VpZ2h0czsKfQoKaGlnaHAgdmVjNCBTTUFBQmxlbmRpbmdXZWlnaHRDYWxjdWxhdGlvblBTKGhpZ2hwIHZlYzIgdGV4Y29vcmQsIGhpZ2hwIHZlYzIgcGl4Y29vcmRfMSwgaGlnaHAgdmVjNCBzdWJzYW1wbGVJbmRpY2VzKQp7CiAgICBoaWdocCB2ZWM0IHdlaWdodHMgPSB2ZWM0KDAuMCk7CiAgICBoaWdocCB2ZWMyIHBhcmFtID0gdGV4Y29vcmQ7CiAgICBoaWdocCBmbG9hdCBwYXJhbV8xID0gMC4wOwogICAgaGlnaHAgdmVjMiBlID0gdGV4dHVyZUxvZEEoZWRnZXNUZXgsIHBhcmFtLCBwYXJhbV8xKS54eTsKICAgIGlmIChlLnkgPiAwLjApCiAgICB7CiAgICAgICAgaGlnaHAgdmVjMiBwYXJhbV8yID0gdGV4Y29vcmQ7CiAgICAgICAgaGlnaHAgdmVjMiBwYXJhbV8zID0gZTsKICAgICAgICBoaWdocCB2ZWM0IHBhcmFtXzQgPSBzdWJzYW1wbGVJbmRpY2VzOwogICAgICAgIGhpZ2hwIHZlYzIgXzEwMzkgPSBTTUFBQ2FsY3VsYXRlRGlhZ1dlaWdodHMocGFyYW1fMiwgcGFyYW1fMywgcGFyYW1fNCk7CiAgICAgICAgd2VpZ2h0cyA9IHZlYzQoXzEwMzkueCwgXzEwMzkueSwgd2VpZ2h0cy56LCB3ZWlnaHRzLncpOwogICAgICAgIGlmICh3ZWlnaHRzLnggPT0gKC13ZWlnaHRzLnkpKQogICAgICAgIHsKICAgICAgICAgICAgaGlnaHAgdmVjMiBwYXJhbV81ID0gb2Zmc2V0MC54eTsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fNiA9IG9mZnNldDIueDsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgXzEwNjEgPSBTTUFBU2VhcmNoWExlZnQocGFyYW1fNSwgcGFyYW1fNik7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgY29vcmRzOwogICAgICAgICAgICBjb29yZHMueCA9IF8xMDYxOwogICAgICAgICAgICBjb29yZHMueSA9IG9mZnNldDEueTsKICAgICAgICAgICAgaGlnaHAgdmVjMiBkOwogICAgICAgICAgICBkLnggPSBjb29yZHMueDsKICAgICAgICAgICAgaGlnaHAgdmVjMiBwYXJhbV83ID0gY29vcmRzLnh5OwogICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV84ID0gMC4wOwogICAgICAgICAgICBoaWdocCBmbG9hdCBlMSA9IHRleHR1cmVMb2RBKGVkZ2VzVGV4LCBwYXJhbV83LCBwYXJhbV84KS54OwogICAgICAgICAgICBoaWdocCB2ZWMyIHBhcmFtXzkgPSBvZmZzZXQwLnp3OwogICAgICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8xMCA9IG9mZnNldDIueTsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgXzEwODQgPSBTTUFBU2VhcmNoWFJpZ2h0KHBhcmFtXzksIHBhcmFtXzEwKTsKICAgICAgICAgICAgY29vcmRzLnogPSBfMTA4NDsKICAgICAgICAgICAgZC55ID0gY29vcmRzLno7CiAgICAgICAgICAgIGQgPSBhYnMoZmxvb3IoKChzY3JlZW5TaXplLnh4ICogZCkgKyAoLXBpeGNvb3JkXzEueHgpKSArIHZlYzIoMC41KSkpOwogICAgICAgICAgICBoaWdocCB2ZWMyIHNxcnRfZCA9IHNxcnQoZCk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzIgcGFyYW1fMTEgPSBjb29yZHMuenkgKyAodmVjMigxLjAsIDAuMCkgKiBzY3JlZW5TaXplSW52KTsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMTIgPSAwLjA7CiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IGUyID0gdGV4dHVyZUxvZEEoZWRnZXNUZXgsIHBhcmFtXzExLCBwYXJhbV8xMikueDsKICAgICAgICAgICAgaGlnaHAgdmVjMiBwYXJhbV8xMyA9IHNxcnRfZDsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMTQgPSBlMTsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMTUgPSBlMjsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMTYgPSBzdWJzYW1wbGVJbmRpY2VzLnk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzIgXzExMjQgPSBTTUFBQXJlYShwYXJhbV8xMywgcGFyYW1fMTQsIHBhcmFtXzE1LCBwYXJhbV8xNik7CiAgICAgICAgICAgIHdlaWdodHMgPSB2ZWM0KF8xMTI0LngsIF8xMTI0LnksIHdlaWdodHMueiwgd2VpZ2h0cy53KTsKICAgICAgICAgICAgY29vcmRzLnkgPSB0ZXhjb29yZC55OwogICAgICAgICAgICBoaWdocCB2ZWMyIHBhcmFtXzE3ID0gd2VpZ2h0cy54eTsKICAgICAgICAgICAgaGlnaHAgdmVjNCBwYXJhbV8xOCA9IGNvb3Jkcy54eXp5OwogICAgICAgICAgICBoaWdocCB2ZWMyIHBhcmFtXzE5ID0gZDsKICAgICAgICAgICAgaGlnaHAgdmVjMiBfMTEzOCA9IFNNQUFEZXRlY3RIb3Jpem9udGFsQ29ybmVyUGF0dGVybihwYXJhbV8xNywgcGFyYW1fMTgsIHBhcmFtXzE5KTsKICAgICAgICAgICAgd2VpZ2h0cyA9IHZlYzQoXzExMzgueCwgXzExMzgueSwgd2VpZ2h0cy56LCB3ZWlnaHRzLncpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBlLnggPSAwLjA7CiAgICAgICAgfQogICAgfQogICAgaWYgKGUueCA%IDAuMCkKICAgIHsKICAgICAgICBoaWdocCB2ZWMyIHBhcmFtXzIwID0gb2Zmc2V0MS54eTsKICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8yMSA9IG9mZnNldDIuejsKICAgICAgICBoaWdocCBmbG9hdCBfMTE1NSA9IFNNQUFTZWFyY2hZVXAocGFyYW1fMjAsIHBhcmFtXzIxKTsKICAgICAgICBoaWdocCB2ZWMzIGNvb3Jkc18xOwogICAgICAgIGNvb3Jkc18xLnkgPSBfMTE1NTsKICAgICAgICBjb29yZHNfMS54ID0gb2Zmc2V0MC54OwogICAgICAgIGhpZ2hwIHZlYzIgZF8xOwogICAgICAgIGRfMS54ID0gY29vcmRzXzEueTsKICAgICAgICBoaWdocCB2ZWMyIHBhcmFtXzIyID0gY29vcmRzXzEueHk7CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMjMgPSAwLjA7CiAgICAgICAgaGlnaHAgZmxvYXQgZTFfMSA9IHRleHR1cmVMb2RBKGVkZ2VzVGV4LCBwYXJhbV8yMiwgcGFyYW1fMjMpLnk7CiAgICAgICAgaGlnaHAgdmVjMiBwYXJhbV8yNCA9IG9mZnNldDEuenc7CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMjUgPSBvZmZzZXQyLnc7CiAgICAgICAgaGlnaHAgZmxvYXQgXzExNzcgPSBTTUFBU2VhcmNoWURvd24ocGFyYW1fMjQsIHBhcmFtXzI1KTsKICAgICAgICBjb29yZHNfMS56ID0gXzExNzc7CiAgICAgICAgZF8xLnkgPSBjb29yZHNfMS56OwogICAgICAgIGRfMSA9IGFicyhmbG9vcigoKHNjcmVlblNpemUueXkgKiBkXzEpICsgKC1waXhjb29yZF8xLnl5KSkgKyB2ZWMyKDAuNSkpKTsKICAgICAgICBoaWdocCB2ZWMyIHNxcnRfZF8xID0gc3FydChkXzEpOwogICAgICAgIGhpZ2hwIHZlYzIgcGFyYW1fMjYgPSBjb29yZHNfMS54eiArICh2ZWMyKDAuMCwgMS4wKSAqIHNjcmVlblNpemVJbnYpOwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzI3ID0gMC4wOwogICAgICAgIGhpZ2hwIGZsb2F0IGUyXzEgPSB0ZXh0dXJlTG9kQShlZGdlc1RleCwgcGFyYW1fMjYsIHBhcmFtXzI3KS55OwogICAgICAgIGhpZ2hwIHZlYzIgcGFyYW1fMjggPSBzcXJ0X2RfMTsKICAgICAgICBoaWdocCBmbG9hdCBwYXJhbV8yOSA9IGUxXzE7CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMzAgPSBlMl8xOwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMxID0gc3Vic2FtcGxlSW5kaWNlcy54OwogICAgICAgIGhpZ2hwIHZlYzIgXzEyMTYgPSBTTUFBQXJlYShwYXJhbV8yOCwgcGFyYW1fMjksIHBhcmFtXzMwLCBwYXJhbV8zMSk7CiAgICAgICAgd2VpZ2h0cyA9IHZlYzQod2VpZ2h0cy54LCB3ZWlnaHRzLnksIF8xMjE2LngsIF8xMjE2LnkpOwogICAgICAgIGNvb3Jkc18xLnggPSB0ZXhjb29yZC54OwogICAgICAgIGhpZ2hwIHZlYzIgcGFyYW1fMzIgPSB3ZWlnaHRzLnp3OwogICAgICAgIGhpZ2hwIHZlYzQgcGFyYW1fMzMgPSBjb29yZHNfMS54eXh6OwogICAgICAgIGhpZ2hwIHZlYzIgcGFyYW1fMzQgPSBkXzE7CiAgICAgICAgaGlnaHAgdmVjMiBfMTIzMCA9IFNNQUFEZXRlY3RWZXJ0aWNhbENvcm5lclBhdHRlcm4ocGFyYW1fMzIsIHBhcmFtXzMzLCBwYXJhbV8zNCk7CiAgICAgICAgd2VpZ2h0cyA9IHZlYzQod2VpZ2h0cy54LCB3ZWlnaHRzLnksIF8xMjMwLngsIF8xMjMwLnkpOwogICAgfQogICAgcmV0dXJuIHdlaWdodHM7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzIgcGFyYW0gPSB0ZXhDb29yZDsKICAgIGhpZ2hwIHZlYzIgcGFyYW1fMSA9IHBpeGNvb3JkOwogICAgaGlnaHAgdmVjNCBwYXJhbV8yID0gdmVjNCgwLjApOwogICAgaGlnaHAgdmVjNCBfMTI0NiA9IFNNQUFCbGVuZGluZ1dlaWdodENhbGN1bGF0aW9uUFMocGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIpOwogICAgZnJhZ0NvbG9yID0gXzEyNDY7Cn0KCg";
kha_Shaders.smaa_blend_weight_vertData0 = "s791:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZTsKdW5pZm9ybSB2ZWMyIHNjcmVlblNpemVJbnY7CgpvdXQgdmVjMiB0ZXhDb29yZDsKaW4gdmVjMiBwb3M7Cm91dCB2ZWMyIHBpeGNvb3JkOwpvdXQgdmVjNCBvZmZzZXQwOwpvdXQgdmVjNCBvZmZzZXQxOwpvdXQgdmVjNCBvZmZzZXQyOwoKdm9pZCBtYWluKCkKewogICAgdGV4Q29vcmQgPSAocG9zICogdmVjMigwLjUpKSArIHZlYzIoMC41KTsKICAgIHBpeGNvb3JkID0gdGV4Q29vcmQgKiBzY3JlZW5TaXplOwogICAgb2Zmc2V0MCA9IChzY3JlZW5TaXplSW52Lnh5eHkgKiB2ZWM0KC0wLjI1LCAtMC4xMjUsIDEuMjUsIC0wLjEyNSkpICsgdGV4Q29vcmQueHl4eTsKICAgIG9mZnNldDEgPSAoc2NyZWVuU2l6ZUludi54eXh5ICogdmVjNCgtMC4xMjUsIC0wLjI1LCAtMC4xMjUsIDEuMjUpKSArIHRleENvb3JkLnh5eHk7CiAgICBvZmZzZXQyID0gKHNjcmVlblNpemVJbnYueHh5eSAqIHZlYzQoLTMyLjAsIDMyLjAsIC0zMi4wLCAzMi4wKSkgKyB2ZWM0KG9mZnNldDAueHosIG9mZnNldDEueXcpOwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwp9Cgo";
kha_Shaders.smaa_edge_detect_fragData0 = "s2311:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgY29sb3JUZXg7CgppbiBoaWdocCB2ZWM0IG9mZnNldDA7CmluIGhpZ2hwIHZlYzQgb2Zmc2V0MTsKaW4gaGlnaHAgdmVjNCBvZmZzZXQyOwpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3I7CmluIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7CgpoaWdocCB2ZWMyIFNNQUFDb2xvckVkZ2VEZXRlY3Rpb25QUyhoaWdocCB2ZWMyIHRleGNvb3JkKQp7CiAgICBoaWdocCB2ZWMyIHRocmVzaG9sZCA9IHZlYzIoMC4xMDAwMDAwMDE0OTAxMTYxMTkzODQ3NjU2MjUpOwogICAgaGlnaHAgdmVjMyBDID0gdGV4dHVyZUxvZChjb2xvclRleCwgdGV4Y29vcmQsIDAuMCkueHl6OwogICAgaGlnaHAgdmVjMyBDbGVmdCA9IHRleHR1cmVMb2QoY29sb3JUZXgsIG9mZnNldDAueHksIDAuMCkueHl6OwogICAgaGlnaHAgdmVjMyB0ID0gYWJzKEMgLSBDbGVmdCk7CiAgICBoaWdocCB2ZWM0IGRlbHRhOwogICAgZGVsdGEueCA9IG1heChtYXgodC54LCB0LnkpLCB0LnopOwogICAgaGlnaHAgdmVjMyBDdG9wID0gdGV4dHVyZUxvZChjb2xvclRleCwgb2Zmc2V0MC56dywgMC4wKS54eXo7CiAgICB0ID0gYWJzKEMgLSBDdG9wKTsKICAgIGRlbHRhLnkgPSBtYXgobWF4KHQueCwgdC55KSwgdC56KTsKICAgIGhpZ2hwIHZlYzIgZWRnZXMgPSBzdGVwKHRocmVzaG9sZCwgZGVsdGEueHkpOwogICAgaWYgKGRvdChlZGdlcywgdmVjMigxLjApKSA9PSAwLjApCiAgICB7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGhpZ2hwIHZlYzMgQ3JpZ2h0ID0gdGV4dHVyZUxvZChjb2xvclRleCwgb2Zmc2V0MS54eSwgMC4wKS54eXo7CiAgICB0ID0gYWJzKEMgLSBDcmlnaHQpOwogICAgZGVsdGEueiA9IG1heChtYXgodC54LCB0LnkpLCB0LnopOwogICAgaGlnaHAgdmVjMyBDYm90dG9tID0gdGV4dHVyZUxvZChjb2xvclRleCwgb2Zmc2V0MS56dywgMC4wKS54eXo7CiAgICB0ID0gYWJzKEMgLSBDYm90dG9tKTsKICAgIGRlbHRhLncgPSBtYXgobWF4KHQueCwgdC55KSwgdC56KTsKICAgIGhpZ2hwIHZlYzIgbWF4RGVsdGEgPSBtYXgoZGVsdGEueHksIGRlbHRhLnp3KTsKICAgIGhpZ2hwIHZlYzMgQ2xlZnRsZWZ0ID0gdGV4dHVyZUxvZChjb2xvclRleCwgb2Zmc2V0Mi54eSwgMC4wKS54eXo7CiAgICB0ID0gYWJzKEMgLSBDbGVmdGxlZnQpOwogICAgZGVsdGEueiA9IG1heChtYXgodC54LCB0LnkpLCB0LnopOwogICAgaGlnaHAgdmVjMyBDdG9wdG9wID0gdGV4dHVyZUxvZChjb2xvclRleCwgb2Zmc2V0Mi56dywgMC4wKS54eXo7CiAgICB0ID0gYWJzKEMgLSBDdG9wdG9wKTsKICAgIGRlbHRhLncgPSBtYXgobWF4KHQueCwgdC55KSwgdC56KTsKICAgIG1heERlbHRhID0gbWF4KG1heERlbHRhLCBkZWx0YS56dyk7CiAgICBoaWdocCBmbG9hdCBmaW5hbERlbHRhID0gbWF4KG1heERlbHRhLngsIG1heERlbHRhLnkpOwogICAgZWRnZXMgKj0gc3RlcCh2ZWMyKGZpbmFsRGVsdGEpLCBkZWx0YS54eSAqIDIuMCk7CiAgICByZXR1cm4gZWRnZXM7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzIgcGFyYW0gPSB0ZXhDb29yZDsKICAgIGhpZ2hwIHZlYzIgXzIwNCA9IFNNQUFDb2xvckVkZ2VEZXRlY3Rpb25QUyhwYXJhbSk7CiAgICBmcmFnQ29sb3IgPSB2ZWM0KF8yMDQueCwgXzIwNC55LCBmcmFnQ29sb3IueiwgZnJhZ0NvbG9yLncpOwp9Cgo";
kha_Shaders.smaa_edge_detect_vertData0 = "s635:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZUludjsKCm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHBvczsKb3V0IHZlYzQgb2Zmc2V0MDsKb3V0IHZlYzQgb2Zmc2V0MTsKb3V0IHZlYzQgb2Zmc2V0MjsKCnZvaWQgbWFpbigpCnsKICAgIHRleENvb3JkID0gKHBvcyAqIHZlYzIoMC41KSkgKyB2ZWMyKDAuNSk7CiAgICBvZmZzZXQwID0gKHNjcmVlblNpemVJbnYueHl4eSAqIHZlYzQoLTEuMCwgMC4wLCAwLjAsIC0xLjApKSArIHRleENvb3JkLnh5eHk7CiAgICBvZmZzZXQxID0gKHNjcmVlblNpemVJbnYueHl4eSAqIHZlYzQoMS4wLCAwLjAsIDAuMCwgMS4wKSkgKyB0ZXhDb29yZC54eXh5OwogICAgb2Zmc2V0MiA9IChzY3JlZW5TaXplSW52Lnh5eHkgKiB2ZWM0KC0yLjAsIDAuMCwgMC4wLCAtMi4wKSkgKyB0ZXhDb29yZC54eXh5OwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwp9Cgo";
kha_Shaders.smaa_neighborhood_blend_fragData0 = "s2638:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgYmxlbmRUZXg7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGNvbG9yVGV4Owp1bmlmb3JtIGhpZ2hwIHZlYzIgc2NyZWVuU2l6ZUludjsKCm91dCBoaWdocCB2ZWM0IGZyYWdDb2xvcjsKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBvZmZzZXQ7CgpoaWdocCB2ZWM0IHRleHR1cmVMb2RBKGhpZ2hwIHNhbXBsZXIyRCB0ZXgsIGhpZ2hwIHZlYzIgY29vcmRzLCBoaWdocCBmbG9hdCBsb2QpCnsKICAgIHJldHVybiB0ZXh0dXJlTG9kKHRleCwgY29vcmRzLCBsb2QpOwp9CgpoaWdocCB2ZWM0IFNNQUFOZWlnaGJvcmhvb2RCbGVuZGluZ1BTKGhpZ2hwIHZlYzIgdGV4Y29vcmQsIGhpZ2hwIHZlYzQgb2Zmc2V0XzEpCnsKICAgIGhpZ2hwIHZlYzQgYTsKICAgIGEueCA9IHRleHR1cmVMb2QoYmxlbmRUZXgsIG9mZnNldF8xLnh5LCAwLjApLnc7CiAgICBhLnkgPSB0ZXh0dXJlTG9kKGJsZW5kVGV4LCBvZmZzZXRfMS56dywgMC4wKS55OwogICAgaGlnaHAgdmVjMiBfNTQgPSB0ZXh0dXJlTG9kKGJsZW5kVGV4LCB0ZXhjb29yZCwgMC4wKS54ejsKICAgIGEgPSB2ZWM0KGEueCwgYS55LCBfNTQueSwgXzU0LngpOwogICAgaWYgKGRvdChhLCB2ZWM0KDEuMCkpIDwgOS45OTk5OTk3NDczNzg3NTE2MzU1NTE0NTI2MzY3MTg4ZS0wNikKICAgIHsKICAgICAgICBoaWdocCB2ZWM0IGNvbG9yID0gdGV4dHVyZUxvZChjb2xvclRleCwgdGV4Y29vcmQsIDAuMCk7CiAgICAgICAgcmV0dXJuIGNvbG9yOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGJvb2wgaCA9IG1heChhLngsIGEueikgPiBtYXgoYS55LCBhLncpOwogICAgICAgIGhpZ2hwIHZlYzQgYmxlbmRpbmdPZmZzZXQgPSB2ZWM0KDAuMCwgYS55LCAwLjAsIGEudyk7CiAgICAgICAgaGlnaHAgdmVjMiBibGVuZGluZ1dlaWdodCA9IGEueXc7CiAgICAgICAgaWYgKGgpCiAgICAgICAgewogICAgICAgICAgICBibGVuZGluZ09mZnNldC54ID0gYS54OwogICAgICAgICAgICBibGVuZGluZ09mZnNldC55ID0gMC4wOwogICAgICAgICAgICBibGVuZGluZ09mZnNldC56ID0gYS56OwogICAgICAgICAgICBibGVuZGluZ09mZnNldC53ID0gMC4wOwogICAgICAgICAgICBibGVuZGluZ1dlaWdodC54ID0gYS54OwogICAgICAgICAgICBibGVuZGluZ1dlaWdodC55ID0gYS56OwogICAgICAgIH0KICAgICAgICBibGVuZGluZ1dlaWdodCAvPSB2ZWMyKGRvdChibGVuZGluZ1dlaWdodCwgdmVjMigxLjApKSk7CiAgICAgICAgaGlnaHAgdmVjMiB0YyA9IHRleGNvb3JkOwogICAgICAgIGhpZ2hwIHZlYzQgYmxlbmRpbmdDb29yZCA9IChibGVuZGluZ09mZnNldCAqIHZlYzQoc2NyZWVuU2l6ZUludiwgLXNjcmVlblNpemVJbnYpKSArIHRjLnh5eHk7CiAgICAgICAgaGlnaHAgdmVjMiBwYXJhbSA9IGJsZW5kaW5nQ29vcmQueHk7CiAgICAgICAgaGlnaHAgZmxvYXQgcGFyYW1fMSA9IDAuMDsKICAgICAgICBoaWdocCB2ZWM0IGNvbG9yXzEgPSB0ZXh0dXJlTG9kQShjb2xvclRleCwgcGFyYW0sIHBhcmFtXzEpICogYmxlbmRpbmdXZWlnaHQueDsKICAgICAgICBoaWdocCB2ZWMyIHBhcmFtXzIgPSBibGVuZGluZ0Nvb3JkLnp3OwogICAgICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMgPSAwLjA7CiAgICAgICAgY29sb3JfMSArPSAodGV4dHVyZUxvZEEoY29sb3JUZXgsIHBhcmFtXzIsIHBhcmFtXzMpICogYmxlbmRpbmdXZWlnaHQueSk7CiAgICAgICAgcmV0dXJuIGNvbG9yXzE7CiAgICB9CiAgICByZXR1cm4gdmVjNCgwLjApOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWMyIHBhcmFtID0gdGV4Q29vcmQ7CiAgICBoaWdocCB2ZWM0IHBhcmFtXzEgPSBvZmZzZXQ7CiAgICBmcmFnQ29sb3IgPSBTTUFBTmVpZ2hib3Job29kQmxlbmRpbmdQUyhwYXJhbSwgcGFyYW1fMSk7Cn0KCg";
kha_Shaders.smaa_neighborhood_blend_vertData0 = "s368:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZUludjsKCm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHBvczsKb3V0IHZlYzQgb2Zmc2V0OwoKdm9pZCBtYWluKCkKewogICAgdGV4Q29vcmQgPSAocG9zICogdmVjMigwLjUpKSArIHZlYzIoMC41KTsKICAgIG9mZnNldCA9IChzY3JlZW5TaXplSW52Lnh5eHkgKiB2ZWM0KDEuMCwgMC4wLCAwLjAsIDEuMCkpICsgdGV4Q29vcmQueHl4eTsKICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3MsIDAuMCwgMS4wKTsKfQoK";
kha_Shaders.ssao_pass_fragData0 = "s3547:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgZ2J1ZmZlckQ7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGdidWZmZXIwOwp1bmlmb3JtIGhpZ2hwIHZlYzMgZXllTG9vazsKdW5pZm9ybSBoaWdocCB2ZWMyIGNhbWVyYVByb2o7CnVuaWZvcm0gaGlnaHAgdmVjMiBzY3JlZW5TaXplOwp1bmlmb3JtIGhpZ2hwIHZlYzMgZXllOwp1bmlmb3JtIGhpZ2hwIG1hdDQgaW52VlA7CgppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgZmxvYXQgZnJhZ0NvbG9yOwppbiBoaWdocCB2ZWMzIHZpZXdSYXk7CgpoaWdocCB2ZWMyIG9jdGFoZWRyb25XcmFwKGhpZ2hwIHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCmhpZ2hwIHZlYzMgZ2V0UG9zTm9FeWUoaGlnaHAgdmVjMyBleWVMb29rXzEsIGhpZ2hwIHZlYzMgdmlld1JheV8xLCBoaWdocCBmbG9hdCBkZXB0aCwgaGlnaHAgdmVjMiBjYW1lcmFQcm9qXzEpCnsKICAgIGhpZ2hwIGZsb2F0IGxpbmVhckRlcHRoID0gY2FtZXJhUHJval8xLnkgLyAoKChkZXB0aCAqIDAuNSkgKyAwLjUpIC0gY2FtZXJhUHJval8xLngpOwogICAgaGlnaHAgZmxvYXQgdmlld1pEaXN0ID0gZG90KGV5ZUxvb2tfMSwgdmlld1JheV8xKTsKICAgIGhpZ2hwIHZlYzMgd3Bvc2l0aW9uID0gdmlld1JheV8xICogKGxpbmVhckRlcHRoIC8gdmlld1pEaXN0KTsKICAgIHJldHVybiB3cG9zaXRpb247Cn0KCmhpZ2hwIHZlYzMgZ2V0UG9zMk5vRXllKGhpZ2hwIHZlYzMgZXllXzEsIGhpZ2hwIG1hdDQgaW52VlBfMSwgaGlnaHAgZmxvYXQgZGVwdGgsIGhpZ2hwIHZlYzIgY29vcmQpCnsKICAgIGhpZ2hwIHZlYzQgcG9zID0gdmVjNCgoY29vcmQgKiAyLjApIC0gdmVjMigxLjApLCBkZXB0aCwgMS4wKTsKICAgIHBvcyA9IGludlZQXzEgKiBwb3M7CiAgICBoaWdocCB2ZWMzIF84NyA9IHBvcy54eXogLyB2ZWMzKHBvcy53KTsKICAgIHBvcyA9IHZlYzQoXzg3LngsIF84Ny55LCBfODcueiwgcG9zLncpOwogICAgcmV0dXJuIHBvcy54eXogLSBleWVfMTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgZmxvYXQgZGVwdGggPSAodGV4dHVyZUxvZChnYnVmZmVyRCwgdGV4Q29vcmQsIDAuMCkueCAqIDIuMCkgLSAxLjA7CiAgICBpZiAoZGVwdGggPT0gMS4wKQogICAgewogICAgICAgIGZyYWdDb2xvciA9IDEuMDsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBoaWdocCB2ZWMyIGVuYyA9IHRleHR1cmVMb2QoZ2J1ZmZlcjAsIHRleENvb3JkLCAwLjApLnh5OwogICAgaGlnaHAgdmVjMyBuOwogICAgbi56ID0gKDEuMCAtIGFicyhlbmMueCkpIC0gYWJzKGVuYy55KTsKICAgIGhpZ2hwIHZlYzIgXzEzNjsKICAgIGlmIChuLnogPj0gMC4wKQogICAgewogICAgICAgIF8xMzYgPSBlbmM7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzEzNiA9IG9jdGFoZWRyb25XcmFwKGVuYyk7CiAgICB9CiAgICBuID0gdmVjMyhfMTM2LngsIF8xMzYueSwgbi56KTsKICAgIG4gPSBub3JtYWxpemUobik7CiAgICBoaWdocCB2ZWMzIHZyYXkgPSBub3JtYWxpemUodmlld1JheSk7CiAgICBoaWdocCB2ZWMzIGN1cnJlbnRQb3MgPSBnZXRQb3NOb0V5ZShleWVMb29rLCB2cmF5LCBkZXB0aCwgY2FtZXJhUHJvaik7CiAgICBoaWdocCBmbG9hdCBjdXJyZW50RGlzdGFuY2UgPSBsZW5ndGgoY3VycmVudFBvcyk7CiAgICBoaWdocCBmbG9hdCBjdXJyZW50RGlzdGFuY2VBID0gKGN1cnJlbnREaXN0YW5jZSAqIDIwLjApICogMS4wOwogICAgaGlnaHAgZmxvYXQgY3VycmVudERpc3RhbmNlQiA9IGN1cnJlbnREaXN0YW5jZSAqIDAuMDAwNTAwMDAwMDIzNzQ4NzI1NjUyNjk0NzAyMTQ4NDM3NTsKICAgIGl2ZWMyIHB4ID0gaXZlYzIodGV4Q29vcmQgKiBzY3JlZW5TaXplKTsKICAgIGhpZ2hwIGZsb2F0IHBoaSA9IGZsb2F0KCgoMyAqIHB4LngpIF4gKHB4LnkgKyAocHgueCAqIHB4LnkpKSkgKiAxMCk7CiAgICBmcmFnQ29sb3IgPSAwLjA7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDg7IGkrKykKICAgIHsKICAgICAgICBoaWdocCBmbG9hdCB0aGV0YSA9ICgwLjc4NTM5ODE4NTI1MzE0MzMxMDU0Njg3NSAqIChmbG9hdChpKSArIDAuNSkpICsgcGhpOwogICAgICAgIGhpZ2hwIHZlYzIgayA9IHZlYzIoY29zKHRoZXRhKSwgc2luKHRoZXRhKSkgLyB2ZWMyKGN1cnJlbnREaXN0YW5jZUEpOwogICAgICAgIGRlcHRoID0gKHRleHR1cmVMb2QoZ2J1ZmZlckQsIHRleENvb3JkICsgaywgMC4wKS54ICogMi4wKSAtIDEuMDsKICAgICAgICBoaWdocCB2ZWMzIHBvcyA9IGdldFBvczJOb0V5ZShleWUsIGludlZQLCBkZXB0aCwgdGV4Q29vcmQgKyBrKSAtIGN1cnJlbnRQb3M7CiAgICAgICAgZnJhZ0NvbG9yICs9IChtYXgoMC4wLCBkb3QocG9zLCBuKSAtIGN1cnJlbnREaXN0YW5jZUIpIC8gKGRvdChwb3MsIHBvcykgKyAwLjAxNDk5OTk5OTY2NDcyMzg3MzEzODQyNzczNDM3NSkpOwogICAgfQogICAgZnJhZ0NvbG9yICo9IDAuMDM3NTAwMDAxNDkwMTE2MTE5Mzg0NzY1NjI1OwogICAgZnJhZ0NvbG9yID0gMS4wIC0gZnJhZ0NvbG9yOwp9Cgo";
kha_Shaders.ssr_pass_fragData0 = "s5903:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBtYXQ0IFA7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGdidWZmZXJEOwp1bmlmb3JtIGhpZ2hwIHZlYzIgY2FtZXJhUHJvajsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgZ2J1ZmZlcjA7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGdidWZmZXIxOwp1bmlmb3JtIGhpZ2hwIG1hdDMgVjM7CnVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHRleDsKCmluIGhpZ2hwIHZlYzMgdmlld1JheTsKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKb3V0IGhpZ2hwIHZlYzQgZnJhZ0NvbG9yOwpoaWdocCBmbG9hdCBkZXB0aDsKaGlnaHAgdmVjMyBoaXRDb29yZDsKCmhpZ2hwIHZlYzIgb2N0YWhlZHJvbldyYXAoaGlnaHAgdmVjMiB2KQp7CiAgICByZXR1cm4gKHZlYzIoMS4wKSAtIGFicyh2Lnl4KSkgKiB2ZWMyKCh2LnggPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSwgKHYueSA%PSAwLjApID8gMS4wIDogKC0xLjApKTsKfQoKaGlnaHAgdmVjMyBnZXRQb3NWaWV3KGhpZ2hwIHZlYzMgdmlld1JheV8xLCBoaWdocCBmbG9hdCBkZXB0aF8xLCBoaWdocCB2ZWMyIGNhbWVyYVByb2pfMSkKewogICAgaGlnaHAgZmxvYXQgbGluZWFyRGVwdGggPSBjYW1lcmFQcm9qXzEueSAvIChjYW1lcmFQcm9qXzEueCAtIGRlcHRoXzEpOwogICAgcmV0dXJuIHZpZXdSYXlfMSAqIGxpbmVhckRlcHRoOwp9CgpoaWdocCBmbG9hdCByYW5kKGhpZ2hwIHZlYzIgY28pCnsKICAgIHJldHVybiBmcmFjdChzaW4oZG90KGNvLCB2ZWMyKDEyLjk4OTgwMDQ1MzE4NjAzNTE1NjI1LCA3OC4yMzMwMDE3MDg5ODQzNzUpKSkgKiA0Mzc1OC41NDY4NzUpOwp9CgpoaWdocCB2ZWMyIGdldFByb2plY3RlZENvb3JkKGhpZ2hwIHZlYzMgaGl0KQp7CiAgICBoaWdocCB2ZWM0IHByb2plY3RlZENvb3JkID0gUCAqIHZlYzQoaGl0LCAxLjApOwogICAgaGlnaHAgdmVjMiBfOTggPSBwcm9qZWN0ZWRDb29yZC54eSAvIHZlYzIocHJvamVjdGVkQ29vcmQudyk7CiAgICBwcm9qZWN0ZWRDb29yZCA9IHZlYzQoXzk4LngsIF85OC55LCBwcm9qZWN0ZWRDb29yZC56LCBwcm9qZWN0ZWRDb29yZC53KTsKICAgIGhpZ2hwIHZlYzIgXzEwNiA9IChwcm9qZWN0ZWRDb29yZC54eSAqIDAuNSkgKyB2ZWMyKDAuNSk7CiAgICBwcm9qZWN0ZWRDb29yZCA9IHZlYzQoXzEwNi54LCBfMTA2LnksIHByb2plY3RlZENvb3JkLnosIHByb2plY3RlZENvb3JkLncpOwogICAgcmV0dXJuIHByb2plY3RlZENvb3JkLnh5Owp9CgpoaWdocCBmbG9hdCBnZXREZWx0YURlcHRoKGhpZ2hwIHZlYzMgaGl0KQp7CiAgICBkZXB0aCA9ICh0ZXh0dXJlTG9kKGdidWZmZXJELCBnZXRQcm9qZWN0ZWRDb29yZChoaXQpLCAwLjApLnggKiAyLjApIC0gMS4wOwogICAgaGlnaHAgdmVjMyB2aWV3UG9zID0gZ2V0UG9zVmlldyh2aWV3UmF5LCBkZXB0aCwgY2FtZXJhUHJvaik7CiAgICByZXR1cm4gdmlld1Bvcy56IC0gaGl0Lno7Cn0KCmhpZ2hwIHZlYzQgYmluYXJ5U2VhcmNoKGlub3V0IGhpZ2hwIHZlYzMgZGlyKQp7CiAgICBoaWdocCB2ZWMzIHN0YXJ0ID0gaGl0Q29vcmQ7CiAgICBoaWdocCBmbG9hdCBkZGVwdGg7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IDc7IGkrKykKICAgIHsKICAgICAgICBkaXIgKj0gMC41OwogICAgICAgIGhpdENvb3JkIC09IGRpcjsKICAgICAgICBoaWdocCB2ZWMzIF8xNjQgPSBoaXRDb29yZDsKICAgICAgICBoaWdocCBmbG9hdCBfMTY1ID0gZ2V0RGVsdGFEZXB0aChfMTY0KTsKICAgICAgICBkZGVwdGggPSBfMTY1OwogICAgICAgIGlmIChkZGVwdGggPCAwLjApCiAgICAgICAgewogICAgICAgICAgICBoaXRDb29yZCArPSBkaXI7CiAgICAgICAgfQogICAgfQogICAgaWYgKGFicyhkZGVwdGgpID4gMC4wMDk5OTk5OTk3NzY0ODI1ODIwOTIyODUxNTYyNSkKICAgIHsKICAgICAgICByZXR1cm4gdmVjNCgwLjApOwogICAgfQogICAgcmV0dXJuIHZlYzQoZ2V0UHJvamVjdGVkQ29vcmQoaGl0Q29vcmQpLCAwLjAsIDEuMCk7Cn0KCmhpZ2hwIHZlYzQgcmF5Q2FzdChpbm91dCBoaWdocCB2ZWMzIGRpcikKewogICAgZGlyICo9IDAuMDM5OTk5OTk5MTA1OTMwMzI4MzY5MTQwNjI1OwogICAgZm9yIChpbnQgaSA9IDA7IGkgPCAxODsgaSsrKQogICAgewogICAgICAgIGhpdENvb3JkICs9IGRpcjsKICAgICAgICBoaWdocCB2ZWMzIF8yMDYgPSBoaXRDb29yZDsKICAgICAgICBoaWdocCBmbG9hdCBfMjA3ID0gZ2V0RGVsdGFEZXB0aChfMjA2KTsKICAgICAgICBpZiAoXzIwNyA%IDAuMCkKICAgICAgICB7CiAgICAgICAgICAgIGhpZ2hwIHZlYzMgcGFyYW0gPSBkaXI7CiAgICAgICAgICAgIGhpZ2hwIHZlYzQgXzIxMyA9IGJpbmFyeVNlYXJjaChwYXJhbSk7CiAgICAgICAgICAgIHJldHVybiBfMjEzOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB2ZWM0KDAuMCk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIHZlYzQgZzAgPSB0ZXh0dXJlTG9kKGdidWZmZXIwLCB0ZXhDb29yZCwgMC4wKTsKICAgIGhpZ2hwIGZsb2F0IHJvdWdobmVzcyA9IGcwLno7CiAgICBpZiAocm91Z2huZXNzID09IDEuMCkKICAgIHsKICAgICAgICBmcmFnQ29sb3IgPSB2ZWM0KHZlYzMoMC4wKS54LCB2ZWMzKDAuMCkueSwgdmVjMygwLjApLnosIGZyYWdDb2xvci53KTsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBoaWdocCBmbG9hdCBzcGVjID0gZnJhY3QodGV4dHVyZUxvZChnYnVmZmVyMSwgdGV4Q29vcmQsIDAuMCkudyk7CiAgICBpZiAoc3BlYyA9PSAwLjApCiAgICB7CiAgICAgICAgZnJhZ0NvbG9yID0gdmVjNCh2ZWMzKDAuMCkueCwgdmVjMygwLjApLnksIHZlYzMoMC4wKS56LCBmcmFnQ29sb3Iudyk7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgaGlnaHAgZmxvYXQgZCA9ICh0ZXh0dXJlTG9kKGdidWZmZXJELCB0ZXhDb29yZCwgMC4wKS54ICogMi4wKSAtIDEuMDsKICAgIGlmIChkID09IDEuMCkKICAgIHsKICAgICAgICBmcmFnQ29sb3IgPSB2ZWM0KHZlYzMoMC4wKS54LCB2ZWMzKDAuMCkueSwgdmVjMygwLjApLnosIGZyYWdDb2xvci53KTsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBoaWdocCB2ZWMyIGVuYyA9IGcwLnh5OwogICAgaGlnaHAgdmVjMyBuOwogICAgbi56ID0gKDEuMCAtIGFicyhlbmMueCkpIC0gYWJzKGVuYy55KTsKICAgIGhpZ2hwIHZlYzIgXzI4NDsKICAgIGlmIChuLnogPj0gMC4wKQogICAgewogICAgICAgIF8yODQgPSBlbmM7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzI4NCA9IG9jdGFoZWRyb25XcmFwKGVuYyk7CiAgICB9CiAgICBuID0gdmVjMyhfMjg0LngsIF8yODQueSwgbi56KTsKICAgIG4gPSBub3JtYWxpemUobik7CiAgICBoaWdocCB2ZWMzIHZpZXdOb3JtYWwgPSBWMyAqIG47CiAgICBoaWdocCB2ZWMzIHZpZXdQb3MgPSBnZXRQb3NWaWV3KHZpZXdSYXksIGQsIGNhbWVyYVByb2opOwogICAgaGlnaHAgdmVjMyByZWZsZWN0ZWQgPSBub3JtYWxpemUocmVmbGVjdCh2aWV3UG9zLCB2aWV3Tm9ybWFsKSk7CiAgICBoaXRDb29yZCA9IHZpZXdQb3M7CiAgICBoaWdocCB2ZWMzIGRpciA9IChyZWZsZWN0ZWQgKiAoMS4wIC0gKChyYW5kKHRleENvb3JkKSAqIDAuNjAwMDAwMDIzODQxODU3OTEwMTU2MjUpICogcm91Z2huZXNzKSkpICogMi4wOwogICAgaGlnaHAgdmVjMyBwYXJhbSA9IGRpcjsKICAgIGhpZ2hwIHZlYzQgXzMyOCA9IHJheUNhc3QocGFyYW0pOwogICAgaGlnaHAgdmVjNCBjb29yZHMgPSBfMzI4OwogICAgaGlnaHAgdmVjMiBkZWx0YUNvb3JkcyA9IGFicyh2ZWMyKDAuNSkgLSBjb29yZHMueHkpOwogICAgaGlnaHAgZmxvYXQgc2NyZWVuRWRnZUZhY3RvciA9IGNsYW1wKDEuMCAtIChkZWx0YUNvb3Jkcy54ICsgZGVsdGFDb29yZHMueSksIDAuMCwgMS4wKTsKICAgIGhpZ2hwIGZsb2F0IHJlZmxlY3Rpdml0eSA9IDEuMCAtIHJvdWdobmVzczsKICAgIGhpZ2hwIGZsb2F0IGludGVuc2l0eSA9ICgoKHBvdyhyZWZsZWN0aXZpdHksIDUuMCkgKiBzY3JlZW5FZGdlRmFjdG9yKSAqIGNsYW1wKC1yZWZsZWN0ZWQueiwgMC4wLCAxLjApKSAqIGNsYW1wKCg1LjAgLSBsZW5ndGgodmlld1BvcyAtIGhpdENvb3JkKSkgKiAwLjIwMDAwMDAwMjk4MDIzMjIzODc2OTUzMTI1LCAwLjAsIDEuMCkpICogY29vcmRzLnc7CiAgICBpbnRlbnNpdHkgPSBjbGFtcChpbnRlbnNpdHksIDAuMCwgMS4wKTsKICAgIGhpZ2hwIHZlYzMgcmVmbENvbCA9IHRleHR1cmVMb2QodGV4LCBjb29yZHMueHksIDAuMCkueHl6OwogICAgcmVmbENvbCA9IGNsYW1wKHJlZmxDb2wsIHZlYzMoMC4wKSwgdmVjMygxLjApKTsKICAgIGhpZ2hwIHZlYzMgXzM4NSA9IChyZWZsQ29sICogaW50ZW5zaXR5KSAqIDAuNTsKICAgIGZyYWdDb2xvciA9IHZlYzQoXzM4NS54LCBfMzg1LnksIF8zODUueiwgZnJhZ0NvbG9yLncpOwp9Cgo";
kha_Shaders.world_pass_fragData0 = "s364:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCB2ZWMzIGJhY2tncm91bmRDb2w7CgpvdXQgaGlnaHAgdmVjNCBmcmFnQ29sb3I7CmluIGhpZ2hwIHZlYzMgbm9ybWFsOwoKdm9pZCBtYWluKCkKewogICAgZnJhZ0NvbG9yID0gdmVjNChiYWNrZ3JvdW5kQ29sLngsIGJhY2tncm91bmRDb2wueSwgYmFja2dyb3VuZENvbC56LCBmcmFnQ29sb3Iudyk7CiAgICBmcmFnQ29sb3IudyA9IDAuMDsKfQoK";
kha_Shaders.world_pass_vertData0 = "s258:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgU01WUDsKCm91dCB2ZWMzIG5vcm1hbDsKaW4gdmVjMyBub3I7CmluIHZlYzMgcG9zOwoKdm9pZCBtYWluKCkKewogICAgbm9ybWFsID0gbm9yOwogICAgdmVjNCBwb3NpdGlvbiA9IFNNVlAgKiB2ZWM0KHBvcywgMS4wKTsKICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbik7Cn0KCg";
kha_System.renderListeners = [];
kha_System.foregroundListeners = [];
kha_System.resumeListeners = [];
kha_System.pauseListeners = [];
kha_System.backgroundListeners = [];
kha_System.shutdownListeners = [];
kha_System.dropFilesListeners = [];
kha_SystemImpl.mobile = false;
kha_SystemImpl.ios = false;
kha_SystemImpl.mobileAudioPlaying = false;
kha_SystemImpl.chrome = false;
kha_SystemImpl.firefox = false;
kha_SystemImpl.ie = false;
kha_SystemImpl.insideInputEvent = false;
kha_SystemImpl.maxGamepads = 4;
kha_SystemImpl.minimumScroll = 999;
kha_SystemImpl.lastFirstTouchX = 0;
kha_SystemImpl.lastFirstTouchY = 0;
kha_SystemImpl.iosSoundEnabled = false;
kha_SystemImpl.soundEnabled = false;
kha_SystemImpl.iosTouchs = [];
kha_WebGLImage.GL_RGBA16F = 34842;
kha_WebGLImage.GL_RGBA32F = 34836;
kha_WebGLImage.GL_R16F = 33325;
kha_WebGLImage.GL_R32F = 33326;
kha_WebGLImage.GL_RED = 6403;
kha_WebGLImage.GL_DEPTH_COMPONENT24 = 33190;
kha_WebGLImage.GL_DEPTH24_STENCIL8 = 35056;
kha_WebGLImage.GL_DEPTH32F_STENCIL8 = 36013;
kha_Window.windows = [];
kha__$WindowOptions_WindowFeatures_$Impl_$.None = 0;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureResizable = 1;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureMinimizable = 2;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureMaximizable = 4;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureBorderless = 8;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureOnTop = 16;
kha_audio2_Audio.disableGcInteractions = false;
kha_audio2_Audio.intBox = new kha_internal_IntBox(0);
kha_audio2_Audio.virtualChannels = [];
kha_audio2_Audio1.channelCount = 32;
kha_audio2_Audio1.lastAllocationCount = 0;
kha_audio2_ogg_tools_Crc32.POLY = 79764919;
kha_audio2_ogg_vorbis_VorbisDecodeState.INVALID_BITS = -1;
kha_audio2_ogg_vorbis_VorbisTools.EOP = -1;
kha_audio2_ogg_vorbis_VorbisTools.M__PI = 3.14159265358979323846264;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_NUMER = 32;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_DENOM = 64;
kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE = [1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0];
kha_audio2_ogg_vorbis_data_Codebook.NO_CODE = 255;
kha_audio2_ogg_vorbis_data_Codebook.delay = 0;
kha_audio2_ogg_vorbis_data_Header.PACKET_ID = 1;
kha_audio2_ogg_vorbis_data_Header.PACKET_COMMENT = 3;
kha_audio2_ogg_vorbis_data_Header.PACKET_SETUP = 5;
kha_audio2_ogg_vorbis_data_PageFlag.CONTINUED_PACKET = 1;
kha_audio2_ogg_vorbis_data_PageFlag.FIRST_PAGE = 2;
kha_audio2_ogg_vorbis_data_PageFlag.LAST_PAGE = 4;
kha_audio2_ogg_vorbis_data_Setting.MAX_CHANNELS = 16;
kha_audio2_ogg_vorbis_data_Setting.PUSHDATA_CRC_COUNT = 4;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_LENGTH = 10;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_SIZE = 1024;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_MASK = 1023;
kha_graphics2_Graphics.fontGlyphs = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 32;
		while(_g1 < 256) {
			var i = _g1++;
			_g.push(i);
		}
	}
	$r = _g;
	return $r;
}(this));
kha_graphics2_truetype_StbTruetype.STBTT_vmove = 1;
kha_graphics2_truetype_StbTruetype.STBTT_vline = 2;
kha_graphics2_truetype_StbTruetype.STBTT_vcurve = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_DONTCARE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_BOLD = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_ITALIC = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_UNDERSCORE = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_NONE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_UNICODE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MAC = 1;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_ISO = 2;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MICROSOFT = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_0 = 0;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_1 = 1;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_ISO_10646 = 2;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SYMBOL = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_BMP = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SHIFTJIS = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_FULL = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ROMAN = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ARABIC = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_JAPANESE = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_HEBREW = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_CHINESE_TRAD = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_GREEK = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_KOREAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_RUSSIAN = 7;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ENGLISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ITALIAN = 1040;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_CHINESE = 2052;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_JAPANESE = 1041;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_DUTCH = 1043;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_KOREAN = 1042;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_FRENCH = 1036;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_RUSSIAN = 1049;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_GERMAN = 1031;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SPANISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_HEBREW = 1037;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SWEDISH = 1053;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ENGLISH = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_JAPANESE = 11;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ARABIC = 12;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_KOREAN = 23;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_DUTCH = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_RUSSIAN = 32;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_FRENCH = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SPANISH = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_GERMAN = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SWEDISH = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_HEBREW = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ITALIAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_TRAD = 19;
kha_graphics2_truetype_StbTruetype.STBTT_MAX_OVERSAMPLE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_RASTERIZER_VERSION = 2;
kha_graphics4_CubeMap.GL_RGBA16F = 34842;
kha_graphics4_CubeMap.GL_RGBA32F = 34836;
kha_graphics4_CubeMap.GL_R16F = 33325;
kha_graphics4_CubeMap.GL_R32F = 33326;
kha_graphics4_CubeMap.GL_DEPTH_COMPONENT24 = 33190;
kha_graphics4_CubeMap.GL_DEPTH24_STENCIL8 = 35056;
kha_graphics4_CubeMap.GL_DEPTH32F_STENCIL8 = 36013;
kha_graphics4_ImageShaderPainter.bufferSize = 1500;
kha_graphics4_ImageShaderPainter.vertexSize = 9;
kha_graphics4_ColoredShaderPainter.bufferSize = 1000;
kha_graphics4_ColoredShaderPainter.triangleBufferSize = 1000;
kha_graphics4_TextShaderPainter.bufferSize = 1000;
kha_input_Gamepad.__meta__ = { statics : { sendConnectEvent : { input : null}, sendDisconnectEvent : { input : null}}, fields : { sendAxisEvent : { input : null}, sendButtonEvent : { input : null}}};
kha_input_Gamepad.instances = [];
kha_input_Gamepad.connectListeners = [];
kha_input_Gamepad.disconnectListeners = [];
kha_input_Keyboard.__meta__ = { fields : { sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendPressEvent : { input : null}}};
kha_input_Keyboard.keyBehavior = kha_input_BlockInterventions.Default;
kha_input_Mouse.__meta__ = { fields : { sendLeaveEvent : { input : null}, sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendMoveEvent : { input : null}, sendWheelEvent : { input : null}}};
kha_input_Sensor.isInited = false;
kha_input_Sensor.accelerometer = new kha_input_Sensor();
kha_input_Sensor.gyroscope = new kha_input_Sensor();
kha_internal_BytesBlob.bufferSize = 2000;
kha_internal_HdrFormat.radiancePattern = new EReg("#\\?RADIANCE","i");
kha_internal_HdrFormat.commentPattern = new EReg("#.*","i");
kha_internal_HdrFormat.gammaPattern = new EReg("GAMMA=","i");
kha_internal_HdrFormat.exposurePattern = new EReg("EXPOSURE=\\s*([0-9]*[.][0-9]*)","i");
kha_internal_HdrFormat.formatPattern = new EReg("FORMAT=32-bit_rle_rgbe","i");
kha_internal_HdrFormat.widthHeightPattern = new EReg("-Y ([0-9]+) \\+X ([0-9]+)","i");
kha_js_Sound.loading = [];
kha_js_graphics4_Graphics.GL_TEXTURE_COMPARE_MODE = 34892;
kha_js_graphics4_Graphics.GL_TEXTURE_COMPARE_FUNC = 34893;
kha_js_graphics4_Graphics.GL_COMPARE_REF_TO_TEXTURE = 34894;
kha_math_Matrix3.width = 3;
kha_math_Matrix3.height = 3;
kha_math_Matrix4.width = 4;
kha_math_Matrix4.height = 4;
kha_math_Quaternion.AXIS_X = 0;
kha_math_Quaternion.AXIS_Y = 1;
kha_math_Quaternion.AXIS_Z = 2;
kha_netsync_ControllerBuilder.nextId = 0;
kha_netsync_Session.START = 0;
kha_netsync_Session.ENTITY_UPDATES = 1;
kha_netsync_Session.CONTROLLER_UPDATES = 2;
kha_netsync_Session.REMOTE_CALL = 3;
kha_netsync_Session.PING = 4;
kha_netsync_Session.SESSION_ERROR = 5;
kha_netsync_Session.PLAYER_UPDATES = 6;
kha_netsync_Session.RPC_SERVER = 0;
kha_netsync_Session.RPC_ALL = 1;
kha_netsync_SyncBuilder.nextId = 0;
kha_netsync_SyncBuilder.objects = [];
zui_Handle.global = new zui_Handle();
zui_Canvas.assetMap = new haxe_ds_IntMap();
zui_Canvas.themes = [];
zui_Canvas.events = [];
zui_Canvas.screenW = -1;
zui_Canvas.screenH = -1;
zui_Canvas.locale = "en";
zui_Canvas.h = new zui_Handle();
zui_Canvas.elemId = -1;
zui_Canvas.assetId = -1;
zui_Ext.dataPath = "";
zui_Ext.lastPath = "";
zui_Ext.kx = 1.0;
zui_Ext.ky = 0.66666666666666663;
zui_Ext.kz = 0.33333333333333331;
zui_Ext.kw = 3.0;
zui_Ext.ar = [0.0,0.0,0.0];
zui_Ext.Kx = 0.0;
zui_Ext.Ky = -0.33333333333333331;
zui_Ext.Kz = 0.66666666666666663;
zui_Ext.Kw = -1.0;
zui_Ext.e = 1.0e-10;
zui_Popup.show = false;
zui_Popup.hwnd = new zui_Handle();
zui_Popup.boxTitle = "";
zui_Popup.boxText = "";
zui_Popup.modalX = 0;
zui_Popup.modalY = 0;
zui_Popup.modalW = 400;
zui_Popup.modalH = 160;
zui_Themes.dark = { NAME : "Default Dark", FONT_SIZE : 13, ELEMENT_W : 100, ELEMENT_H : 24, ELEMENT_OFFSET : 4, ARROW_SIZE : 5, BUTTON_H : 22, CHECK_SIZE : 15, CHECK_SELECT_SIZE : 8, SCROLL_W : 6, TEXT_OFFSET : 8, TAB_W : 6, FILL_WINDOW_BG : false, FILL_BUTTON_BG : true, FILL_ACCENT_BG : false, WINDOW_BG_COL : -13421773, WINDOW_TINT_COL : -1, ACCENT_COL : -12303292, ACCENT_HOVER_COL : -11974327, ACCENT_SELECT_COL : -10461088, BUTTON_COL : -12171706, BUTTON_TEXT_COL : -1513499, BUTTON_HOVER_COL : -11974327, BUTTON_PRESSED_COL : -15000805, TEXT_COL : -1513499, LABEL_COL : -3618616, SEPARATOR_COL : -14211289, HIGHLIGHT_COL : -14656100, CONTEXT_COL : -14540254, PANEL_BG_COL : -12895429};
zui_Themes.light = { NAME : "Default Light", FONT_SIZE : 26, ELEMENT_W : 200, ELEMENT_H : 48, ELEMENT_OFFSET : 8, ARROW_SIZE : 10, BUTTON_H : 44, CHECK_SIZE : 30, CHECK_SELECT_SIZE : 16, SCROLL_W : 12, TEXT_OFFSET : 16, TAB_W : 24, FILL_WINDOW_BG : false, FILL_BUTTON_BG : true, FILL_ACCENT_BG : false, WINDOW_BG_COL : -1052689, WINDOW_TINT_COL : -14540254, ACCENT_COL : -1118482, ACCENT_HOVER_COL : -4473925, ACCENT_SELECT_COL : -5592406, BUTTON_COL : -3355444, BUTTON_TEXT_COL : -14540254, BUTTON_HOVER_COL : -5000269, BUTTON_PRESSED_COL : -5131855, TEXT_COL : -6710887, LABEL_COL : -5592406, SEPARATOR_COL : -6710887, HIGHLIGHT_COL : -14656100, CONTEXT_COL : -5592406, PANEL_BG_COL : -5592406};
zui_Zui.alwaysRedrawWindow = true;
zui_Zui.keyRepeat = true;
zui_Zui.touchControls = false;
zui_Zui.keyRepeatTime = 0.0;
zui_Zui.textToPaste = "";
zui_Zui.textToCopy = "";
zui_Zui.isCut = false;
zui_Zui.isCopy = false;
zui_Zui.isPaste = false;
zui_Zui.copyFrame = 0;
zui_Zui.comboFirst = true;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
